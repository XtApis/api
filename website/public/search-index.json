[
  {
    "id": "architecture",
    "title": "Architecture",
    "description": "How Docusaurus works to build your app",
    "content": "Architecture `mdx-code-block import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import Zoom from 'react-medium-image-zoom'; ` <Zoom> !Architecture overview </Zoom> This diagram shows how Docusaurus works to build your app. Plugins each collect their content and emit JSON data; themes provide layout components which receive the JSON data as route modules. The bundler bundles all the components and emits a server bundle and a client bundle. Although you (either plugin authors or site creators) are writing JavaScript all the time, bear in mind that the JS is actually run in different environments: All plugin lifecycle methods are run in Node. Therefore, until we support ES Modules in our codebase, plugin source code must be provided as ES modules that can be imported, or CommonJS that can be require'd. The theme code is built with Webpack. They can be provided as ESM—following React conventions. Plugin code and theme code never directly import each other: they only communicate through protocols (in our case, through JSON temp files and calls to addRoute). A useful mental model is to imagine that the plugins are not written in JavaScript, but in another language like Rust. The only way to interact with plugins for the user is through docusaurus.config.js, which itself is run in Node (hence you can use require and pass callbacks as plugin options). During bundling, the config file itself is serialized and bundled, allowing the theme to access config options like themeConfig or baseUrl through useDocusaurusContext(). However, the siteConfig object only contains serializable values (values that are preserved after JSON.stringify()). Functions, regexes, etc. would be lost on the client side. The themeConfig is designed to be entirely serializable.",
    "keywords": [
      "architecture",
      "how",
      "docusaurus",
      "works",
      "to",
      "build",
      "your",
      "app",
      "advanced",
      "mdx",
      "Tabs",
      "TabItem",
      "Zoom",
      "Architecture",
      "code",
      "block",
      "import",
      "from",
      "theme",
      "react",
      "medium",
      "image",
      "zoom",
      "overview",
      "This",
      "diagram",
      "shows",
      "Docusaurus",
      "Plugins",
      "each",
      "collect",
      "their",
      "content",
      "and",
      "emit",
      "JSON",
      "data",
      "themes",
      "provide",
      "layout",
      "components",
      "which",
      "receive",
      "the",
      "route",
      "modules",
      "The",
      "bundler",
      "bundles",
      "all",
      "emits",
      "server",
      "bundle",
      "client",
      "Although",
      "you",
      "either",
      "plugin",
      "authors",
      "site",
      "creators",
      "are",
      "writing",
      "JavaScript",
      "time",
      "bear",
      "mind",
      "that",
      "actually",
      "run",
      "different",
      "environments",
      "All",
      "lifecycle",
      "methods",
      "Node",
      "Therefore",
      "until",
      "support",
      "Modules",
      "our",
      "codebase",
      "source",
      "must",
      "provided",
      "can",
      "imported",
      "CommonJS",
      "require",
      "built",
      "with",
      "Webpack",
      "They",
      "ESM",
      "following",
      "React",
      "conventions",
      "Plugin",
      "never",
      "directly",
      "other",
      "they",
      "only",
      "communicate",
      "through",
      "protocols",
      "case",
      "temp",
      "files",
      "calls",
      "addRoute",
      "useful",
      "mental",
      "model",
      "imagine",
      "plugins",
      "not",
      "written",
      "but",
      "another",
      "language",
      "like",
      "Rust",
      "way",
      "interact",
      "for",
      "user",
      "config",
      "itself",
      "hence",
      "use",
      "pass",
      "callbacks",
      "options",
      "During",
      "bundling",
      "file",
      "serialized",
      "bundled",
      "allowing",
      "access",
      "themeConfig",
      "baseUrl",
      "useDocusaurusContext",
      "However",
      "siteConfig",
      "object",
      "contains",
      "serializable",
      "values",
      "preserved",
      "after",
      "stringify",
      "Functions",
      "regexes",
      "etc",
      "would",
      "lost",
      "side",
      "designed",
      "entirely"
    ],
    "url": "/docs/advanced/architecture",
    "path": "advanced/architecture.mdx",
    "type": "general",
    "category": "advanced"
  },
  {
    "id": "client",
    "title": "Client architecture",
    "description": "How the Docusaurus client is structured",
    "content": "Client architecture Theme aliases {#theme-aliases} A theme works by exporting a set of components, e.g. Navbar, Layout, Footer, to render the data passed down from plugins. Docusaurus and users use these components by importing them using the @theme webpack alias: `js import Navbar from '@theme/Navbar'; ` The alias @theme can refer to a few directories, in the following priority: A user's website/src/theme directory, which is a special directory that has the higher precedence. A Docusaurus theme package's theme directory. Fallback components provided by Docusaurus core (usually not needed). This is called a _layered architecture_: a higher-priority layer providing the component would shadow a lower-priority layer, making swizzling possible. Given the following structure: ` website ├── node_modules │ └── @docusaurus/theme-classic │ └── theme │ └── Navbar.js └── src └── theme └── Navbar.js ` website/src/theme/Navbar.js takes precedence whenever @theme/Navbar is imported. This behavior is called component swizzling. If you are familiar with Objective C where a function's implementation can be swapped during runtime, it's the exact same concept here with changing the target @theme/Navbar is pointing to! We already talked about how the \"userland theme\" in src/theme can re-use a theme component through the @theme-original alias. One theme package can also wrap a component from another theme, by importing the component from the initial theme, using the @theme-init import. Here's an example of using this feature to enhance the default theme CodeBlock component with a react-live playground feature. `js import InitialCodeBlock from '@theme-init/CodeBlock'; import React from 'react'; export default function CodeBlock(props) { return props.live ? ( <ReactLivePlayground {...props} /> ) : ( <InitialCodeBlock {...props} /> ); } ` Check the code of @docusaurus/theme-live-codeblock for details. :::warning Unless you want to publish a re-usable \"theme enhancer\" (like @docusaurus/theme-live-codeblock), you likely don't need @theme-init. ::: It can be quite hard to wrap your mind around these aliases. Let's imagine the following case with a super convoluted setup with three themes/plugins and the site itself all trying to define the same component. Internally, Docusaurus loads these themes as a \"stack\". `text +-------------------------------------------------+ | website/src/theme/CodeBlock.js | <-- @theme/CodeBlock always points to the top +-------------------------------------------------+ | theme-live-codeblock/theme/CodeBlock/index.js | <-- @theme-original/CodeBlock points to the topmost non-swizzled component +-------------------------------------------------+ | plugin-awesome-codeblock/theme/CodeBlock.js | +-------------------------------------------------+ | theme-classic/theme/CodeBlock/index.js | <-- @theme-init/CodeBlock always points to the bottom +-------------------------------------------------+ ` The components in this \"stack\" are pushed in the order of preset plugins > preset themes > plugins > themes > site, so the swizzled component in website/src/theme always comes out on top because it's loaded last. @theme/* always points to the topmost component—when CodeBlock is swizzled, all other components requesting @theme/CodeBlock receive the swizzled version. @theme-original/* always points to the topmost non-swizzled component. That's why you can import @theme-original/CodeBlock in the swizzled component—it points to the next one in the \"component stack\", a theme-provided one. Plugin authors should not try to use this because your component could be the topmost component and cause a self-import. @theme-init/* always points to the bottommost component—usually, this comes from the theme or plugin that first provides this component. Individual plugins / themes trying to enhance code block can safely use @theme-init/CodeBlock to get its basic version. Site creators should generally not use this because you likely want to enhance the _topmost_ instead of the _bottommost_ component. It's also possible that the @theme-init/CodeBlock alias does not exist at all—Docusaurus only creates it when it points to a different one from @theme-original/CodeBlock, i.e. when it's provided by more than one theme. We don't waste aliases! Client modules {#client-modules} Client modules are part of your site's bundle, just like theme components. However, they are usually side-effect-ful. Client modules are anything that can be imported by Webpack—CSS, JS, etc. JS scripts usually work on the global context, like registering event listeners, creating global variables... These modules are imported globally before React even renders the initial UI. `js title=\"@docusaurus/core/App.tsx\" // How it works under the hood import '@generated/client-modules'; ` Plugins and sites can both declare client modules, through getClientModules and siteConfig.clientModules, respectively. Client modules are called during server-side rendering as well, so remember to check the execution environment before accessing client-side globals. `js title=\"mySiteGlobalJs.js\" import ExecutionEnvironment from '@docusaurus/ExecutionEnvironment'; if (ExecutionEnvironment.canUseDOM) { // As soon as the site loads in the browser, register a global event listener window.addEventListener('keydown', (e) => { if (e.code === 'Period') { location.assign(location.href.replace('.com', '.dev')); } }); } ` CSS stylesheets imported as client modules are global. `css title=\"mySiteGlobalCss.css\" / This stylesheet is global. / .globalSelector { color: red; } ` Client module lifecycles {#client-module-lifecycles} Besides introducing side-effects, client modules can optionally export two lifecycle functions: onRouteUpdate and onRouteDidUpdate. Because Docusaurus builds a single-page application, script tags will only be executed the first time the page loads, but will not re-execute on page transitions. These lifecycles are useful if you have some imperative JS logic that should execute every time a new page has loaded, e.g., to manipulate DOM elements, to send analytics data, etc. For every route transition, there will be several important timings: The user clicks a link, which causes the router to change its current location. Docusaurus preloads the next route's assets, while keeping displaying the current page's content. The next route's assets have loaded. The new location's route component gets rendered to DOM. onRouteUpdate will be called at event (2), and onRouteDidUpdate will be called at (4). They both receive the current location and the previous location (which can be null, if this is the first screen). onRouteUpdate can optionally return a \"cleanup\" callback, which will be called at (3). For example, if you want to display a progress bar, you can start a timeout in onRouteUpdate, and clear the timeout in the callback. (The classic theme already provides an nprogress integration this way.) Note that the new page's DOM is only available during event (4). If you need to manipulate the new page's DOM, you'll likely want to use onRouteDidUpdate, which will be fired as soon as the DOM on the new page has mounted. `js title=\"myClientModule.js\" export function onRouteDidUpdate({location, previousLocation}) { // Don't execute if we are still on the same page; the lifecycle may be fired // because the hash changes (e.g. when navigating between headings) if (location.pathname !== previousLocation?.pathname) { const title = document.getElementsByTagName('h1')[0]; if (title) { title.innerText += '❤️'; } } } export function onRouteUpdate({location, previousLocation}) { if (location.pathname !== previousLocation?.pathname) { const progressBarTimeout = window.setTimeout(() => { nprogress.start(); }, delay); return () => window.clearTimeout(progressBarTimeout); } return undefined; } ` Or, if you are using TypeScript and you want to leverage contextual typing: `ts title=\"myClientModule.ts\" import type {ClientModule} from '@docusaurus/types'; const module: ClientModule = { onRouteUpdate({location, previousLocation}) { // ... }, onRouteDidUpdate({location, previousLocation}) { // ... }, }; export default module; ` Both lifecycles will fire on first render, but they will not fire on server-side, so you can safely access browser globals in them. :::tip Prefer using React Client module lifecycles are purely imperative, and you can't use React hooks or access React contexts within them. If your operations are state-driven or involve complicated DOM manipulations, you should consider swizzling components instead. :::",
    "keywords": [
      "client",
      "architecture",
      "how",
      "the",
      "docusaurus",
      "is",
      "structured",
      "advanced",
      "mdx",
      "Navbar",
      "src",
      "theme",
      "theme-classic",
      "CodeBlock",
      "theme-live-codeblock",
      "plugins",
      "index",
      "core",
      "App",
      "client-modules",
      "ExecutionEnvironment",
      "types",
      "Client",
      "Theme",
      "aliases",
      "works",
      "exporting",
      "set",
      "components",
      "Layout",
      "Footer",
      "render",
      "data",
      "passed",
      "down",
      "from",
      "Docusaurus",
      "and",
      "users",
      "use",
      "these",
      "importing",
      "them",
      "using",
      "webpack",
      "alias",
      "import",
      "The",
      "can",
      "refer",
      "few",
      "directories",
      "following",
      "priority",
      "user",
      "website",
      "directory",
      "which",
      "special",
      "that",
      "has",
      "higher",
      "precedence",
      "package",
      "Fallback",
      "provided",
      "usually",
      "not",
      "needed",
      "This",
      "called",
      "_layered",
      "architecture_",
      "layer",
      "providing",
      "component",
      "would",
      "shadow",
      "lower",
      "making",
      "swizzling",
      "possible",
      "Given",
      "structure",
      "node_modules",
      "classic",
      "takes",
      "whenever",
      "imported",
      "behavior",
      "you",
      "are",
      "familiar",
      "with",
      "Objective",
      "where",
      "function",
      "implementation",
      "swapped",
      "during",
      "runtime",
      "exact",
      "same",
      "concept",
      "here",
      "changing",
      "target",
      "pointing",
      "already",
      "talked",
      "about",
      "userland",
      "through",
      "original",
      "One",
      "also",
      "wrap",
      "another",
      "initial",
      "init",
      "Here",
      "example",
      "this",
      "feature",
      "enhance",
      "default",
      "react",
      "live",
      "playground",
      "InitialCodeBlock",
      "React",
      "export",
      "props",
      "return",
      "ReactLivePlayground",
      "Check",
      "code",
      "codeblock",
      "for",
      "details",
      "warning",
      "Unless",
      "want",
      "publish",
      "usable",
      "enhancer",
      "like",
      "likely",
      "don",
      "need",
      "quite",
      "hard",
      "your",
      "mind",
      "around",
      "Let",
      "imagine",
      "case",
      "super",
      "convoluted",
      "setup",
      "three",
      "themes",
      "site",
      "itself",
      "all",
      "trying",
      "define",
      "Internally",
      "loads",
      "stack",
      "text",
      "always",
      "points",
      "top",
      "topmost",
      "non",
      "swizzled",
      "plugin",
      "awesome",
      "bottom",
      "pushed",
      "order",
      "preset",
      "comes",
      "out",
      "because",
      "loaded",
      "last",
      "when",
      "other",
      "requesting",
      "receive",
      "version",
      "That",
      "why",
      "next",
      "one",
      "Plugin",
      "authors",
      "should",
      "try",
      "could",
      "cause",
      "self",
      "bottommost",
      "first",
      "provides",
      "Individual",
      "block",
      "safely",
      "get",
      "its",
      "basic",
      "Site",
      "creators",
      "generally",
      "_topmost_",
      "instead",
      "_bottommost_",
      "does",
      "exist",
      "only",
      "creates",
      "different",
      "more",
      "than",
      "waste",
      "modules",
      "part",
      "bundle",
      "just",
      "However",
      "they",
      "side",
      "effect",
      "ful",
      "anything",
      "Webpack",
      "CSS",
      "etc",
      "scripts",
      "work",
      "global",
      "context",
      "registering",
      "event",
      "listeners",
      "creating",
      "variables",
      "These",
      "globally",
      "before",
      "even",
      "renders",
      "title",
      "tsx",
      "How",
      "under",
      "hood",
      "generated",
      "Plugins",
      "sites",
      "both",
      "declare",
      "getClientModules",
      "siteConfig",
      "clientModules",
      "respectively",
      "server",
      "rendering",
      "well",
      "remember",
      "check",
      "execution",
      "environment",
      "accessing",
      "globals",
      "mySiteGlobalJs",
      "canUseDOM",
      "soon",
      "browser",
      "register",
      "listener",
      "window",
      "addEventListener",
      "keydown",
      "Period",
      "location",
      "assign",
      "href",
      "replace",
      "com",
      "dev",
      "stylesheets",
      "css",
      "mySiteGlobalCss",
      "stylesheet",
      "globalSelector",
      "color",
      "red",
      "module",
      "lifecycles",
      "Besides",
      "introducing",
      "effects",
      "optionally",
      "two",
      "lifecycle",
      "functions",
      "onRouteUpdate",
      "onRouteDidUpdate",
      "Because",
      "builds",
      "single",
      "page",
      "application",
      "script",
      "tags",
      "will",
      "executed",
      "time",
      "but",
      "execute",
      "transitions",
      "useful",
      "have",
      "some",
      "imperative",
      "logic",
      "every",
      "new",
      "manipulate",
      "DOM",
      "elements",
      "send",
      "analytics",
      "For",
      "route",
      "transition",
      "there",
      "several",
      "important",
      "timings",
      "clicks",
      "link",
      "causes",
      "router",
      "change",
      "current",
      "preloads",
      "assets",
      "while",
      "keeping",
      "displaying",
      "content",
      "gets",
      "rendered",
      "They",
      "previous",
      "null",
      "screen",
      "cleanup",
      "callback",
      "display",
      "progress",
      "bar",
      "start",
      "timeout",
      "clear",
      "nprogress",
      "integration",
      "way",
      "Note",
      "available",
      "fired",
      "mounted",
      "myClientModule",
      "previousLocation",
      "Don",
      "still",
      "may",
      "hash",
      "changes",
      "navigating",
      "between",
      "headings",
      "pathname",
      "const",
      "document",
      "getElementsByTagName",
      "innerText",
      "progressBarTimeout",
      "setTimeout",
      "delay",
      "clearTimeout",
      "undefined",
      "TypeScript",
      "leverage",
      "contextual",
      "typing",
      "type",
      "ClientModule",
      "Both",
      "fire",
      "access",
      "tip",
      "Prefer",
      "purely",
      "hooks",
      "contexts",
      "within",
      "operations",
      "state",
      "driven",
      "involve",
      "complicated",
      "manipulations",
      "consider"
    ],
    "url": "/docs/advanced/client",
    "path": "advanced/client.mdx",
    "type": "general",
    "category": "advanced"
  },
  {
    "id": "index",
    "title": "Advanced Tutorials",
    "description": "",
    "content": "Advanced Tutorials This section is not going to be very structured, but we will cover the following topics: `mdx-code-block import DocCardList from '@theme/DocCardList'; <DocCardList /> ` We will assume that you have finished the guides, and know the basics like how to configure plugins, how to write React components, etc. These sections will have plugin authors and code contributors in mind, so we may occasionally refer to plugin APIs or other architecture details. Don't panic if you don't understand everything😉",
    "keywords": [
      "advanced",
      "tutorials",
      "index",
      "mdx",
      "DocCardList",
      "Advanced",
      "Tutorials",
      "This",
      "section",
      "not",
      "going",
      "very",
      "structured",
      "but",
      "will",
      "cover",
      "the",
      "following",
      "topics",
      "code",
      "block",
      "import",
      "from",
      "theme",
      "assume",
      "that",
      "you",
      "have",
      "finished",
      "guides",
      "and",
      "know",
      "basics",
      "like",
      "how",
      "configure",
      "plugins",
      "write",
      "React",
      "components",
      "etc",
      "These",
      "sections",
      "plugin",
      "authors",
      "contributors",
      "mind",
      "may",
      "occasionally",
      "refer",
      "APIs",
      "other",
      "architecture",
      "details",
      "Don",
      "panic",
      "don",
      "understand",
      "everything"
    ],
    "url": "/docs/advanced/index",
    "path": "advanced/index.mdx",
    "type": "general",
    "category": "advanced"
  },
  {
    "id": "plugins",
    "title": "Plugins",
    "description": "",
    "content": "Plugins Plugins are the building blocks of features in a Docusaurus site. Each plugin handles its own individual feature. Plugins may work and be distributed as part of a bundle via presets. Creating plugins {#creating-plugins} A plugin is a function that takes two parameters: context and options. It returns a plugin instance object (or a promise). You can create plugins as functions or modules. For more information, refer to the plugin method references section. Function definition {#function-definition} You can use a plugin as a function directly included in the Docusaurus config file: `js title=\"docusaurus.config.js\" export default { // ... plugins: [ // highlight-start async function myPlugin(context, options) { // ... return { name: 'my-plugin', async loadContent() { // ... }, async contentLoaded({content, actions}) { // ... }, / other lifecycle API / }; }, // highlight-end ], }; ` Module definition {#module-definition} You can use a plugin as a module path referencing a separate file or npm package: `js title=\"docusaurus.config.js\" export default { // ... plugins: [ // without options: './my-plugin', // or with options: ['./my-plugin', options], ], }; ` Then in the folder my-plugin, you can create an index.js such as this: `js title=\"my-plugin/index.js\" export default async function myPlugin(context, options) { // ... return { name: 'my-plugin', async loadContent() { / ... / }, async contentLoaded({content, actions}) { / ... / }, / other lifecycle API / }; } ` --- You can view all plugins installed in your site using the debug plugin's metadata panel. Plugins come as several types: package: an external package you installed project: a plugin you created in your project, given to Docusaurus as a local file path local: a plugin created using the function definition synthetic: a \"fake plugin\" Docusaurus created internally, so we take advantage of our modular architecture and don't let the core do much special work. You won't see this in the metadata because it's an implementation detail. You can access them on the client side with useDocusaurusContext().siteMetadata.pluginVersions. Plugin design {#plugin-design} Docusaurus' implementation of the plugins system provides us with a convenient way to hook into the website's lifecycle to modify what goes on during development/build, which involves (but is not limited to) extending the webpack config, modifying the data loaded, and creating new components to be used in a page. Theme design {#theme-design} When plugins have loaded their content, the data is made available to the client side through actions like createData + addRoute or setGlobalData. This data has to be _serialized_ to plain strings, because plugins and themes run in different environments. Once the data arrives on the client side, the rest becomes familiar to React developers: data is passed along components, components are bundled with Webpack, and rendered to the window through ReactDOM.render... Themes provide the set of UI components to render the content. Most content plugins need to be paired with a theme in order to be actually useful. The UI is a separate layer from the data schema, which makes swapping designs easy. For example, a Docusaurus blog may consist of a blog plugin and a blog theme. :::note This is a contrived example: in practice, @docusaurus/theme-classic provides the theme for docs, blog, and layouts. ::: `js title=\"docusaurus.config.js\" export default { // highlight-next-line themes: ['theme-blog'], plugins: ['plugin-content-blog'], }; ` And if you want to use Bootstrap styling, you can swap out the theme with theme-blog-bootstrap (another fictitious non-existing theme): `js title=\"docusaurus.config.js\" export default { // highlight-next-line themes: ['theme-blog-bootstrap'], plugins: ['plugin-content-blog'], }; ` Now, although the theme receives the same data from the plugin, how the theme chooses to _render_ the data as UI can be drastically different. While themes share the exact same lifecycle methods with plugins, themes' implementations can look very different from those of plugins based on themes' designed objectives. Themes are designed to complete the build of your Docusaurus site and supply the components used by your site, plugins, and the themes themselves. A theme still acts like a plugin and exposes some lifecycle methods, but most likely they would not use loadContent, since they only receive data from plugins, but don't generate data themselves; themes are typically also accompanied by an src/theme directory full of components, which are made known to the core through the getThemePath lifecycle. To summarize: Themes share the same lifecycle methods with Plugins Themes are run after all existing Plugins Themes add component aliases by providing getThemePath.",
    "keywords": [
      "plugins",
      "advanced",
      "mdx",
      "my-plugin",
      "index",
      "build",
      "theme-classic",
      "theme",
      "Plugins",
      "are",
      "the",
      "building",
      "blocks",
      "features",
      "Docusaurus",
      "site",
      "Each",
      "plugin",
      "handles",
      "its",
      "own",
      "individual",
      "feature",
      "may",
      "work",
      "and",
      "distributed",
      "part",
      "bundle",
      "via",
      "presets",
      "Creating",
      "creating",
      "function",
      "that",
      "takes",
      "two",
      "parameters",
      "context",
      "options",
      "returns",
      "instance",
      "object",
      "promise",
      "You",
      "can",
      "create",
      "functions",
      "modules",
      "For",
      "more",
      "information",
      "refer",
      "method",
      "references",
      "section",
      "Function",
      "definition",
      "use",
      "directly",
      "included",
      "config",
      "file",
      "title",
      "docusaurus",
      "export",
      "default",
      "highlight",
      "start",
      "async",
      "myPlugin",
      "return",
      "name",
      "loadContent",
      "contentLoaded",
      "content",
      "actions",
      "other",
      "lifecycle",
      "API",
      "end",
      "Module",
      "module",
      "path",
      "referencing",
      "separate",
      "npm",
      "package",
      "without",
      "with",
      "Then",
      "folder",
      "you",
      "such",
      "this",
      "view",
      "all",
      "installed",
      "your",
      "using",
      "debug",
      "metadata",
      "panel",
      "come",
      "several",
      "types",
      "external",
      "project",
      "created",
      "given",
      "local",
      "synthetic",
      "fake",
      "internally",
      "take",
      "advantage",
      "our",
      "modular",
      "architecture",
      "don",
      "let",
      "core",
      "much",
      "special",
      "won",
      "see",
      "because",
      "implementation",
      "detail",
      "access",
      "them",
      "client",
      "side",
      "useDocusaurusContext",
      "siteMetadata",
      "pluginVersions",
      "Plugin",
      "design",
      "system",
      "provides",
      "convenient",
      "way",
      "hook",
      "into",
      "website",
      "modify",
      "what",
      "goes",
      "during",
      "development",
      "which",
      "involves",
      "but",
      "not",
      "limited",
      "extending",
      "webpack",
      "modifying",
      "data",
      "loaded",
      "new",
      "components",
      "used",
      "page",
      "Theme",
      "When",
      "have",
      "their",
      "made",
      "available",
      "through",
      "like",
      "createData",
      "addRoute",
      "setGlobalData",
      "This",
      "has",
      "_serialized_",
      "plain",
      "strings",
      "themes",
      "run",
      "different",
      "environments",
      "Once",
      "arrives",
      "rest",
      "becomes",
      "familiar",
      "React",
      "developers",
      "passed",
      "along",
      "bundled",
      "Webpack",
      "rendered",
      "window",
      "ReactDOM",
      "render",
      "Themes",
      "provide",
      "set",
      "Most",
      "need",
      "paired",
      "order",
      "actually",
      "useful",
      "The",
      "layer",
      "from",
      "schema",
      "makes",
      "swapping",
      "designs",
      "easy",
      "example",
      "blog",
      "consist",
      "note",
      "contrived",
      "practice",
      "classic",
      "for",
      "docs",
      "layouts",
      "next",
      "line",
      "And",
      "want",
      "Bootstrap",
      "styling",
      "swap",
      "out",
      "bootstrap",
      "another",
      "fictitious",
      "non",
      "existing",
      "Now",
      "although",
      "receives",
      "same",
      "how",
      "chooses",
      "_render_",
      "drastically",
      "While",
      "share",
      "exact",
      "methods",
      "implementations",
      "look",
      "very",
      "those",
      "based",
      "designed",
      "objectives",
      "complete",
      "supply",
      "themselves",
      "still",
      "acts",
      "exposes",
      "some",
      "most",
      "likely",
      "they",
      "would",
      "since",
      "only",
      "receive",
      "generate",
      "typically",
      "also",
      "accompanied",
      "src",
      "directory",
      "full",
      "known",
      "getThemePath",
      "summarize",
      "after",
      "add",
      "component",
      "aliases",
      "providing"
    ],
    "url": "/docs/advanced/plugins",
    "path": "advanced/plugins.mdx",
    "type": "general",
    "category": "advanced"
  },
  {
    "id": "routing",
    "title": "Routing",
    "description": "Docusaurus' routing system follows single-page application conventions: one route, one component.",
    "content": "Routing `mdx-code-block import Link from '@docusaurus/Link'; import {useLatestVersion, useActiveDocContext} from '@docusaurus/plugin-content-docs/client'; import {useLocation} from '@docusaurus/router'; import BrowserWindow from '@site/src/components/BrowserWindow'; ` Docusaurus' routing system follows single-page application conventions: one route, one component. In this section, we will begin by talking about routing within the three content plugins (docs, blog, and pages), and then go beyond to talk about the underlying routing system. Routing in content plugins {#routing-in-content-plugins} Every content plugin provides a routeBasePath option. It defines where the plugins append their routes to. By default, the docs plugin puts its routes under /docs; the blog plugin, /blog; and the pages plugin, /. You can think about the route structure like this: `mermaid graph LR; A([\"https://example.com/\"]) B([\"/base-url/\"]) C([\"/docs/\"]) D([\"/blog/\"]) E([\"/\"]) F[\"All docs <br/>routes\"] G[\"All blog <br/>routes\"] H[\"All pages <br/>routes\"] A---B; B---C; B---D; B---E; C---F; D---G; E---H; ` Any route will be matched against this nested route config until a good match is found. For example, when given a route /docs/configuration, Docusaurus first enters the /docs branch, and then searches among the subroutes created by the docs plugin. Changing routeBasePath can effectively alter your site's route structure. For example, in Docs-only mode, we mentioned that configuring routeBasePath: '/' for docs means that all routes that the docs plugin create would not have the /docs prefix, yet it doesn't prevent you from having more subroutes like /blog created by other plugins. Next, let's look at how the three plugins structure their own \"boxes of subroutes\". Pages routing {#pages-routing} Pages routing are straightforward: the file paths directly map to URLs, without any other way to customize. See the pages docs for more information. The component used for Markdown pages is @theme/MDXPage. React pages are directly used as the route's component. Blog routing {#blog-routing} The blog creates the following routes: Posts list pages: /, /page/2, /page/3... The route is customizable through the pageBasePath option. The component is @theme/BlogListPage. Post pages: /2021/11/21/algolia-docsearch-migration, /2021/05/12/announcing-docusaurus-two-beta... Generated from each Markdown post. The routes are fully customizable through the slug front matter. The component is @theme/BlogPostPage. Tags list page: /tags The route is customizable through the tagsBasePath option. The component is @theme/BlogTagsListPage. Tag pages: /tags/adoption, /tags/beta... Generated through the tags defined in each post's front matter. The routes always have base defined in tagsBasePath, but the subroutes are customizable through the tag's permalink field. The component is @theme/BlogTagsPostsPage. Archive page: /archive The route is customizable through the archiveBasePath option. The component is @theme/BlogArchivePage. Docs routing {#docs-routing} The docs is the only plugin that creates nested routes. At the top, it registers version paths: /, /next, /2.0.0-beta.13... which provide the version context, including the layout and sidebar. This ensures that when switching between individual docs, the sidebar's state is preserved, and that you can switch between versions through the navbar dropdown while staying on the same doc. The component used is @theme/DocPage. `mdx-code-block export const URLPath = () => <code>{useLocation().pathname}</code>; export const FilePath = () => { const currentVersion = useActiveDocContext('default').activeVersion.name; return <code>{currentVersion === 'current' ? './docs/' : ./versioned_docs/version-${currentVersion}/}advanced/routing.md</code>; } ` The individual docs are rendered in the remaining space after the navbar, footer, sidebar, etc. have all been provided by the DocPage component. For example, this page, <URLPath />, is generated from the file at <FilePath />. The component used is @theme/DocItem. The doc's slug front matter customizes the last part of the route, but the base route is always defined by the plugin's routeBasePath and the version's path. File paths and URL paths {#file-paths-and-url-paths} Throughout the documentation, we always try to be unambiguous about whether we are talking about file paths or URL paths. Content plugins usually map file paths directly to URL paths, for example, ./docs/advanced/routing.md will become /docs/advanced/routing. However, with slug, you can make URLs totally decoupled from the file structure. When writing links in Markdown, you could either mean a _file path_, or a _URL path_, which Docusaurus would use several heuristics to determine. If the path has a @site prefix, it is _always_ an asset file path. If the path has an http(s):// prefix, it is _always_ a URL path. If the path doesn't have an extension, it is a URL path. For example, a link page on a page with URL /docs/advanced/routing will link to /docs/plugins. Docusaurus will only detect broken links when building your site (when it knows the full route structure), but will make no assumptions about the existence of a file. It is exactly equivalent to writing <a href=\"../plugins\">page</a> in a JSX file. If the path has an .md(x) extension, Docusaurus would try to resolve that Markdown file to a URL, and replace the file path with a URL path. If the path has any other extension, Docusaurus would treat it as an asset and bundle it. The following directory structure may help you visualize this file → URL mapping. Assume that there's no slug customization in any page. <details> <summary>A sample site structure</summary> `bash . ├── blog blog plugin has routeBasePath: '/blog' │ ├── 2019-05-28-first-blog-post.md -> /blog/2019/05/28/first-blog-post │ ├── 2019-05-29-long-blog-post.md -> /blog/2019/05/29/long-blog-post │ ├── 2021-08-01-mdx-blog-post.mdx -> /blog/2021/08/01/mdx-blog-post │ └── 2021-08-26-welcome │ ├── docusaurus-plushie-banner.jpeg │ └── index.md -> /blog/2021/08/26/welcome ├── docs docs plugin has routeBasePath: '/docs'; current version has base path '/' │ ├── intro.md -> /docs/intro │ ├── tutorial-basics │ │ ├── _category_.json │ │ ├── congratulations.md -> /docs/tutorial-basics/congratulations │ │ └── markdown-features.mdx -> /docs/tutorial-basics/markdown-features │ └── tutorial-extras │ ├── _category_.json │ ├── manage-docs-versions.md -> /docs/tutorial-extras/manage-docs-versions │ └── translate-your-site.md -> /docs/tutorial-extras/translate-your-site ├── src │ └── pages pages plugin has routeBasePath: '/' │ ├── index.module.css │ ├── index.tsx -> / │ └── markdown-page.md -> /markdown-page └── versioned_docs └── version-1.0.0 version has base path '/1.0.0' ├── intro.md -> /docs/1.0.0/intro ├── tutorial-basics │ ├── _category_.json │ ├── congratulations.md -> /docs/1.0.0/tutorial-basics/congratulations │ └── markdown-features.mdx -> /docs/1.0.0/tutorial-basics/markdown-features └── tutorial-extras ├── _category_.json ├── manage-docs-versions.md -> /docs/1.0.0/tutorial-extras/manage-docs-versions └── translate-your-site.md -> /docs/1.0.0/tutorial-extras/translate-your-site ` </details> So much about content plugins. Let's take one step back and talk about how routing works in a Docusaurus app in general. Routes become HTML files {#routes-become-html-files} Because Docusaurus is a server-side rendering framework, all routes generated will be server-side rendered into static HTML files. If you are familiar with the behavior of HTTP servers like Apache2, you will understand how this is done: when the browser sends a request to the route /docs/advanced/routing, the server interprets that as request for the HTML file /docs/advanced/routing/index.html, and returns that. The /docs/advanced/routing route can correspond to either /docs/advanced/routing/index.html or /docs/advanced/routing.html. Some hosting providers differentiate between them using the presence of a trailing slash, and may or may not tolerate the other. Read more in the trailing slash guide. For example, the build output of the directory above is (ignoring other assets and JS bundle): <details> <summary>Output of the above workspace</summary> `bash build ├── 404.html /404/ ├── blog │ ├── archive │ │ └── index.html /blog/archive/ │ ├── first-blog-post │ │ └── index.html /blog/first-blog-post/ │ ├── index.html /blog/ │ ├── long-blog-post │ │ └── index.html /blog/long-blog-post/ │ ├── mdx-blog-post │ │ └── index.html /blog/mdx-blog-post/ │ ├── tags │ │ ├── docusaurus │ │ │ └── index.html /blog/tags/docusaurus/ │ │ ├── hola │ │ │ └── index.html /blog/tags/hola/ │ │ └── index.html /blog/tags/ │ └── welcome │ └── index.html /blog/welcome/ ├── docs │ ├── 1.0.0 │ │ ├── intro │ │ │ └── index.html /docs/1.0.0/intro/ │ │ ├── tutorial-basics │ │ │ ├── congratulations │ │ │ │ └── index.html /docs/1.0.0/tutorial-basics/congratulations/ │ │ │ └── markdown-features │ │ │ └── index.html /docs/1.0.0/tutorial-basics/markdown-features/ │ │ └── tutorial-extras │ │ ├── manage-docs-versions │ │ │ └── index.html /docs/1.0.0/tutorial-extras/manage-docs-versions/ │ │ └── translate-your-site │ │ └── index.html /docs/1.0.0/tutorial-extras/translate-your-site/ │ ├── intro │ │ └── index.html /docs/1.0.0/intro/ │ ├── tutorial-basics │ │ ├── congratulations │ │ │ └── index.html /docs/tutorial-basics/congratulations/ │ │ └── markdown-features │ │ └── index.html /docs/tutorial-basics/markdown-features/ │ └── tutorial-extras │ ├── manage-docs-versions │ │ └── index.html /docs/tutorial-extras/manage-docs-versions/ │ └── translate-your-site │ └── index.html /docs/tutorial-extras/translate-your-site/ ├── index.html / └── markdown-page └── index.html /markdown-page/ ` </details> If trailingSlash is set to false, the build would emit intro.html instead of intro/index.html. All HTML files will reference its JS assets using absolute URLs, so in order for the correct assets to be located, you have to configure the baseUrl field. Note that baseUrl doesn't affect the emitted bundle's file structure: the base URL is one level above the Docusaurus routing system. You can see the aggregate of url and baseUrl as the actual location of your Docusaurus site. For example, the emitted HTML would contain links like <link rel=\"preload\" href=\"/assets/js/runtime~main.7ed5108a.js\" as=\"script\">. Because absolute URLs are resolved from the host, if the bundle placed under the path https://example.com/base/, the link will point to https://example.com/assets/js/runtime~main.7ed5108a.js, which is, well, non-existent. By specifying /base/ as base URL, the link will correctly point to /base/assets/js/runtime~main.7ed5108a.js. Localized sites have the locale as part of the base URL as well. For example, https://docusaurus.io/zh-CN/docs/advanced/routing/ has base URL /zh-CN/. Generating and accessing routes {#generating-and-accessing-routes} The addRoute lifecycle action is used to generate routes. It registers a piece of route config to the route tree, giving a route, a component, and props that the component needs. The props and the component are both provided as paths for the bundler to require, because as explained in the architecture overview, server and client only communicate through temp files. All routes are aggregated in .docusaurus/routes.js, which you can view with the debug plugin's routes panel. On the client side, we offer @docusaurus/router to access the page's route. @docusaurus/router is a re-export of the react-router-dom package. For example, you can use useLocation to get the current page's location, and useHistory to access the history object. (They are not the same as the browser API, although similar in functionality. Refer to the React Router documentation for specific APIs.) This API is SSR safe, as opposed to the browser-only window.location. `jsx title=\"myComponent.js\" import React from 'react'; import {useLocation} from '@docusaurus/router'; export function PageRoute() { // React router provides the current component's route, even in SSR const location = useLocation(); return ( <span> We are currently on <code>{location.pathname}</code> </span> ); } ` `mdx-code-block export function PageRoute() { const location = useLocation(); return ( <span> We are currently on <code>{location.pathname}</code> </span> ); } <BrowserWindow> <PageRoute /> </BrowserWindow> ` Escaping from SPA redirects {#escaping-from-spa-redirects} Docusaurus builds a single-page application, where route transitions are done through the history.push() method of React router. This operation is done on the client side. However, the prerequisite for a route transition to happen this way is that the target URL is known to our router. Otherwise, the router catches this path and displays a 404 page instead. If you put some HTML pages under the static folder, they will be copied to the build output and therefore become accessible as part of your website, yet it's not part of the Docusaurus route system. We provide a pathname:// protocol that allows you to redirect to another part of your domain in a non-SPA fashion, as if this route is an external link. `md pathname:///pure-html ` <BrowserWindow> pathname:///pure-html </BrowserWindow> The pathname:// protocol is useful for referencing any content in the static folder. For example, Docusaurus would convert all Markdown static assets to require() calls. You can use pathname:// to keep it a regular link instead of being hashed by Webpack. `md title=\"my-doc.md\" !An image from the static An asset from the static ` Docusaurus will only strip the pathname:// prefix without processing the content.",
    "keywords": [
      "routing",
      "docusaurus'",
      "system",
      "follows",
      "single-page",
      "application",
      "conventions:",
      "one",
      "route,",
      "component.",
      "advanced",
      "mdx",
      "Link",
      "plugin-content-docs",
      "client",
      "router",
      "src",
      "components",
      "BrowserWindow",
      "docs",
      "blog",
      "example",
      "base-url",
      "configuration",
      "MDXPage",
      "page",
      "BlogListPage",
      "2021",
      "11",
      "21",
      "algolia-docsearch-migration",
      "05",
      "12",
      "announcing-docusaurus-two-beta",
      "BlogPostPage",
      "tags",
      "BlogTagsListPage",
      "adoption",
      "beta",
      "BlogTagsPostsPage",
      "archive",
      "BlogArchivePage",
      "next",
      "DocPage",
      "code",
      "versioned_docs",
      "version-",
      "DocItem",
      "plugins",
      "summary",
      "2019",
      "28",
      "first-blog-post",
      "29",
      "long-blog-post",
      "08",
      "01",
      "mdx-blog-post",
      "26",
      "welcome",
      "intro",
      "tutorial-basics",
      "congratulations",
      "markdown-features",
      "tutorial-extras",
      "manage-docs-versions",
      "translate-your-site",
      "markdown-page",
      "details",
      "index",
      "404",
      "docusaurus",
      "hola",
      "assets",
      "js",
      "runtime",
      "base",
      "zh-CN",
      "routes",
      "span",
      "pure-html",
      "Routing",
      "block",
      "import",
      "from",
      "useLatestVersion",
      "useActiveDocContext",
      "plugin",
      "content",
      "useLocation",
      "site",
      "Docusaurus",
      "single",
      "conventions",
      "route",
      "component",
      "this",
      "section",
      "will",
      "begin",
      "talking",
      "about",
      "within",
      "the",
      "three",
      "and",
      "pages",
      "then",
      "beyond",
      "talk",
      "underlying",
      "Every",
      "provides",
      "routeBasePath",
      "option",
      "defines",
      "where",
      "append",
      "their",
      "default",
      "puts",
      "its",
      "under",
      "You",
      "can",
      "think",
      "structure",
      "like",
      "mermaid",
      "graph",
      "https",
      "com",
      "url",
      "All",
      "Any",
      "matched",
      "against",
      "nested",
      "config",
      "until",
      "good",
      "match",
      "found",
      "For",
      "when",
      "given",
      "first",
      "enters",
      "branch",
      "searches",
      "among",
      "subroutes",
      "created",
      "Changing",
      "effectively",
      "alter",
      "your",
      "Docs",
      "only",
      "mode",
      "mentioned",
      "that",
      "configuring",
      "for",
      "means",
      "all",
      "create",
      "would",
      "not",
      "have",
      "prefix",
      "yet",
      "doesn",
      "prevent",
      "you",
      "having",
      "more",
      "other",
      "Next",
      "let",
      "look",
      "how",
      "own",
      "boxes",
      "Pages",
      "are",
      "straightforward",
      "file",
      "paths",
      "directly",
      "map",
      "URLs",
      "without",
      "any",
      "way",
      "customize",
      "See",
      "information",
      "The",
      "used",
      "Markdown",
      "theme",
      "React",
      "Blog",
      "creates",
      "following",
      "Posts",
      "list",
      "customizable",
      "through",
      "pageBasePath",
      "Post",
      "algolia",
      "docsearch",
      "migration",
      "announcing",
      "two",
      "Generated",
      "each",
      "post",
      "fully",
      "slug",
      "front",
      "matter",
      "Tags",
      "tagsBasePath",
      "Tag",
      "defined",
      "always",
      "but",
      "tag",
      "permalink",
      "field",
      "Archive",
      "archiveBasePath",
      "top",
      "registers",
      "version",
      "which",
      "provide",
      "context",
      "including",
      "layout",
      "sidebar",
      "This",
      "ensures",
      "switching",
      "between",
      "individual",
      "state",
      "preserved",
      "switch",
      "versions",
      "navbar",
      "dropdown",
      "while",
      "staying",
      "same",
      "doc",
      "export",
      "const",
      "URLPath",
      "pathname",
      "FilePath",
      "currentVersion",
      "activeVersion",
      "name",
      "return",
      "current",
      "rendered",
      "remaining",
      "space",
      "after",
      "footer",
      "etc",
      "been",
      "provided",
      "generated",
      "customizes",
      "last",
      "part",
      "path",
      "File",
      "URL",
      "Throughout",
      "documentation",
      "try",
      "unambiguous",
      "whether",
      "Content",
      "usually",
      "become",
      "However",
      "with",
      "make",
      "totally",
      "decoupled",
      "When",
      "writing",
      "links",
      "could",
      "either",
      "mean",
      "_file",
      "path_",
      "_URL",
      "use",
      "several",
      "heuristics",
      "determine",
      "has",
      "_always_",
      "asset",
      "http",
      "extension",
      "link",
      "detect",
      "broken",
      "building",
      "knows",
      "full",
      "assumptions",
      "existence",
      "exactly",
      "equivalent",
      "href",
      "JSX",
      "resolve",
      "replace",
      "treat",
      "bundle",
      "directory",
      "may",
      "help",
      "visualize",
      "mapping",
      "Assume",
      "there",
      "customization",
      "sample",
      "bash",
      "long",
      "plushie",
      "banner",
      "jpeg",
      "tutorial",
      "basics",
      "_category_",
      "json",
      "markdown",
      "features",
      "extras",
      "manage",
      "translate",
      "module",
      "css",
      "tsx",
      "much",
      "Let",
      "take",
      "step",
      "back",
      "works",
      "app",
      "general",
      "Routes",
      "HTML",
      "files",
      "html",
      "Because",
      "server",
      "side",
      "rendering",
      "framework",
      "into",
      "static",
      "familiar",
      "behavior",
      "HTTP",
      "servers",
      "Apache2",
      "understand",
      "done",
      "browser",
      "sends",
      "request",
      "interprets",
      "returns",
      "correspond",
      "Some",
      "hosting",
      "providers",
      "differentiate",
      "them",
      "using",
      "presence",
      "trailing",
      "slash",
      "tolerate",
      "Read",
      "guide",
      "build",
      "output",
      "above",
      "ignoring",
      "Output",
      "workspace",
      "trailingSlash",
      "set",
      "false",
      "emit",
      "instead",
      "reference",
      "absolute",
      "order",
      "correct",
      "located",
      "configure",
      "baseUrl",
      "Note",
      "affect",
      "emitted",
      "level",
      "see",
      "aggregate",
      "actual",
      "location",
      "contain",
      "rel",
      "preload",
      "main",
      "script",
      "resolved",
      "host",
      "placed",
      "point",
      "well",
      "non",
      "existent",
      "specifying",
      "correctly",
      "Localized",
      "sites",
      "locale",
      "Generating",
      "accessing",
      "generating",
      "addRoute",
      "lifecycle",
      "action",
      "generate",
      "piece",
      "tree",
      "giving",
      "props",
      "needs",
      "both",
      "bundler",
      "require",
      "because",
      "explained",
      "architecture",
      "overview",
      "communicate",
      "temp",
      "aggregated",
      "view",
      "debug",
      "panel",
      "offer",
      "access",
      "react",
      "dom",
      "package",
      "get",
      "useHistory",
      "history",
      "object",
      "They",
      "API",
      "although",
      "similar",
      "functionality",
      "Refer",
      "Router",
      "specific",
      "APIs",
      "SSR",
      "safe",
      "opposed",
      "window",
      "jsx",
      "title",
      "myComponent",
      "function",
      "PageRoute",
      "even",
      "currently",
      "Escaping",
      "SPA",
      "redirects",
      "escaping",
      "spa",
      "builds",
      "transitions",
      "push",
      "method",
      "operation",
      "prerequisite",
      "transition",
      "happen",
      "target",
      "known",
      "our",
      "Otherwise",
      "catches",
      "displays",
      "put",
      "some",
      "folder",
      "they",
      "copied",
      "therefore",
      "accessible",
      "website",
      "protocol",
      "allows",
      "redirect",
      "another",
      "domain",
      "fashion",
      "external",
      "pure",
      "useful",
      "referencing",
      "convert",
      "calls",
      "keep",
      "regular",
      "being",
      "hashed",
      "Webpack",
      "image",
      "strip",
      "processing"
    ],
    "url": "/docs/advanced/routing",
    "path": "advanced/routing.mdx",
    "type": "general",
    "category": "advanced"
  },
  {
    "id": "ssg",
    "title": "Static site generation (SSG)",
    "description": "Docusaurus statically renders your React code into HTML, allowing faster load speed and better SEO.",
    "content": "Static site generation (SSG) In architecture, we mentioned that the theme is run in Webpack. But beware: that doesn't mean it always has access to browser globals! The theme is built twice: During server-side rendering, the theme is compiled in a sandbox called React DOM Server. You can see this as a \"headless browser\", where there is no window or document, only React. SSR produces static HTML pages. During client-side rendering, the theme is compiled to JavaScript that gets eventually executed in the browser, so it has access to browser variables. :::info SSR or SSG? _Server-side rendering_ and _static site generation_ can be different concepts, but we use them interchangeably. Strictly speaking, Docusaurus is a static site generator, because there's no server-side runtime—we statically render to HTML files that are deployed on a CDN, instead of dynamically pre-rendering on each request. This differs from the working model of Next.js. ::: Therefore, while you probably know not to access Node globals like process (or can we?) or the 'fs' module, you can't freely access browser globals either. `jsx import React from 'react'; export default function WhereAmI() { return <span>{window.location.href}</span>; } ` This looks like idiomatic React, but if you run docusaurus build, you will get an error: ` ReferenceError: window is not defined ` This is because during server-side rendering, the Docusaurus app isn't actually run in browser, and it doesn't know what window is. `mdx-code-block <details id=\"node-env\"> <summary>What about <code>process.env.NODE_ENV</code>?</summary> ` One exception to the \"no Node globals\" rule is process.env.NODE_ENV. In fact, you can use it in React, because Webpack injects this variable as a global: `jsx import React from 'react'; export default function expensiveComp() { if (process.env.NODE_ENV === 'development') { return <>This component is not shown in development</>; } const res = someExpensiveOperationThatLastsALongTime(); return <>{res}</>; } ` During Webpack build, the process.env.NODE_ENV will be replaced with the value, either 'development' or 'production'. You will then get different build results after dead code elimination: import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; `mdx-code-block <Tabs> <TabItem value=\"Development\"> ` `diff import React from 'react'; export default function expensiveComp() { // highlight-next-line if ('development' === 'development') { return <>This component is not shown in development</>; } const res = someExpensiveOperationThatLastsALongTime(); return <>{res}</>; } ` `mdx-code-block </TabItem> <TabItem value=\"Production\"> ` `diff import React from 'react'; export default function expensiveComp() { // highlight-next-line if ('production' === 'development') { return <>This component is not shown in development</>; } const res = someExpensiveOperationThatLastsALongTime(); return <>{res}</>; } ` `mdx-code-block </TabItem> </Tabs> </details> ` Understanding SSR {#understanding-ssr} React is not just a dynamic UI runtime—it's also a templating engine. Because Docusaurus sites mostly contain static contents, it should be able to work without any JavaScript (which React runs in), but only plain HTML/CSS. And that's what server-side rendering offers: statically rendering your React code into HTML, without any dynamic content. An HTML file has no concept of client state (it's purely markup), hence it shouldn't rely on browser APIs. These HTML files are the first to arrive at the user's browser screen when a URL is visited (see routing). Afterwards, the browser fetches and runs other JS code to provide the \"dynamic\" parts of your site—anything implemented with JavaScript. However, before that, the main content of your page is already visible, allowing faster loading. In CSR-only apps, all DOM elements are generated on client side with React, and the HTML file only ever contains one root element for React to mount DOM to; in SSR, React is already facing a fully built HTML page, and it only needs to correlate the DOM elements with the virtual DOM in its model. This step is called \"hydration\". After React has hydrated the static markup, the app starts to work as any normal React app. Note that Docusaurus is ultimately a single-page application, so static site generation is only an optimization (_progressive enhancement_, as it's called), but our functionality does not fully depend on those HTML files. This is contrary to site generators like Jekyll and Docusaurus v1, where all files are statically transformed to markup, and interactiveness is added through external JavaScript linked with <script> tags. If you inspect the build output, you will still see JS assets under build/assets/js, which are, really, the core of Docusaurus. Escape hatches {#escape-hatches} If you want to render any dynamic content on your screen that relies on the browser API to be functional at all, for example: Our live codeblock, which runs in the browser's JS runtime Our themed image that detects the user's color scheme to display different images The JSON viewer of our debug panel which uses the window global for styling You may need to escape from SSR since static HTML can't display anything useful without knowing the client state. :::warning It is important for the first client-side render to produce the exact same DOM structure as server-side rendering, otherwise, React will correlate virtual DOM with the wrong DOM elements. Therefore, the naïve attempt of if (typeof window !== 'undefined) {/ render something /} won't work appropriately as a browser vs. server detection, because the first client render would instantly render different markup from the server-generated one. You can read more about this pitfall in The Perils of Rehydration. ::: We provide several more reliable ways to escape SSR. <BrowserOnly> {#browseronly} If you need to render some component in browser only (for example, because the component relies on browser specifics to be functional at all), one common approach is to wrap your component with <BrowserOnly> to make sure it's invisible during SSR and only rendered in CSR. `jsx import BrowserOnly from '@docusaurus/BrowserOnly'; function MyComponent(props) { return ( // highlight-start <BrowserOnly fallback={<div>Loading...</div>}> {() => { const LibComponent = require('some-lib-that-accesses-window').LibComponent; return <LibComponent {...props} />; }} </BrowserOnly> // highlight-end ); } ` It's important to realize that the children of <BrowserOnly> is not a JSX element, but a function that _returns_ an element. This is a design decision. Consider this code: `jsx import BrowserOnly from '@docusaurus/BrowserOnly'; function MyComponent() { return ( <BrowserOnly> {/ highlight-start /} {/ DON'T DO THIS - doesn't actually work /} <span>page url = {window.location.href}</span> {/ highlight-end /} </BrowserOnly> ); } ` While you may expect that BrowserOnly hides away the children during server-side rendering, it actually can't. When the React renderer tries to render this JSX tree, it does see the {window.location.href} variable as a node of this tree and tries to render it, although it's actually not used! Using a function ensures that we only let the renderer see the browser-only component when it's needed. useIsBrowser {#useisbrowser} You can also use the useIsBrowser() hook to test if the component is currently in a browser environment. It returns false in SSR and true is CSR, after first client render. Use this hook if you only need to perform certain conditional operations on client-side, but not render an entirely different UI. `jsx import useIsBrowser from '@docusaurus/useIsBrowser'; function MyComponent() { const isBrowser = useIsBrowser(); const location = isBrowser ? window.location.href : 'fetching location...'; return <span>{location}</span>; } ` useEffect {#useeffect} Lastly, you can put your logic in useEffect() to delay its execution until after first CSR. This is most appropriate if you are only performing side-effects but don't _get_ data from the client state. `jsx function MyComponent() { useEffect(() => { // Only logged in the browser console; nothing is logged during server-side rendering console.log(\"I'm now in the browser\"); }, []); return <span>Some content...</span>; } ` ExecutionEnvironment {#executionenvironment} The ExecutionEnvironment namespace contains several values, and canUseDOM is an effective way to detect browser environment. Beware that it essentially checked typeof window !== 'undefined' under the hood, so you should not use it for rendering-related logic, but only imperative code, like reacting to user input by sending web requests, or dynamically importing libraries, where DOM isn't updated at all. `js title=\"a-client-module.js\" import ExecutionEnvironment from '@docusaurus/ExecutionEnvironment'; if (ExecutionEnvironment.canUseDOM) { document.title = \"I'm loaded!\"; } `",
    "keywords": [
      "static",
      "site",
      "generation",
      "(ssg)",
      "docusaurus",
      "statically",
      "renders",
      "your",
      "react",
      "code",
      "into",
      "html,",
      "allowing",
      "faster",
      "load",
      "speed",
      "and",
      "better",
      "seo.",
      "advanced",
      "ssg",
      "mdx",
      "span",
      "summary",
      "Tabs",
      "TabItem",
      "details",
      "CSS",
      "assets",
      "js",
      "BrowserOnly",
      "div",
      "useIsBrowser",
      "ExecutionEnvironment",
      "Static",
      "SSG",
      "architecture",
      "mentioned",
      "that",
      "the",
      "theme",
      "run",
      "Webpack",
      "But",
      "beware",
      "doesn",
      "mean",
      "always",
      "has",
      "access",
      "browser",
      "globals",
      "The",
      "built",
      "twice",
      "During",
      "server",
      "side",
      "rendering",
      "compiled",
      "sandbox",
      "called",
      "React",
      "DOM",
      "Server",
      "You",
      "can",
      "see",
      "this",
      "headless",
      "where",
      "there",
      "window",
      "document",
      "only",
      "SSR",
      "produces",
      "HTML",
      "pages",
      "client",
      "JavaScript",
      "gets",
      "eventually",
      "executed",
      "variables",
      "info",
      "_Server",
      "rendering_",
      "_static",
      "generation_",
      "different",
      "concepts",
      "but",
      "use",
      "them",
      "interchangeably",
      "Strictly",
      "speaking",
      "Docusaurus",
      "generator",
      "because",
      "runtime",
      "render",
      "files",
      "are",
      "deployed",
      "CDN",
      "instead",
      "dynamically",
      "pre",
      "each",
      "request",
      "This",
      "differs",
      "from",
      "working",
      "model",
      "Next",
      "Therefore",
      "while",
      "you",
      "probably",
      "know",
      "not",
      "Node",
      "like",
      "process",
      "module",
      "freely",
      "either",
      "jsx",
      "import",
      "export",
      "default",
      "function",
      "WhereAmI",
      "return",
      "location",
      "href",
      "looks",
      "idiomatic",
      "build",
      "will",
      "get",
      "error",
      "ReferenceError",
      "defined",
      "during",
      "app",
      "isn",
      "actually",
      "what",
      "block",
      "node",
      "env",
      "What",
      "about",
      "NODE_ENV",
      "One",
      "exception",
      "rule",
      "fact",
      "injects",
      "variable",
      "global",
      "expensiveComp",
      "development",
      "component",
      "shown",
      "const",
      "res",
      "replaced",
      "with",
      "value",
      "production",
      "then",
      "results",
      "after",
      "dead",
      "elimination",
      "Development",
      "diff",
      "highlight",
      "next",
      "line",
      "Production",
      "Understanding",
      "understanding",
      "ssr",
      "just",
      "dynamic",
      "also",
      "templating",
      "engine",
      "Because",
      "sites",
      "mostly",
      "contain",
      "contents",
      "should",
      "able",
      "work",
      "without",
      "any",
      "which",
      "runs",
      "plain",
      "And",
      "offers",
      "content",
      "file",
      "concept",
      "state",
      "purely",
      "markup",
      "hence",
      "shouldn",
      "rely",
      "APIs",
      "These",
      "first",
      "arrive",
      "user",
      "screen",
      "when",
      "URL",
      "visited",
      "routing",
      "Afterwards",
      "fetches",
      "other",
      "provide",
      "parts",
      "anything",
      "implemented",
      "However",
      "before",
      "main",
      "page",
      "already",
      "visible",
      "loading",
      "CSR",
      "apps",
      "all",
      "elements",
      "generated",
      "ever",
      "contains",
      "one",
      "root",
      "element",
      "for",
      "mount",
      "facing",
      "fully",
      "needs",
      "correlate",
      "virtual",
      "its",
      "step",
      "hydration",
      "After",
      "hydrated",
      "starts",
      "normal",
      "Note",
      "ultimately",
      "single",
      "application",
      "optimization",
      "_progressive",
      "enhancement_",
      "our",
      "functionality",
      "does",
      "depend",
      "those",
      "contrary",
      "generators",
      "Jekyll",
      "transformed",
      "interactiveness",
      "added",
      "through",
      "external",
      "linked",
      "script",
      "tags",
      "inspect",
      "output",
      "still",
      "under",
      "really",
      "core",
      "Escape",
      "hatches",
      "escape",
      "want",
      "relies",
      "API",
      "functional",
      "example",
      "Our",
      "live",
      "codeblock",
      "themed",
      "image",
      "detects",
      "color",
      "scheme",
      "display",
      "images",
      "JSON",
      "viewer",
      "debug",
      "panel",
      "uses",
      "styling",
      "may",
      "need",
      "since",
      "useful",
      "knowing",
      "warning",
      "important",
      "produce",
      "exact",
      "same",
      "structure",
      "otherwise",
      "wrong",
      "attempt",
      "typeof",
      "undefined",
      "something",
      "won",
      "appropriately",
      "detection",
      "would",
      "instantly",
      "read",
      "more",
      "pitfall",
      "Perils",
      "Rehydration",
      "several",
      "reliable",
      "ways",
      "browseronly",
      "some",
      "specifics",
      "common",
      "approach",
      "wrap",
      "make",
      "sure",
      "invisible",
      "rendered",
      "MyComponent",
      "props",
      "start",
      "fallback",
      "Loading",
      "LibComponent",
      "require",
      "lib",
      "accesses",
      "end",
      "realize",
      "children",
      "JSX",
      "_returns_",
      "design",
      "decision",
      "Consider",
      "DON",
      "THIS",
      "url",
      "While",
      "expect",
      "hides",
      "away",
      "When",
      "renderer",
      "tries",
      "tree",
      "although",
      "used",
      "Using",
      "ensures",
      "let",
      "needed",
      "useisbrowser",
      "hook",
      "test",
      "currently",
      "environment",
      "returns",
      "false",
      "true",
      "Use",
      "perform",
      "certain",
      "conditional",
      "operations",
      "entirely",
      "isBrowser",
      "fetching",
      "useEffect",
      "useeffect",
      "Lastly",
      "put",
      "logic",
      "delay",
      "execution",
      "until",
      "most",
      "appropriate",
      "performing",
      "effects",
      "don",
      "_get_",
      "data",
      "Only",
      "logged",
      "console",
      "nothing",
      "log",
      "now",
      "Some",
      "executionenvironment",
      "namespace",
      "values",
      "canUseDOM",
      "effective",
      "way",
      "detect",
      "Beware",
      "essentially",
      "checked",
      "hood",
      "related",
      "imperative",
      "reacting",
      "input",
      "sending",
      "web",
      "requests",
      "importing",
      "libraries",
      "updated",
      "title",
      "loaded"
    ],
    "url": "/docs/advanced/ssg",
    "path": "advanced/ssg.mdx",
    "type": "general",
    "category": "advanced"
  },
  {
    "id": "docusaurus.config.js",
    "title": "`docusaurus.config.js`",
    "description": "API reference for Docusaurus configuration file.",
    "content": "docusaurus.config.js import APITable from '@site/src/components/APITable'; :::info Refer to the Getting Started Configuration for examples. ::: Overview {#overview} docusaurus.config.js contains configurations for your site and is placed in the root directory of your site. :::note With a TypeScript Docusaurus codebase your config file may be called docusaurus.config.ts. The syntax is broadly identical to the js config file with the addition of types. You can see an example on the Docusaurus Website itself. ::: This file is run in Node.js and should export a site configuration object, or a function that creates it. The docusaurus.config.js file supports: ES Modules CommonJS TypeScript Examples: `js title=\"docusaurus.config.js\" export default { title: 'Docusaurus', url: 'https://docusaurus.io', // your site config ... }; ` `js title=\"docusaurus.config.js\" export default async function createConfigAsync() { return { title: 'Docusaurus', url: 'https://docusaurus.io', // your site config ... }; } ` :::tip Refer to Syntax to declare docusaurus.config.js for a more exhaustive list of examples and explanations. ::: Required fields {#required-fields} title {#title} Type: string Title for your website. Will be used in metadata and as browser tab title. `js title=\"docusaurus.config.js\" export default { title: 'Docusaurus', }; ` url {#url} Type: string URL for your website. This can also be considered the top-level hostname. For example, https://facebook.github.io is the URL of https://facebook.github.io/metro/, and https://docusaurus.io is the URL for https://docusaurus.io. This field is related to the baseUrl field. `js title=\"docusaurus.config.js\" export default { url: 'https://docusaurus.io', }; ` :::info Special case for i18n sites If your site uses multiple locales, it is possible to provide a distinct url for each locale thanks to the [siteConfig.i18n.localeConfigs[<locale>].url](#i18n) attribute. This makes it possible to deploy a localized Docusaurus site deploy a localized Docusaurus site over multiple domains. ::: baseUrl {#baseUrl} Type: string The base URL of your site is the path segment appearing just after the url, letting you eventually host your site under a subpath instead of at the root of the domain. For example, let's consider you want to host a site at https://facebook.github.io/metro/, then you must configure it accordingly: url should be 'https://facebook.github.io' baseUrl should be '/metro/' By default, a Docusaurus site is hosted at the root of the domain: `js title=\"docusaurus.config.js\" export default { baseUrl: '/', }; ` :::info Special case for i18n sites If your site uses multiple locales, then Docusaurus will automatically localize the baseUrl of your site based on smart heuristics: For the default locale, baseUrl will be /<siteBaseUrl>/ For other locales, baseUrl will be /<siteBaseUrl>/<locale>/ When building a single locale at a time (with docusaurus build --locale <locale>), baseUrl will be /<siteBaseUrl>/, assuming the intent is to deploy each locale on distinct domains. When the localized baseUrl Docusaurus computes doesn't satisfy you, it's always possible to override it by providing an explicit localized baseUrl thanks to the [siteConfig.i18n.localeConfigs[<locale>].baseUrl](#i18n) attribute. ::: Optional fields {#optional-fields} favicon {#favicon} Type: string | undefined Path to your site favicon; must be a URL that can be used in link's href. For example, if your favicon is in static/img/favicon.ico: `js title=\"docusaurus.config.js\" export default { favicon: '/img/favicon.ico', }; ` trailingSlash {#trailingSlash} Type: boolean | undefined Allow to customize the presence/absence of a trailing slash at the end of URLs/links, and how static HTML files are generated: undefined (default): keeps URLs untouched, and emit /docs/myDoc/index.html for /docs/myDoc.md true: add trailing slashes to URLs/links, and emit /docs/myDoc/index.html for /docs/myDoc.md false: remove trailing slashes from URLs/links, and emit /docs/myDoc.html for /docs/myDoc.md :::tip Each static hosting provider serves static files differently (this behavior may even change over time). Refer to the deployment guide and slorber/trailing-slash-guide to choose the appropriate setting. ::: i18n {#i18n} Type: Object The i18n configuration object to localize your site. Example: {/ cSpell:ignore فارسی /} `js title=\"docusaurus.config.js\" export default { i18n: { defaultLocale: 'en', locales: ['en', 'fa'], path: 'i18n', localeConfigs: { en: { label: 'English', direction: 'ltr', htmlLang: 'en-US', calendar: 'gregory', path: 'en', translate: false, url: 'https://en.example.com', baseUrl: '/', }, fa: { label: 'فارسی', direction: 'rtl', htmlLang: 'fa-IR', calendar: 'persian', path: 'fa', translate: true, url: 'https://fa.example.com', baseUrl: '/', }, }, }, }; ` defaultLocale: The locale that (1) does not have its name in the base URL (2) gets started with docusaurus start without --locale option (3) will be used for the <link hrefLang=\"x-default\"> tag locales: List of locales deployed on your site. Must contain defaultLocale. path: Root folder which all locale folders are relative to. Can be absolute or relative to the config file. Defaults to i18n. localeConfigs: Individual options for each locale. label: The label displayed for this locale in the locales dropdown. direction: ltr (default) or rtl (for right-to-left languages like Farsi, Arabic, Hebrew, etc.). Used to select the locale's CSS and HTML meta attribute. htmlLang: BCP 47 language tag to use in <html lang=\"...\"> (or any other DOM tag name) and in <link ... hreflang=\"...\"> calendar: the calendar used to calculate the date era. Note that it doesn't control the actual string displayed: MM/DD/YYYY and DD/MM/YYYY are both gregory. To choose the format (DD/MM/YYYY or MM/DD/YYYY), set your locale name to en-GB or en-US (en means en-US). path: Root folder that all plugin localization folders of this locale are relative to. Will be resolved against i18n.path. Defaults to the locale's name (i18n/<locale>). Note: this has no effect on the locale's baseUrl—customization of base URL is a work-in-progress. translate: Should we run the translation process for this locale? By default, it is enabled if the i18n/<locale> folder exists url: This lets you override the siteConfig.url, particularly useful if your site is deployed over multiple domains. baseUrl: This lets you override the default localized baseUrl Docusaurus infers from your siteConfig.baseUrl, giving you more control to host your localized site in less common ways, in particularly deployments over multi-domains future {#future} Type: Object The future configuration object permits to opt-in for upcoming/unstable/experimental Docusaurus features that are not ready for prime time. It is also a way to opt-in for upcoming breaking changes coming in the next major versions, enabling you to prepare your site for the next version while staying on the previous one. The Remix Future Flags blog post greatly explains this idea. :::danger Breaking changes in minor versions Features prefixed by experimental_ or unstable_ are subject to changes in minor versions, and not considered as Semantic Versioning breaking changes. Features namespaced by v<MajorVersion> (v6 v7, etc.) are future flags that are expected to be turned on by default in the next major versions. These are less likely to change, but we keep the possibility to do so. future API breaking changes should be easy to handle, and will be documented in minor/major version blog posts. ::: Example: `js title=\"docusaurus.config.js\" export default { future: { v4: { removeLegacyPostBuildHeadAttribute: true, useCssCascadeLayers: true, }, experimental_faster: { swcJsLoader: true, swcJsMinimizer: true, swcHtmlMinimizer: true, lightningCssMinimizer: true, rspackBundler: true, rspackPersistentCache: true, ssgWorkerThreads: true, mdxCrossCompilerCache: true, }, experimental_storage: { type: 'localStorage', namespace: true, }, experimental_router: 'hash', }, }; ` v4: Permits to opt-in for upcoming Docusaurus v4 breaking changes and features, to prepare your site in advance for this new version. Use true as a shorthand to enable all the flags. removeLegacyPostBuildHeadAttribute: Removes the legacy plugin.postBuild({head}) API that prevents us from applying useful SSG optimizations (explanations). useCssCascadeLayers: This enables the Docusaurus CSS Cascade Layers plugin with pre-configured layers that we plan to apply by default for Docusaurus v4. experimental_faster: An object containing feature flags to make the Docusaurus build faster. This requires adding the @docusaurus/faster package to your site's dependencies. Use true as a shorthand to enable all flags. Read more on the Docusaurus Faster issue. Available feature flags: swcJsLoader: Use SWC to transpile JS (instead of Babel). swcJsMinimizer: Use SWC to minify JS (instead of Terser). swcHtmlMinimizer : Use SWC to minify HTML and inlined JS/CSS (instead of html-minifier-terser). lightningCssMinimizer: Use Lightning CSS to minify CSS (instead of cssnano and clean-css). rspackBundler: Use Rspack to bundle your app (instead of webpack). rspackPersistentCache: Use Rspack Persistent Cache to re-build your app faster on subsequent builds. Requires rspackBundler: true. Requires persisting ./node_modules/.cache across rebuilds. mdxCrossCompilerCache: Compile MDX files only once for both browser/Node.js environments instead of twice. ssgWorkerThreads: Using a Node.js worker thread pool to execute the static site generation phase faster. Requires future.v4.removeLegacyPostBuildHeadAttribute to be turned on. experimental_storage: Site-wide browser storage options that theme authors should strive to respect. type: The browser storage theme authors should use. Possible values are localStorage and sessionStorage. Defaults to localStorage. namespace: Whether to namespace the browser storage keys to avoid storage key conflicts when Docusaurus sites are hosted under the same domain, or on localhost. Possible values are string | boolean. The namespace is appended at the end of the storage keys key-namespace. Use true to automatically generate a random namespace from your site url + baseUrl. Defaults to false (no namespace, historical behavior). experimental_router: The router type to use. Possible values are browser and hash. Defaults to browser. The hash router is only useful for rare cases where you want to opt-out of static site generation, have a fully client-side app with a single index.html entrypoint file. This can be useful to distribute a Docusaurus site as a .zip archive that you can browse locally without running a web server. noIndex {#noIndex} Type: boolean This option adds <meta name=\"robots\" content=\"noindex, nofollow\"> to every page to tell search engines to avoid indexing your site (more information here). Example: `js title=\"docusaurus.config.js\" export default { noIndex: true, // Defaults to false }; ` onBrokenLinks {#onBrokenLinks} Type: 'ignore' | 'log' | 'warn' | 'throw' The behavior of Docusaurus when it detects any broken link. By default, it throws an error, to ensure you never ship any broken link. :::note The broken links detection is only available for a production build (docusaurus build). ::: onBrokenAnchors {#onBrokenAnchors} Type: 'ignore' | 'log' | 'warn' | 'throw' The behavior of Docusaurus when it detects any broken anchor declared with the Heading component of Docusaurus. By default, it prints a warning, to let you know about your broken anchors. onBrokenMarkdownLinks {#onBrokenMarkdownLinks} :::warning Deprecated Deprecated in Docusaurus v3.9, and will be removed in Docusaurus v4. Replaced by siteConfig.markdown.hooks.onBrokenMarkdownLinks ::: Type: 'ignore' | 'log' | 'warn' | 'throw' The behavior of Docusaurus when it detects any broken Markdown link. By default, it prints a warning, to let you know about your broken Markdown link. onDuplicateRoutes {#onDuplicateRoutes} Type: 'ignore' | 'log' | 'warn' | 'throw' The behavior of Docusaurus when it detects any duplicate routes. By default, it displays a warning after you run yarn start or yarn build. tagline {#tagline} Type: string The tagline for your website. `js title=\"docusaurus.config.js\" export default { tagline: 'Docusaurus makes it easy to maintain Open Source documentation websites.', }; ` organizationName {#organizationName} Type: string The GitHub user or organization that owns the repository. You don't need this if you are not using the docusaurus deploy command. `js title=\"docusaurus.config.js\" export default { // Docusaurus' organization is facebook organizationName: 'facebook', }; ` projectName {#projectName} Type: string The name of the GitHub repository. You don't need this if you are not using the docusaurus deploy command. `js title=\"docusaurus.config.js\" export default { projectName: 'docusaurus', }; ` deploymentBranch {#deploymentBranch} Type: string The name of the branch to deploy the static files to. You don't need this if you are not using the docusaurus deploy command. `js title=\"docusaurus.config.js\" export default { deploymentBranch: 'gh-pages', }; ` githubHost {#githubHost} Type: string The hostname of your server. Useful if you are using GitHub Enterprise. You don't need this if you are not using the docusaurus deploy command. `js title=\"docusaurus.config.js\" export default { githubHost: 'github.com', }; ` githubPort {#githubPort} Type: string The port of your server. Useful if you are using GitHub Enterprise. You don't need this if you are not using the docusaurus deploy command. `js title=\"docusaurus.config.js\" export default { githubPort: '22', }; ` themeConfig {#themeConfig} Type: Object The theme configuration object to customize your site UI like navbar and footer. Example: `js title=\"docusaurus.config.js\" export default { themeConfig: { docs: { sidebar: { hideable: false, autoCollapseCategories: false, }, }, colorMode: { defaultMode: 'light', disableSwitch: false, respectPrefersColorScheme: true, }, navbar: { title: 'Site Title', logo: { alt: 'Site Logo', src: 'img/logo.svg', width: 32, height: 32, }, items: [ { to: 'docs/docusaurus.config.js', activeBasePath: 'docs', label: 'docusaurus.config.js', position: 'left', }, // ... other links ], }, footer: { style: 'dark', links: [ { title: 'Docs', items: [ { label: 'Docs', to: 'docs/doc1', }, ], }, // ... other links ], logo: { alt: 'Meta Open Source Logo', src: 'img/meta_oss_logo.png', href: 'https://opensource.fb.com', width: 160, height: 51, }, copyright: Copyright © ${new Date().getFullYear()} Facebook, Inc., // You can also put own HTML here }, }, }; ` plugins {#plugins} Type: PluginConfig[] `ts type PluginConfig = string | [string, any] | PluginModule | [PluginModule, any]; ` See plugin method references for the shape of a PluginModule. `js title=\"docusaurus.config.js\" export default { plugins: [ 'docusaurus-plugin-awesome', ['docusuarus-plugin-confetti', {fancy: false}], () => ({ postBuild() { console.log('Build finished'); }, }), ], }; ` themes {#themes} Type: PluginConfig[] `js title=\"docusaurus.config.js\" export default { themes: ['@docusaurus/theme-classic'], }; ` presets {#presets} Type: PresetConfig[] `ts type PresetConfig = string | [string, any]; ` `js title=\"docusaurus.config.js\" export default { presets: [], }; ` markdown {#markdown} The global Docusaurus Markdown config. Type: MarkdownConfig `ts type MarkdownPreprocessor = (args: { filePath: string; fileContent: string; }) => string; type MDX1CompatOptions = | boolean | { comments: boolean; admonitions: boolean; headingIds: boolean; }; export type ParseFrontMatter = (params: { filePath: string; fileContent: string; defaultParseFrontMatter: ParseFrontMatter; }) => Promise<{ frontMatter: {[key: string]: unknown}; content: string; }>; type MarkdownAnchorsConfig = { maintainCase: boolean; }; type OnBrokenMarkdownLinksFunction = (params: { sourceFilePath: string; // MD/MDX source file relative to cwd url: string; // Link url node: Link | Definition; // mdast Node }) => void | string; type OnBrokenMarkdownImagesFunction = (params: { sourceFilePath: string; // MD/MDX source file relative to cwd url: string; // Image url node: Image; // mdast node }) => void | string; type ReportingSeverity = 'ignore' | 'log' | 'warn' | 'throw'; type MarkdownHooks = { onBrokenMarkdownLinks: ReportingSeverity | OnBrokenMarkdownLinksFunction; onBrokenMarkdownImages: ReportingSeverity | OnBrokenMarkdownImagesFunction; }; type MarkdownConfig = { format: 'mdx' | 'md' | 'detect'; mermaid: boolean; emoji: boolean; preprocessor?: MarkdownPreprocessor; parseFrontMatter?: ParseFrontMatter; mdx1Compat: MDX1CompatOptions; remarkRehypeOptions: object; // see https://github.com/remarkjs/remark-rehype#options anchors: MarkdownAnchorsConfig; hooks: MarkdownHooks; }; ` Example: `js title=\"docusaurus.config.js\" export default { markdown: { format: 'mdx', mermaid: true, emoji: true, preprocessor: ({filePath, fileContent}) => { return fileContent.replaceAll('{{MY_VAR}}', 'MY_VALUE'); }, parseFrontMatter: async (params) => { const result = await params.defaultParseFrontMatter(params); result.frontMatter.description = result.frontMatter.description?.replaceAll('{{MY_VAR}}', 'MY_VALUE'); return result; }, mdx1Compat: { comments: true, admonitions: true, headingIds: true, }, anchors: { maintainCase: true, }, hooks: { onBrokenMarkdownLinks: 'warn', onBrokenMarkdownImages: 'throw', }, }, }; ` `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | format | 'mdx' \\| 'md' \\| 'detect' | 'mdx' | The default parser format to use for Markdown content. Using 'detect' will select the appropriate format automatically based on file extensions: .md vs .mdx. | | mermaid | boolean | false | When true, allows Docusaurus to render Markdown code blocks with mermaid language as Mermaid diagrams. | | emoji | boolean | true | When true, allows Docusaurus to render emoji shortcodes (e.g., :+1:) as Unicode emoji (👍). When false, emoji shortcodes are left as-is. | | preprocessor | MarkdownPreprocessor | undefined | Gives you the ability to alter the Markdown content string before parsing. Use it as a last-resort escape hatch or workaround: it is almost always better to implement a Remark/Rehype plugin. | | parseFrontMatter | ParseFrontMatter | undefined | Gives you the ability to provide your own front matter parser, or to enhance the default parser. Read our front matter guide for details. | | mdx1Compat | MDX1CompatOptions | {comments: true, admonitions: true, headingIds: true} | Compatibility options to make it easier to upgrade to Docusaurus v3+. | | anchors | MarkdownAnchorsConfig | {maintainCase: false} | Options to control the behavior of anchors generated from Markdown headings | | remarkRehypeOptions | object | undefined | Makes it possible to pass custom remark-rehype options. | | hooks | MarkdownHooks | object | Make it possible to customize the MDX loader behavior with callbacks or built-in options. | | hooks.onBrokenMarkdownLinks | ReportingSeverity \\| OnBrokenMarkdownLinksFunction | 'warn' | Hook to customize the behavior when encountering a broken Markdown link URL. With the callback function, you can return a new link URL, or alter the link mdast node. | | hooks.onBrokenMarkdownLinks | ReportingSeverity \\| OnBrokenMarkdownImagesFunction | 'throw' | Hook to customize the behavior when encountering a broken Markdown image URL. With the callback function, you can return a new image URL, or alter the image mdast node. | `mdx-code-block </APITable> ` customFields {#customFields} Docusaurus guards docusaurus.config.js from unknown fields. To add a custom field, define it on customFields. Type: Object `js title=\"docusaurus.config.js\" export default { customFields: { admin: 'endi', superman: 'lol', }, }; ` Attempting to add unknown fields in the config will lead to errors during build time: `bash Error: The field(s) 'foo', 'bar' are not recognized in docusaurus.config.js ` staticDirectories {#staticDirectories} An array of paths, relative to the site's directory or absolute. Files under these paths will be copied to the build output as-is. Type: string[] Example: `js title=\"docusaurus.config.js\" export default { staticDirectories: ['static'], }; ` headTags {#headTags} An array of tags that will be inserted in the HTML <head>. The values must be objects that contain two properties; tagName and attributes. tagName must be a string that determines the tag being created; eg \"link\". attributes must be an attribute-value map. Type: { tagName: string; attributes: Object; }[] Example: `js title=\"docusaurus.config.js\" export default { headTags: [ { tagName: 'link', attributes: { rel: 'icon', href: '/img/docusaurus.png', }, }, ], }; ` This would become <link rel=\"icon\" href=\"img/docusaurus.png\" /> in the generated HTML. scripts {#scripts} An array of scripts to load. The values can be either strings or plain objects of attribute-value maps. The <script> tags will be inserted in the HTML <head>. If you use a plain object, the only required attribute is src, and any other attributes are permitted (each one should have boolean/string values). Note that <script> added here are render-blocking, so you might want to add async: true/defer: true to the objects. Type: (string | Object)[] Example: `js title=\"docusaurus.config.js\" export default { scripts: [ // String format. 'https://docusaurus.io/script.js', // Object format. { src: 'https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js', async: true, }, ], }; ` stylesheets {#stylesheets} An array of CSS sources to load. The values can be either strings or plain objects of attribute-value maps. The <link> tags will be inserted in the HTML <head>. If you use an object, the only required attribute is href, and any other attributes are permitted (each one should have boolean/string values). Type: (string | Object)[] Example: `js title=\"docusaurus.config.js\" export default { stylesheets: [ // String format. 'https://docusaurus.io/style.css', // Object format. { href: 'http://mydomain.com/style.css', }, ], }; ` :::info By default, the <link> tags will have rel=\"stylesheet\", but you can explicitly add a custom rel value to inject any kind of <link> tag, not necessarily stylesheets. ::: clientModules {#clientModules} An array of client modules to load globally on your site. Example: `js title=\"docusaurus.config.js\" export default { clientModules: ['./mySiteGlobalJs.js', './mySiteGlobalCss.css'], }; ` ssrTemplate {#ssrTemplate} An HTML template written in Eta's syntax that will be used to render your application. This can be used to set custom attributes on the body tags, additional meta tags, customize the viewport, etc. Please note that Docusaurus will rely on the template to be correctly structured in order to function properly, once you do customize it, you will have to make sure that your template is compliant with the requirements from upstream. Type: string Example: `js title=\"docusaurus.config.js\" export default { ssrTemplate: `<!DOCTYPE html> <html <%~ it.htmlAttributes %>> <head> <meta charset=\"UTF-8\"> <meta name=\"generator\" content=\"Docusaurus v<%= it.version %>\"> <% it.metaAttributes.forEach((metaAttribute) => { %> <%~ metaAttribute %> <% }); %> <%~ it.headTags %> <% it.stylesheets.forEach((stylesheet) => { %> <link rel=\"stylesheet\" href=\"<%= it.baseUrl %><%= stylesheet %>\" /> <% }); %> <% it.scripts.forEach((script) => { %> <link rel=\"preload\" href=\"<%= it.baseUrl %><%= script %>\" as=\"script\"> <% }); %> </head> <body <%~ it.bodyAttributes %>> <%~ it.preBodyTags %> <div id=\"__docusaurus\"> <%~ it.appHtml %> </div> <% it.scripts.forEach((script) => { %> <script src=\"<%= it.baseUrl %><%= script %>\"></script> <% }); %> <%~ it.postBodyTags %> </body> </html>`, }; ` titleDelimiter {#titleDelimiter} Type: string Will be used as title delimiter in the generated <title> tag. Example: `js title=\"docusaurus.config.js\" export default { titleDelimiter: '🦖', // Defaults to | }; ` baseUrlIssueBanner {#baseUrlIssueBanner} Type: boolean When enabled, will show a banner in case your site can't load its CSS or JavaScript files, which is a very common issue, often related to a wrong baseUrl in site config. Example: `js title=\"docusaurus.config.js\" export default { baseUrlIssueBanner: true, // Defaults to true }; ` !A sample base URL issue banner. The style is very raw since the stylesheets failed to load. The text says \"Your Docusaurus site did not load properly... Current configured baseUrl = / (default value); We suggest trying baseUrl = /build/ :::warning This banner needs to inline CSS / JS in case all asset loading fails due to wrong base URL. If you have a strict Content Security Policy, you should rather disable it. :::",
    "keywords": [
      "`docusaurus.config.js`",
      "api",
      "reference",
      "for",
      "docusaurus",
      "configuration",
      "file.",
      "config",
      "js",
      "mdx",
      "src",
      "components",
      "APITable",
      "facebook",
      "metro",
      "img",
      "favicon",
      "absence",
      "links",
      "docs",
      "myDoc",
      "index",
      "trailing-slash-guide",
      "en",
      "fa",
      "DD",
      "YYYY",
      "MM",
      "unstable",
      "experimental",
      "major",
      "faster",
      "CSS",
      "node_modules",
      "Node",
      "logo",
      "doc1",
      "meta_oss_logo",
      "opensource",
      "theme-classic",
      "MDX",
      "github",
      "remarkjs",
      "remark-rehype",
      "Rehype",
      "string",
      "defer",
      "script",
      "cdnjs",
      "ajax",
      "libs",
      "clipboard",
      "style",
      "mydomain",
      "mySiteGlobalJs",
      "mySiteGlobalCss",
      "head",
      "div",
      "body",
      "html",
      "build",
      "import",
      "from",
      "site",
      "info",
      "Refer",
      "the",
      "Getting",
      "Started",
      "Configuration",
      "examples",
      "Overview",
      "overview",
      "contains",
      "configurations",
      "your",
      "and",
      "placed",
      "root",
      "directory",
      "note",
      "With",
      "TypeScript",
      "Docusaurus",
      "codebase",
      "file",
      "may",
      "called",
      "The",
      "syntax",
      "broadly",
      "identical",
      "with",
      "addition",
      "types",
      "You",
      "can",
      "see",
      "example",
      "Website",
      "itself",
      "This",
      "run",
      "should",
      "export",
      "object",
      "function",
      "that",
      "creates",
      "supports",
      "Modules",
      "CommonJS",
      "Examples",
      "title",
      "default",
      "url",
      "https",
      "async",
      "createConfigAsync",
      "return",
      "tip",
      "Syntax",
      "declare",
      "more",
      "exhaustive",
      "list",
      "explanations",
      "Required",
      "fields",
      "required",
      "Type",
      "Title",
      "website",
      "Will",
      "used",
      "metadata",
      "browser",
      "tab",
      "URL",
      "also",
      "considered",
      "top",
      "level",
      "hostname",
      "For",
      "field",
      "related",
      "baseUrl",
      "Special",
      "case",
      "i18n",
      "sites",
      "uses",
      "multiple",
      "locales",
      "possible",
      "provide",
      "distinct",
      "each",
      "locale",
      "thanks",
      "siteConfig",
      "localeConfigs",
      "attribute",
      "makes",
      "deploy",
      "localized",
      "over",
      "domains",
      "base",
      "path",
      "segment",
      "appearing",
      "just",
      "after",
      "letting",
      "you",
      "eventually",
      "host",
      "under",
      "subpath",
      "instead",
      "domain",
      "let",
      "consider",
      "want",
      "then",
      "must",
      "configure",
      "accordingly",
      "hosted",
      "will",
      "automatically",
      "localize",
      "based",
      "smart",
      "heuristics",
      "siteBaseUrl",
      "other",
      "When",
      "building",
      "single",
      "time",
      "assuming",
      "intent",
      "computes",
      "doesn",
      "satisfy",
      "always",
      "override",
      "providing",
      "explicit",
      "Optional",
      "optional",
      "undefined",
      "Path",
      "link",
      "href",
      "static",
      "ico",
      "trailingSlash",
      "boolean",
      "Allow",
      "customize",
      "presence",
      "trailing",
      "slash",
      "end",
      "URLs",
      "how",
      "HTML",
      "files",
      "are",
      "generated",
      "keeps",
      "untouched",
      "emit",
      "true",
      "add",
      "slashes",
      "false",
      "remove",
      "Each",
      "hosting",
      "provider",
      "serves",
      "differently",
      "this",
      "behavior",
      "even",
      "change",
      "deployment",
      "guide",
      "slorber",
      "choose",
      "appropriate",
      "setting",
      "Object",
      "Example",
      "cSpell",
      "ignore",
      "defaultLocale",
      "label",
      "English",
      "direction",
      "ltr",
      "htmlLang",
      "calendar",
      "gregory",
      "translate",
      "com",
      "rtl",
      "persian",
      "does",
      "not",
      "have",
      "its",
      "name",
      "gets",
      "started",
      "start",
      "without",
      "option",
      "hrefLang",
      "tag",
      "List",
      "deployed",
      "Must",
      "contain",
      "Root",
      "folder",
      "which",
      "all",
      "folders",
      "relative",
      "Can",
      "absolute",
      "Defaults",
      "Individual",
      "options",
      "displayed",
      "dropdown",
      "right",
      "left",
      "languages",
      "like",
      "Farsi",
      "Arabic",
      "Hebrew",
      "etc",
      "Used",
      "select",
      "meta",
      "BCP",
      "language",
      "use",
      "lang",
      "any",
      "DOM",
      "hreflang",
      "calculate",
      "date",
      "era",
      "Note",
      "control",
      "actual",
      "both",
      "format",
      "set",
      "means",
      "plugin",
      "localization",
      "resolved",
      "against",
      "has",
      "effect",
      "customization",
      "work",
      "progress",
      "Should",
      "translation",
      "process",
      "enabled",
      "exists",
      "lets",
      "particularly",
      "useful",
      "infers",
      "giving",
      "less",
      "common",
      "ways",
      "deployments",
      "multi",
      "future",
      "permits",
      "opt",
      "upcoming",
      "features",
      "ready",
      "prime",
      "way",
      "breaking",
      "changes",
      "coming",
      "next",
      "versions",
      "enabling",
      "prepare",
      "version",
      "while",
      "staying",
      "previous",
      "one",
      "Remix",
      "Future",
      "Flags",
      "blog",
      "post",
      "greatly",
      "explains",
      "idea",
      "danger",
      "Breaking",
      "minor",
      "Features",
      "prefixed",
      "experimental_",
      "unstable_",
      "subject",
      "Semantic",
      "Versioning",
      "namespaced",
      "MajorVersion",
      "flags",
      "expected",
      "turned",
      "These",
      "likely",
      "but",
      "keep",
      "possibility",
      "API",
      "easy",
      "handle",
      "documented",
      "posts",
      "useCssCascadeLayers",
      "experimental_faster",
      "swcJsLoader",
      "swcJsMinimizer",
      "swcHtmlMinimizer",
      "rspackBundler",
      "ssgWorkerThreads",
      "experimental_storage",
      "type",
      "localStorage",
      "namespace",
      "experimental_router",
      "hash",
      "Permits",
      "advance",
      "new",
      "Use",
      "shorthand",
      "enable",
      "Removes",
      "legacy",
      "postBuild",
      "prevents",
      "applying",
      "SSG",
      "optimizations",
      "enables",
      "Cascade",
      "Layers",
      "pre",
      "configured",
      "layers",
      "plan",
      "apply",
      "containing",
      "feature",
      "make",
      "requires",
      "adding",
      "package",
      "dependencies",
      "Read",
      "Faster",
      "issue",
      "Available",
      "SWC",
      "transpile",
      "Babel",
      "minify",
      "Terser",
      "inlined",
      "minifier",
      "terser",
      "Lightning",
      "cssnano",
      "clean",
      "css",
      "Rspack",
      "bundle",
      "app",
      "webpack",
      "Persistent",
      "Cache",
      "subsequent",
      "builds",
      "Requires",
      "persisting",
      "cache",
      "across",
      "rebuilds",
      "Compile",
      "only",
      "once",
      "environments",
      "twice",
      "Using",
      "worker",
      "thread",
      "pool",
      "execute",
      "generation",
      "phase",
      "Site",
      "wide",
      "storage",
      "theme",
      "authors",
      "strive",
      "respect",
      "Possible",
      "values",
      "sessionStorage",
      "Whether",
      "keys",
      "avoid",
      "key",
      "conflicts",
      "when",
      "same",
      "localhost",
      "appended",
      "generate",
      "random",
      "historical",
      "router",
      "rare",
      "cases",
      "where",
      "out",
      "fully",
      "client",
      "side",
      "entrypoint",
      "distribute",
      "zip",
      "archive",
      "browse",
      "locally",
      "running",
      "web",
      "server",
      "noIndex",
      "adds",
      "robots",
      "content",
      "noindex",
      "nofollow",
      "every",
      "page",
      "tell",
      "search",
      "engines",
      "indexing",
      "information",
      "here",
      "onBrokenLinks",
      "log",
      "warn",
      "throw",
      "detects",
      "broken",
      "throws",
      "error",
      "ensure",
      "never",
      "ship",
      "detection",
      "available",
      "production",
      "onBrokenAnchors",
      "anchor",
      "declared",
      "Heading",
      "component",
      "prints",
      "warning",
      "know",
      "about",
      "anchors",
      "Deprecated",
      "removed",
      "Replaced",
      "markdown",
      "hooks",
      "Markdown",
      "onDuplicateRoutes",
      "duplicate",
      "routes",
      "displays",
      "yarn",
      "tagline",
      "maintain",
      "Open",
      "Source",
      "documentation",
      "websites",
      "organizationName",
      "GitHub",
      "user",
      "organization",
      "owns",
      "repository",
      "don",
      "need",
      "using",
      "command",
      "projectName",
      "deploymentBranch",
      "branch",
      "pages",
      "githubHost",
      "Useful",
      "Enterprise",
      "githubPort",
      "port",
      "themeConfig",
      "navbar",
      "footer",
      "sidebar",
      "hideable",
      "colorMode",
      "defaultMode",
      "light",
      "disableSwitch",
      "alt",
      "Logo",
      "svg",
      "width",
      "height",
      "items",
      "activeBasePath",
      "position",
      "dark",
      "Docs",
      "Meta",
      "png",
      "copyright",
      "Copyright",
      "Date",
      "getFullYear",
      "Facebook",
      "Inc",
      "put",
      "own",
      "plugins",
      "PluginConfig",
      "PluginModule",
      "See",
      "method",
      "references",
      "shape",
      "awesome",
      "docusuarus",
      "confetti",
      "fancy",
      "console",
      "Build",
      "finished",
      "themes",
      "classic",
      "presets",
      "PresetConfig",
      "global",
      "MarkdownConfig",
      "MarkdownPreprocessor",
      "args",
      "filePath",
      "fileContent",
      "MDX1CompatOptions",
      "comments",
      "admonitions",
      "headingIds",
      "ParseFrontMatter",
      "params",
      "Promise",
      "frontMatter",
      "unknown",
      "maintainCase",
      "sourceFilePath",
      "source",
      "cwd",
      "Link",
      "node",
      "Definition",
      "mdast",
      "void",
      "Image",
      "ReportingSeverity",
      "MarkdownHooks",
      "detect",
      "mermaid",
      "emoji",
      "preprocessor",
      "parseFrontMatter",
      "mdx1Compat",
      "remarkRehypeOptions",
      "remark",
      "rehype",
      "replaceAll",
      "MY_VAR",
      "MY_VALUE",
      "const",
      "result",
      "await",
      "description",
      "code",
      "block",
      "Name",
      "Default",
      "Description",
      "parser",
      "extensions",
      "allows",
      "render",
      "blocks",
      "Mermaid",
      "diagrams",
      "shortcodes",
      "Unicode",
      "Gives",
      "ability",
      "alter",
      "before",
      "parsing",
      "last",
      "resort",
      "escape",
      "hatch",
      "workaround",
      "almost",
      "better",
      "implement",
      "Remark",
      "front",
      "matter",
      "enhance",
      "our",
      "details",
      "Compatibility",
      "easier",
      "upgrade",
      "Options",
      "headings",
      "Makes",
      "pass",
      "custom",
      "Make",
      "loader",
      "callbacks",
      "built",
      "Hook",
      "encountering",
      "callback",
      "image",
      "customFields",
      "guards",
      "define",
      "admin",
      "endi",
      "superman",
      "lol",
      "Attempting",
      "lead",
      "errors",
      "during",
      "bash",
      "Error",
      "foo",
      "bar",
      "recognized",
      "staticDirectories",
      "array",
      "paths",
      "Files",
      "these",
      "copied",
      "output",
      "headTags",
      "tags",
      "inserted",
      "objects",
      "two",
      "properties",
      "tagName",
      "attributes",
      "determines",
      "being",
      "created",
      "value",
      "map",
      "rel",
      "icon",
      "would",
      "become",
      "scripts",
      "load",
      "either",
      "strings",
      "plain",
      "maps",
      "permitted",
      "added",
      "blocking",
      "might",
      "String",
      "cloudflare",
      "min",
      "stylesheets",
      "sources",
      "http",
      "stylesheet",
      "explicitly",
      "inject",
      "kind",
      "necessarily",
      "clientModules",
      "modules",
      "globally",
      "ssrTemplate",
      "template",
      "written",
      "Eta",
      "application",
      "additional",
      "viewport",
      "Please",
      "rely",
      "correctly",
      "structured",
      "order",
      "properly",
      "sure",
      "compliant",
      "requirements",
      "upstream",
      "DOCTYPE",
      "htmlAttributes",
      "charset",
      "UTF",
      "generator",
      "metaAttributes",
      "forEach",
      "metaAttribute",
      "preload",
      "bodyAttributes",
      "preBodyTags",
      "__docusaurus",
      "appHtml",
      "postBodyTags",
      "titleDelimiter",
      "delimiter",
      "baseUrlIssueBanner",
      "show",
      "banner",
      "JavaScript",
      "very",
      "often",
      "wrong",
      "sample",
      "raw",
      "since",
      "failed",
      "text",
      "says",
      "Your",
      "did",
      "Current",
      "suggest",
      "trying",
      "needs",
      "inline",
      "asset",
      "loading",
      "fails",
      "due",
      "strict",
      "Content",
      "Security",
      "Policy",
      "rather",
      "disable"
    ],
    "url": "/docs/api/docusaurus.config.js",
    "path": "api/docusaurus.config.js.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "create-docusaurus",
    "title": "📦 create-docusaurus",
    "description": "",
    "content": "📦 create-docusaurus A scaffolding utility to help you instantly set up a functional Docusaurus app. Usage {#usage} `bash npx create-docusaurus@latest [name] [template] [rootDir] ` The name argument will be used as the site's path as well as the name field in the created app's package.json. It can be an absolute path, or a path relative to rootDir. The template argument can be one of the following: classic: Uses the classic template (recommended) facebook: Uses the Facebook/Meta template, which contains some Meta-specific setup A git repo URL (beginning with https:// or git@), which can be cloned to the destination A local file path relative to CWD, which contains the files to be copied to destination The rootDir will be used to resolve the absolute path to the site directory. The default is CWD. :::warning This command should be preferably used in an interactive shell so all features are available. ::: Options {#options} -t, --typescript {#typescript} Used when the template argument is a recognized name. Currently, only classic provides a TypeScript variant. -g, --git-strategy {#git-strategy} Used when the template argument is a git repo. It needs to be one of: deep: preserves full git history shallow: clones with --depth=1 copy: does a shallow clone, but does not create a git repo custom: enter your custom git clone command. We will prompt you for it. You can write something like git clone --depth 10, and we will append the repository URL and destination directory. -p, --package-manager {#package-manager} Value should be one of npm, yarn, pnpm, or bun. If it's not explicitly provided, Docusaurus will infer one based on: The lockfile already present in the CWD (e.g. if you are setting up website in an existing project) The command used to invoke create-docusaurus (e.g. npm init, npx, yarn create, bunx, etc.) Interactive prompting, in case all heuristics are not present -s, --skip-install {#skip-install} If provided, Docusaurus will not automatically install dependencies after creating the app. The --package-manager option is only useful when you are actually installing dependencies.",
    "keywords": [
      "📦",
      "create-docusaurus",
      "api",
      "misc",
      "create",
      "docusaurus",
      "mdx",
      "Meta",
      "scaffolding",
      "utility",
      "help",
      "you",
      "instantly",
      "set",
      "functional",
      "Docusaurus",
      "app",
      "Usage",
      "usage",
      "bash",
      "npx",
      "latest",
      "name",
      "template",
      "rootDir",
      "The",
      "argument",
      "will",
      "used",
      "the",
      "site",
      "path",
      "well",
      "field",
      "created",
      "package",
      "json",
      "can",
      "absolute",
      "relative",
      "one",
      "following",
      "classic",
      "Uses",
      "recommended",
      "facebook",
      "Facebook",
      "which",
      "contains",
      "some",
      "specific",
      "setup",
      "git",
      "repo",
      "URL",
      "beginning",
      "with",
      "https",
      "cloned",
      "destination",
      "local",
      "file",
      "CWD",
      "files",
      "copied",
      "resolve",
      "directory",
      "default",
      "warning",
      "This",
      "command",
      "should",
      "preferably",
      "interactive",
      "shell",
      "all",
      "features",
      "are",
      "available",
      "Options",
      "options",
      "typescript",
      "Used",
      "when",
      "recognized",
      "Currently",
      "only",
      "provides",
      "TypeScript",
      "variant",
      "strategy",
      "needs",
      "deep",
      "preserves",
      "full",
      "history",
      "shallow",
      "clones",
      "depth",
      "copy",
      "does",
      "clone",
      "but",
      "not",
      "custom",
      "enter",
      "your",
      "prompt",
      "for",
      "You",
      "write",
      "something",
      "like",
      "and",
      "append",
      "repository",
      "manager",
      "Value",
      "npm",
      "yarn",
      "pnpm",
      "bun",
      "explicitly",
      "provided",
      "infer",
      "based",
      "lockfile",
      "already",
      "present",
      "setting",
      "website",
      "existing",
      "project",
      "invoke",
      "init",
      "bunx",
      "etc",
      "Interactive",
      "prompting",
      "case",
      "heuristics",
      "skip",
      "install",
      "automatically",
      "dependencies",
      "after",
      "creating",
      "option",
      "useful",
      "actually",
      "installing"
    ],
    "url": "/docs/api/misc/create-docusaurus",
    "path": "api/misc/create-docusaurus.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "README",
    "title": "📦 eslint-plugin",
    "description": "",
    "content": "📦 eslint-plugin ESLint is a tool that statically analyzes your code and reports problems or suggests best practices through editor hints and command line. Docusaurus provides an ESLint plugin to enforce best Docusaurus practices. Installation `bash npm2yarn npm install --save-dev @docusaurus/eslint-plugin ` Usage Recommended config Add plugin:@docusaurus/recommended to the extends section of your .eslintrc configuration file: `json title=\".eslintrc\" { \"extends\": [\"plugin:@docusaurus/recommended\"] } ` This will enable the @docusaurus eslint plugin and use the recommended config. See Supported rules below for a list of rules that this will enable. Manual config For more fine-grained control, you can also enable the plugin manually and configure the rules you want to use directly: `json title=\".eslintrc\" { \"plugins\": [\"@docusaurus\"], \"rules\": { \"@docusaurus/string-literal-i18n-messages\": \"error\", \"@docusaurus/no-untranslated-text\": \"warn\" } } ` Supported configs Recommended: recommended rule set for most Docusaurus sites that should be extended from. All: all rules enabled. This will change between minor versions, so you should not use this if you want to avoid unexpected breaking changes. Supported rules | Name | Description | | | --- | --- | --- | | @docusaurus/no-untranslated-text | Enforce text labels in JSX to be wrapped by translate calls | | | @docusaurus/string-literal-i18n-messages | Enforce translate APIs to be called on plain text labels | ✅ | | @docusaurus/no-html-links | Ensures @docusaurus/Link is used instead of <a> tags | ✅ | | @docusaurus/prefer-docusaurus-heading | Ensures @theme/Heading is used instead of <hn> tags for headings | ✅ | ✅ = recommended Example configuration Here's an example configuration: `js title=\".eslintrc.js\" module.exports = { extends: ['plugin:@docusaurus/recommended'], rules: { '@docusaurus/no-untranslated-text': [ 'warn', {ignoredStrings: ['·', '—', '×']}, ], }, }; `",
    "keywords": [
      "📦",
      "eslint-plugin",
      "api",
      "misc",
      "eslint",
      "plugin",
      "readme",
      "mdx",
      "recommended",
      "string-literal-i18n-messages",
      "no-untranslated-text",
      "no-html-links",
      "Link",
      "prefer-docusaurus-heading",
      "Heading",
      "ESLint",
      "tool",
      "that",
      "statically",
      "analyzes",
      "your",
      "code",
      "and",
      "reports",
      "problems",
      "suggests",
      "best",
      "practices",
      "through",
      "editor",
      "hints",
      "command",
      "line",
      "Docusaurus",
      "provides",
      "enforce",
      "Installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "dev",
      "docusaurus",
      "Usage",
      "Recommended",
      "config",
      "Add",
      "the",
      "extends",
      "section",
      "eslintrc",
      "configuration",
      "file",
      "json",
      "title",
      "This",
      "will",
      "enable",
      "use",
      "See",
      "Supported",
      "rules",
      "below",
      "for",
      "list",
      "this",
      "Manual",
      "For",
      "more",
      "fine",
      "grained",
      "control",
      "you",
      "can",
      "also",
      "manually",
      "configure",
      "want",
      "directly",
      "plugins",
      "string",
      "literal",
      "i18n",
      "messages",
      "error",
      "untranslated",
      "text",
      "warn",
      "configs",
      "rule",
      "set",
      "most",
      "sites",
      "should",
      "extended",
      "from",
      "All",
      "all",
      "enabled",
      "change",
      "between",
      "minor",
      "versions",
      "not",
      "avoid",
      "unexpected",
      "breaking",
      "changes",
      "Name",
      "Description",
      "Enforce",
      "labels",
      "JSX",
      "wrapped",
      "translate",
      "calls",
      "APIs",
      "called",
      "plain",
      "html",
      "links",
      "Ensures",
      "used",
      "instead",
      "tags",
      "prefer",
      "heading",
      "theme",
      "headings",
      "Example",
      "Here",
      "example",
      "module",
      "exports",
      "ignoredStrings"
    ],
    "url": "/docs/api/misc/eslint-plugin/README",
    "path": "api/misc/eslint-plugin/README.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "no-html-links",
    "title": "no-html-links",
    "description": "",
    "content": "no-html-links import APITable from '@site/src/components/APITable'; Ensure that the Docusaurus <Link> component is used instead of <a> tags. The <Link> component has prefetching and preloading built-in. It also does build-time broken link detection, and helps Docusaurus understand your site's structure better. Rule Details {#details} Examples of incorrect code for this rule: `html <a href=\"/page\">go to page!</a> <a href=\"https://x.com/docusaurus\" target=\"_blank\">X</a> ` Examples of correct code for this rule: `js import Link from '@docusaurus/Link' <Link to=\"/page\">go to page!</Link> <Link to=\"https://x.com/docusaurus\">X</Link> ` Rule Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Option | Type | Default | Description | | --- | --- | --- | --- | | ignoreFullyResolved | boolean | false | Set to true will not report any <a> tags with absolute URLs including a protocol. | `mdx-code-block </APITable> `",
    "keywords": [
      "no-html-links",
      "api",
      "misc",
      "eslint",
      "plugin",
      "no",
      "html",
      "links",
      "mdx",
      "src",
      "components",
      "APITable",
      "page",
      "docusaurus",
      "Link",
      "import",
      "from",
      "site",
      "Ensure",
      "that",
      "the",
      "Docusaurus",
      "component",
      "used",
      "instead",
      "tags",
      "The",
      "has",
      "prefetching",
      "and",
      "preloading",
      "built",
      "also",
      "does",
      "build",
      "time",
      "broken",
      "link",
      "detection",
      "helps",
      "understand",
      "your",
      "structure",
      "better",
      "Rule",
      "Details",
      "details",
      "Examples",
      "incorrect",
      "code",
      "for",
      "this",
      "rule",
      "href",
      "https",
      "com",
      "target",
      "_blank",
      "correct",
      "Configuration",
      "configuration",
      "Accepted",
      "fields",
      "block",
      "Option",
      "Type",
      "Default",
      "Description",
      "ignoreFullyResolved",
      "boolean",
      "false",
      "Set",
      "true",
      "will",
      "not",
      "report",
      "any",
      "with",
      "absolute",
      "URLs",
      "including",
      "protocol"
    ],
    "url": "/docs/api/misc/eslint-plugin/no-html-links",
    "path": "api/misc/eslint-plugin/no-html-links.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "no-untranslated-text",
    "title": "no-untranslated-text",
    "description": "",
    "content": "no-untranslated-text import APITable from '@site/src/components/APITable'; Enforce text labels in JSX to be wrapped by translate calls. When the i18n feature is used, this rule ensures that all labels appearing on the website are translatable, so no string accidentally slips through untranslated. Rule Details {#details} Examples of incorrect code for this rule: `js // Hello World is not translated <Component>Hello World</Component> ` Examples of correct code for this rule: `js // Hello World is translated <Component> <Translate>Hello World</Translate> </Component> ` Rule Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Option | Type | Default | Description | | --- | --- | --- | --- | | ignoredStrings | string[] | [] | Text labels that only contain strings in this list will not be reported. | `mdx-code-block </APITable> ` When Not To Use It {#when-not-to-use} If you're not using the i18n feature, you can disable this rule. You can also disable this rule where the text is not supposed to be translated. Further Reading {#further-reading} https://docusaurus.io/docs/docusaurus-core#translate https://docusaurus.io/docs/docusaurus-core#translate-imperative",
    "keywords": [
      "no-untranslated-text",
      "api",
      "misc",
      "eslint",
      "plugin",
      "no",
      "untranslated",
      "text",
      "mdx",
      "src",
      "components",
      "APITable",
      "Component",
      "Translate",
      "docusaurus",
      "docs",
      "docusaurus-core",
      "import",
      "from",
      "site",
      "Enforce",
      "labels",
      "JSX",
      "wrapped",
      "translate",
      "calls",
      "When",
      "the",
      "i18n",
      "feature",
      "used",
      "this",
      "rule",
      "ensures",
      "that",
      "all",
      "appearing",
      "website",
      "are",
      "translatable",
      "string",
      "accidentally",
      "slips",
      "through",
      "Rule",
      "Details",
      "details",
      "Examples",
      "incorrect",
      "code",
      "for",
      "Hello",
      "World",
      "not",
      "translated",
      "correct",
      "Configuration",
      "configuration",
      "Accepted",
      "fields",
      "block",
      "Option",
      "Type",
      "Default",
      "Description",
      "ignoredStrings",
      "Text",
      "only",
      "contain",
      "strings",
      "list",
      "will",
      "reported",
      "Not",
      "Use",
      "when",
      "use",
      "you",
      "using",
      "can",
      "disable",
      "You",
      "also",
      "where",
      "supposed",
      "Further",
      "Reading",
      "further",
      "reading",
      "https",
      "core",
      "imperative"
    ],
    "url": "/docs/api/misc/eslint-plugin/no-untranslated-text",
    "path": "api/misc/eslint-plugin/no-untranslated-text.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "prefer-docusaurus-heading",
    "title": "prefer-docusaurus-heading",
    "description": "",
    "content": "prefer-docusaurus-heading Ensures that the @theme/Heading theme component provided by Docusaurus theme-classic is used instead of <hn> tags for headings. Rule Details {#details} Examples of incorrect code for this rule: `html <h1>This is heading 1</h1> <h2>This is heading 2</h2> <h3>This is heading 3</h3> ` Examples of correct code for this rule: `javascript import Heading from '@theme/Heading' <Heading as='h1'>This is heading 1</Heading> <Heading as='h2'>This is heading 2</Heading> <Heading as='h3'>This is heading 3</Heading> `",
    "keywords": [
      "prefer-docusaurus-heading",
      "api",
      "misc",
      "eslint",
      "plugin",
      "prefer",
      "docusaurus",
      "heading",
      "mdx",
      "Heading",
      "h1",
      "h2",
      "h3",
      "Ensures",
      "that",
      "the",
      "theme",
      "component",
      "provided",
      "Docusaurus",
      "classic",
      "used",
      "instead",
      "tags",
      "for",
      "headings",
      "Rule",
      "Details",
      "details",
      "Examples",
      "incorrect",
      "code",
      "this",
      "rule",
      "html",
      "This",
      "correct",
      "javascript",
      "import",
      "from"
    ],
    "url": "/docs/api/misc/eslint-plugin/prefer-docusaurus-heading",
    "path": "api/misc/eslint-plugin/prefer-docusaurus-heading.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "string-literal-i18n-messages",
    "title": "string-literal-i18n-messages",
    "description": "",
    "content": "string-literal-i18n-messages Enforce translate APIs to be called on plain text labels. Docusaurus offers the docusaurus write-translations API, which statically extracts the text labels marked as translatable. Dynamic values used in <Translate> or translate() calls will fail to be extracted. This rule will ensure that all translate calls are statically extractable. Rule Details {#details} Examples of incorrect code for this rule: `js const text = 'Some text to be translated' // Invalid <Translate> child <Translate>{text}</Translate> // Invalid message attribute translate({message: text}) ` Examples of correct code for this rule: `js // Valid <Translate> child <Translate>Some text to be translated</Translate> // Valid message attribute translate({message: 'Some text to be translated'}) // Valid <Translate> child using values object as prop <Translate values={{firstName: 'Sébastien'}}> {'Welcome, {firstName}! How are you?'} </Translate> // Valid message attribute using values object as second argument translate({message: 'The logo of site {siteName}'}, {siteName: 'Docusaurus'}) ` When Not To Use It {#when-not-to-use} If you're not using the i18n feature, you can disable this rule. Further Reading {#further-reading} https://docusaurus.io/docs/docusaurus-core#translate https://docusaurus.io/docs/docusaurus-core#translate-imperative",
    "keywords": [
      "string-literal-i18n-messages",
      "api",
      "misc",
      "eslint",
      "plugin",
      "string",
      "literal",
      "i18n",
      "messages",
      "mdx",
      "Translate",
      "docusaurus",
      "docs",
      "docusaurus-core",
      "Enforce",
      "translate",
      "APIs",
      "called",
      "plain",
      "text",
      "labels",
      "Docusaurus",
      "offers",
      "the",
      "write",
      "translations",
      "API",
      "which",
      "statically",
      "extracts",
      "marked",
      "translatable",
      "Dynamic",
      "values",
      "used",
      "calls",
      "will",
      "fail",
      "extracted",
      "This",
      "rule",
      "ensure",
      "that",
      "all",
      "are",
      "extractable",
      "Rule",
      "Details",
      "details",
      "Examples",
      "incorrect",
      "code",
      "for",
      "this",
      "const",
      "Some",
      "translated",
      "Invalid",
      "child",
      "message",
      "attribute",
      "correct",
      "Valid",
      "using",
      "object",
      "prop",
      "firstName",
      "bastien",
      "Welcome",
      "How",
      "you",
      "second",
      "argument",
      "The",
      "logo",
      "site",
      "siteName",
      "When",
      "Not",
      "Use",
      "when",
      "not",
      "use",
      "feature",
      "can",
      "disable",
      "Further",
      "Reading",
      "further",
      "reading",
      "https",
      "core",
      "imperative"
    ],
    "url": "/docs/api/misc/eslint-plugin/string-literal-i18n-messages",
    "path": "api/misc/eslint-plugin/string-literal-i18n-messages.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "logger",
    "title": "📦 logger",
    "description": "",
    "content": "📦 logger An encapsulated logger for semantically formatting console messages. Authors of packages in the Docusaurus ecosystem are encouraged to use this package to provide unified log formats. APIs It exports a single object as default export: logger. logger has the following properties: Some useful colors. red yellow green bold dim Formatters. These functions all have the signature (msg: unknown) => string. Note that their implementations are not guaranteed. You should only care about their semantics. path: formats a file path. url: formats a URL. name: formats an identifier. code: formats a code snippet. subdue: subdues the text. num: formats a number. The interpolate function. It is a template literal tag. The syntax can be found below. Logging functions. All logging functions can both be used as normal functions (similar to the console.log family, but only accepts one parameter) or template literal tags. info: prints information. warn: prints a warning that should be paid attention to. error: prints an error (not necessarily halting the program) that signals significant problems. success: prints a success message. The report function. It takes a ReportingSeverity value (ignore, log, warn, throw) and reports a message according to the severity. :::warning A word on the error formatter Beware that an error message, even when it doesn't hang the program, is likely going to cause confusion. When users inspect logs and find an [ERROR], even when the build succeeds, they will assume something is going wrong. Use it sparingly. Docusaurus only uses logger.error when printing messages immediately before throwing an error, or when user has set the reporting severity of onBrokenLink, etc. to \"error\". In addition, warn and error will color the entire message for better attention. If you are printing large blocks of help text about an error, better use logger.info. ::: Using the template literal tag The template literal tag evaluates the template and expressions embedded. interpolate returns a new string, while other logging functions prints it. Below is a typical usage: `js import logger from '@docusaurus/logger'; logger.info`Hello name=${name}! You have number=${money} dollars. Here are the ${ items.length > 1 ? 'items' : 'item' } on the shelf: ${items} To buy anything, enter code=${'buy x'} where code=${'x'} is the item's name; to quit, press code=${'Ctrl + C'}.`; ` An embedded expression is optionally preceded by a flag in the form [a-z]+= (a few lowercase letters, followed by an equals sign, directly preceding the embedded expression). If the expression is not preceded by any flag, it's printed out as-is. Otherwise, it's formatted with one of the formatters: path=: path url=: url name=: name code=: code subdue=: subdue number=: num If the expression is an array, it's formatted by \\n- ${array.join('\\n- ')}\\n (note it automatically gets a leading line end). Each member is formatted by itself and the bullet is not formatted. So you would see the above message printed as: !Some text output in the terminal, containing array, code, name, and number formatting",
    "keywords": [
      "📦",
      "logger",
      "api",
      "misc",
      "mdx",
      "encapsulated",
      "for",
      "semantically",
      "formatting",
      "console",
      "messages",
      "Authors",
      "packages",
      "the",
      "Docusaurus",
      "ecosystem",
      "are",
      "encouraged",
      "use",
      "this",
      "package",
      "provide",
      "unified",
      "log",
      "formats",
      "APIs",
      "exports",
      "single",
      "object",
      "default",
      "export",
      "has",
      "following",
      "properties",
      "Some",
      "useful",
      "colors",
      "red",
      "yellow",
      "green",
      "bold",
      "dim",
      "Formatters",
      "These",
      "functions",
      "all",
      "have",
      "signature",
      "msg",
      "unknown",
      "string",
      "Note",
      "that",
      "their",
      "implementations",
      "not",
      "guaranteed",
      "You",
      "should",
      "only",
      "care",
      "about",
      "semantics",
      "path",
      "file",
      "url",
      "URL",
      "name",
      "identifier",
      "code",
      "snippet",
      "subdue",
      "subdues",
      "text",
      "num",
      "number",
      "The",
      "interpolate",
      "function",
      "template",
      "literal",
      "tag",
      "syntax",
      "can",
      "found",
      "below",
      "Logging",
      "All",
      "logging",
      "both",
      "used",
      "normal",
      "similar",
      "family",
      "but",
      "accepts",
      "one",
      "parameter",
      "tags",
      "info",
      "prints",
      "information",
      "warn",
      "warning",
      "paid",
      "attention",
      "error",
      "necessarily",
      "halting",
      "program",
      "signals",
      "significant",
      "problems",
      "success",
      "message",
      "report",
      "takes",
      "ReportingSeverity",
      "value",
      "ignore",
      "throw",
      "and",
      "reports",
      "according",
      "severity",
      "word",
      "formatter",
      "Beware",
      "even",
      "when",
      "doesn",
      "hang",
      "likely",
      "going",
      "cause",
      "confusion",
      "When",
      "users",
      "inspect",
      "logs",
      "find",
      "ERROR",
      "build",
      "succeeds",
      "they",
      "will",
      "assume",
      "something",
      "wrong",
      "Use",
      "sparingly",
      "uses",
      "printing",
      "immediately",
      "before",
      "throwing",
      "user",
      "set",
      "reporting",
      "onBrokenLink",
      "etc",
      "addition",
      "color",
      "entire",
      "better",
      "you",
      "large",
      "blocks",
      "help",
      "Using",
      "evaluates",
      "expressions",
      "embedded",
      "returns",
      "new",
      "while",
      "other",
      "Below",
      "typical",
      "usage",
      "import",
      "from",
      "docusaurus",
      "Hello",
      "money",
      "dollars",
      "Here",
      "items",
      "length",
      "item",
      "shelf",
      "buy",
      "anything",
      "enter",
      "where",
      "quit",
      "press",
      "Ctrl",
      "expression",
      "optionally",
      "preceded",
      "flag",
      "form",
      "few",
      "lowercase",
      "letters",
      "followed",
      "equals",
      "sign",
      "directly",
      "preceding",
      "any",
      "printed",
      "out",
      "Otherwise",
      "formatted",
      "with",
      "formatters",
      "array",
      "join",
      "note",
      "automatically",
      "gets",
      "leading",
      "line",
      "end",
      "Each",
      "member",
      "itself",
      "bullet",
      "would",
      "see",
      "above",
      "output",
      "terminal",
      "containing"
    ],
    "url": "/docs/api/misc/logger/logger",
    "path": "api/misc/logger/logger.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "README",
    "title": "Plugin Method References",
    "description": "",
    "content": "Plugin Method References :::warning This section is a work in progress. Anchor links or even URLs are not guaranteed to be stable. ::: Plugin APIs are shared by themes and plugins—themes are loaded just like plugins. Plugin module {#plugin-module} Every plugin is imported as a module. The module is expected to have the following members: A default export: the constructor function for the plugin. Named exports: the static methods called before plugins are initialized. Plugin constructor {#plugin-constructor} The plugin module's default export is a constructor function with the signature (context: LoadContext, options: PluginOptions) => Plugin | Promise<Plugin>. context {#context} context is plugin-agnostic, and the same object will be passed into all plugins used for a Docusaurus website. The context object contains the following fields: `ts type LoadContext = { siteDir: string; generatedFilesDir: string; siteConfig: DocusaurusConfig; outDir: string; baseUrl: string; }; ` options {#options} options are the second optional parameter when the plugins are used. options are plugin-specific and are specified by users when they use them in docusaurus.config.js. If there's a validateOptions function exported, the options will be validated and normalized beforehand. Alternatively, if a preset contains the plugin, the preset will then be in charge of passing the correct options into the plugin. It is up to the individual plugin to define what options it takes. Example {#example} Here's a mental model for a presumptuous plugin implementation. `js // A JavaScript function that returns an object. // context is provided by Docusaurus. Example: siteConfig can be accessed from context. // opts is the user-defined options. export default async function myPlugin(context, opts) { return { // A compulsory field used as the namespace for directories to cache // the intermediate data for each plugin. // If you're writing your own local plugin, you will want it to // be unique in order not to potentially conflict with imported plugins. // A good way will be to add your own project name within. name: 'docusaurus-my-project-cool-plugin', async loadContent() { // The loadContent hook is executed after siteConfig and env has been loaded. // You can return a JavaScript object that will be passed to contentLoaded hook. }, async contentLoaded({content, actions}) { // The contentLoaded hook is done after loadContent hook is done. // actions are set of functional API provided by Docusaurus (e.g. addRoute) }, async postBuild(props) { // After docusaurus <build> finish. }, // TODO async postStart(props) { // docusaurus <start> finish }, // TODO afterDevServer(app, server) { // https://webpack.js.org/configuration/dev-server/#devserverbefore }, // TODO beforeDevServer(app, server) { // https://webpack.js.org/configuration/dev-server/#devserverafter }, configureWebpack(config, isServer, utils, content) { // Modify internal webpack config. If returned value is an Object, it // will be merged into the final config using webpack-merge; // If the returned value is a function, it will receive the config as the 1st argument and an isServer flag as the 2nd argument. }, getPathsToWatch() { // Paths to watch. }, getThemePath() { // Returns the path to the directory where the theme components can // be found. }, getClientModules() { // Return an array of paths to the modules that are to be imported // in the client bundle. These modules are imported globally before // React even renders the initial UI. }, extendCli(cli) { // Register an extra command to enhance the CLI of Docusaurus }, injectHtmlTags({content}) { // Inject head and/or body HTML tags. }, async getTranslationFiles({content}) { // Return translation files }, translateContent({content, translationFiles}) { // translate the plugin content here }, translateThemeConfig({themeConfig, translationFiles}) { // translate the site themeConfig here }, async getDefaultCodeTranslationMessages() { // return default theme translations here }, }; } export function validateOptions({options, validate}) { const validatedOptions = validate(myValidationSchema, options); return validatedOptions; } export function validateThemeConfig({themeConfig, validate}) { const validatedThemeConfig = validate(myValidationSchema, options); return validatedThemeConfig; } `",
    "keywords": [
      "plugin",
      "method",
      "references",
      "api",
      "methods",
      "readme",
      "mdx",
      "webpack",
      "configuration",
      "dev-server",
      "or",
      "Plugin",
      "Method",
      "References",
      "warning",
      "This",
      "section",
      "work",
      "progress",
      "Anchor",
      "links",
      "even",
      "URLs",
      "are",
      "not",
      "guaranteed",
      "stable",
      "APIs",
      "shared",
      "themes",
      "and",
      "plugins",
      "loaded",
      "just",
      "like",
      "module",
      "Every",
      "imported",
      "The",
      "expected",
      "have",
      "the",
      "following",
      "members",
      "default",
      "export",
      "constructor",
      "function",
      "for",
      "Named",
      "exports",
      "static",
      "called",
      "before",
      "initialized",
      "with",
      "signature",
      "context",
      "LoadContext",
      "options",
      "PluginOptions",
      "Promise",
      "agnostic",
      "same",
      "object",
      "will",
      "passed",
      "into",
      "all",
      "used",
      "Docusaurus",
      "website",
      "contains",
      "fields",
      "type",
      "siteDir",
      "string",
      "generatedFilesDir",
      "siteConfig",
      "DocusaurusConfig",
      "outDir",
      "baseUrl",
      "second",
      "optional",
      "parameter",
      "when",
      "specific",
      "specified",
      "users",
      "they",
      "use",
      "them",
      "docusaurus",
      "config",
      "there",
      "validateOptions",
      "exported",
      "validated",
      "normalized",
      "beforehand",
      "Alternatively",
      "preset",
      "then",
      "charge",
      "passing",
      "correct",
      "individual",
      "define",
      "what",
      "takes",
      "Example",
      "example",
      "Here",
      "mental",
      "model",
      "presumptuous",
      "implementation",
      "JavaScript",
      "that",
      "returns",
      "provided",
      "can",
      "accessed",
      "from",
      "opts",
      "user",
      "defined",
      "async",
      "myPlugin",
      "return",
      "compulsory",
      "field",
      "namespace",
      "directories",
      "cache",
      "intermediate",
      "data",
      "each",
      "you",
      "writing",
      "your",
      "own",
      "local",
      "want",
      "unique",
      "order",
      "potentially",
      "conflict",
      "good",
      "way",
      "add",
      "project",
      "name",
      "within",
      "cool",
      "loadContent",
      "hook",
      "executed",
      "after",
      "env",
      "has",
      "been",
      "You",
      "contentLoaded",
      "content",
      "actions",
      "done",
      "set",
      "functional",
      "API",
      "addRoute",
      "postBuild",
      "props",
      "After",
      "build",
      "finish",
      "TODO",
      "postStart",
      "start",
      "afterDevServer",
      "app",
      "server",
      "https",
      "org",
      "dev",
      "devserverbefore",
      "beforeDevServer",
      "devserverafter",
      "configureWebpack",
      "isServer",
      "utils",
      "Modify",
      "internal",
      "returned",
      "value",
      "Object",
      "merged",
      "final",
      "using",
      "merge",
      "receive",
      "argument",
      "flag",
      "getPathsToWatch",
      "Paths",
      "watch",
      "getThemePath",
      "Returns",
      "path",
      "directory",
      "where",
      "theme",
      "components",
      "found",
      "getClientModules",
      "Return",
      "array",
      "paths",
      "modules",
      "client",
      "bundle",
      "These",
      "globally",
      "React",
      "renders",
      "initial",
      "extendCli",
      "cli",
      "Register",
      "extra",
      "command",
      "enhance",
      "CLI",
      "injectHtmlTags",
      "Inject",
      "head",
      "body",
      "HTML",
      "tags",
      "getTranslationFiles",
      "translation",
      "files",
      "translateContent",
      "translationFiles",
      "translate",
      "here",
      "translateThemeConfig",
      "themeConfig",
      "site",
      "translations",
      "validate",
      "const",
      "validatedOptions",
      "myValidationSchema",
      "validateThemeConfig",
      "validatedThemeConfig"
    ],
    "url": "/docs/api/plugin-methods/README",
    "path": "api/plugin-methods/README.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "extend-infrastructure",
    "title": "Extending infrastructure",
    "description": "",
    "content": "Extending infrastructure Docusaurus has some infrastructure like hot reloading, CLI, and swizzling, that can be extended by external plugins. getPathsToWatch() {#getPathsToWatch} Specifies the paths to watch for plugins and themes. The paths are watched by the dev server so that the plugin lifecycles are reloaded when contents in the watched paths change. Note that the plugins and themes modules are initially called with context and options from Node, which you may use to find the necessary directory information about the site. Use this for files that are consumed server-side, because theme files are automatically watched by Webpack dev server. Example: `js title=\"docusaurus-plugin/src/index.js\" import path from 'path'; export default function (context, options) { return { name: 'docusaurus-plugin', // highlight-start getPathsToWatch() { const contentPath = path.resolve(context.siteDir, options.path); return [${contentPath}//*.{ts,tsx}]; }, // highlight-end }; } ` extendCli(cli) {#extendCli} Register an extra command to enhance the CLI of Docusaurus. cli is a commander object. :::warning The commander version matters! We use commander v5, and make sure you are referring to the right version documentation for available APIs. ::: Example: `js title=\"docusaurus-plugin/src/index.js\" export default function (context, options) { return { name: 'docusaurus-plugin', // highlight-start extendCli(cli) { cli .command('roll') .description('Roll a random number between 1 and 1000') .action(() => { console.log(Math.floor(Math.random() * 1000 + 1)); }); }, // highlight-end }; } ` getThemePath() {#getThemePath} Returns the path to the directory where the theme components can be found. When your users call swizzle, getThemePath is called and its returned path is used to find your theme components. Relative paths are resolved against the folder containing the entry point. For example, your getThemePath can be: `js title=\"my-theme/src/index.js\" export default function (context, options) { return { name: 'my-theme', // highlight-start getThemePath() { return './theme'; }, // highlight-end }; } ` getTypeScriptThemePath() {#getTypeScriptThemePath} Similar to getThemePath(), it should return the path to the directory where the source code of TypeScript theme components can be found. This path is purely for swizzling TypeScript theme components, and theme components under this path will not be resolved by Webpack. Therefore, it is not a replacement for getThemePath(). Typically, you can make the path returned by getTypeScriptThemePath() be your source directory, and make the path returned by getThemePath() be the compiled JavaScript output. :::tip For TypeScript theme authors: you are strongly advised to make your compiled output as human-readable as possible. Only strip type annotations and don't transpile any syntaxes, because they will be handled by Webpack's Babel loader based on the targeted browser versions. You should also format these files with Prettier. Remember—JS files can and will be directly consumed by your users. ::: Example: `js title=\"my-theme/src/index.js\" export default function (context, options) { return { name: 'my-theme', // highlight-start getThemePath() { // Where compiled JavaScript output lives return '../lib/theme'; }, getTypeScriptThemePath() { // Where TypeScript source code lives return '../src/theme'; }, // highlight-end }; } ` getSwizzleComponentList() {#getSwizzleComponentList} This is a static method, not attached to any plugin instance. Returns a list of stable components that are considered safe for swizzling. These components will be swizzlable without --danger. All components are considered unstable by default. If an empty array is returned, all components are considered unstable. If undefined is returned, all components are considered stable. `js title=\"my-theme/src/index.js\" export function getSwizzleComponentList() { return [ 'CodeBlock', 'DocSidebar', 'Footer', 'NotFound', 'SearchBar', 'hooks/useTheme', 'prism-include-languages', ]; } `",
    "keywords": [
      "extending",
      "infrastructure",
      "api",
      "plugin",
      "methods",
      "extend",
      "mdx",
      "src",
      "index",
      "theme",
      "lib",
      "useTheme",
      "Extending",
      "Docusaurus",
      "has",
      "some",
      "like",
      "hot",
      "reloading",
      "CLI",
      "and",
      "swizzling",
      "that",
      "can",
      "extended",
      "external",
      "plugins",
      "getPathsToWatch",
      "Specifies",
      "the",
      "paths",
      "watch",
      "for",
      "themes",
      "The",
      "are",
      "watched",
      "dev",
      "server",
      "lifecycles",
      "reloaded",
      "when",
      "contents",
      "change",
      "Note",
      "modules",
      "initially",
      "called",
      "with",
      "context",
      "options",
      "from",
      "Node",
      "which",
      "you",
      "may",
      "use",
      "find",
      "necessary",
      "directory",
      "information",
      "about",
      "site",
      "Use",
      "this",
      "files",
      "consumed",
      "side",
      "because",
      "automatically",
      "Webpack",
      "Example",
      "title",
      "docusaurus",
      "import",
      "path",
      "export",
      "default",
      "function",
      "return",
      "name",
      "highlight",
      "start",
      "const",
      "contentPath",
      "resolve",
      "siteDir",
      "tsx",
      "end",
      "extendCli",
      "cli",
      "Register",
      "extra",
      "command",
      "enhance",
      "commander",
      "object",
      "warning",
      "version",
      "matters",
      "make",
      "sure",
      "referring",
      "right",
      "documentation",
      "available",
      "APIs",
      "roll",
      "description",
      "Roll",
      "random",
      "number",
      "between",
      "action",
      "console",
      "log",
      "Math",
      "floor",
      "getThemePath",
      "Returns",
      "where",
      "components",
      "found",
      "When",
      "your",
      "users",
      "call",
      "swizzle",
      "its",
      "returned",
      "used",
      "Relative",
      "resolved",
      "against",
      "folder",
      "containing",
      "entry",
      "point",
      "For",
      "example",
      "Similar",
      "should",
      "source",
      "code",
      "TypeScript",
      "This",
      "purely",
      "under",
      "will",
      "not",
      "Therefore",
      "replacement",
      "Typically",
      "compiled",
      "JavaScript",
      "output",
      "tip",
      "authors",
      "strongly",
      "advised",
      "human",
      "readable",
      "possible",
      "Only",
      "strip",
      "type",
      "annotations",
      "don",
      "transpile",
      "any",
      "syntaxes",
      "they",
      "handled",
      "Babel",
      "loader",
      "based",
      "targeted",
      "browser",
      "versions",
      "You",
      "also",
      "format",
      "these",
      "Prettier",
      "Remember",
      "directly",
      "Where",
      "lives",
      "static",
      "method",
      "attached",
      "instance",
      "list",
      "stable",
      "considered",
      "safe",
      "These",
      "swizzlable",
      "without",
      "danger",
      "All",
      "unstable",
      "empty",
      "array",
      "all",
      "undefined",
      "CodeBlock",
      "DocSidebar",
      "Footer",
      "NotFound",
      "SearchBar",
      "hooks",
      "prism",
      "include",
      "languages"
    ],
    "url": "/docs/api/plugin-methods/extend-infrastructure",
    "path": "api/plugin-methods/extend-infrastructure.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "i18n-lifecycles",
    "title": "I18n lifecycles",
    "description": "",
    "content": "I18n lifecycles Plugins use these lifecycles to load i18n-related data. getTranslationFiles({content}) {#getTranslationFiles} Plugins declare the JSON translation files they want to use. Returns translation files {path: string, content: ChromeI18nJSON}: path: relative to the plugin localized folder i18n/[locale]/[pluginName]. Extension .json should be omitted to remain generic. content: using the Chrome i18n JSON format. These files will be written by the write-translations CLI to the plugin i18n subfolder, and will be read in the appropriate locale before calling translateContent() and translateThemeConfig() Example: `js title=\"my-plugin.js\" export default function (context, options) { return { name: 'my-plugin', // highlight-start async getTranslationFiles({content}) { return [ { path: 'sidebar-labels', content: { someSidebarLabel: { message: 'Some Sidebar Label', description: 'A label used in my plugin in the sidebar', }, someLabelFromContent: content.myLabel, }, }, ]; }, // highlight-end }; } ` translateContent({content,translationFiles}) {#translateContent} Translate the plugin content, using the localized translation files. Returns the localized plugin content. The contentLoaded() lifecycle will be called with the localized plugin content returned by translateContent(). Example: `js title=\"my-plugin.js\" export default function (context, options) { return { name: 'my-plugin', // highlight-start translateContent({content, translationFiles}) { const myTranslationFile = translationFiles.find( (f) => f.path === 'myTranslationFile', ); return { ...content, someContentLabel: myTranslationFile.someContentLabel.message, }; }, // highlight-end }; } ` translateThemeConfig({themeConfig,translationFiles}) {#translateThemeConfig} Translate the site themeConfig labels, using the localized translation files. Returns the localized themeConfig. Example: `js title=\"my-plugin.js\" export default function (context, options) { return { name: 'my-theme', // highlight-start translateThemeConfig({themeConfig, translationFiles}) { const myTranslationFile = translationFiles.find( (f) => f.path === 'myTranslationFile', ); return { ...themeConfig, someThemeConfigLabel: myTranslationFile.someThemeConfigLabel.message, }; }, // highlight-end }; } ` async getDefaultCodeTranslationMessages() {#getDefaultCodeTranslationMessages} Themes using the <Translate> API can provide default code translation messages. It should return messages in Record<string, string>, where keys are translation IDs and values are messages (without the description) localized using the site's current locale. Example: `js title=\"my-plugin.js\" export default function (context, options) { return { name: 'my-theme', // highlight-start async getDefaultCodeTranslationMessages() { return readJsonFile(${context.i18n.currentLocale}.json); }, // highlight-end }; } `",
    "keywords": [
      "i18n",
      "lifecycles",
      "api",
      "plugin",
      "methods",
      "mdx",
      "I18n",
      "Plugins",
      "use",
      "these",
      "load",
      "related",
      "data",
      "getTranslationFiles",
      "content",
      "declare",
      "the",
      "JSON",
      "translation",
      "files",
      "they",
      "want",
      "Returns",
      "path",
      "string",
      "ChromeI18nJSON",
      "relative",
      "localized",
      "folder",
      "locale",
      "pluginName",
      "Extension",
      "json",
      "should",
      "omitted",
      "remain",
      "generic",
      "using",
      "Chrome",
      "format",
      "These",
      "will",
      "written",
      "write",
      "translations",
      "CLI",
      "subfolder",
      "and",
      "read",
      "appropriate",
      "before",
      "calling",
      "translateContent",
      "translateThemeConfig",
      "Example",
      "title",
      "export",
      "default",
      "function",
      "context",
      "options",
      "return",
      "name",
      "highlight",
      "start",
      "async",
      "sidebar",
      "labels",
      "someSidebarLabel",
      "message",
      "Some",
      "Sidebar",
      "Label",
      "description",
      "label",
      "used",
      "someLabelFromContent",
      "myLabel",
      "end",
      "translationFiles",
      "Translate",
      "The",
      "contentLoaded",
      "lifecycle",
      "called",
      "with",
      "returned",
      "const",
      "myTranslationFile",
      "find",
      "someContentLabel",
      "themeConfig",
      "site",
      "theme",
      "someThemeConfigLabel",
      "Themes",
      "API",
      "can",
      "provide",
      "code",
      "messages",
      "Record",
      "where",
      "keys",
      "are",
      "IDs",
      "values",
      "without",
      "current",
      "readJsonFile",
      "currentLocale"
    ],
    "url": "/docs/api/plugin-methods/i18n-lifecycles",
    "path": "api/plugin-methods/i18n-lifecycles.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "lifecycle-apis",
    "title": "Lifecycle APIs",
    "description": "",
    "content": "Lifecycle APIs During the build, plugins are loaded in parallel to fetch their own contents and render them to routes. Plugins may also configure webpack or post-process the generated files. async loadContent() {#loadContent} Plugins should use this lifecycle to fetch from data sources (filesystem, remote API, headless CMS, etc.) or do some server processing. The return value is the content it needs. For example, this plugin below returns a random integer between 1 and 10 as content. `js title=\"docusaurus-plugin/src/index.js\" export default function (context, options) { return { name: 'docusaurus-plugin', // highlight-start async loadContent() { return 1 + Math.floor(Math.random() * 10); }, // highlight-end }; } ` async contentLoaded({content, actions}) {#contentLoaded} The data that was loaded in loadContent will be consumed in contentLoaded. It can be rendered to routes, registered as global data, etc. content {#content} contentLoaded will be called _after_ loadContent is done. The return value of loadContent() will be passed to contentLoaded as content. actions {#actions} actions contain three functions: addRoute(config: RouteConfig): void {#addRoute} Create a route to add to the website. `ts export type RouteConfig = { / With leading slash. Trailing slash will be normalized by config. */ path: string; / Component used to render this route, a path that the bundler can require. */ component: string; / Props. Each entry should be [propName]: pathToPropModule (created with createData) */ modules?: RouteModules; / The route context will wrap the component. Use useRouteContext to retrieve what's declared here. Note that all custom route context declared here will be namespaced under {@link RouteContext.data}. */ context?: RouteModules; / Nested routes config, useful for \"layout routes\" having subroutes. */ routes?: RouteConfig[]; / React router config option: exact routes would not match subroutes. */ exact?: boolean; / React router config option: strict routes are sensitive to the presence of a trailing slash. */ strict?: boolean; / Used to sort routes. Higher-priority routes will be matched first. */ priority?: number; / Optional route metadata */ metadata?: RouteMetadata; / Extra props; will be available on the client side. */ [propName: string]: unknown; }; / Plugin authors can assign extra metadata to the created routes It is only available on the Node.js side, and not sent to the browser Optional: plugin authors are encouraged but not required to provide it * Some plugins might use this data to provide additional features. This is the case of the sitemap plugin to provide support for \"lastmod\". See also: https://github.com/facebook/docusaurus/pull/9954 */ export type RouteMetadata = { / The source code file path that led to the creation of the current route In official content plugins, this is usually a Markdown or React file This path is expected to be relative to the site directory */ sourceFilePath?: string; / The last updated date of this route This is generally read from the Git history of the sourceFilePath but can also be provided through other means (usually front matter) * This has notably been introduced for adding \"lastmod\" support to the sitemap plugin, see https://github.com/facebook/docusaurus/pull/9954 */ lastUpdatedAt?: number; }; type RouteModules = { [module: string]: Module | RouteModules | RouteModules[]; }; type Module = | { path: string; __import?: boolean; query?: ParsedUrlQueryInput; } | string; ` createData(name: string, data: any): Promise<string> {#createData} A declarative callback to create static data (generally JSON or string) which can later be provided to your routes as props. Takes the file name and data to be stored, and returns the actual data file's path. For example, this plugin below creates a /friends page which displays Your friends are: Yangshun, Sebastien: `jsx title=\"website/src/components/Friends.js\" import React from 'react'; export default function FriendsComponent({friends}) { return <div>Your friends are {friends.join(',')}</div>; } ` `js title=\"docusaurus-friends-plugin/src/index.js\" export default function friendsPlugin(context, options) { return { name: 'docusaurus-friends-plugin', // highlight-start async contentLoaded({content, actions}) { const {createData, addRoute} = actions; // Create friends.json const friends = ['Yangshun', 'Sebastien']; const friendsJsonPath = await createData( 'friends.json', JSON.stringify(friends), ); // Add the '/friends' routes, and ensure it receives the friends props addRoute({ path: '/friends', component: '@site/src/components/Friends.js', modules: { // propName -> JSON file path friends: friendsJsonPath, }, exact: true, }); }, // highlight-end }; } ` setGlobalData(data: any): void {#setGlobalData} This function permits one to create some global plugin data that can be read from any page, including the pages created by other plugins, and your theme layout. This data becomes accessible to your client-side/theme code through the useGlobalData and usePluginData hooks. :::warning Global data is... global: its size affects the loading time of all pages of your site, so try to keep it small. Prefer createData and page-specific data whenever possible. ::: For example, this plugin below creates a /friends page which displays Your friends are: Yangshun, Sebastien: `jsx title=\"website/src/components/Friends.js\" import React from 'react'; import {usePluginData} from '@docusaurus/useGlobalData'; export default function FriendsComponent() { const {friends} = usePluginData('docusaurus-friends-plugin'); return <div>Your friends are {friends.join(',')}</div>; } ` `js title=\"docusaurus-friends-plugin/src/index.js\" export default function friendsPlugin(context, options) { return { name: 'docusaurus-friends-plugin', // highlight-start async contentLoaded({content, actions}) { const {setGlobalData, addRoute} = actions; // Create friends global data setGlobalData({friends: ['Yangshun', 'Sebastien']}); // Add the '/friends' routes addRoute({ path: '/friends', component: '@site/src/components/Friends.js', exact: true, }); }, // highlight-end }; } ` configureWebpack(config, isServer, utils, content) {#configureWebpack} Modifies the internal webpack config. If the return value is a JavaScript object, it will be merged into the final config using webpack-merge. If it is a function, it will be called and receive config as the first argument and an isServer flag as the second argument. :::warning The API of configureWebpack will be modified in the future to accept an object (configureWebpack({config, isServer, utils, content})) ::: config {#config} configureWebpack is called with config generated according to client/server build. You may treat this as the base config to be merged with. isServer {#isServer} configureWebpack will be called both in server build and in client build. The server build receives true and the client build receives false as isServer. utils {#utils} configureWebpack also receives an util object: getStyleLoaders(isServer: boolean, cssOptions: {[key: string]: any}): Loader[] getJSLoader(isServer: boolean, cacheOptions?: {}): Loader | null You may use them to return your webpack configuration conditionally. For example, this plugin below modify the webpack config to transpile .foo files. `js title=\"docusaurus-plugin/src/index.js\" export default function (context, options) { return { name: 'custom-docusaurus-plugin', // highlight-start configureWebpack(config, isServer, utils) { const {getJSLoader} = utils; return { module: { rules: [ { test: /\\.foo$/, use: [getJSLoader(isServer), 'my-custom-webpack-loader'], }, ], }, }; }, // highlight-end }; } ` content {#content-1} configureWebpack will be called both with the content loaded by the plugin. Merge strategy {#merge-strategy} We merge the Webpack configuration parts of plugins into the global Webpack config using webpack-merge. It is possible to specify the merge strategy. For example, if you want a webpack rule to be prepended instead of appended: `js title=\"docusaurus-plugin/src/index.js\" export default function (context, options) { return { name: 'custom-docusaurus-plugin', configureWebpack(config, isServer, utils) { return { // highlight-start mergeStrategy: {'module.rules': 'prepend'}, module: {rules: [myRuleToPrepend]}, // highlight-end }; }, }; } ` Read the webpack-merge strategy doc for more details. Configuring dev server {#configuring-dev-server} The dev server can be configured through returning a devServer field. `js title=\"docusaurus-plugin/src/index.js\" export default function (context, options) { return { name: 'custom-docusaurus-plugin', configureWebpack(config, isServer, utils) { return { // highlight-start devServer: { open: '/docs', // Opens localhost:3000/docs instead of localhost:3000/ }, // highlight-end }; }, }; } ` configurePostCss(options) {#configurePostCss} Modifies postcssOptions of postcss-loader during the generation of the client bundle. Should return the mutated postcssOptions. By default, postcssOptions looks like this: `js const postcssOptions = { ident: 'postcss', plugins: [require('autoprefixer')], }; ` Example: `js title=\"docusaurus-plugin/src/index.js\" export default function (context, options) { return { name: 'docusaurus-plugin', // highlight-start configurePostCss(postcssOptions) { // Appends new PostCSS plugin. postcssOptions.plugins.push(require('postcss-import')); return postcssOptions; }, // highlight-end }; } ` postBuild(props) {#postBuild} Called when a (production) build finishes. `ts interface Props { siteDir: string; generatedFilesDir: string; siteConfig: DocusaurusConfig; outDir: string; baseUrl: string; headTags: string; preBodyTags: string; postBodyTags: string; routesPaths: string[]; routesBuildMetadata: {[location: string]: {noIndex: boolean}}; plugins: Plugin<any>[]; content: Content; } ` Example: `js title=\"docusaurus-plugin/src/index.js\" export default function (context, options) { return { name: 'docusaurus-plugin', // highlight-start async postBuild({siteConfig = {}, routesPaths = [], outDir}) { // Print out to console all the rendered routes. routesPaths.map((route) => { console.log(route); }); }, // highlight-end }; } ` injectHtmlTags({content}) {#injectHtmlTags} Inject head and/or body HTML tags to Docusaurus generated HTML. injectHtmlTags will be called both with the content loaded by the plugin. `ts function injectHtmlTags(): { headTags?: HtmlTags; preBodyTags?: HtmlTags; postBodyTags?: HtmlTags; }; type HtmlTags = string | HtmlTagObject | (string | HtmlTagObject)[]; type HtmlTagObject = { / Attributes of the HTML tag E.g. {'disabled': true, 'value': 'demo', 'rel': 'preconnect'} */ attributes?: { [attributeName: string]: string | boolean; }; / The tag name e.g. div, script, link, meta */ tagName: string; / The inner HTML */ innerHTML?: string; }; ` Example: `js title=\"docusaurus-plugin/src/index.js\" export default function (context, options) { return { name: 'docusaurus-plugin', loadContent: async () => { return {remoteHeadTags: await fetchHeadTagsFromAPI()}; }, // highlight-start injectHtmlTags({content}) { return { headTags: [ { tagName: 'link', attributes: { rel: 'preconnect', href: 'https://www.github.com', }, }, ...content.remoteHeadTags, ], preBodyTags: [ { tagName: 'script', attributes: { charset: 'utf-8', src: '/noflash.js', }, }, ], postBodyTags: [<div> This is post body </div>], }; }, // highlight-end }; } ` Tags will be added as follows: headTags will be inserted before the closing </head> tag after scripts added by config. preBodyTags will be inserted after the opening <body> tag before any child elements. postBodyTags will be inserted before the closing </body> tag after all child elements. getClientModules() {#getClientModules} Returns an array of paths to the client modules that are to be imported into the client bundle. As an example, to make your theme load a customCss or customJs file path from options passed in by the user: `js title=\"my-theme/src/index.js\" export default function (context, options) { const {customCss, customJs} = options || {}; return { name: 'name-of-my-theme', // highlight-start getClientModules() { return [customCss, customJs]; }, // highlight-end }; } `",
    "keywords": [
      "lifecycle",
      "apis",
      "api",
      "plugin",
      "methods",
      "mdx",
      "src",
      "index",
      "github",
      "facebook",
      "docusaurus",
      "pull",
      "9954",
      "friends",
      "components",
      "Friends",
      "div",
      "theme",
      "useGlobalData",
      "server",
      "docs",
      "or",
      "www",
      "noflash",
      "head",
      "body",
      "Lifecycle",
      "APIs",
      "During",
      "the",
      "build",
      "plugins",
      "are",
      "loaded",
      "parallel",
      "fetch",
      "their",
      "own",
      "contents",
      "and",
      "render",
      "them",
      "routes",
      "Plugins",
      "may",
      "also",
      "configure",
      "webpack",
      "post",
      "process",
      "generated",
      "files",
      "async",
      "loadContent",
      "should",
      "use",
      "this",
      "from",
      "data",
      "sources",
      "filesystem",
      "remote",
      "API",
      "headless",
      "CMS",
      "etc",
      "some",
      "processing",
      "The",
      "return",
      "value",
      "content",
      "needs",
      "For",
      "example",
      "below",
      "returns",
      "random",
      "integer",
      "between",
      "title",
      "export",
      "default",
      "function",
      "context",
      "options",
      "name",
      "highlight",
      "start",
      "Math",
      "floor",
      "end",
      "contentLoaded",
      "actions",
      "that",
      "was",
      "will",
      "consumed",
      "can",
      "rendered",
      "registered",
      "global",
      "called",
      "_after_",
      "done",
      "passed",
      "contain",
      "three",
      "functions",
      "addRoute",
      "config",
      "RouteConfig",
      "void",
      "Create",
      "route",
      "add",
      "website",
      "type",
      "With",
      "leading",
      "slash",
      "Trailing",
      "normalized",
      "path",
      "string",
      "Component",
      "used",
      "bundler",
      "require",
      "component",
      "Props",
      "Each",
      "entry",
      "propName",
      "pathToPropModule",
      "created",
      "with",
      "createData",
      "modules",
      "RouteModules",
      "wrap",
      "Use",
      "useRouteContext",
      "retrieve",
      "what",
      "declared",
      "here",
      "Note",
      "all",
      "custom",
      "namespaced",
      "under",
      "link",
      "RouteContext",
      "Nested",
      "useful",
      "for",
      "layout",
      "having",
      "subroutes",
      "React",
      "router",
      "option",
      "exact",
      "would",
      "not",
      "match",
      "boolean",
      "strict",
      "sensitive",
      "presence",
      "trailing",
      "Used",
      "sort",
      "Higher",
      "priority",
      "matched",
      "first",
      "number",
      "Optional",
      "metadata",
      "RouteMetadata",
      "Extra",
      "props",
      "available",
      "client",
      "side",
      "unknown",
      "Plugin",
      "authors",
      "assign",
      "extra",
      "only",
      "Node",
      "sent",
      "browser",
      "encouraged",
      "but",
      "required",
      "provide",
      "Some",
      "might",
      "additional",
      "features",
      "This",
      "case",
      "sitemap",
      "support",
      "lastmod",
      "See",
      "https",
      "com",
      "source",
      "code",
      "file",
      "led",
      "creation",
      "current",
      "official",
      "usually",
      "Markdown",
      "expected",
      "relative",
      "site",
      "directory",
      "sourceFilePath",
      "last",
      "updated",
      "date",
      "generally",
      "read",
      "Git",
      "history",
      "provided",
      "through",
      "other",
      "means",
      "front",
      "matter",
      "has",
      "notably",
      "been",
      "introduced",
      "adding",
      "see",
      "lastUpdatedAt",
      "module",
      "Module",
      "__import",
      "query",
      "ParsedUrlQueryInput",
      "any",
      "Promise",
      "declarative",
      "callback",
      "create",
      "static",
      "JSON",
      "which",
      "later",
      "your",
      "Takes",
      "stored",
      "actual",
      "creates",
      "page",
      "displays",
      "Your",
      "Yangshun",
      "Sebastien",
      "jsx",
      "import",
      "react",
      "FriendsComponent",
      "join",
      "friendsPlugin",
      "const",
      "json",
      "friendsJsonPath",
      "await",
      "stringify",
      "Add",
      "ensure",
      "receives",
      "true",
      "setGlobalData",
      "permits",
      "one",
      "including",
      "pages",
      "becomes",
      "accessible",
      "usePluginData",
      "hooks",
      "warning",
      "Global",
      "its",
      "size",
      "affects",
      "loading",
      "time",
      "try",
      "keep",
      "small",
      "Prefer",
      "specific",
      "whenever",
      "possible",
      "configureWebpack",
      "isServer",
      "utils",
      "Modifies",
      "internal",
      "JavaScript",
      "object",
      "merged",
      "into",
      "final",
      "using",
      "merge",
      "receive",
      "argument",
      "flag",
      "second",
      "modified",
      "future",
      "accept",
      "according",
      "You",
      "treat",
      "base",
      "both",
      "false",
      "util",
      "getStyleLoaders",
      "cssOptions",
      "key",
      "Loader",
      "getJSLoader",
      "cacheOptions",
      "null",
      "configuration",
      "conditionally",
      "modify",
      "transpile",
      "foo",
      "rules",
      "test",
      "loader",
      "Merge",
      "strategy",
      "Webpack",
      "parts",
      "specify",
      "you",
      "want",
      "rule",
      "prepended",
      "instead",
      "appended",
      "mergeStrategy",
      "prepend",
      "myRuleToPrepend",
      "Read",
      "doc",
      "more",
      "details",
      "Configuring",
      "dev",
      "configuring",
      "configured",
      "returning",
      "devServer",
      "field",
      "open",
      "Opens",
      "localhost",
      "configurePostCss",
      "postcssOptions",
      "postcss",
      "during",
      "generation",
      "bundle",
      "Should",
      "mutated",
      "looks",
      "like",
      "ident",
      "autoprefixer",
      "Example",
      "Appends",
      "new",
      "PostCSS",
      "push",
      "postBuild",
      "Called",
      "when",
      "production",
      "finishes",
      "interface",
      "siteDir",
      "generatedFilesDir",
      "siteConfig",
      "DocusaurusConfig",
      "outDir",
      "baseUrl",
      "headTags",
      "preBodyTags",
      "postBodyTags",
      "routesPaths",
      "routesBuildMetadata",
      "location",
      "noIndex",
      "Content",
      "Print",
      "out",
      "console",
      "map",
      "log",
      "injectHtmlTags",
      "Inject",
      "HTML",
      "tags",
      "Docusaurus",
      "HtmlTags",
      "HtmlTagObject",
      "Attributes",
      "tag",
      "disabled",
      "demo",
      "rel",
      "preconnect",
      "attributes",
      "attributeName",
      "script",
      "meta",
      "tagName",
      "inner",
      "innerHTML",
      "remoteHeadTags",
      "fetchHeadTagsFromAPI",
      "href",
      "charset",
      "utf",
      "Tags",
      "added",
      "follows",
      "inserted",
      "before",
      "closing",
      "after",
      "scripts",
      "opening",
      "child",
      "elements",
      "getClientModules",
      "Returns",
      "array",
      "paths",
      "imported",
      "make",
      "load",
      "customCss",
      "customJs",
      "user"
    ],
    "url": "/docs/api/plugin-methods/lifecycle-apis",
    "path": "api/plugin-methods/lifecycle-apis.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "static-methods",
    "title": "Static methods",
    "description": "",
    "content": "Static methods Static methods are not part of the plugin instance—they are attached to the constructor function. These methods are used to validate and normalize the plugin options and theme config, which are then used as constructor parameters to initialize the plugin instance. validateOptions({options, validate}) {#validateOptions} Returns validated and normalized options for the plugin. This method is called before the plugin is initialized. You must return the options since they will be passed to the plugin during initialization. options {#options} validateOptions is called with options passed to plugin for validation and normalization. validate {#validate} validateOptions is called with validate function which takes a Joi schema and options as the arguments, returns validated and normalized options. validate will automatically handle error and validation config. :::tip Joi is recommended for validation and normalization of options. To avoid mixing Joi versions, use import {Joi} from '@docusaurus/utils-validation' ::: If you don't use Joi for validation you can throw an Error in case of invalid options and return options in case of success. `js title=\"my-plugin/src/index.js\" export default function myPlugin(context, options) { return { name: 'docusaurus-plugin', // rest of methods }; } // highlight-start export function validateOptions({options, validate}) { const validatedOptions = validate(myValidationSchema, options); return validatedOptions; } // highlight-end ` validateThemeConfig({themeConfig, validate}) {#validateThemeConfig} Return validated and normalized configuration for the theme. themeConfig {#themeConfig} validateThemeConfig is called with themeConfig provided in docusaurus.config.js for validation and normalization. validate {#validate-1} validateThemeConfig is called with validate function which takes a Joi schema and themeConfig as the arguments, returns validated and normalized options. validate will automatically handle error and validation config. :::tip Joi is recommended for validation and normalization of theme config. To avoid mixing Joi versions, use import {Joi} from '@docusaurus/utils-validation' ::: If you don't use Joi for validation you can throw an Error in case of invalid options. `js title=\"my-theme/src/index.js\" export default function myPlugin(context, options) { return { name: 'docusaurus-plugin', // rest of methods }; } // highlight-start export function validateThemeConfig({themeConfig, validate}) { const validatedThemeConfig = validate(myValidationSchema, options); return validatedThemeConfig; } // highlight-end `",
    "keywords": [
      "static",
      "methods",
      "api",
      "plugin",
      "mdx",
      "utils-validation",
      "src",
      "index",
      "Static",
      "are",
      "not",
      "part",
      "the",
      "instance",
      "they",
      "attached",
      "constructor",
      "function",
      "These",
      "used",
      "validate",
      "and",
      "normalize",
      "options",
      "theme",
      "config",
      "which",
      "then",
      "parameters",
      "initialize",
      "validateOptions",
      "Returns",
      "validated",
      "normalized",
      "for",
      "This",
      "method",
      "called",
      "before",
      "initialized",
      "You",
      "must",
      "return",
      "since",
      "will",
      "passed",
      "during",
      "initialization",
      "with",
      "validation",
      "normalization",
      "takes",
      "Joi",
      "schema",
      "arguments",
      "returns",
      "automatically",
      "handle",
      "error",
      "tip",
      "recommended",
      "avoid",
      "mixing",
      "versions",
      "use",
      "import",
      "from",
      "docusaurus",
      "utils",
      "you",
      "don",
      "can",
      "throw",
      "Error",
      "case",
      "invalid",
      "success",
      "title",
      "export",
      "default",
      "myPlugin",
      "context",
      "name",
      "rest",
      "highlight",
      "start",
      "const",
      "validatedOptions",
      "myValidationSchema",
      "end",
      "validateThemeConfig",
      "themeConfig",
      "Return",
      "configuration",
      "provided",
      "validatedThemeConfig"
    ],
    "url": "/docs/api/plugin-methods/static-methods",
    "path": "api/plugin-methods/static-methods.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "_partial-tags-file-api-ref-section",
    "title": "A partial tag definition is also valid",
    "description": "",
    "content": "Tags File {#tags-file} Use the tags plugin option to configure the path of a YAML tags file. By convention, the plugin will look for a tags.yml file at the root of your content folder(s). This file can contain a list of predefined tags. You can reference these tags by their keys in Markdown files thanks to the tags front matter. :::tip Keeping tags consistent Using a tags file, you can ensure that your tags usage is consistent across your plugin content set. Use the onInlineTags: 'throw' plugin option to enforce this consistency and prevent usage of inline tags declared on the fly. ::: Types {#tags-file-types} The YAML content of the provided tags file should respect the following shape: `tsx type Tag = { label?: string; // Tag display label permalink?: string; // Tag URL pathname segment description?: string; // Tag description displayed in the tag page }; type TagsFileInput = Record<string, Partial<Tag> | null>; ` Example {#tags-file-example} `yml title=\"tags.yml\" releases: label: 'Product releases' permalink: '/product-releases' description: 'Content related to product releases.' A partial tag definition is also valid announcements: label: 'Announcements' An empty tag definition is also valid Other attributes will be inferred from the key emptyTag: ` `md title=\"content.md\" --- tags: [releases, announcements, emptyTag] --- Title Content `",
    "keywords": [
      "partial",
      "tag",
      "definition",
      "is",
      "also",
      "valid",
      "api",
      "plugins",
      "tags",
      "file",
      "ref",
      "section",
      "mdx",
      "product-releases",
      "Tags",
      "File",
      "Use",
      "the",
      "plugin",
      "option",
      "configure",
      "path",
      "YAML",
      "convention",
      "will",
      "look",
      "for",
      "yml",
      "root",
      "your",
      "content",
      "folder",
      "This",
      "can",
      "contain",
      "list",
      "predefined",
      "You",
      "reference",
      "these",
      "their",
      "keys",
      "Markdown",
      "files",
      "thanks",
      "front",
      "matter",
      "tip",
      "Keeping",
      "consistent",
      "Using",
      "you",
      "ensure",
      "that",
      "usage",
      "across",
      "set",
      "onInlineTags",
      "throw",
      "enforce",
      "this",
      "consistency",
      "and",
      "prevent",
      "inline",
      "declared",
      "fly",
      "Types",
      "types",
      "The",
      "provided",
      "should",
      "respect",
      "following",
      "shape",
      "tsx",
      "type",
      "Tag",
      "label",
      "string",
      "display",
      "permalink",
      "URL",
      "pathname",
      "segment",
      "description",
      "displayed",
      "page",
      "TagsFileInput",
      "Record",
      "Partial",
      "null",
      "Example",
      "example",
      "title",
      "releases",
      "Product",
      "product",
      "Content",
      "related",
      "announcements",
      "Announcements",
      "empty",
      "Other",
      "attributes",
      "inferred",
      "from",
      "key",
      "emptyTag",
      "Title"
    ],
    "url": "/docs/api/plugins/_partial-tags-file-api-ref-section",
    "path": "api/plugins/_partial-tags-file-api-ref-section.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugins-overview",
    "title": "Docusaurus plugins",
    "description": "",
    "content": "Docusaurus plugins We provide official Docusaurus plugins. Content plugins {#content-plugins} These plugins are responsible for loading your site's content, and creating pages for your theme to render. @docusaurus/plugin-content-docs @docusaurus/plugin-content-blog @docusaurus/plugin-content-pages Behavior plugins {#behavior-plugins} These plugins will add a useful behavior to your Docusaurus site. @docusaurus/plugin-debug @docusaurus/plugin-sitemap @docusaurus/plugin-svgr @docusaurus/plugin-rsdoctor @docusaurus/plugin-pwa @docusaurus/plugin-client-redirects @docusaurus/plugin-ideal-image @docusaurus/plugin-google-analytics @docusaurus/plugin-google-gtag @docusaurus/plugin-google-tag-manager @docusaurus/plugin-css-cascade-layers u",
    "keywords": [
      "docusaurus",
      "plugins",
      "api",
      "overview",
      "mdx",
      "plugin-content-docs",
      "plugin-content-blog",
      "plugin-content-pages",
      "plugin-debug",
      "plugin-sitemap",
      "plugin-svgr",
      "plugin-rsdoctor",
      "plugin-pwa",
      "plugin-client-redirects",
      "plugin-ideal-image",
      "plugin-google-analytics",
      "plugin-google-gtag",
      "plugin-google-tag-manager",
      "plugin-css-cascade-layers",
      "Docusaurus",
      "provide",
      "official",
      "Content",
      "content",
      "These",
      "are",
      "responsible",
      "for",
      "loading",
      "your",
      "site",
      "and",
      "creating",
      "pages",
      "theme",
      "render",
      "plugin",
      "docs",
      "blog",
      "Behavior",
      "behavior",
      "will",
      "add",
      "useful",
      "debug",
      "sitemap",
      "svgr",
      "rsdoctor",
      "pwa",
      "client",
      "redirects",
      "ideal",
      "image",
      "google",
      "analytics",
      "gtag",
      "tag",
      "manager",
      "css",
      "cascade",
      "layers"
    ],
    "url": "/docs/api/plugins/overview",
    "path": "api/plugins/overview.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugin-client-redirects",
    "title": "📦 plugin-client-redirects",
    "description": "",
    "content": "📦 plugin-client-redirects import APITable from '@site/src/components/APITable'; Docusaurus Plugin to generate client-side redirects. This plugin will write additional HTML pages to your static site that redirect the user to your existing Docusaurus pages with JavaScript. :::warning production only This plugin is always inactive in development and only active in production because it works on the build output. ::: :::warning It is better to use server-side redirects whenever possible. Before using this plugin, you should look if your hosting provider doesn't offer this feature. ::: Installation {#installation} `bash npm2yarn npm install --save @docusaurus/plugin-client-redirects ` Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Option | Type | Default | Description | | --- | --- | --- | --- | | fromExtensions | string[] | [] | The extensions to be removed from the route after redirecting. | | toExtensions | string[] | [] | The extensions to be appended to the route after redirecting. | | redirects | <code>RedirectRule[]</code> | [] | The list of redirect rules. | | createRedirects | <code>CreateRedirectsFn</code> | undefined | A callback to create a redirect rule. Docusaurus query this callback against every path it has created, and use its return value to output more paths. | `mdx-code-block </APITable> ` :::note This plugin will also read the siteConfig.onDuplicateRoutes config to adjust its logging level when multiple files will be emitted to the same location. ::: Types {#types} RedirectRule {#RedirectRule} `ts type RedirectRule = { to: string; from: string | string[]; }; ` :::note The idea of \"from\" and \"to\" is central in this plugin. \"From\" means a path that you want to _create_, i.e. an extra HTML file that will be written; \"to\" means a path to want to redirect _to_, usually a route that Docusaurus already knows about. This is why you can have multiple \"from\" for the same \"to\": we will create multiple HTML files that all redirect to the same destination. On the other hand, one \"from\" can never have more than one \"to\": the written HTML file needs to have a determinate destination. ::: CreateRedirectsFn {#CreateRedirectsFn} `ts // The parameter path is a route that Docusaurus has already created. It can // be seen as the \"to\", and your return value is the \"from\". Returning a falsy // value will not create any redirect pages for this particular path. type CreateRedirectsFn = (path: string) => string[] | string | null | undefined; ` Example configuration {#ex-config} Here's an example configuration: `js title=\"docusaurus.config.js\" export default { plugins: [ [ '@docusaurus/plugin-client-redirects', // highlight-start { fromExtensions: ['html', 'htm'], // /myPage.html -> /myPage toExtensions: ['exe', 'zip'], // /myAsset -> /myAsset.zip (if latter exists) redirects: [ // /docs/oldDoc -> /docs/newDoc { to: '/docs/newDoc', from: '/docs/oldDoc', }, // Redirect from multiple old paths to the new path { to: '/docs/newDoc2', from: ['/docs/oldDocFrom2019', '/docs/legacyDocFrom2016'], }, ], createRedirects(existingPath) { if (existingPath.includes('/community')) { // Redirect from /docs/team/X to /community/X and /docs/support/X to /community/X return [ existingPath.replace('/community', '/docs/team'), existingPath.replace('/community', '/docs/support'), ]; } return undefined; // Return a falsy value: no redirect created }, }, // highlight-end ], ], }; `",
    "keywords": [
      "📦",
      "plugin-client-redirects",
      "api",
      "plugins",
      "plugin",
      "client",
      "redirects",
      "mdx",
      "src",
      "components",
      "APITable",
      "code",
      "myPage",
      "myAsset",
      "docs",
      "oldDoc",
      "newDoc",
      "newDoc2",
      "oldDocFrom2019",
      "legacyDocFrom2016",
      "community",
      "team",
      "support",
      "import",
      "from",
      "site",
      "Docusaurus",
      "Plugin",
      "generate",
      "side",
      "This",
      "will",
      "write",
      "additional",
      "HTML",
      "pages",
      "your",
      "static",
      "that",
      "redirect",
      "the",
      "user",
      "existing",
      "with",
      "JavaScript",
      "warning",
      "production",
      "only",
      "always",
      "inactive",
      "development",
      "and",
      "active",
      "because",
      "works",
      "build",
      "output",
      "better",
      "use",
      "server",
      "whenever",
      "possible",
      "Before",
      "using",
      "this",
      "you",
      "should",
      "look",
      "hosting",
      "provider",
      "doesn",
      "offer",
      "feature",
      "Installation",
      "installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "docusaurus",
      "Configuration",
      "configuration",
      "Accepted",
      "fields",
      "block",
      "Option",
      "Type",
      "Default",
      "Description",
      "fromExtensions",
      "string",
      "The",
      "extensions",
      "removed",
      "route",
      "after",
      "redirecting",
      "toExtensions",
      "appended",
      "RedirectRule",
      "list",
      "rules",
      "createRedirects",
      "CreateRedirectsFn",
      "undefined",
      "callback",
      "create",
      "rule",
      "query",
      "against",
      "every",
      "path",
      "has",
      "created",
      "its",
      "return",
      "value",
      "more",
      "paths",
      "note",
      "also",
      "read",
      "siteConfig",
      "onDuplicateRoutes",
      "config",
      "adjust",
      "logging",
      "level",
      "when",
      "multiple",
      "files",
      "emitted",
      "same",
      "location",
      "Types",
      "types",
      "type",
      "idea",
      "central",
      "From",
      "means",
      "want",
      "_create_",
      "extra",
      "file",
      "written",
      "_to_",
      "usually",
      "already",
      "knows",
      "about",
      "why",
      "can",
      "have",
      "for",
      "all",
      "destination",
      "other",
      "hand",
      "one",
      "never",
      "than",
      "needs",
      "determinate",
      "parameter",
      "seen",
      "Returning",
      "falsy",
      "not",
      "any",
      "particular",
      "null",
      "Example",
      "Here",
      "example",
      "title",
      "export",
      "default",
      "highlight",
      "start",
      "html",
      "htm",
      "exe",
      "zip",
      "latter",
      "exists",
      "Redirect",
      "old",
      "new",
      "existingPath",
      "includes",
      "replace",
      "Return",
      "end"
    ],
    "url": "/docs/api/plugins/plugin-client-redirects",
    "path": "api/plugins/plugin-client-redirects.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugin-content-blog",
    "title": "📦 plugin-content-blog",
    "description": "",
    "content": "📦 plugin-content-blog import APITable from '@site/src/components/APITable'; Provides the Blog feature and is the default blog plugin for Docusaurus. :::warning some features production only The feed feature works by extracting the build output, and is only active in production. ::: Installation {#installation} `bash npm2yarn npm install --save @docusaurus/plugin-content-blog ` :::tip If you use the preset @docusaurus/preset-classic, you don't need to install this plugin as a dependency. You can configure this plugin through the preset options. ::: Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | path | string | 'blog' | Path to the blog content directory on the file system, relative to site dir. | | editUrl | <code>string \\| EditUrlFn</code> | undefined | Base URL to edit your site. The final URL is computed by editUrl + relativePostPath. Using a function allows more nuanced control for each file. Omitting this variable entirely will disable edit links. | | editLocalizedFiles | boolean | false | The edit URL will target the localized file, instead of the original unlocalized file. Ignored when editUrl is a function. | | blogTitle | string | 'Blog' | Blog page title for better SEO. | | blogDescription | string | 'Blog' | Blog page meta description for better SEO. | | blogSidebarCount | <code>number \\| 'ALL'</code> | 5 | Number of blog post elements to show in the blog sidebar. 'ALL' to show all blog posts; 0 to disable. | | blogSidebarTitle | string | 'Recent posts' | Title of the blog sidebar. | | routeBasePath | string | 'blog' | URL route for the blog section of your site. DO NOT include a trailing slash. Use / to put the blog at root path. | | tagsBasePath | string | 'tags' | URL route for the tags section of your blog. Will be appended to routeBasePath. | | pageBasePath | string | 'page' | URL route for the pages section of your blog. Will be appended to routeBasePath. | | archiveBasePath | <code>string \\| null</code> | 'archive' | URL route for the archive section of your blog. Will be appended to routeBasePath. DO NOT include a trailing slash. Use null to disable generation of archive. | | authorsBasePath | string | 'authors' | URL route for the authors pages of your blog. Will be appended to path. | | include | string[] | ['/*.{md,mdx}'] | Array of glob patterns matching Markdown files to be built, relative to the content path. | | exclude | string[] | _See example configuration_ | Array of glob patterns matching Markdown files to be excluded. Serves as refinement based on the include option. | | postsPerPage | <code>number \\| 'ALL'</code> | 10 | Number of posts to show per page in the listing page. Use 'ALL' to display all posts on one listing page. | | blogListComponent | string | '@theme/BlogListPage' | Root component of the blog listing page. | | blogPostComponent | string | '@theme/BlogPostPage' | Root component of each blog post page. | | blogTagsListComponent | string | '@theme/BlogTagsListPage' | Root component of the tags list page. | | blogTagsPostsComponent | string | '@theme/BlogTagsPostsPage' | Root component of the \"posts containing tag\" page. | | blogArchiveComponent | string | '@theme/BlogArchivePage' | Root component of the blog archive page. | | blogAuthorsPostsComponent | string | '@theme/Blog/Pages/BlogAuthorsPostsPage' | Root component of the blog author page. | | blogAuthorsListComponent | string | '@theme/Blog/Pages/BlogAuthorsListPage' | Root component of the blog authors page index. | | remarkPlugins | any[] | [] | Remark plugins passed to MDX. | | rehypePlugins | any[] | [] | Rehype plugins passed to MDX. | | rehypePlugins | any[] | [] | Recma plugins passed to MDX. | | beforeDefaultRemarkPlugins | any[] | [] | Custom Remark plugins passed to MDX before the default Docusaurus Remark plugins. | | beforeDefaultRehypePlugins | any[] | [] | Custom Rehype plugins passed to MDX before the default Docusaurus Rehype plugins. | | truncateMarker | RegExp | /<!--\\struncate\\s-->/ \\| \\{\\/\\\\struncate\\s\\\\/\\}/ | Truncate marker marking where the summary ends. | | showReadingTime | boolean | true | Show estimated reading time for the blog post. | | readingTime | ReadingTimeFn | The default reading time | A callback to customize the reading time number displayed. | | authorsMapPath | string | 'authors.yml' | Path to the authors map file, relative to the blog content directory. | | feedOptions | _See below_ | {type: ['rss', 'atom']} | Blog feed. | | feedOptions.type | <code>FeedType \\| FeedType[] \\| 'all' \\| null</code> | Required | Type of feed to be generated. Use null to disable generation. | | feedOptions.createFeedItems | <code>CreateFeedItemsFn \\| undefined</code> | undefined | An optional function which can be used to transform and / or filter the items in the feed. | | feedOptions.limit | number \\| null \\| false | 20 | Limits the feed to the specified number of posts, false or null for all entries. Defaults to 20. | | feedOptions.title | string | siteConfig.title | Title of the feed. | | feedOptions.description | string | <code>\\$\\{siteConfig.title} Blog\\</code> | Description of the feed. | | feedOptions.copyright | string | undefined | Copyright message. | | feedOptions.xslt | <code>boolean \\| FeedXSLTOptions</code> | undefined | Permits to style the blog XML feeds with XSLT so that browsers render them nicely. | | feedOptions.language | string (See documentation for possible values) | undefined | Language metadata of the feed. | | sortPosts | <code>'descending' \\| 'ascending' </code> | 'descending' | Governs the direction of blog post sorting. | | processBlogPosts | <code>ProcessBlogPostsFn</code> | undefined | An optional function which can be used to transform blog posts (filter, modify, delete, etc...). | | showLastUpdateAuthor | boolean | false | Whether to display the author who last updated the blog post. | | showLastUpdateTime | boolean | false | Whether to display the last date the blog post was updated. This requires access to git history during the build, so will not work correctly with shallow clones (a common default for CI systems). With GitHub actions/checkout, usefetch-depth: 0. | | tags | string \\| false \\| null \\| undefined | tags.yml | Path to the YAML tags file listing pre-defined tags. Relative to the blog content directory. | | onInlineTags | 'ignore' \\| 'log' \\| 'warn' \\| 'throw' | warn | The plugin behavior when blog posts contain inline tags (not appearing in the list of pre-defined tags, usually tags.yml). | | onUntruncatedBlogPosts | 'ignore' \\| 'log' \\| 'warn' \\| 'throw' | warn | The plugin behavior when blog posts do not contain a truncate marker. | `mdx-code-block </APITable> ` Types {#types} EditUrlFn {#EditUrlFn} `ts type EditUrlFunction = (params: { blogDirPath: string; blogPath: string; permalink: string; locale: string; }) => string | undefined; ` ReadingTimeFn {#ReadingTimeFn} `ts type ReadingTimeOptions = { wordsPerMinute: number; }; type ReadingTimeCalculator = (params: { content: string; locale: string; frontMatter?: BlogPostFrontMatter & Record<string, unknown>; options?: ReadingTimeOptions; }) => number; type ReadingTimeFn = (params: { content: string; locale: string; frontMatter: BlogPostFrontMatter & Record<string, unknown>; defaultReadingTime: ReadingTimeCalculator; }) => number | undefined; ` FeedType {#FeedType} `ts type FeedType = 'rss' | 'atom' | 'json'; ` FeedXSLTOptions {#FeedXSLTOptions} Permits to style the blog XML feeds so that browsers render them nicely with XSLT. Use true to let the blog use its built-in .xsl and .css files to style the blog feed Use a falsy value (undefined | null | false) to disable the feature Use a string to provide a file path to a custom .xsl file relative to the blog content folder. By convention, you must provide a .css file with the exact same name. `ts type FeedXSLTOptions = | boolean | undefined | null | { rss?: string | boolean | null | undefined; atom?: string | boolean | null | undefined; }; ` CreateFeedItemsFn {#CreateFeedItemsFn} `ts type CreateFeedItemsFn = (params: { blogPosts: BlogPost[]; siteConfig: DocusaurusConfig; outDir: string; defaultCreateFeedItemsFn: CreateFeedItemsFn; }) => Promise<BlogFeedItem[]>; ` ProcessBlogPostsFn {#ProcessBlogPostsFn} `ts type ProcessBlogPostsFn = (params: { blogPosts: BlogPost[]; }) => Promise<void | BlogPost[]>; ` Example configuration {#ex-config} You can configure this plugin through preset options or plugin options. :::tip Most Docusaurus users configure this plugin through the preset options. ::: `js config-tabs // Preset Options: blog // Plugin Options: @docusaurus/plugin-content-blog const config = { path: 'blog', // Simple use-case: string editUrl // editUrl: 'https://github.com/facebook/docusaurus/edit/main/website/', // Advanced use-case: functional editUrl editUrl: ({locale, blogDirPath, blogPath, permalink}) => https://github.com/facebook/docusaurus/edit/main/website/${blogDirPath}/${blogPath}, editLocalizedFiles: false, blogTitle: 'Blog title', blogDescription: 'Blog', blogSidebarCount: 5, blogSidebarTitle: 'All our posts', routeBasePath: 'blog', include: ['/*.{md,mdx}'], exclude: [ '/_*.{js,jsx,ts,tsx,md,mdx}', '/_*/', '/*.test.{js,jsx,ts,tsx}', '/__tests__/', ], postsPerPage: 10, blogListComponent: '@theme/BlogListPage', blogPostComponent: '@theme/BlogPostPage', blogTagsListComponent: '@theme/BlogTagsListPage', blogTagsPostsComponent: '@theme/BlogTagsPostsPage', remarkPlugins: [require('./my-remark-plugin')], rehypePlugins: [], beforeDefaultRemarkPlugins: [], beforeDefaultRehypePlugins: [], truncateMarker: /<!--\\s(truncate)\\s-->/, showReadingTime: true, feedOptions: { type: '', title: '', description: '', copyright: '', language: undefined, createFeedItems: async (params) => { const {blogPosts, defaultCreateFeedItems, ...rest} = params; return defaultCreateFeedItems({ // keep only the 10 most recent blog posts in the feed blogPosts: blogPosts.filter((item, index) => index < 10), ...rest, }); }, }, }; ` Markdown front matter {#markdown-front-matter} Markdown documents can use the following Markdown front matter metadata fields, enclosed by a line --- on either side. Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | authors | Authors | undefined | List of blog post authors (or unique author). Read the authors guide for more explanations. Prefer authors over the author_* front matter fields, even for single author blog posts. | | author | string | undefined | ⚠️ Prefer using authors. The blog post author's name. | | author_url | string | undefined | ⚠️ Prefer using authors. The URL that the author's name will be linked to. This could be a GitHub, X, Facebook profile URL, etc. | | author_image_url | string | undefined | ⚠️ Prefer using authors. The URL to the author's thumbnail image. | | author_title | string | undefined | ⚠️ Prefer using authors. A description of the author. | | title | string | Markdown title | The blog post title. | | title_meta | string | frontMatter.title | The blog post SEO metadata title, used in <head> for <title> and og:title. Permits to override title when the displayed title and SEO title should be different. | | sidebar_label | string | title | A custom label for the blog sidebar, replacing the default one (title). | | date | string | File name or file creation time | The blog post creation date. If not specified, this can be extracted from the file or folder name, e.g, 2021-04-15-blog-post.mdx, 2021-04-15-blog-post/index.mdx, 2021/04/15/blog-post.mdx. Otherwise, it is the Markdown file creation time. | | tags | Tag[] | undefined | A list of strings or objects of two string fields label and permalink to tag to your post. Strings can be a reference to keys of a tags file (usually tags.yml) | | draft | boolean | false | Draft blog posts will only be available during development. | | unlisted | boolean | false | Unlisted blog posts will be available in both development and production. They will be \"hidden\" in production, not indexed, excluded from sitemaps, and can only be accessed by users having a direct link. | | hide_table_of_contents | boolean | false | Whether to hide the table of contents to the right. | | toc_min_heading_level | number | 2 | The minimum heading level shown in the table of contents. Must be between 2 and 6 and lower or equal to the max value. | | toc_max_heading_level | number | 3 | The max heading level shown in the table of contents. Must be between 2 and 6. | | keywords | string[] | undefined | Keywords meta tag, which will become the <meta name=\"keywords\" content=\"keyword1,keyword2,...\"/> in <head>, used by search engines. | | description | string | The first line of Markdown content | The description of your document, which will become the <meta name=\"description\" content=\"...\"/> and <meta property=\"og:description\" content=\"...\"/> in <head>, used by search engines. | | image | string | undefined | Cover or thumbnail image that will be used as the <meta property=\"og:image\" content=\"...\"/> in the <head>, enhancing link previews on social media and messaging platforms. | | slug | string | File path | Allows to customize the blog post URL (/<routeBasePath>/<slug>). Support multiple patterns: slug: my-blog-post, slug: /my/path/to/blog/post, slug: /. | | last_update | FrontMatterLastUpdate | undefined | Allows overriding the last update author/date. Date can be any parsable date string. | `mdx-code-block </APITable> ` `ts type FrontMatterLastUpdate = {date?: string; author?: string}; type Tag = string | {label: string; permalink: string}; // An author key references an author from the global plugin authors.yml file type AuthorKey = string; // Social platform name -> Social platform link // Example: {MyPlatform: 'https://myplatform.com/myusername'} // Pre-defined platforms // (\"x\", \"github\", \"twitter\", \"linkedin\", \"stackoverflow\", \"instagram\", \"bluesky\", \"mastodon\", \"threads\", \"twitch\", \"youtube\") accept handles: // Example: {github: 'slorber'} type AuthorSocials = Record<string, string>; type Author = { key?: AuthorKey; name: string; title?: string; url?: string; image_url?: string; socials?: AuthorSocials; }; // The front matter authors field allows various possible shapes type Authors = AuthorKey | Author | (AuthorKey | Author)[]; ` Example: `md --- title: Welcome Docusaurus authors: slorber yangshun name: Joel Marcey title: Co-creator of Docusaurus 1 url: https://github.com/JoelMarcey image_url: https://github.com/JoelMarcey.png socials: x: joelmarcey github: JoelMarcey tags: [docusaurus] description: This is my first post on Docusaurus. image: https://i.imgur.com/mErPwqL.png hide_table_of_contents: false --- A Markdown blog post ` import TagsFileApiRefSection from './_partial-tags-file-api-ref-section.mdx'; <TagsFileApiRefSection /> Authors File {#authors-file} Use the authors plugin option to configure the path of a YAML authors file. By convention, the plugin will look for a authors.yml file at the root of your blog content folder(s). This file can contain a list of predefined global blog authors. You can reference these authors by their keys in Markdown files thanks to the authors front matter. Types {#authors-file-types} The YAML content of the provided authors file should respect the following shape: `tsx type AuthorsMapInput = { [authorKey: string]: AuthorInput; }; type AuthorInput = { name?: string; title?: string; description?: string; imageURL?: string; url?: string; email?: string; page?: boolean | {permalink: string}; socials?: Record<string, string>; [customAuthorAttribute: string]: unknown; }; ` Example {#authors-file-example} `yml title=\"tags.yml\" slorber: name: Sébastien Lorber title: Docusaurus maintainer url: https://sebastienlorber.com image_url: https://github.com/slorber.png page: true socials: x: sebastienlorber github: slorber jmarcey: name: Joel Marcey title: Co-creator of Docusaurus 1 url: https://github.com/JoelMarcey image_url: https://github.com/JoelMarcey.png email: jimarcey@gmail.com page: permalink: '/joel-marcey' socials: x: joelmarcey github: JoelMarcey ` `md title=\"blog/my-blog-post.md\" --- authors: [slorber, jmarcey] --- My Blog Post Content ` i18n {#i18n} Read the i18n introduction first. Translation files location {#translation-files-location} Base path: website/i18n/[locale]/docusaurus-plugin-content-blog Multi-instance path: website/i18n/[locale]/docusaurus-plugin-content-blog-[pluginId] JSON files: extracted with docusaurus write-translations Markdown files: website/i18n/[locale]/docusaurus-plugin-content-blog Example file-system structure {#example-file-system-structure} `bash website/i18n/[locale]/docusaurus-plugin-content-blog │ │ translations for website/blog ├── authors.yml ├── first-blog-post.md ├── second-blog-post.md │ │ translations for the plugin options that will be rendered └── options.json `",
    "keywords": [
      "📦",
      "plugin-content-blog",
      "api",
      "plugins",
      "plugin",
      "content",
      "blog",
      "mdx",
      "src",
      "components",
      "APITable",
      "preset-classic",
      "code",
      "BlogListPage",
      "BlogPostPage",
      "BlogTagsListPage",
      "BlogTagsPostsPage",
      "BlogArchivePage",
      "Blog",
      "Pages",
      "BlogAuthorsPostsPage",
      "BlogAuthorsListPage",
      "checkout",
      "github",
      "facebook",
      "docusaurus",
      "edit",
      "main",
      "website",
      "__tests__",
      "my-remark-plugin",
      "index",
      "04",
      "15",
      "blog-post",
      "my",
      "path",
      "to",
      "post",
      "date",
      "myplatform",
      "myusername",
      "JoelMarcey",
      "mErPwqL",
      "_partial-tags-file-api-ref-section",
      "sebastienlorber",
      "slorber",
      "joel-marcey",
      "my-blog-post",
      "i18n",
      "docusaurus-plugin-content-blog",
      "docusaurus-plugin-content-blog-",
      "import",
      "from",
      "site",
      "Provides",
      "the",
      "feature",
      "and",
      "default",
      "for",
      "Docusaurus",
      "warning",
      "some",
      "features",
      "production",
      "only",
      "The",
      "feed",
      "works",
      "extracting",
      "build",
      "output",
      "active",
      "Installation",
      "installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "tip",
      "you",
      "use",
      "preset",
      "classic",
      "don",
      "need",
      "this",
      "dependency",
      "You",
      "can",
      "configure",
      "through",
      "options",
      "Configuration",
      "configuration",
      "Accepted",
      "fields",
      "block",
      "Name",
      "Type",
      "Default",
      "Description",
      "string",
      "Path",
      "directory",
      "file",
      "system",
      "relative",
      "dir",
      "editUrl",
      "EditUrlFn",
      "undefined",
      "Base",
      "URL",
      "your",
      "final",
      "computed",
      "relativePostPath",
      "Using",
      "function",
      "allows",
      "more",
      "nuanced",
      "control",
      "each",
      "Omitting",
      "variable",
      "entirely",
      "will",
      "disable",
      "links",
      "editLocalizedFiles",
      "boolean",
      "false",
      "target",
      "localized",
      "instead",
      "original",
      "unlocalized",
      "Ignored",
      "when",
      "blogTitle",
      "page",
      "title",
      "better",
      "SEO",
      "blogDescription",
      "meta",
      "description",
      "blogSidebarCount",
      "number",
      "ALL",
      "Number",
      "elements",
      "show",
      "sidebar",
      "all",
      "posts",
      "blogSidebarTitle",
      "Recent",
      "Title",
      "routeBasePath",
      "route",
      "section",
      "NOT",
      "include",
      "trailing",
      "slash",
      "Use",
      "put",
      "root",
      "tagsBasePath",
      "tags",
      "Will",
      "appended",
      "pageBasePath",
      "pages",
      "archiveBasePath",
      "null",
      "archive",
      "generation",
      "authorsBasePath",
      "authors",
      "Array",
      "glob",
      "patterns",
      "matching",
      "Markdown",
      "files",
      "built",
      "exclude",
      "_See",
      "example",
      "configuration_",
      "excluded",
      "Serves",
      "refinement",
      "based",
      "option",
      "postsPerPage",
      "per",
      "listing",
      "display",
      "one",
      "blogListComponent",
      "theme",
      "Root",
      "component",
      "blogPostComponent",
      "list",
      "containing",
      "tag",
      "blogArchiveComponent",
      "author",
      "remarkPlugins",
      "any",
      "Remark",
      "passed",
      "MDX",
      "rehypePlugins",
      "Rehype",
      "Recma",
      "Custom",
      "before",
      "truncateMarker",
      "RegExp",
      "struncate",
      "Truncate",
      "marker",
      "marking",
      "where",
      "summary",
      "ends",
      "showReadingTime",
      "true",
      "Show",
      "estimated",
      "reading",
      "time",
      "readingTime",
      "ReadingTimeFn",
      "callback",
      "customize",
      "displayed",
      "authorsMapPath",
      "yml",
      "map",
      "feedOptions",
      "below_",
      "type",
      "rss",
      "atom",
      "FeedType",
      "Required",
      "generated",
      "createFeedItems",
      "CreateFeedItemsFn",
      "optional",
      "which",
      "used",
      "transform",
      "filter",
      "items",
      "limit",
      "Limits",
      "specified",
      "entries",
      "Defaults",
      "siteConfig",
      "copyright",
      "Copyright",
      "message",
      "xslt",
      "FeedXSLTOptions",
      "Permits",
      "style",
      "XML",
      "feeds",
      "with",
      "XSLT",
      "that",
      "browsers",
      "render",
      "them",
      "nicely",
      "language",
      "See",
      "documentation",
      "possible",
      "values",
      "Language",
      "metadata",
      "sortPosts",
      "descending",
      "ascending",
      "Governs",
      "direction",
      "sorting",
      "processBlogPosts",
      "ProcessBlogPostsFn",
      "modify",
      "delete",
      "etc",
      "showLastUpdateAuthor",
      "Whether",
      "who",
      "last",
      "updated",
      "showLastUpdateTime",
      "was",
      "This",
      "requires",
      "access",
      "git",
      "history",
      "during",
      "not",
      "work",
      "correctly",
      "shallow",
      "clones",
      "common",
      "systems",
      "With",
      "GitHub",
      "actions",
      "usefetch",
      "depth",
      "YAML",
      "pre",
      "defined",
      "Relative",
      "onInlineTags",
      "ignore",
      "log",
      "warn",
      "throw",
      "behavior",
      "contain",
      "inline",
      "appearing",
      "usually",
      "truncate",
      "Types",
      "types",
      "EditUrlFunction",
      "params",
      "blogDirPath",
      "blogPath",
      "permalink",
      "locale",
      "ReadingTimeOptions",
      "wordsPerMinute",
      "frontMatter",
      "BlogPostFrontMatter",
      "Record",
      "unknown",
      "defaultReadingTime",
      "json",
      "let",
      "its",
      "xsl",
      "css",
      "falsy",
      "value",
      "provide",
      "custom",
      "folder",
      "convention",
      "must",
      "exact",
      "same",
      "name",
      "blogPosts",
      "BlogPost",
      "DocusaurusConfig",
      "outDir",
      "Promise",
      "BlogFeedItem",
      "void",
      "Example",
      "config",
      "Most",
      "users",
      "tabs",
      "Preset",
      "Options",
      "Plugin",
      "const",
      "Simple",
      "case",
      "https",
      "com",
      "Advanced",
      "functional",
      "All",
      "our",
      "jsx",
      "tsx",
      "test",
      "require",
      "remark",
      "async",
      "rest",
      "return",
      "keep",
      "most",
      "recent",
      "item",
      "front",
      "matter",
      "markdown",
      "documents",
      "following",
      "enclosed",
      "line",
      "either",
      "side",
      "Authors",
      "List",
      "unique",
      "Read",
      "guide",
      "explanations",
      "Prefer",
      "over",
      "author_",
      "even",
      "single",
      "using",
      "author_url",
      "linked",
      "could",
      "Facebook",
      "profile",
      "author_image_url",
      "thumbnail",
      "image",
      "author_title",
      "title_meta",
      "head",
      "override",
      "should",
      "different",
      "sidebar_label",
      "label",
      "replacing",
      "File",
      "creation",
      "extracted",
      "Otherwise",
      "Tag",
      "strings",
      "objects",
      "two",
      "Strings",
      "reference",
      "keys",
      "draft",
      "Draft",
      "available",
      "development",
      "unlisted",
      "Unlisted",
      "both",
      "They",
      "hidden",
      "indexed",
      "sitemaps",
      "accessed",
      "having",
      "direct",
      "link",
      "hide",
      "table",
      "contents",
      "right",
      "minimum",
      "heading",
      "level",
      "shown",
      "Must",
      "between",
      "lower",
      "equal",
      "max",
      "keywords",
      "Keywords",
      "become",
      "keyword1",
      "keyword2",
      "search",
      "engines",
      "first",
      "document",
      "property",
      "Cover",
      "enhancing",
      "previews",
      "social",
      "media",
      "messaging",
      "platforms",
      "slug",
      "Allows",
      "Support",
      "multiple",
      "last_update",
      "overriding",
      "update",
      "Date",
      "parsable",
      "key",
      "references",
      "global",
      "AuthorKey",
      "Social",
      "platform",
      "MyPlatform",
      "Pre",
      "twitter",
      "linkedin",
      "stackoverflow",
      "instagram",
      "bluesky",
      "mastodon",
      "threads",
      "twitch",
      "youtube",
      "accept",
      "handles",
      "AuthorSocials",
      "Author",
      "url",
      "image_url",
      "socials",
      "field",
      "various",
      "shapes",
      "Welcome",
      "yangshun",
      "Joel",
      "Marcey",
      "creator",
      "png",
      "joelmarcey",
      "imgur",
      "_partial",
      "ref",
      "look",
      "predefined",
      "these",
      "their",
      "thanks",
      "provided",
      "respect",
      "shape",
      "AuthorsMapInput",
      "authorKey",
      "AuthorInput",
      "imageURL",
      "email",
      "bastien",
      "Lorber",
      "maintainer",
      "jmarcey",
      "jimarcey",
      "gmail",
      "joel",
      "marcey",
      "Post",
      "Content",
      "introduction",
      "Translation",
      "location",
      "translation",
      "Multi",
      "instance",
      "pluginId",
      "JSON",
      "write",
      "translations",
      "structure",
      "second",
      "rendered"
    ],
    "url": "/docs/api/plugins/plugin-content-blog",
    "path": "api/plugins/plugin-content-blog.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugin-content-docs",
    "title": "📦 plugin-content-docs",
    "description": "",
    "content": "📦 plugin-content-docs import APITable from '@site/src/components/APITable'; Provides the Docs functionality and is the default docs plugin for Docusaurus. Installation {#installation} `bash npm2yarn npm install --save @docusaurus/plugin-content-docs ` :::tip If you use the preset @docusaurus/preset-classic, you don't need to install this plugin as a dependency. You can configure this plugin through the preset options. ::: Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | path | string | 'docs' | Path to the docs content directory on the file system, relative to site directory. | | editUrl | <code>string \\| EditUrlFunction</code> | undefined | Base URL to edit your site. The final URL is computed by editUrl + relativeDocPath. Using a function allows more nuanced control for each file. Omitting this variable entirely will disable edit links. | | editLocalizedFiles | boolean | false | The edit URL will target the localized file, instead of the original unlocalized file. Ignored when editUrl is a function. | | editCurrentVersion | boolean | false | The edit URL will always target the current version doc instead of older versions. Ignored when editUrl is a function. | | routeBasePath | string | 'docs' | URL route for the docs section of your site. DO NOT include a trailing slash. Use / for shipping docs without base path. | | tagsBasePath | string | 'tags' | URL route for the tags list page of your site. It is prepended to the routeBasePath. | | include | string[] | ['/*.{md,mdx}'] | Array of glob patterns matching Markdown files to be built, relative to the content path. | | exclude | string[] | _See example configuration_ | Array of glob patterns matching Markdown files to be excluded. Serves as refinement based on the include option. | | sidebarPath | <code>false \\| string</code> | undefined | Path to a sidebars configuration file, loaded in a Node.js context. Use false to disable sidebars, or undefined to create a fully autogenerated sidebar. | | sidebarCollapsible | boolean | true | Whether sidebar categories are collapsible by default. See also Collapsible categories | | sidebarCollapsed | boolean | true | Whether sidebar categories are collapsed by default. See also Expanded categories by default | | sidebarItemsGenerator | <code>SidebarGenerator</code> | _Omitted_ | Function used to replace the sidebar items of type 'autogenerated' with real sidebar items (docs, categories, links...). See also Customize the sidebar items generator | | numberPrefixParser | <code>boolean \\| PrefixParser</code> | _Omitted_ | Custom parsing logic to extract number prefixes from file names. Use false to disable this behavior and leave the docs untouched, and true to use the default parser. See also Using number prefixes | | docsRootComponent | string | '@theme/DocsRoot' | Parent component of all the docs plugin pages (including all versions). Stays mounted when navigation between docs pages and versions. | | docVersionRootComponent | string | '@theme/DocVersionLayout' | Parent component of all docs pages of an individual version (doc pages with sidebars, tags pages). Stays mounted when navigation between pages of that specific version. | | docRootComponent | string | '@theme/DocRoot' | Parent component of all doc pages with sidebars (regular docs pages, category generated index pages). Stays mounted when navigation between such pages. | | docItemComponent | string | '@theme/DocItem' | Main doc container, with TOC, pagination, etc. | | docTagsListComponent | string | '@theme/DocTagsListPage' | Root component of the tags list page | | docTagDocListComponent | string | '@theme/DocTagDocListPage' | Root component of the \"docs containing tag X\" page. | | docCategoryGeneratedIndexComponent | string | '@theme/DocCategoryGeneratedIndexPage' | Root component of the generated category index page. | | remarkPlugins | any[] | [] | Remark plugins passed to MDX. | | rehypePlugins | any[] | [] | Rehype plugins passed to MDX. | | rehypePlugins | any[] | [] | Recma plugins passed to MDX. | | beforeDefaultRemarkPlugins | any[] | [] | Custom Remark plugins passed to MDX before the default Docusaurus Remark plugins. | | beforeDefaultRehypePlugins | any[] | [] | Custom Rehype plugins passed to MDX before the default Docusaurus Rehype plugins. | | showLastUpdateAuthor | boolean | false | Whether to display the author who last updated the doc. | | showLastUpdateTime | boolean | false | Whether to display the last date the doc was updated. This requires access to git history during the build, so will not work correctly with shallow clones (a common default for CI systems). With GitHub actions/checkout, usefetch-depth: 0. | | breadcrumbs | boolean | true | Enable or disable the breadcrumbs on doc pages. | | disableVersioning | boolean | false | Explicitly disable versioning even when multiple versions exist. This will make the site only include the current version. Will error if includeCurrentVersion: false and disableVersioning: true. | | includeCurrentVersion | boolean | true | Include the current version of your docs. | | lastVersion | string | First version in versions.json | The version navigated to in priority and displayed by default for docs navbar items. | | onlyIncludeVersions | string[] | All versions available | Only include a subset of all available versions. | | versions | <code>VersionsConfig</code> | {} | Independent customization of each version's properties. | | tags | string \\| false \\| null \\| undefined | tags.yml | Path to a YAML file listing pre-defined tags. Relative to the docs version content directories. | | onInlineTags | 'ignore' \\| 'log' \\| 'warn' \\| 'throw' | warn | The plugin behavior when docs contain inline tags (not appearing in the list of pre-defined tags, usually docs/tags.yml). | `mdx-code-block </APITable> ` Types {#types} EditUrlFunction {#EditUrlFunction} `ts type EditUrlFunction = (params: { version: string; versionDocsDirPath: string; docPath: string; permalink: string; locale: string; }) => string | undefined; ` PrefixParser {#PrefixParser} `ts type PrefixParser = (filename: string) => { filename: string; numberPrefix?: number; }; ` SidebarGenerator {#SidebarGenerator} `ts type SidebarGenerator = (generatorArgs: { / The sidebar item with type \"autogenerated\" to be transformed. */ item: {type: 'autogenerated'; dirName: string}; / Useful metadata for the version this sidebar belongs to. */ version: {contentPath: string; versionName: string}; / All the docs of that version (unfiltered). */ docs: { id: string; title: string; frontMatter: DocFrontMatter & Record<string, unknown>; source: string; sourceDirName: string; sidebarPosition?: number | undefined; }[]; / Number prefix parser configured for this plugin. */ numberPrefixParser: PrefixParser; / The default category index matcher which you can override. */ isCategoryIndex: CategoryIndexMatcher; / key is the path relative to the doc content directory, value is the category metadata file's content. */ categoriesMetadata: {[filePath: string]: CategoryMetadata}; / Useful to re-use/enhance the default sidebar generation logic from Docusaurus. */ defaultSidebarItemsGenerator: SidebarGenerator; // Returns an array of sidebar items — same as what you can declare in // sidebars.js, except for shorthands. See https://docusaurus.io/docs/sidebar/items }) => Promise<SidebarItem[]>; type CategoryIndexMatcher = (param: { / The file name, without extension */ fileName: string; / The list of directories, from lowest level to highest. If there's no dir name, directories is ['.'] */ directories: string[]; / The extension, with a leading dot */ extension: string; }) => boolean; ` VersionsConfig {#VersionsConfig} `ts type VersionConfig = { / The base path of the version, will be appended to baseUrl + routeBasePath. */ path?: string; / The label of the version to be used in badges, dropdowns, etc. */ label?: string; / The banner to show at the top of a doc of that version. */ banner?: 'none' | 'unreleased' | 'unmaintained'; / Show a badge with the version label at the top of each doc. */ badge?: boolean; / Prevents search engines from indexing this version */ noIndex?: boolean; / Add a custom class name to the <html> element of each doc */ className?: string; }; type VersionsConfig = {[versionName: string]: VersionConfig}; ` Example configuration {#ex-config} You can configure this plugin through preset options or plugin options. :::tip Most Docusaurus users configure this plugin through the preset options. ::: `js config-tabs // Preset Options: docs // Plugin Options: @docusaurus/plugin-content-docs const config = { path: 'docs', breadcrumbs: true, // Simple use-case: string editUrl // editUrl: 'https://github.com/facebook/docusaurus/edit/main/website/', // Advanced use-case: functional editUrl editUrl: ({versionDocsDirPath, docPath}) => https://github.com/facebook/docusaurus/edit/main/website/${versionDocsDirPath}/${docPath}, editLocalizedFiles: false, editCurrentVersion: false, routeBasePath: 'docs', include: ['/.md', '/.mdx'], exclude: [ '/_*.{js,jsx,ts,tsx,md,mdx}', '/_*/', '/*.test.{js,jsx,ts,tsx}', '/__tests__/', ], sidebarPath: 'sidebars.js', async sidebarItemsGenerator({ defaultSidebarItemsGenerator, numberPrefixParser, item, version, docs, isCategoryIndex, }) { // Use the provided data to generate a custom sidebar slice return [ {type: 'doc', id: 'intro'}, { type: 'category', label: 'Tutorials', items: [ {type: 'doc', id: 'tutorial1'}, {type: 'doc', id: 'tutorial2'}, ], }, ]; }, numberPrefixParser(filename) { // Implement your own logic to extract a potential number prefix const numberPrefix = findNumberPrefix(filename); // Prefix found: return it with the cleaned filename if (numberPrefix) { return { numberPrefix, filename: filename.replace(prefix, ''), }; } // No number prefix found return {numberPrefix: undefined, filename}; }, docsRootComponent: '@theme/DocsRoot', docVersionRootComponent: '@theme/DocVersionRoot', docRootComponent: '@theme/DocRoot', docItemComponent: '@theme/DocItem', remarkPlugins: [require('./my-remark-plugin')], rehypePlugins: [], beforeDefaultRemarkPlugins: [], beforeDefaultRehypePlugins: [], showLastUpdateAuthor: false, showLastUpdateTime: false, disableVersioning: false, includeCurrentVersion: true, lastVersion: undefined, versions: { current: { label: 'Android SDK v2.0.0 (WIP)', path: 'android-2.0.0', banner: 'none', }, '1.0.0': { label: 'Android SDK v1.0.0', path: 'android-1.0.0', banner: 'unmaintained', }, }, onlyIncludeVersions: ['current', '1.0.0', '2.0.0'], }; ` Markdown front matter {#markdown-front-matter} Markdown documents can use the following Markdown front matter metadata fields, enclosed by a line --- on either side. Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | id | string | file path (including folders, without the extension) | A unique document ID. | | title | string | Markdown title or id | The text title of your document. Used for the page metadata and as a fallback value in multiple places (sidebar, next/previous buttons...). Automatically added at the top of your doc if it does not contain any Markdown title. | | pagination_label | string | sidebar_label or title | The text used in the document next/previous buttons for this document. | | sidebar_label | string | title | The text shown in the document sidebar for this document. | | sidebar_position | number | Default ordering | Controls the position of a doc inside the generated sidebar slice when using autogenerated sidebar items. See also Autogenerated sidebar metadata. | | sidebar_class_name | string | undefined | Gives the corresponding sidebar label a special class name when using autogenerated sidebars. | | sidebar_custom_props | object | undefined | Assign custom props to the sidebar item referencing this doc | | displayed_sidebar | string | undefined | Force the display of a given sidebar when browsing the current document. Read the multiple sidebars guide for details. | | hide_title | boolean | false | Whether to hide the title at the top of the doc. It only hides a title declared through the front matter, and have no effect on a Markdown title at the top of your document. | | hide_table_of_contents | boolean | false | Whether to hide the table of contents to the right. | | toc_min_heading_level | number | 2 | The minimum heading level shown in the table of contents. Must be between 2 and 6 and lower or equal to the max value. | | toc_max_heading_level | number | 3 | The max heading level shown in the table of contents. Must be between 2 and 6. | | pagination_next | <code>string \\| null</code> | Next doc in the sidebar | The ID of the documentation you want the \"Next\" pagination to link to. Use null to disable showing \"Next\" for this page. | | pagination_prev | <code>string \\| null</code> | Previous doc in the sidebar | The ID of the documentation you want the \"Previous\" pagination to link to. Use null to disable showing \"Previous\" for this page. | | parse_number_prefixes | boolean | numberPrefixParser plugin option | Whether number prefix parsing is disabled on this doc. See also Using number prefixes. | | custom_edit_url | <code>string \\| null</code> | Computed using the editUrl plugin option | The URL for editing this document. Use null to disable showing \"Edit this page\" for this page. | | keywords | string[] | undefined | Keywords meta tag for the document page, for search engines. | | description | string | The first line of Markdown content | The description of your document, which will become the <meta name=\"description\" content=\"...\"/> and <meta property=\"og:description\" content=\"...\"/> in <head>, used by search engines. | | image | string | undefined | Cover or thumbnail image that will be used as the <meta property=\"og:image\" content=\"...\"/> in the <head>, enhancing link previews on social media and messaging platforms. | | slug | string | File path | Allows to customize the document URL (/<routeBasePath>/<slug>). Support multiple patterns: slug: my-doc, slug: /my/path/myDoc, slug: /. | | tags | Tag[] | undefined | A list of strings or objects of two string fields label and permalink to tag to your docs. Strings can be a reference to keys of a tags file (usually tags.yml) | | draft | boolean | false | Draft documents will only be available during development. | | unlisted | boolean | false | Unlisted documents will be available in both development and production. They will be \"hidden\" in production, not indexed, excluded from sitemaps, and can only be accessed by users having a direct link. | | last_update | FrontMatterLastUpdate | undefined | Allows overriding the last update author/date. Date can be any parsable date string. | `mdx-code-block </APITable> ` `ts type FrontMatterLastUpdate = {date?: string; author?: string}; type Tag = string | {label: string; permalink: string}; ` Example: `md --- id: doc-markdown title: Docs Markdown Features hide_title: false hide_table_of_contents: false sidebar_label: Markdown sidebar_position: 3 pagination_label: Markdown features custom_edit_url: https://github.com/facebook/docusaurus/edit/main/docs/api-doc-markdown.md description: How do I find you when I cannot solve this problem keywords: docs docusaurus tags: [docusaurus] image: https://i.imgur.com/mErPwqL.png slug: /myDoc last_update: date: 1/1/2000 author: custom author name --- Markdown Features My Document Markdown content ` import TagsFileApiRefSection from './_partial-tags-file-api-ref-section.mdx'; <TagsFileApiRefSection /> i18n {#i18n} Read the i18n introduction first. Translation files location {#translation-files-location} Base path: website/i18n/[locale]/docusaurus-plugin-content-docs Multi-instance path: website/i18n/[locale]/docusaurus-plugin-content-docs-[pluginId] JSON files: extracted with docusaurus write-translations Markdown files: website/i18n/[locale]/docusaurus-plugin-content-docs/[versionName] Example file-system structure {#example-file-system-structure} `bash website/i18n/[locale]/docusaurus-plugin-content-docs │ │ translations for website/docs ├── current │ ├── api │ │ └── config.md │ └── getting-started.md ├── current.json │ │ translations for website/versioned_docs/version-1.0.0 ├── version-1.0.0 │ ├── api │ │ └── config.md │ └── getting-started.md └── version-1.0.0.json `",
    "keywords": [
      "📦",
      "plugin-content-docs",
      "api",
      "plugins",
      "plugin",
      "content",
      "docs",
      "mdx",
      "src",
      "components",
      "APITable",
      "preset-classic",
      "code",
      "DocsRoot",
      "DocVersionLayout",
      "DocRoot",
      "DocItem",
      "DocTagsListPage",
      "DocTagDocListPage",
      "DocCategoryGeneratedIndexPage",
      "checkout",
      "tags",
      "enhance",
      "docusaurus",
      "sidebar",
      "items",
      "github",
      "facebook",
      "edit",
      "main",
      "website",
      "__tests__",
      "DocVersionRoot",
      "my-remark-plugin",
      "previous",
      "my",
      "path",
      "myDoc",
      "date",
      "api-doc-markdown",
      "mErPwqL",
      "2000",
      "_partial-tags-file-api-ref-section",
      "i18n",
      "docusaurus-plugin-content-docs",
      "docusaurus-plugin-content-docs-",
      "versioned_docs",
      "version-1",
      "import",
      "from",
      "site",
      "Provides",
      "the",
      "Docs",
      "functionality",
      "and",
      "default",
      "for",
      "Docusaurus",
      "Installation",
      "installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "tip",
      "you",
      "use",
      "preset",
      "classic",
      "don",
      "need",
      "this",
      "dependency",
      "You",
      "can",
      "configure",
      "through",
      "options",
      "Configuration",
      "configuration",
      "Accepted",
      "fields",
      "block",
      "Name",
      "Type",
      "Default",
      "Description",
      "string",
      "Path",
      "directory",
      "file",
      "system",
      "relative",
      "editUrl",
      "EditUrlFunction",
      "undefined",
      "Base",
      "URL",
      "your",
      "The",
      "final",
      "computed",
      "relativeDocPath",
      "Using",
      "function",
      "allows",
      "more",
      "nuanced",
      "control",
      "each",
      "Omitting",
      "variable",
      "entirely",
      "will",
      "disable",
      "links",
      "editLocalizedFiles",
      "boolean",
      "false",
      "target",
      "localized",
      "instead",
      "original",
      "unlocalized",
      "Ignored",
      "when",
      "editCurrentVersion",
      "always",
      "current",
      "version",
      "doc",
      "older",
      "versions",
      "routeBasePath",
      "route",
      "section",
      "NOT",
      "include",
      "trailing",
      "slash",
      "Use",
      "shipping",
      "without",
      "base",
      "tagsBasePath",
      "list",
      "page",
      "prepended",
      "Array",
      "glob",
      "patterns",
      "matching",
      "Markdown",
      "files",
      "built",
      "exclude",
      "_See",
      "example",
      "configuration_",
      "excluded",
      "Serves",
      "refinement",
      "based",
      "option",
      "sidebarPath",
      "sidebars",
      "loaded",
      "Node",
      "context",
      "create",
      "fully",
      "autogenerated",
      "sidebarCollapsible",
      "true",
      "Whether",
      "categories",
      "are",
      "collapsible",
      "See",
      "also",
      "Collapsible",
      "sidebarCollapsed",
      "collapsed",
      "Expanded",
      "SidebarGenerator",
      "_Omitted_",
      "Function",
      "used",
      "replace",
      "type",
      "with",
      "real",
      "Customize",
      "generator",
      "numberPrefixParser",
      "PrefixParser",
      "Custom",
      "parsing",
      "logic",
      "extract",
      "number",
      "prefixes",
      "names",
      "behavior",
      "leave",
      "untouched",
      "parser",
      "docsRootComponent",
      "theme",
      "Parent",
      "component",
      "all",
      "pages",
      "including",
      "Stays",
      "mounted",
      "navigation",
      "between",
      "individual",
      "that",
      "specific",
      "docRootComponent",
      "regular",
      "category",
      "generated",
      "index",
      "such",
      "docItemComponent",
      "Main",
      "container",
      "TOC",
      "pagination",
      "etc",
      "docTagsListComponent",
      "Root",
      "containing",
      "tag",
      "remarkPlugins",
      "any",
      "Remark",
      "passed",
      "MDX",
      "rehypePlugins",
      "Rehype",
      "Recma",
      "before",
      "showLastUpdateAuthor",
      "display",
      "author",
      "who",
      "last",
      "updated",
      "showLastUpdateTime",
      "was",
      "This",
      "requires",
      "access",
      "git",
      "history",
      "during",
      "build",
      "not",
      "work",
      "correctly",
      "shallow",
      "clones",
      "common",
      "systems",
      "With",
      "GitHub",
      "actions",
      "usefetch",
      "depth",
      "breadcrumbs",
      "Enable",
      "disableVersioning",
      "Explicitly",
      "versioning",
      "even",
      "multiple",
      "exist",
      "make",
      "only",
      "Will",
      "error",
      "Include",
      "lastVersion",
      "First",
      "json",
      "navigated",
      "priority",
      "displayed",
      "navbar",
      "onlyIncludeVersions",
      "All",
      "available",
      "Only",
      "subset",
      "VersionsConfig",
      "Independent",
      "customization",
      "properties",
      "null",
      "yml",
      "YAML",
      "listing",
      "pre",
      "defined",
      "Relative",
      "directories",
      "onInlineTags",
      "ignore",
      "log",
      "warn",
      "throw",
      "contain",
      "inline",
      "appearing",
      "usually",
      "Types",
      "types",
      "params",
      "versionDocsDirPath",
      "docPath",
      "permalink",
      "locale",
      "filename",
      "numberPrefix",
      "generatorArgs",
      "item",
      "transformed",
      "dirName",
      "Useful",
      "metadata",
      "belongs",
      "contentPath",
      "versionName",
      "unfiltered",
      "title",
      "frontMatter",
      "DocFrontMatter",
      "Record",
      "unknown",
      "source",
      "sourceDirName",
      "sidebarPosition",
      "Number",
      "prefix",
      "configured",
      "matcher",
      "which",
      "override",
      "isCategoryIndex",
      "CategoryIndexMatcher",
      "key",
      "value",
      "categoriesMetadata",
      "filePath",
      "CategoryMetadata",
      "generation",
      "Returns",
      "array",
      "same",
      "what",
      "declare",
      "except",
      "shorthands",
      "https",
      "Promise",
      "SidebarItem",
      "param",
      "name",
      "extension",
      "fileName",
      "lowest",
      "level",
      "highest",
      "there",
      "dir",
      "leading",
      "dot",
      "VersionConfig",
      "appended",
      "baseUrl",
      "label",
      "badges",
      "dropdowns",
      "banner",
      "show",
      "top",
      "none",
      "unreleased",
      "unmaintained",
      "Show",
      "badge",
      "Prevents",
      "search",
      "engines",
      "indexing",
      "noIndex",
      "Add",
      "custom",
      "class",
      "html",
      "element",
      "className",
      "Example",
      "config",
      "Most",
      "users",
      "tabs",
      "Preset",
      "Options",
      "Plugin",
      "const",
      "Simple",
      "case",
      "com",
      "Advanced",
      "functional",
      "jsx",
      "tsx",
      "test",
      "async",
      "provided",
      "data",
      "generate",
      "slice",
      "return",
      "intro",
      "Tutorials",
      "tutorial1",
      "tutorial2",
      "Implement",
      "own",
      "potential",
      "findNumberPrefix",
      "Prefix",
      "found",
      "cleaned",
      "require",
      "remark",
      "Android",
      "SDK",
      "WIP",
      "android",
      "front",
      "matter",
      "markdown",
      "documents",
      "following",
      "enclosed",
      "line",
      "either",
      "side",
      "folders",
      "unique",
      "document",
      "text",
      "Used",
      "fallback",
      "places",
      "next",
      "buttons",
      "Automatically",
      "added",
      "does",
      "pagination_label",
      "sidebar_label",
      "shown",
      "sidebar_position",
      "ordering",
      "Controls",
      "position",
      "inside",
      "using",
      "Autogenerated",
      "sidebar_class_name",
      "Gives",
      "corresponding",
      "special",
      "sidebar_custom_props",
      "object",
      "Assign",
      "props",
      "referencing",
      "displayed_sidebar",
      "Force",
      "given",
      "browsing",
      "Read",
      "guide",
      "details",
      "hide_title",
      "hide",
      "hides",
      "declared",
      "have",
      "effect",
      "table",
      "contents",
      "right",
      "minimum",
      "heading",
      "Must",
      "lower",
      "equal",
      "max",
      "pagination_next",
      "Next",
      "documentation",
      "want",
      "link",
      "showing",
      "pagination_prev",
      "Previous",
      "disabled",
      "custom_edit_url",
      "Computed",
      "editing",
      "Edit",
      "keywords",
      "Keywords",
      "meta",
      "description",
      "first",
      "become",
      "property",
      "head",
      "image",
      "Cover",
      "thumbnail",
      "enhancing",
      "previews",
      "social",
      "media",
      "messaging",
      "platforms",
      "slug",
      "File",
      "Allows",
      "customize",
      "Support",
      "Tag",
      "strings",
      "objects",
      "two",
      "Strings",
      "reference",
      "keys",
      "draft",
      "Draft",
      "development",
      "unlisted",
      "Unlisted",
      "both",
      "production",
      "They",
      "hidden",
      "indexed",
      "sitemaps",
      "accessed",
      "having",
      "direct",
      "last_update",
      "overriding",
      "update",
      "Date",
      "parsable",
      "Features",
      "features",
      "How",
      "find",
      "cannot",
      "solve",
      "problem",
      "imgur",
      "png",
      "Document",
      "_partial",
      "ref",
      "introduction",
      "Translation",
      "location",
      "translation",
      "Multi",
      "instance",
      "pluginId",
      "JSON",
      "extracted",
      "write",
      "translations",
      "structure",
      "getting",
      "started"
    ],
    "url": "/docs/api/plugins/plugin-content-docs",
    "path": "api/plugins/plugin-content-docs.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugin-content-pages",
    "title": "📦 plugin-content-pages",
    "description": "",
    "content": "📦 plugin-content-pages import APITable from '@site/src/components/APITable'; The default pages plugin for Docusaurus. The classic template ships with this plugin with default configurations. This plugin provides creating pages functionality. Installation {#installation} `bash npm2yarn npm install --save @docusaurus/plugin-content-pages ` :::tip If you use the preset @docusaurus/preset-classic, you don't need to install this plugin as a dependency. You can configure this plugin through the preset options. ::: Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | path | string | 'src/pages' | Path to data on filesystem relative to site dir. Components in this directory will be automatically converted to pages. | | editUrl | <code>string \\| EditUrlFn</code> | undefined | Only for Markdown pages. Base URL to edit your site. The final URL is computed by editUrl + relativePostPath. Using a function allows more nuanced control for each file. Omitting this variable entirely will disable edit links. | | editLocalizedFiles | boolean | false | Only for Markdown pages. The edit URL will target the localized file, instead of the original unlocalized file. Ignored when editUrl is a function. | | routeBasePath | string | '/' | URL route for the pages section of your site. DO NOT include a trailing slash. | | include | string[] | ['/*.{js,jsx,ts,tsx,md,mdx}'] | Matching files will be included and processed. | | exclude | string[] | _See example configuration_ | No route will be created for matching files. | | mdxPageComponent | string | '@theme/MDXPage' | Component used by each MDX page. | | remarkPlugins | [] | any[] | Remark plugins passed to MDX. | | rehypePlugins | [] | any[] | Rehype plugins passed to MDX. | | rehypePlugins | any[] | [] | Recma plugins passed to MDX. | | beforeDefaultRemarkPlugins | any[] | [] | Custom Remark plugins passed to MDX before the default Docusaurus Remark plugins. | | beforeDefaultRehypePlugins | any[] | [] | Custom Rehype plugins passed to MDX before the default Docusaurus Rehype plugins. | | showLastUpdateAuthor | boolean | false | Only for Markdown pages. Whether to display the author who last updated the page. | | showLastUpdateTime | boolean | false | Only for Markdown pages. Whether to display the last date the page post was updated. This requires access to git history during the build, so will not work correctly with shallow clones (a common default for CI systems). With GitHub actions/checkout, usefetch-depth: 0. | `mdx-code-block </APITable> ` Types {#types} EditUrlFn {#EditUrlFn} `ts type EditUrlFunction = (params: { blogDirPath: string; blogPath: string; permalink: string; locale: string; }) => string | undefined; ` Example configuration {#ex-config} You can configure this plugin through preset options or plugin options. :::tip Most Docusaurus users configure this plugin through the preset options. ::: `js config-tabs // Preset Options: pages // Plugin Options: @docusaurus/plugin-content-pages const config = { path: 'src/pages', routeBasePath: '', include: ['/*.{js,jsx,ts,tsx,md,mdx}'], exclude: [ '/_*.{js,jsx,ts,tsx,md,mdx}', '/_*/', '/*.test.{js,jsx,ts,tsx}', '/__tests__/', ], mdxPageComponent: '@theme/MDXPage', remarkPlugins: [require('./my-remark-plugin')], rehypePlugins: [], beforeDefaultRemarkPlugins: [], beforeDefaultRehypePlugins: [], }; ` Markdown front matter {#markdown-front-matter} Markdown pages can use the following Markdown front matter metadata fields, enclosed by a line --- on either side. Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | title | string | Markdown title | The blog post title. | | description | string | The first line of Markdown content | The description of your page, which will become the <meta name=\"description\" content=\"...\"/> and <meta property=\"og:description\" content=\"...\"/> in <head>, used by search engines. | | keywords | string[] | undefined | Keywords meta tag, which will become the <meta name=\"keywords\" content=\"keyword1,keyword2,...\"/> in <head>, used by search engines. | | image | string | undefined | Cover or thumbnail image that will be used as the <meta property=\"og:image\" content=\"...\"/> in the <head>, enhancing link previews on social media and messaging platforms. | | slug | string | File path | Allows to customize the page URL (/<routeBasePath>/<slug>). Support multiple patterns: slug: my-page, slug: /my/page, slug: /. | | wrapperClassName | string | | Class name to be added to the wrapper element to allow targeting specific page content. | | hide_table_of_contents | boolean | false | Whether to hide the table of contents to the right. | | draft | boolean | false | Draft pages will only be available during development. | | unlisted | boolean | false | Unlisted pages will be available in both development and production. They will be \"hidden\" in production, not indexed, excluded from sitemaps, and can only be accessed by users having a direct link. | `mdx-code-block </APITable> ` Example: `md --- title: Markdown Page description: Markdown page SEO description wrapperClassName: markdown-page hide_table_of_contents: false draft: true slug: /markdown-page --- Markdown page content ` i18n {#i18n} Read the i18n introduction first. Translation files location {#translation-files-location} Base path: website/i18n/[locale]/docusaurus-plugin-content-pages Multi-instance path: website/i18n/[locale]/docusaurus-plugin-content-pages-[pluginId] JSON files: extracted with docusaurus write-translations Markdown files: website/i18n/[locale]/docusaurus-plugin-content-pages Example file-system structure {#example-file-system-structure} `bash website/i18n/[locale]/docusaurus-plugin-content-pages │ │ translations for website/src/pages ├── first-markdown-page.md └── second-markdown-page.md `",
    "keywords": [
      "📦",
      "plugin-content-pages",
      "api",
      "plugins",
      "plugin",
      "content",
      "pages",
      "mdx",
      "src",
      "components",
      "APITable",
      "preset-classic",
      "code",
      "MDXPage",
      "checkout",
      "__tests__",
      "my-remark-plugin",
      "my",
      "page",
      "markdown-page",
      "i18n",
      "docusaurus-plugin-content-pages",
      "docusaurus-plugin-content-pages-",
      "import",
      "from",
      "site",
      "The",
      "default",
      "for",
      "Docusaurus",
      "classic",
      "template",
      "ships",
      "with",
      "this",
      "configurations",
      "This",
      "provides",
      "creating",
      "functionality",
      "Installation",
      "installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "docusaurus",
      "tip",
      "you",
      "use",
      "the",
      "preset",
      "don",
      "need",
      "dependency",
      "You",
      "can",
      "configure",
      "through",
      "options",
      "Configuration",
      "configuration",
      "Accepted",
      "fields",
      "block",
      "Name",
      "Type",
      "Default",
      "Description",
      "path",
      "string",
      "Path",
      "data",
      "filesystem",
      "relative",
      "dir",
      "Components",
      "directory",
      "will",
      "automatically",
      "converted",
      "editUrl",
      "EditUrlFn",
      "undefined",
      "Only",
      "Markdown",
      "Base",
      "URL",
      "edit",
      "your",
      "final",
      "computed",
      "relativePostPath",
      "Using",
      "function",
      "allows",
      "more",
      "nuanced",
      "control",
      "each",
      "file",
      "Omitting",
      "variable",
      "entirely",
      "disable",
      "links",
      "editLocalizedFiles",
      "boolean",
      "false",
      "target",
      "localized",
      "instead",
      "original",
      "unlocalized",
      "Ignored",
      "when",
      "routeBasePath",
      "route",
      "section",
      "NOT",
      "include",
      "trailing",
      "slash",
      "jsx",
      "tsx",
      "Matching",
      "files",
      "included",
      "and",
      "processed",
      "exclude",
      "_See",
      "example",
      "configuration_",
      "created",
      "matching",
      "mdxPageComponent",
      "theme",
      "Component",
      "used",
      "MDX",
      "remarkPlugins",
      "any",
      "Remark",
      "passed",
      "rehypePlugins",
      "Rehype",
      "Recma",
      "Custom",
      "before",
      "showLastUpdateAuthor",
      "Whether",
      "display",
      "author",
      "who",
      "last",
      "updated",
      "showLastUpdateTime",
      "date",
      "post",
      "was",
      "requires",
      "access",
      "git",
      "history",
      "during",
      "build",
      "not",
      "work",
      "correctly",
      "shallow",
      "clones",
      "common",
      "systems",
      "With",
      "GitHub",
      "actions",
      "usefetch",
      "depth",
      "Types",
      "types",
      "type",
      "EditUrlFunction",
      "params",
      "blogDirPath",
      "blogPath",
      "permalink",
      "locale",
      "Example",
      "config",
      "Most",
      "users",
      "tabs",
      "Preset",
      "Options",
      "Plugin",
      "const",
      "test",
      "require",
      "remark",
      "front",
      "matter",
      "markdown",
      "following",
      "metadata",
      "enclosed",
      "line",
      "either",
      "side",
      "title",
      "blog",
      "description",
      "first",
      "which",
      "become",
      "meta",
      "name",
      "property",
      "head",
      "search",
      "engines",
      "keywords",
      "Keywords",
      "tag",
      "keyword1",
      "keyword2",
      "image",
      "Cover",
      "thumbnail",
      "that",
      "enhancing",
      "link",
      "previews",
      "social",
      "media",
      "messaging",
      "platforms",
      "slug",
      "File",
      "Allows",
      "customize",
      "Support",
      "multiple",
      "patterns",
      "wrapperClassName",
      "Class",
      "added",
      "wrapper",
      "element",
      "allow",
      "targeting",
      "specific",
      "hide",
      "table",
      "contents",
      "right",
      "draft",
      "Draft",
      "only",
      "available",
      "development",
      "unlisted",
      "Unlisted",
      "both",
      "production",
      "They",
      "hidden",
      "indexed",
      "excluded",
      "sitemaps",
      "accessed",
      "having",
      "direct",
      "Page",
      "SEO",
      "true",
      "Read",
      "introduction",
      "Translation",
      "location",
      "translation",
      "website",
      "Multi",
      "instance",
      "pluginId",
      "JSON",
      "extracted",
      "write",
      "translations",
      "system",
      "structure",
      "second"
    ],
    "url": "/docs/api/plugins/plugin-content-pages",
    "path": "api/plugins/plugin-content-pages.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugin-css-cascade-layers",
    "title": "📦 plugin-css-cascade-layers",
    "description": "",
    "content": "📦 plugin-css-cascade-layers import APITable from '@site/src/components/APITable'; :::caution Experimental This plugin is mostly designed to be used internally by the classic preset through the Docusaurus future.v4.useCssCascadeLayers flag, although it can also be used as a standalone plugin. Please let us know here if you have a use case for it and help us design an API that makes sense for the future of Docusaurus. ::: A plugin for wrapping CSS modules of your Docusaurus site in CSS Cascade Layers. This modern CSS feature is widely supported by all browsers. It allows grouping CSS rules in layers of specificity and gives you more control over the CSS cascade. Use this plugin to: apply a top-level @layer myLayer { ... } block rule around any CSS module, including un-layered third-party CSS. define an explicit layer ordering :::caution To use this plugin properly, it's recommended to have a solid understanding of CSS Cascade Layers, the CSS Cascade and specificity. ::: Installation {#installation} `bash npm2yarn npm install --save @docusaurus/plugin-css-cascade-layers ` :::tip If you use the preset @docusaurus/preset-classic, this plugin is automatically configured for you with the siteConfig.future.v4.useCssCascadeLayers flag. ::: Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | layers | Layers | Built-in layers | An object representing all the CSS cascade layers you want to use, and whether the layer should be applied to a given file path. See examples and types below. | `mdx-code-block </APITable> ` Types {#types} Layers {#EditUrlFunction} `ts type Layers = Record< string, // layer name (filePath: string) => boolean // layer matcher >; ` The layers object is defined by: key: the name of a layer value: a function to define if a given CSS module file should be in that layer :::caution Order matters The object order matters: the keys order defines an explicit CSS layer order when multiple layers match a file path, only the first layer will apply ::: Example configuration {#ex-config} You can configure this plugin through plugin options. `js const options = { layers: { 'docusaurus.infima': (filePath) => filePath.includes('/node_modules/infima/dist'), 'docusaurus.theme-classic': (filePath) => filePath.includes('/node_modules/@docusaurus/theme-classic/lib'), }, }; `",
    "keywords": [
      "📦",
      "plugin-css-cascade-layers",
      "api",
      "plugins",
      "plugin",
      "css",
      "cascade",
      "layers",
      "mdx",
      "src",
      "components",
      "APITable",
      "preset-classic",
      "node_modules",
      "infima",
      "dist",
      "theme-classic",
      "lib",
      "import",
      "from",
      "site",
      "caution",
      "Experimental",
      "This",
      "mostly",
      "designed",
      "used",
      "internally",
      "the",
      "classic",
      "preset",
      "through",
      "Docusaurus",
      "future",
      "useCssCascadeLayers",
      "flag",
      "although",
      "can",
      "also",
      "standalone",
      "Please",
      "let",
      "know",
      "here",
      "you",
      "have",
      "use",
      "case",
      "for",
      "and",
      "help",
      "design",
      "API",
      "that",
      "makes",
      "sense",
      "wrapping",
      "CSS",
      "modules",
      "your",
      "Cascade",
      "Layers",
      "modern",
      "feature",
      "widely",
      "supported",
      "all",
      "browsers",
      "allows",
      "grouping",
      "rules",
      "specificity",
      "gives",
      "more",
      "control",
      "over",
      "Use",
      "this",
      "apply",
      "top",
      "level",
      "layer",
      "myLayer",
      "block",
      "rule",
      "around",
      "any",
      "module",
      "including",
      "layered",
      "third",
      "party",
      "define",
      "explicit",
      "ordering",
      "properly",
      "recommended",
      "solid",
      "understanding",
      "Installation",
      "installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "docusaurus",
      "tip",
      "automatically",
      "configured",
      "with",
      "siteConfig",
      "Configuration",
      "configuration",
      "Accepted",
      "fields",
      "code",
      "Name",
      "Type",
      "Default",
      "Description",
      "Built",
      "object",
      "representing",
      "want",
      "whether",
      "should",
      "applied",
      "given",
      "file",
      "path",
      "See",
      "examples",
      "types",
      "below",
      "Types",
      "EditUrlFunction",
      "type",
      "Record",
      "string",
      "name",
      "filePath",
      "boolean",
      "matcher",
      "The",
      "defined",
      "key",
      "value",
      "function",
      "Order",
      "matters",
      "order",
      "keys",
      "defines",
      "when",
      "multiple",
      "match",
      "only",
      "first",
      "will",
      "Example",
      "config",
      "You",
      "configure",
      "options",
      "const",
      "includes",
      "theme"
    ],
    "url": "/docs/api/plugins/plugin-css-cascade-layers",
    "path": "api/plugins/plugin-css-cascade-layers.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugin-debug",
    "title": "📦 plugin-debug",
    "description": "",
    "content": "📦 plugin-debug `mdx-code-block import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; ` The debug plugin will display useful debug information at http://localhost:3000/__docusaurus/debug. It is mostly useful for plugin authors, that will be able to inspect more easily the content of the .docusaurus folder (like the creates routes), but also be able to inspect data structures that are never written to disk, like the plugin data loaded through the contentLoaded lifecycle. :::info If you use the plugin via the classic preset, the preset will enable the plugin in development and disable it in production by default (debug: undefined) to avoid exposing potentially sensitive information. You can use debug: true to always enable it or debug: false to always disable it. If you use a standalone plugin, you may need to achieve the same effect by checking the environment: `js title=\"docusaurus.config.js\" export default { plugins: [ // highlight-next-line process.env.NODE_ENV !== 'production' && '@docusaurus/plugin-debug', ].filter(Boolean), }; ` ::: :::note If you report a bug, we will probably ask you to have this plugin turned on in the production, so that we can inspect your deployment config more easily. If you don't have any sensitive information, you can keep it on in production like we do. ::: Installation {#installation} `bash npm2yarn npm install --save @docusaurus/plugin-debug ` :::tip If you use the preset @docusaurus/preset-classic, you don't need to install this plugin as a dependency. You can configure this plugin through the preset options. ::: Configuration {#configuration} This plugin currently has no options. Example configuration {#ex-config} You can configure this plugin through preset options or plugin options. :::tip Most Docusaurus users configure this plugin through the preset options. ::: `mdx-code-block <Tabs groupId=\"api-config-ex\"> <TabItem value=\"preset\" label=\"Preset options\"> ` If you use a preset, configure this plugin through the preset options: `js title=\"docusaurus.config.js\" export default { presets: [ [ '@docusaurus/preset-classic', { // highlight-next-line debug: true, // This will enable the plugin in production }, ], ], }; ` `mdx-code-block </TabItem> <TabItem value=\"plugin\" label=\"Plugin Options\"> ` If you are using a standalone plugin, provide options directly to the plugin: `js title=\"docusaurus.config.js\" export default { // highlight-next-line plugins: ['@docusaurus/plugin-debug'], }; ` `mdx-code-block </TabItem> </Tabs> `",
    "keywords": [
      "📦",
      "plugin-debug",
      "api",
      "plugins",
      "plugin",
      "debug",
      "mdx",
      "Tabs",
      "TabItem",
      "localhost",
      "__docusaurus",
      "preset-classic",
      "code",
      "block",
      "import",
      "from",
      "theme",
      "The",
      "will",
      "display",
      "useful",
      "information",
      "http",
      "mostly",
      "for",
      "authors",
      "that",
      "able",
      "inspect",
      "more",
      "easily",
      "the",
      "content",
      "docusaurus",
      "folder",
      "like",
      "creates",
      "routes",
      "but",
      "also",
      "data",
      "structures",
      "are",
      "never",
      "written",
      "disk",
      "loaded",
      "through",
      "contentLoaded",
      "lifecycle",
      "info",
      "you",
      "use",
      "via",
      "classic",
      "preset",
      "enable",
      "development",
      "and",
      "disable",
      "production",
      "default",
      "undefined",
      "avoid",
      "exposing",
      "potentially",
      "sensitive",
      "You",
      "can",
      "true",
      "always",
      "false",
      "standalone",
      "may",
      "need",
      "achieve",
      "same",
      "effect",
      "checking",
      "environment",
      "title",
      "config",
      "export",
      "highlight",
      "next",
      "line",
      "process",
      "env",
      "NODE_ENV",
      "filter",
      "Boolean",
      "note",
      "report",
      "bug",
      "probably",
      "ask",
      "have",
      "this",
      "turned",
      "your",
      "deployment",
      "don",
      "any",
      "keep",
      "Installation",
      "installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "tip",
      "dependency",
      "configure",
      "options",
      "Configuration",
      "configuration",
      "This",
      "currently",
      "has",
      "Example",
      "Most",
      "Docusaurus",
      "users",
      "groupId",
      "value",
      "label",
      "Preset",
      "presets",
      "Plugin",
      "Options",
      "using",
      "provide",
      "directly"
    ],
    "url": "/docs/api/plugins/plugin-debug",
    "path": "api/plugins/plugin-debug.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugin-google-analytics",
    "title": "📦 plugin-google-analytics",
    "description": "",
    "content": "📦 plugin-google-analytics import APITable from '@site/src/components/APITable'; The default Google Analytics plugin. It is a JavaScript library for measuring how users interact with your website in the production build. If you are using Google Analytics 4 you might need to consider using plugin-google-gtag instead. :::danger Deprecated This plugin is deprecated and became useless on July 1, 2023. Google is moving away from Universal Analytics. If you are still using this plugin with a UA-* tracking id, you should create a Google Analytics 4 account as soon as possible, and use @docusaurus/plugin-google-gtag instead of this plugin. More details here. ::: :::warning production only This plugin is always inactive in development and only active in production to avoid polluting the analytics statistics. ::: Installation {#installation} `bash npm2yarn npm install --save @docusaurus/plugin-google-analytics ` :::tip If you use the preset @docusaurus/preset-classic, you don't need to install this plugin as a dependency. You can configure this plugin through the preset options. ::: Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | trackingID | string | Required | The tracking ID of your analytics service. | | anonymizeIP | boolean | false | Whether the IP should be anonymized when sending requests. | `mdx-code-block </APITable> ` Example configuration {#ex-config} You can configure this plugin through preset options or plugin options. :::tip Most Docusaurus users configure this plugin through the preset options. ::: `js config-tabs // Preset Options: googleAnalytics // Plugin Options: @docusaurus/plugin-google-analytics const config = { trackingID: 'UA-141789564-1', anonymizeIP: true, }; `",
    "keywords": [
      "📦",
      "plugin-google-analytics",
      "api",
      "plugins",
      "plugin",
      "google",
      "analytics",
      "mdx",
      "src",
      "components",
      "APITable",
      "plugin-google-gtag",
      "preset-classic",
      "import",
      "from",
      "site",
      "The",
      "default",
      "Google",
      "Analytics",
      "JavaScript",
      "library",
      "for",
      "measuring",
      "how",
      "users",
      "interact",
      "with",
      "your",
      "website",
      "the",
      "production",
      "build",
      "you",
      "are",
      "using",
      "might",
      "need",
      "consider",
      "gtag",
      "instead",
      "danger",
      "Deprecated",
      "This",
      "deprecated",
      "and",
      "became",
      "useless",
      "July",
      "moving",
      "away",
      "Universal",
      "still",
      "this",
      "tracking",
      "should",
      "create",
      "account",
      "soon",
      "possible",
      "use",
      "docusaurus",
      "More",
      "details",
      "here",
      "warning",
      "only",
      "always",
      "inactive",
      "development",
      "active",
      "avoid",
      "polluting",
      "statistics",
      "Installation",
      "installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "tip",
      "preset",
      "classic",
      "don",
      "dependency",
      "You",
      "can",
      "configure",
      "through",
      "options",
      "Configuration",
      "configuration",
      "Accepted",
      "fields",
      "code",
      "block",
      "Name",
      "Type",
      "Default",
      "Description",
      "trackingID",
      "string",
      "Required",
      "service",
      "anonymizeIP",
      "boolean",
      "false",
      "Whether",
      "anonymized",
      "when",
      "sending",
      "requests",
      "Example",
      "config",
      "Most",
      "Docusaurus",
      "tabs",
      "Preset",
      "Options",
      "googleAnalytics",
      "Plugin",
      "const",
      "true"
    ],
    "url": "/docs/api/plugins/plugin-google-analytics",
    "path": "api/plugins/plugin-google-analytics.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugin-google-gtag",
    "title": "📦 plugin-google-gtag",
    "description": "",
    "content": "📦 plugin-google-gtag import APITable from '@site/src/components/APITable'; The default Global Site Tag (gtag.js) plugin. It is a JavaScript tagging framework and API that allows you to send event data to Google Analytics, Google Ads, and Google Marketing Platform. This section describes how to configure a Docusaurus site to enable global site tag for Google Analytics. :::tip You can use Google's Tag Assistant tool to check if your gtag is set up correctly! ::: :::warning production only This plugin is always inactive in development and only active in production to avoid polluting the analytics statistics. ::: Installation {#installation} `bash npm2yarn npm install --save @docusaurus/plugin-google-gtag ` :::tip If you use the preset @docusaurus/preset-classic, you don't need to install this plugin as a dependency. You can configure this plugin through the preset options. ::: Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | trackingID | <code>string \\| string[]</code> | Required | The tracking ID of your gtag service. It is possible to provide multiple ids. | | anonymizeIP | boolean | false | Whether the IP should be anonymized when sending requests. | `mdx-code-block </APITable> ` Example configuration {#ex-config} You can configure this plugin through preset options or plugin options. :::tip Most Docusaurus users configure this plugin through the preset options. ::: `js config-tabs // Preset Options: gtag // Plugin Options: @docusaurus/plugin-google-gtag const config = { trackingID: 'G-999X9XX9XX', anonymizeIP: true, }; `",
    "keywords": [
      "📦",
      "plugin-google-gtag",
      "api",
      "plugins",
      "plugin",
      "google",
      "gtag",
      "mdx",
      "src",
      "components",
      "APITable",
      "preset-classic",
      "code",
      "import",
      "from",
      "site",
      "The",
      "default",
      "Global",
      "Site",
      "Tag",
      "JavaScript",
      "tagging",
      "framework",
      "and",
      "API",
      "that",
      "allows",
      "you",
      "send",
      "event",
      "data",
      "Google",
      "Analytics",
      "Ads",
      "Marketing",
      "Platform",
      "This",
      "section",
      "describes",
      "how",
      "configure",
      "Docusaurus",
      "enable",
      "global",
      "tag",
      "for",
      "tip",
      "You",
      "can",
      "use",
      "Assistant",
      "tool",
      "check",
      "your",
      "set",
      "correctly",
      "warning",
      "production",
      "only",
      "always",
      "inactive",
      "development",
      "active",
      "avoid",
      "polluting",
      "the",
      "analytics",
      "statistics",
      "Installation",
      "installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "docusaurus",
      "preset",
      "classic",
      "don",
      "need",
      "this",
      "dependency",
      "through",
      "options",
      "Configuration",
      "configuration",
      "Accepted",
      "fields",
      "block",
      "Name",
      "Type",
      "Default",
      "Description",
      "trackingID",
      "string",
      "Required",
      "tracking",
      "service",
      "possible",
      "provide",
      "multiple",
      "ids",
      "anonymizeIP",
      "boolean",
      "false",
      "Whether",
      "should",
      "anonymized",
      "when",
      "sending",
      "requests",
      "Example",
      "config",
      "Most",
      "users",
      "tabs",
      "Preset",
      "Options",
      "Plugin",
      "const",
      "true"
    ],
    "url": "/docs/api/plugins/plugin-google-gtag",
    "path": "api/plugins/plugin-google-gtag.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugin-google-tag-manager",
    "title": "📦 plugin-google-tag-manager",
    "description": "",
    "content": "📦 plugin-google-tag-manager import APITable from '@site/src/components/APITable'; A plugin for adding Google Tag Manager (gtm.js) to a Docusaurus site. Use this plugin in conjunction with the standard gtag plugin for in-depth analysis of how users are using your site. :::tip You can use Google's Tag Assistant tool to check if tag manager is set up correctly! ::: :::warning production only This plugin is always inactive in development and only active in production to avoid polluting the analytics statistics. ::: Installation {#installation} `bash npm2yarn npm install --save @docusaurus/plugin-google-tag-manager ` :::tip If you use the preset @docusaurus/preset-classic, you don't need to install this plugin as a dependency. You can configure this plugin through the preset options. ::: Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | containerId | string | Required | Your Tag Manager container Id (usually starts with GTM-). | `mdx-code-block </APITable> ` Example configuration {#ex-config} You can configure this plugin through preset options or plugin options. :::tip Most Docusaurus users configure this plugin through the preset options. ::: `js config-tabs // Preset Options: googleTagManager // Plugin Options: @docusaurus/plugin-google-tag-manager const config = { containerId: 'GTM-12345', }; `",
    "keywords": [
      "📦",
      "plugin-google-tag-manager",
      "api",
      "plugins",
      "plugin",
      "google",
      "tag",
      "manager",
      "mdx",
      "src",
      "components",
      "APITable",
      "preset-classic",
      "import",
      "from",
      "site",
      "for",
      "adding",
      "Google",
      "Tag",
      "Manager",
      "gtm",
      "Docusaurus",
      "Use",
      "this",
      "conjunction",
      "with",
      "the",
      "standard",
      "gtag",
      "depth",
      "analysis",
      "how",
      "users",
      "are",
      "using",
      "your",
      "tip",
      "You",
      "can",
      "use",
      "Assistant",
      "tool",
      "check",
      "set",
      "correctly",
      "warning",
      "production",
      "only",
      "This",
      "always",
      "inactive",
      "development",
      "and",
      "active",
      "avoid",
      "polluting",
      "analytics",
      "statistics",
      "Installation",
      "installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "docusaurus",
      "you",
      "preset",
      "classic",
      "don",
      "need",
      "dependency",
      "configure",
      "through",
      "options",
      "Configuration",
      "configuration",
      "Accepted",
      "fields",
      "code",
      "block",
      "Name",
      "Type",
      "Default",
      "Description",
      "containerId",
      "string",
      "Required",
      "Your",
      "container",
      "usually",
      "starts",
      "GTM",
      "Example",
      "config",
      "Most",
      "tabs",
      "Preset",
      "Options",
      "googleTagManager",
      "Plugin",
      "const"
    ],
    "url": "/docs/api/plugins/plugin-google-tag-manager",
    "path": "api/plugins/plugin-google-tag-manager.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugin-ideal-image",
    "title": "📦 plugin-ideal-image",
    "description": "",
    "content": "📦 plugin-ideal-image import APITable from '@site/src/components/APITable'; Docusaurus Plugin to generate an almost ideal image (responsive, lazy-loading, and low quality placeholder). :::info By default, the plugin is inactive in development so you could always view full-scale images. If you want to debug the ideal image behavior, you could set the disableInDev option to false. ::: Installation {#installation} `bash npm2yarn npm install --save @docusaurus/plugin-ideal-image ` Usage {#usage} This plugin supports the PNG and JPG formats only. `jsx import Image from '@theme/IdealImage'; import thumbnail from './path/to/img.png'; // your React code <Image img={thumbnail} /> // or <Image img={require('./path/to/img.png')} /> ` :::warning This plugin registers a Webpack loader that changes the type of imported/require images: Before: string After: {preSrc: string, src: import(\"@theme/IdealImage\").SrcImage} ::: :::warning For pnpm users Starting with pnpm 10, running pnpm install won't run dependency install scripts by default. You'll need additional pnpm configuration (issue) for our sharp image resizing dependency to install correctly, such as: `json title=\"package.json\" { \"pnpm\": { \"onlyBuiltDependencies\": [\"fsevents\"] } } ` ::: Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Option | Type | Default | Description | | --- | --- | --- | --- | | name | string | ideal-img/[name].[hash:hex:7].[width].[ext] | Filename template for output files. | | sizes | number[] | _original size_ | Specify all widths you want to use. If a specified size exceeds the original image's width, the latter will be used (i.e. images won't be scaled up). | | size | number | _original size_ | Specify one width you want to use; if the specified size exceeds the original image's width, the latter will be used (i.e. images won't be scaled up) | | min | number | | As an alternative to manually specifying sizes, you can specify min, max and steps, and the sizes will be generated for you. | | max | number | | See min above | | steps | number | 4 | Configure the number of images generated between min and max (inclusive) | | quality | number | 85 | JPEG compression quality | | disableInDev | boolean | true | You can test ideal image behavior in dev mode by setting this to false. Tip: use network throttling in your browser to simulate slow networks. | `mdx-code-block </APITable> ` Example configuration {#ex-config} Here's an example configuration: `js title=\"docusaurus.config.js\" export default { plugins: [ [ '@docusaurus/plugin-ideal-image', // highlight-start { quality: 70, max: 1030, // max resized image's size. min: 640, // min resized image's size. if original is lower, use that size. steps: 2, // the max number of images generated between min and max (inclusive) disableInDev: false, }, // highlight-end ], ], }; `",
    "keywords": [
      "📦",
      "plugin-ideal-image",
      "api",
      "plugins",
      "plugin",
      "ideal",
      "image",
      "mdx",
      "src",
      "components",
      "APITable",
      "IdealImage",
      "path",
      "to",
      "img",
      "require",
      "import",
      "from",
      "site",
      "Docusaurus",
      "Plugin",
      "generate",
      "almost",
      "responsive",
      "lazy",
      "loading",
      "and",
      "low",
      "quality",
      "placeholder",
      "info",
      "default",
      "the",
      "inactive",
      "development",
      "you",
      "could",
      "always",
      "view",
      "full",
      "scale",
      "images",
      "want",
      "debug",
      "behavior",
      "set",
      "disableInDev",
      "option",
      "false",
      "Installation",
      "installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "docusaurus",
      "Usage",
      "usage",
      "This",
      "supports",
      "PNG",
      "JPG",
      "formats",
      "only",
      "jsx",
      "Image",
      "theme",
      "thumbnail",
      "png",
      "your",
      "React",
      "code",
      "warning",
      "registers",
      "Webpack",
      "loader",
      "that",
      "changes",
      "type",
      "imported",
      "Before",
      "string",
      "After",
      "preSrc",
      "SrcImage",
      "For",
      "pnpm",
      "users",
      "Starting",
      "with",
      "running",
      "won",
      "run",
      "dependency",
      "scripts",
      "You",
      "need",
      "additional",
      "configuration",
      "issue",
      "for",
      "our",
      "sharp",
      "resizing",
      "correctly",
      "such",
      "json",
      "title",
      "package",
      "fsevents",
      "Configuration",
      "Accepted",
      "fields",
      "block",
      "Option",
      "Type",
      "Default",
      "Description",
      "name",
      "hash",
      "hex",
      "width",
      "ext",
      "Filename",
      "template",
      "output",
      "files",
      "sizes",
      "number",
      "_original",
      "size_",
      "Specify",
      "all",
      "widths",
      "use",
      "specified",
      "size",
      "exceeds",
      "original",
      "latter",
      "will",
      "used",
      "scaled",
      "one",
      "min",
      "alternative",
      "manually",
      "specifying",
      "can",
      "specify",
      "max",
      "steps",
      "generated",
      "See",
      "above",
      "Configure",
      "between",
      "inclusive",
      "JPEG",
      "compression",
      "boolean",
      "true",
      "test",
      "dev",
      "mode",
      "setting",
      "this",
      "Tip",
      "network",
      "throttling",
      "browser",
      "simulate",
      "slow",
      "networks",
      "Example",
      "config",
      "Here",
      "example",
      "export",
      "highlight",
      "start",
      "resized",
      "lower",
      "end"
    ],
    "url": "/docs/api/plugins/plugin-ideal-image",
    "path": "api/plugins/plugin-ideal-image.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugin-pwa",
    "title": "📦 plugin-pwa",
    "description": "",
    "content": "📦 plugin-pwa Docusaurus Plugin to add PWA support using Workbox. This plugin generates a Service Worker in production build only, and allows you to create fully PWA-compliant documentation site with offline and installation support. Installation {#installation} `bash npm2yarn npm install --save @docusaurus/plugin-pwa ` Configuration {#configuration} Create a PWA manifest at ./static/manifest.json. Modify docusaurus.config.js with a minimal PWA config, like: `js title=\"docusaurus.config.js\" export default { plugins: [ [ '@docusaurus/plugin-pwa', { debug: true, offlineModeActivationStrategies: [ 'appInstalled', 'standalone', 'queryString', ], pwaHead: [ { tagName: 'link', rel: 'icon', href: '/img/docusaurus.png', }, { tagName: 'link', rel: 'manifest', href: '/manifest.json', // your PWA manifest }, { tagName: 'meta', name: 'theme-color', content: 'rgb(37, 194, 160)', }, ], }, ], ], }; ` Progressive Web App {#progressive-web-app} Having a service worker installed is not enough to make your application a PWA. You'll need to at least include a Web App Manifest and have the correct tags in <head> (Options > pwaHead). After deployment, you can use Lighthouse to run an audit on your site. For a more exhaustive list of what it takes for your site to be a PWA, refer to the PWA Checklist App installation support {#app-installation-support} If your browser supports it, you should be able to install a Docusaurus site as an app. !A screen recording of the installation process. A button appears in the address bar of the browser, which displays a dialog asking \"install this application?\" when clicked. After clicking the \"Install\" button, a new application is opened in the operating system, opening to the Docusaurus homepage. :::note App installation requires the HTTPS protocol and a valid manifest. ::: Offline mode (precaching) {#offline-mode-precaching} We enable users to browse a Docusaurus site offline, by using service-worker precaching. The workbox-precaching page explains the idea: > One feature of service workers is the ability to save a set of files to the cache when the service worker is installing. This is often referred to as \"precaching\", since you are caching content ahead of the service worker being used. > > The main reason for doing this is that it gives developers control over the cache, meaning they can determine when and how long a file is cached as well as serve it to the browser without going to the network, meaning it can be used to create web apps that work offline. > > Workbox takes a lot of the heavy lifting out of precaching by simplifying the API and ensuring assets are downloaded efficiently. By default, offline mode is enabled when the site is installed as an app. See the offlineModeActivationStrategies option for details. After the site has been precached, the service worker will serve cached responses for later visits. When a new build is deployed along with a new service worker, the new one will begin installing and eventually move to a waiting state. During this waiting state, a reload popup will show and ask the user to reload the page for new content. Until the user either clears the application cache or clicks the reload button on the popup, the service worker will continue serving the old content. :::warning Offline mode / precaching requires downloading all the static assets of the site ahead of time, and can consume unnecessary bandwidth. It may not be a good idea to activate it for all kind of sites. ::: Options {#options} debug {#debug} Type: boolean Default: false Turn debug mode on: Workbox logs Additional Docusaurus logs Unoptimized SW file output Source maps offlineModeActivationStrategies {#offlinemodeactivationstrategies} Type: ('appInstalled' | 'mobile' | 'saveData'| 'queryString' | 'always')[] Default: ['appInstalled', 'queryString', 'standalone'] Strategies used to turn the offline mode on: appInstalled: activates for users having installed the site as an app (not 100% reliable) standalone: activates for users running the app as standalone (often the case once a PWA is installed) queryString: activates if queryString contains offlineMode=true (convenient for PWA debugging) mobile: activates for mobile users (width <= 996px) saveData: activates for users with navigator.connection.saveData === true always: activates for all users :::warning Use this carefully: some users may not like to be forced to use the offline mode. ::: :::danger It is not possible to detect if a page is rendered as a PWA in a reliable manner. The appinstalled event has been removed from the specification, and the navigator.getInstalledRelatedApps() API is only supported in recent Chrome versions and require related_applications declared in the manifest. The standalone strategy is a nice fallback to activate the offline mode (at least when running the installed app). ::: injectManifestConfig {#injectmanifestconfig} Workbox options to pass to workbox.injectManifest(). This gives you control over which assets will be precached, and be available offline. Type: InjectManifestOptions Default: {} `js title=\"docusaurus.config.js\" export default { plugins: [ [ '@docusaurus/plugin-pwa', { injectManifestConfig: { manifestTransforms: [ //... ], modifyURLPrefix: { //... }, // We already add regular static assets (HTML, images...) to be available offline // You can add more files according to your needs globPatterns: ['/*.{pdf,docx,xlsx}'], // ... }, }, ], ], }; ` pwaHead {#pwahead} Type: ({ tagName: string; [attributeName: string]: string })[] Default: [] Array of objects containing tagName and key-value pairs for attributes to inject into the <head> tag. Technically you can inject any head tag through this, but it's ideally used for tags to make your site PWA compliant. Here's a list of tag to make your app fully compliant: `js export default { plugins: [ [ '@docusaurus/plugin-pwa', { pwaHead: [ { tagName: 'link', rel: 'icon', href: '/img/docusaurus.png', }, { tagName: 'link', rel: 'manifest', href: '/manifest.json', }, { tagName: 'meta', name: 'theme-color', content: 'rgb(37, 194, 160)', }, { tagName: 'meta', name: 'apple-mobile-web-app-capable', content: 'yes', }, { tagName: 'meta', name: 'apple-mobile-web-app-status-bar-style', content: '#000', }, { tagName: 'link', rel: 'apple-touch-icon', href: '/img/docusaurus.png', }, { tagName: 'link', rel: 'mask-icon', href: '/img/docusaurus.svg', color: 'rgb(37, 194, 160)', }, { tagName: 'meta', name: 'msapplication-TileImage', content: '/img/docusaurus.png', }, { tagName: 'meta', name: 'msapplication-TileColor', content: '#000', }, ], }, ], ], }; ` swCustom {#swcustom} Type: string | undefined Default: undefined Useful for additional Workbox rules. You can do whatever a service worker can do here, and use the full power of workbox libraries. The code is transpiled, so you can use modern ES6+ syntax here. For example, to cache files from external routes: `js import {registerRoute} from 'workbox-routing'; import {StaleWhileRevalidate} from 'workbox-strategies'; // default fn export receiving some useful params export default function swCustom(params) { const { debug, // :boolean offlineMode, // :boolean } = params; // Cache responses from external resources registerRoute((context) => { return [ /graph\\.facebook\\.com\\/.*\\/picture/, /netlify\\.com\\/img/, /avatars1\\.githubusercontent/, ].some((regex) => context.url.href.match(regex)); }, new StaleWhileRevalidate()); } ` The module should have a default function export, and receives some params. swRegister {#swregister} Type: string | false Default: 'docusaurus-plugin-pwa/src/registerSW.js' Adds an entry before the Docusaurus app so that registration can happen before the app runs. The default registerSW.js file is enough for simple registration. Passing false will disable registration entirely. Manifest example {#manifest-example} The Docusaurus site manifest can serve as an inspiration: `mdx-code-block import CodeBlock from '@theme/CodeBlock'; <CodeBlock className=\"language-json\"> {JSON.stringify(require('@site/static/manifest.json'),null,2)} </CodeBlock> ` Customizing reload popup {#customizing-reload-popup} The @theme/PwaReloadPopup component is rendered when a new service worker is waiting to be installed, and we suggest a reload to the user. You can swizzle this component and implement your own UI. It will receive an onReload callback as props, which should be called when the reload button is clicked. This will tell the service worker to install the waiting service worker and reload the page. The default theme includes an implementation for the reload popup and uses Infima Alerts. !A screen recording of the reload process. An alert box shows in the bottom right of the window, saying \"New content available\". After clicking the \"Refresh\" button, the page's main heading changes from \"Introduction\" to \"PWA :))\". Your component can render null, but this is not recommended: users won't have a way to get up-to-date content.",
    "keywords": [
      "📦",
      "plugin-pwa",
      "api",
      "plugins",
      "plugin",
      "pwa",
      "mdx",
      "static",
      "manifest",
      "img",
      "docusaurus",
      "graph",
      "picture",
      "netlify",
      "avatars1",
      "src",
      "registerSW",
      "CodeBlock",
      "PwaReloadPopup",
      "Docusaurus",
      "Plugin",
      "add",
      "PWA",
      "support",
      "using",
      "Workbox",
      "This",
      "generates",
      "Service",
      "Worker",
      "production",
      "build",
      "only",
      "and",
      "allows",
      "you",
      "create",
      "fully",
      "compliant",
      "documentation",
      "site",
      "with",
      "offline",
      "installation",
      "Installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "Configuration",
      "configuration",
      "Create",
      "json",
      "Modify",
      "config",
      "minimal",
      "like",
      "title",
      "export",
      "default",
      "debug",
      "true",
      "appInstalled",
      "standalone",
      "queryString",
      "pwaHead",
      "tagName",
      "link",
      "rel",
      "icon",
      "href",
      "png",
      "your",
      "meta",
      "name",
      "theme",
      "color",
      "content",
      "rgb",
      "Progressive",
      "Web",
      "App",
      "progressive",
      "web",
      "app",
      "Having",
      "service",
      "worker",
      "installed",
      "not",
      "enough",
      "make",
      "application",
      "You",
      "need",
      "least",
      "include",
      "Manifest",
      "have",
      "the",
      "correct",
      "tags",
      "head",
      "Options",
      "After",
      "deployment",
      "can",
      "use",
      "Lighthouse",
      "run",
      "audit",
      "For",
      "more",
      "exhaustive",
      "list",
      "what",
      "takes",
      "for",
      "refer",
      "Checklist",
      "browser",
      "supports",
      "should",
      "able",
      "screen",
      "recording",
      "process",
      "button",
      "appears",
      "address",
      "bar",
      "which",
      "displays",
      "dialog",
      "asking",
      "this",
      "when",
      "clicked",
      "clicking",
      "Install",
      "new",
      "opened",
      "operating",
      "system",
      "opening",
      "homepage",
      "note",
      "requires",
      "HTTPS",
      "protocol",
      "valid",
      "Offline",
      "mode",
      "precaching",
      "enable",
      "users",
      "browse",
      "The",
      "workbox",
      "page",
      "explains",
      "idea",
      "One",
      "feature",
      "workers",
      "ability",
      "set",
      "files",
      "cache",
      "installing",
      "often",
      "referred",
      "since",
      "are",
      "caching",
      "ahead",
      "being",
      "used",
      "main",
      "reason",
      "doing",
      "that",
      "gives",
      "developers",
      "control",
      "over",
      "meaning",
      "they",
      "determine",
      "how",
      "long",
      "file",
      "cached",
      "well",
      "serve",
      "without",
      "going",
      "network",
      "apps",
      "work",
      "lot",
      "heavy",
      "lifting",
      "out",
      "simplifying",
      "API",
      "ensuring",
      "assets",
      "downloaded",
      "efficiently",
      "enabled",
      "See",
      "option",
      "details",
      "has",
      "been",
      "precached",
      "will",
      "responses",
      "later",
      "visits",
      "When",
      "deployed",
      "along",
      "one",
      "begin",
      "eventually",
      "move",
      "waiting",
      "state",
      "During",
      "reload",
      "popup",
      "show",
      "ask",
      "user",
      "Until",
      "either",
      "clears",
      "clicks",
      "continue",
      "serving",
      "old",
      "warning",
      "downloading",
      "all",
      "time",
      "consume",
      "unnecessary",
      "bandwidth",
      "may",
      "good",
      "activate",
      "kind",
      "sites",
      "options",
      "Type",
      "boolean",
      "Default",
      "false",
      "Turn",
      "logs",
      "Additional",
      "Unoptimized",
      "output",
      "Source",
      "maps",
      "mobile",
      "saveData",
      "always",
      "Strategies",
      "turn",
      "activates",
      "having",
      "reliable",
      "running",
      "case",
      "once",
      "contains",
      "offlineMode",
      "convenient",
      "debugging",
      "width",
      "navigator",
      "connection",
      "Use",
      "carefully",
      "some",
      "forced",
      "danger",
      "possible",
      "detect",
      "rendered",
      "manner",
      "appinstalled",
      "event",
      "removed",
      "from",
      "specification",
      "supported",
      "recent",
      "Chrome",
      "versions",
      "require",
      "related_applications",
      "declared",
      "strategy",
      "nice",
      "fallback",
      "injectManifestConfig",
      "injectmanifestconfig",
      "pass",
      "injectManifest",
      "available",
      "manifestTransforms",
      "modifyURLPrefix",
      "already",
      "regular",
      "HTML",
      "images",
      "according",
      "needs",
      "globPatterns",
      "pdf",
      "docx",
      "xlsx",
      "pwahead",
      "string",
      "attributeName",
      "Array",
      "objects",
      "containing",
      "key",
      "value",
      "pairs",
      "attributes",
      "inject",
      "into",
      "tag",
      "Technically",
      "any",
      "through",
      "but",
      "ideally",
      "Here",
      "apple",
      "capable",
      "yes",
      "status",
      "style",
      "touch",
      "mask",
      "svg",
      "msapplication",
      "TileImage",
      "TileColor",
      "swCustom",
      "swcustom",
      "undefined",
      "Useful",
      "additional",
      "rules",
      "whatever",
      "here",
      "full",
      "power",
      "libraries",
      "code",
      "transpiled",
      "modern",
      "ES6",
      "syntax",
      "example",
      "external",
      "routes",
      "import",
      "registerRoute",
      "routing",
      "StaleWhileRevalidate",
      "strategies",
      "receiving",
      "useful",
      "params",
      "function",
      "const",
      "Cache",
      "resources",
      "context",
      "return",
      "facebook",
      "com",
      "githubusercontent",
      "regex",
      "url",
      "match",
      "module",
      "receives",
      "swRegister",
      "swregister",
      "Adds",
      "entry",
      "before",
      "registration",
      "happen",
      "runs",
      "simple",
      "Passing",
      "disable",
      "entirely",
      "inspiration",
      "block",
      "className",
      "language",
      "JSON",
      "stringify",
      "null",
      "Customizing",
      "customizing",
      "component",
      "suggest",
      "swizzle",
      "implement",
      "own",
      "receive",
      "onReload",
      "callback",
      "props",
      "called",
      "tell",
      "includes",
      "implementation",
      "uses",
      "Infima",
      "Alerts",
      "alert",
      "box",
      "shows",
      "bottom",
      "right",
      "window",
      "saying",
      "New",
      "Refresh",
      "heading",
      "changes",
      "Introduction",
      "Your",
      "render",
      "recommended",
      "won",
      "way",
      "get",
      "date"
    ],
    "url": "/docs/api/plugins/plugin-pwa",
    "path": "api/plugins/plugin-pwa.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugin-rsdoctor",
    "title": "📦 plugin-rsdoctor",
    "description": "",
    "content": "📦 plugin-rsdoctor import APITable from '@site/src/components/APITable'; A Rsdoctor plugin can help you troubleshoot the bundling phase of your Docusaurus site, supporting both Webpack and Rspack. :::tip Use it to figure out which plugin or loader is slowing down the bundler, and focus your efforts on optimizing the bottleneck. ::: Installation {#installation} `bash npm2yarn npm install --save @docusaurus/plugin-rsdoctor ` Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | rsdoctorOptions | object | {} | The Rsdoctor bundler plugin options, forwarded as is | `mdx-code-block </APITable> ` Example configuration {#ex-config} You can configure this plugin through plugin options. `js title=\"docusaurus.config.js\" export default { plugins: [ [ 'rsdoctor', { rsdoctorOptions: { mode: 'lite', }, }, ], ], }; `",
    "keywords": [
      "📦",
      "plugin-rsdoctor",
      "api",
      "plugins",
      "plugin",
      "rsdoctor",
      "mdx",
      "src",
      "components",
      "APITable",
      "import",
      "from",
      "site",
      "Rsdoctor",
      "can",
      "help",
      "you",
      "troubleshoot",
      "the",
      "bundling",
      "phase",
      "your",
      "Docusaurus",
      "supporting",
      "both",
      "Webpack",
      "and",
      "Rspack",
      "tip",
      "Use",
      "figure",
      "out",
      "which",
      "loader",
      "slowing",
      "down",
      "bundler",
      "focus",
      "efforts",
      "optimizing",
      "bottleneck",
      "Installation",
      "installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "docusaurus",
      "Configuration",
      "configuration",
      "Accepted",
      "fields",
      "code",
      "block",
      "Name",
      "Type",
      "Default",
      "Description",
      "rsdoctorOptions",
      "object",
      "The",
      "options",
      "forwarded",
      "Example",
      "config",
      "You",
      "configure",
      "this",
      "through",
      "title",
      "export",
      "default",
      "mode",
      "lite"
    ],
    "url": "/docs/api/plugins/plugin-rsdoctor",
    "path": "api/plugins/plugin-rsdoctor.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugin-sitemap",
    "title": "📦 plugin-sitemap",
    "description": "",
    "content": "📦 plugin-sitemap import APITable from '@site/src/components/APITable'; This plugin creates sitemaps for your site so that search engine crawlers can crawl your site more accurately. :::warning production only This plugin is always inactive in development and only active in production because it works on the build output. ::: Installation {#installation} `bash npm2yarn npm install --save @docusaurus/plugin-sitemap ` :::tip If you use the preset @docusaurus/preset-classic, you don't need to install this plugin as a dependency. You can configure this plugin through the preset options. ::: Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | lastmod | 'date' \\| 'datetime' \\| null | null | date is YYYY-MM-DD. datetime is a ISO 8601 datetime. null is disabled. See sitemap docs. | | changefreq | string \\| null | 'weekly' | See sitemap docs | | priority | number \\| null | 0.5 | See sitemap docs | | ignorePatterns | string[] | [] | A list of glob patterns; matching route paths will be filtered from the sitemap. Note that you may need to include the base URL in here. | | filename | string | sitemap.xml | The path to the created sitemap file, relative to the output directory. Useful if you have two plugin instances outputting two files. | | createSitemapItems | <code>CreateSitemapItemsFn \\| undefined</code> | undefined | An optional function which can be used to transform and / or filter the items in the sitemap. | `mdx-code-block </APITable> ` Types {#types} CreateSitemapItemsFn {#CreateSitemapItemsFn} `ts type CreateSitemapItemsFn = (params: { siteConfig: DocusaurusConfig; routes: RouteConfig[]; defaultCreateSitemapItems: CreateSitemapItemsFn; }) => Promise<SitemapItem[]>; ` :::info This plugin also respects some site config: noIndex: results in no sitemap generated trailingSlash: determines if the URLs in the sitemap have trailing slashes ::: :::note About lastmod The lastmod option will only output a sitemap <lastmod> tag if plugins provide route metadata attributes sourceFilePath and/or lastUpdatedAt. All the official content plugins provide the metadata for routes backed by a content file (Markdown, MDX or React page components), but it is possible third-party plugin authors do not provide this information, and the plugin will not be able to output a <lastmod> tag for their routes. ::: Example configuration {#ex-config} You can configure this plugin through preset options or plugin options. :::tip Most Docusaurus users configure this plugin through the preset options. ::: `js config-tabs // Preset Options: sitemap // Plugin Options: @docusaurus/plugin-sitemap const config = { lastmod: 'date', changefreq: 'weekly', priority: 0.5, ignorePatterns: ['/tags/'], filename: 'sitemap.xml', createSitemapItems: async (params) => { const {defaultCreateSitemapItems, ...rest} = params; const items = await defaultCreateSitemapItems(rest); return items.filter((item) => !item.url.includes('/page/')); }, }; ` You can find your sitemap at /sitemap.xml.",
    "keywords": [
      "📦",
      "plugin-sitemap",
      "api",
      "plugins",
      "plugin",
      "sitemap",
      "mdx",
      "src",
      "components",
      "APITable",
      "preset-classic",
      "code",
      "or",
      "tags",
      "page",
      "import",
      "from",
      "site",
      "This",
      "creates",
      "sitemaps",
      "for",
      "your",
      "that",
      "search",
      "engine",
      "crawlers",
      "can",
      "crawl",
      "more",
      "accurately",
      "warning",
      "production",
      "only",
      "always",
      "inactive",
      "development",
      "and",
      "active",
      "because",
      "works",
      "the",
      "build",
      "output",
      "Installation",
      "installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "docusaurus",
      "tip",
      "you",
      "use",
      "preset",
      "classic",
      "don",
      "need",
      "this",
      "dependency",
      "You",
      "configure",
      "through",
      "options",
      "Configuration",
      "configuration",
      "Accepted",
      "fields",
      "block",
      "Name",
      "Type",
      "Default",
      "Description",
      "lastmod",
      "date",
      "datetime",
      "null",
      "YYYY",
      "ISO",
      "disabled",
      "See",
      "docs",
      "changefreq",
      "string",
      "weekly",
      "priority",
      "number",
      "ignorePatterns",
      "list",
      "glob",
      "patterns",
      "matching",
      "route",
      "paths",
      "will",
      "filtered",
      "Note",
      "may",
      "include",
      "base",
      "URL",
      "here",
      "filename",
      "xml",
      "The",
      "path",
      "created",
      "file",
      "relative",
      "directory",
      "Useful",
      "have",
      "two",
      "instances",
      "outputting",
      "files",
      "createSitemapItems",
      "CreateSitemapItemsFn",
      "undefined",
      "optional",
      "function",
      "which",
      "used",
      "transform",
      "filter",
      "items",
      "Types",
      "types",
      "type",
      "params",
      "siteConfig",
      "DocusaurusConfig",
      "routes",
      "RouteConfig",
      "Promise",
      "SitemapItem",
      "info",
      "also",
      "respects",
      "some",
      "config",
      "noIndex",
      "results",
      "generated",
      "trailingSlash",
      "determines",
      "URLs",
      "trailing",
      "slashes",
      "note",
      "About",
      "option",
      "tag",
      "provide",
      "metadata",
      "attributes",
      "sourceFilePath",
      "lastUpdatedAt",
      "All",
      "official",
      "content",
      "backed",
      "Markdown",
      "MDX",
      "React",
      "but",
      "possible",
      "third",
      "party",
      "authors",
      "not",
      "information",
      "able",
      "their",
      "Example",
      "Most",
      "Docusaurus",
      "users",
      "tabs",
      "Preset",
      "Options",
      "Plugin",
      "const",
      "async",
      "rest",
      "await",
      "return",
      "item",
      "url",
      "includes",
      "find"
    ],
    "url": "/docs/api/plugins/plugin-sitemap",
    "path": "api/plugins/plugin-sitemap.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugin-svgr",
    "title": "📦 plugin-svgr",
    "description": "",
    "content": "📦 plugin-svgr import APITable from '@site/src/components/APITable'; An SVGR plugin to transform SVG files into React components automatically at build time. Installation {#installation} `bash npm2yarn npm install --save @docusaurus/plugin-svgr ` :::tip If you use the preset @docusaurus/preset-classic, you don't need to install this plugin as a dependency. You can configure this plugin through the preset options. ::: Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | svgrConfig | object | {} | The SVGR config options, forwarded as is | `mdx-code-block </APITable> ` Example configuration {#ex-config} You can configure this plugin through plugin options. `js config-tabs // Preset Options: svgr // Plugin Options: @docusaurus/plugin-svgr const config = { svgrConfig: { / SVGR config / }, }; `",
    "keywords": [
      "📦",
      "plugin-svgr",
      "api",
      "plugins",
      "plugin",
      "svgr",
      "mdx",
      "src",
      "components",
      "APITable",
      "preset-classic",
      "import",
      "from",
      "site",
      "SVGR",
      "transform",
      "SVG",
      "files",
      "into",
      "React",
      "automatically",
      "build",
      "time",
      "Installation",
      "installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "docusaurus",
      "tip",
      "you",
      "use",
      "the",
      "preset",
      "classic",
      "don",
      "need",
      "this",
      "dependency",
      "You",
      "can",
      "configure",
      "through",
      "options",
      "Configuration",
      "configuration",
      "Accepted",
      "fields",
      "code",
      "block",
      "Name",
      "Type",
      "Default",
      "Description",
      "svgrConfig",
      "object",
      "The",
      "config",
      "forwarded",
      "Example",
      "tabs",
      "Preset",
      "Options",
      "Plugin",
      "const"
    ],
    "url": "/docs/api/plugins/plugin-svgr",
    "path": "api/plugins/plugin-svgr.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "plugin-vercel-analytics",
    "title": "📦 plugin-vercel-analytics",
    "description": "",
    "content": "📦 plugin-vercel-analytics import APITable from '@site/src/components/APITable'; Vercel Analytics provides comprehensive insights into your website's visitors, tracking top pages, referrers, and demographics like location, operating systems, and browser info. :::warning production only This plugin is always inactive in development and only active in production (docusaurus build) to avoid polluting the analytics statistics. ::: Installation {#installation} `bash npm2yarn npm install --save @docusaurus/plugin-vercel-analytics ` Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | mode | string | 'auto' | Override the automatic environment detection. Read the official docs for details. | | debug | boolean | undefined | Enable browser console logging of analytics events. Read the official docs for details. | `mdx-code-block </APITable> ` Example configuration {#ex-config} You can configure this plugin through plugin options. `js title=\"docusaurus.config.js\" export default { plugins: [ [ 'vercel-analytics', { debug: true, mode: 'auto', }, ], ], }; `",
    "keywords": [
      "📦",
      "plugin-vercel-analytics",
      "api",
      "plugins",
      "plugin",
      "vercel",
      "analytics",
      "mdx",
      "src",
      "components",
      "APITable",
      "import",
      "from",
      "site",
      "Vercel",
      "Analytics",
      "provides",
      "comprehensive",
      "insights",
      "into",
      "your",
      "website",
      "visitors",
      "tracking",
      "top",
      "pages",
      "referrers",
      "and",
      "demographics",
      "like",
      "location",
      "operating",
      "systems",
      "browser",
      "info",
      "warning",
      "production",
      "only",
      "This",
      "always",
      "inactive",
      "development",
      "active",
      "docusaurus",
      "build",
      "avoid",
      "polluting",
      "the",
      "statistics",
      "Installation",
      "installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "Configuration",
      "configuration",
      "Accepted",
      "fields",
      "code",
      "block",
      "Name",
      "Type",
      "Default",
      "Description",
      "mode",
      "string",
      "auto",
      "Override",
      "automatic",
      "environment",
      "detection",
      "Read",
      "official",
      "docs",
      "for",
      "details",
      "debug",
      "boolean",
      "undefined",
      "Enable",
      "console",
      "logging",
      "events",
      "Example",
      "config",
      "You",
      "can",
      "configure",
      "this",
      "through",
      "options",
      "title",
      "export",
      "default",
      "true"
    ],
    "url": "/docs/api/plugins/plugin-vercel-analytics",
    "path": "api/plugins/plugin-vercel-analytics.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "themes-overview",
    "title": "Docusaurus themes",
    "description": "",
    "content": "Docusaurus themes We provide official Docusaurus themes. Main themes {#main-themes} The main themes implement the user interface for the docs, blog and pages plugins. @docusaurus/theme-classic 🚧 other themes are planned :::warning The goal is to have all themes share the exact same features, user-experience and configuration. Only the UI design and underlying styling framework should change, and you should be able to change theme easily. We are not there yet: only the classic theme is production ready. ::: Enhancement themes {#enhancement-themes} These themes will enhance the existing main themes with additional user-interface related features. @docusaurus/theme-live-codeblock @docusaurus/theme-search-algolia",
    "keywords": [
      "docusaurus",
      "themes",
      "api",
      "overview",
      "mdx",
      "theme-classic",
      "theme-live-codeblock",
      "theme-search-algolia",
      "Docusaurus",
      "provide",
      "official",
      "Main",
      "main",
      "The",
      "implement",
      "the",
      "user",
      "interface",
      "for",
      "docs",
      "blog",
      "and",
      "pages",
      "plugins",
      "theme",
      "classic",
      "other",
      "are",
      "planned",
      "warning",
      "goal",
      "have",
      "all",
      "share",
      "exact",
      "same",
      "features",
      "experience",
      "configuration",
      "Only",
      "design",
      "underlying",
      "styling",
      "framework",
      "should",
      "change",
      "you",
      "able",
      "easily",
      "not",
      "there",
      "yet",
      "only",
      "production",
      "ready",
      "Enhancement",
      "enhancement",
      "These",
      "will",
      "enhance",
      "existing",
      "with",
      "additional",
      "related",
      "live",
      "codeblock",
      "search",
      "algolia"
    ],
    "url": "/docs/api/themes/overview",
    "path": "api/themes/overview.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "theme-classic",
    "title": "📦 theme-classic",
    "description": "",
    "content": "📦 theme-classic import APITable from '@site/src/components/APITable'; The classic theme for Docusaurus. You can refer to the theme configuration page for more details on the configuration. `bash npm2yarn npm install --save @docusaurus/theme-classic ` :::tip If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency. ::: Configuration {#configuration} Accepted fields: `mdx-code-block <APITable> ` | Option | Type | Default | Description | | --- | --- | --- | --- | | customCss | <code>string[] \\| string</code> | [] | Stylesheets to be imported globally as client modules. Relative paths are resolved against the site directory. | `mdx-code-block </APITable> ` :::note Most configuration for the theme is done in themeConfig, which can be found in theme configuration. ::: Example configuration {#ex-config} You can configure this theme through preset options or plugin options. :::tip Most Docusaurus users configure this plugin through the preset options. ::: `js config-tabs // Preset Options: theme // Plugin Options: @docusaurus/theme-classic const config = { customCss: './src/css/custom.css', }; `",
    "keywords": [
      "📦",
      "theme-classic",
      "api",
      "themes",
      "theme",
      "classic",
      "mdx",
      "src",
      "components",
      "APITable",
      "preset-classic",
      "code",
      "css",
      "custom",
      "import",
      "from",
      "site",
      "The",
      "for",
      "Docusaurus",
      "You",
      "can",
      "refer",
      "the",
      "configuration",
      "page",
      "more",
      "details",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "docusaurus",
      "tip",
      "you",
      "have",
      "installed",
      "preset",
      "don",
      "need",
      "dependency",
      "Configuration",
      "Accepted",
      "fields",
      "block",
      "Option",
      "Type",
      "Default",
      "Description",
      "customCss",
      "string",
      "Stylesheets",
      "imported",
      "globally",
      "client",
      "modules",
      "Relative",
      "paths",
      "are",
      "resolved",
      "against",
      "directory",
      "note",
      "Most",
      "done",
      "themeConfig",
      "which",
      "found",
      "Example",
      "config",
      "configure",
      "this",
      "through",
      "options",
      "plugin",
      "users",
      "tabs",
      "Preset",
      "Options",
      "Plugin",
      "const"
    ],
    "url": "/docs/api/themes/theme-classic",
    "path": "api/themes/theme-classic.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "theme-configuration",
    "title": "Theme configuration",
    "description": "",
    "content": "Theme configuration import APITable from '@site/src/components/APITable'; This configuration applies to all main themes. Common {#common} Color mode {#color-mode---dark-mode} The classic theme provides by default light and dark mode support, with a navbar switch for the user. It is possible to customize the color mode support within the colorMode object. Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | defaultMode | <code>'light' \\| 'dark'</code> | 'light' | The color mode when user first visits the site. | | disableSwitch | boolean | false | Hides the switch in the navbar. Useful if you want to support a single color mode. | | respectPrefersColorScheme | boolean | false | Whether to use the prefers-color-scheme media-query, using user system preferences, instead of the hardcoded defaultMode. | `mdx-code-block </APITable> ` Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { // highlight-start colorMode: { defaultMode: 'light', disableSwitch: false, respectPrefersColorScheme: false, }, // highlight-end }, }; ` :::warning With respectPrefersColorScheme: true, the defaultMode is overridden by user system preferences. If you only want to support one color mode, you likely want to ignore user system preferences. ::: Meta image {#meta-image} You can configure a default image that will be used for your meta tag, in particular og:image and twitter:image. Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | image | string | undefined | The meta image URL for the site. Relative to your site's \"static\" directory. Cannot be SVGs. Can be external URLs too. | `mdx-code-block </APITable> ` Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { // highlight-next-line image: 'img/docusaurus.png', }, }; ` Metadata {#metadata} You can configure additional HTML metadata (and override existing ones). Accepted fields: `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | metadata | Metadata[] | [] | Any field will be directly passed to the <meta /> tag. Possible fields include id, name, property, content, itemprop, etc. | `mdx-code-block </APITable> ` Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { // highlight-next-line metadata: [{name: 'twitter:card', content: 'summary'}], }, }; ` Announcement bar {#announcement-bar} Sometimes you want to announce something in your website. Just for such a case, you can add an announcement bar. This is a non-fixed and optionally dismissible panel above the navbar. All configuration are in the announcementBar object. Accepted fields: `mdx-code-block <APITable name=\"announcement-bar\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | id | string | 'announcement-bar' | Any value that will identify this message. | | content | string | '' | The text content of the announcement. HTML will be interpolated. | | backgroundColor | string | '#fff' | Background color of the entire bar. | | textColor | string | '#000' | Announcement text color. | | isCloseable | boolean | true | Whether this announcement can be dismissed with a '×' button. | `mdx-code-block </APITable> ` Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { // highlight-start announcementBar: { id: 'support_us', content: 'We are looking to revamp our docs, please fill <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"#\">this survey</a>', backgroundColor: '#fafbfc', textColor: '#091E42', isCloseable: false, }, // highlight-end }, }; ` Plugins Our main themes offer additional theme configuration options for Docusaurus core content plugins. Docs `mdx-code-block <APITable name=\"navbar-overview\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | versionPersistence | 'localStorage' \\| 'none' | undefined | Defines the browser persistence of the preferred docs version. | | sidebar.hideable | boolean | false | Show a hide button at the bottom of the sidebar. | | sidebar.autoCollapseCategories | boolean | false | Automatically collapse all sibling categories of the one you navigate to. | `mdx-code-block </APITable> ` Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { docs: { // highlight-start versionPersistence: 'localStorage', sidebar: { hideable: false, autoCollapseCategories: false, }, // highlight-end }, }, }; ` Blog `mdx-code-block <APITable name=\"navbar-overview\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | sidebar.groupByYear | boolean | true | Group sidebar blog posts by years. | `mdx-code-block </APITable> ` Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { blog: { // highlight-start sidebar: { groupByYear: true, }, // highlight-end }, }, }; ` Navbar {#navbar} Accepted fields: `mdx-code-block <APITable name=\"navbar-overview\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | title | string | undefined | Title for the navbar. | | logo | _See below_ | undefined | Customization of the logo object. | | items | NavbarItem[] | [] | A list of navbar items. See specification below. | | hideOnScroll | boolean | false | Whether the navbar is hidden when the user scrolls down. | | style | <code>'primary' \\| 'dark'</code> | Same as theme | Sets the navbar style, ignoring the dark/light theme. | `mdx-code-block </APITable> ` Navbar logo {#navbar-logo} The logo can be placed in static folder. Logo URL is set to base URL of your site by default. Although you can specify your own URL for the logo, if it is an external link, it will open in a new tab. In addition, you can override a value for the target attribute of logo link, it can come in handy if you are hosting docs website in a subdirectory of your main website, and in which case you probably do not need a link in the logo to the main website will open in a new tab. To improve dark mode support, you can also set a different logo for this mode. Accepted fields: `mdx-code-block <APITable name=\"navbar-logo\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | alt | string | undefined | Alt tag for the logo image. | | src | string | Required | URL to the logo image. Base URL is appended by default. | | srcDark | string | logo.src | An alternative image URL to use in dark mode. | | href | string | siteConfig.baseUrl | Link to navigate to when the logo is clicked. | | width | <code>string \\| number</code> | undefined | Specifies the width attribute. | | height | <code>string \\| number</code> | undefined | Specifies the height attribute. | | target | string | Calculated based on href (external links will open in a new tab, all others in the current one). | The target attribute of the link; controls whether the link is opened in a new tab, the current one, or otherwise. | | className | string | undefined | CSS class applied to the image. | | style | object | undefined | CSS inline style object. React/JSX flavor, using camelCase properties. | `mdx-code-block </APITable> ` Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { title: 'Site Title', // highlight-start logo: { alt: 'Site Logo', src: 'img/logo.svg', srcDark: 'img/logo_dark.svg', href: 'https://docusaurus.io/', target: '_self', width: 32, height: 32, className: 'custom-navbar-logo-class', style: {border: 'solid red'}, }, // highlight-end }, }, }; ` Navbar items {#navbar-items} You can add items to the navbar via themeConfig.navbar.items. `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { // highlight-start items: [ { type: 'doc', position: 'left', docId: 'introduction', label: 'Docs', }, {to: 'blog', label: 'Blog', position: 'left'}, { type: 'docsVersionDropdown', position: 'right', }, { type: 'localeDropdown', position: 'right', }, { href: 'https://github.com/facebook/docusaurus', position: 'right', className: 'header-github-link', 'aria-label': 'GitHub repository', }, ], // highlight-end }, }, }; ` The items can have different behaviors based on the type field. The sections below will introduce you to all the types of navbar items available. Navbar link {#navbar-link} By default, Navbar items are regular links (internal or external). React Router should automatically apply active link styling to links, but you can use activeBasePath in edge cases. For cases in which a link should be active on several different paths (such as when you have multiple doc folders under the same sidebar), you can use activeBaseRegex. activeBaseRegex is a more flexible alternative to activeBasePath and takes precedence over it -- Docusaurus parses it into a regular expression that is tested against the current URL. Outbound (external) links automatically get target=\"_blank\" rel=\"noopener noreferrer\" attributes. Accepted fields: `mdx-code-block <APITable name=\"navbar-link\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | type | 'default' | Optional | Sets the type of this item to a link. | | label | string | Required | The name to be shown for this item. | | html | string | Optional | Same as label, but renders pure HTML instead of text content. | | to | string | Required | Client-side routing, used for navigating within the website. The baseUrl will be automatically prepended to this value. | | href | string | Required | A full-page navigation, used for navigating outside of the website. Only one of to or href should be used. | | prependBaseUrlToHref | boolean | false | Prepends the baseUrl to href values. | | position | <code>'left' \\| 'right'</code> | 'left' | The side of the navbar this item should appear on. | | activeBasePath | string | to / href | To apply the active class styling on all routes starting with this path. This usually isn't necessary. | | activeBaseRegex | string | undefined | Alternative to activeBasePath if required. | | className | string | '' | Custom CSS class (for styling any item). | `mdx-code-block </APITable> ` :::note In addition to the fields above, you can specify other arbitrary attributes that can be applied to a HTML link. ::: Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { items: [ // highlight-start { to: 'docs/introduction', // Only one of \"to\" or \"href\" should be used // href: 'https://www.facebook.com', label: 'Introduction', // Only one of \"label\" or \"html\" should be used // html: '<b>Introduction</b>' position: 'left', activeBaseRegex: 'docs/(next|v8)', target: '_blank', }, // highlight-end ], }, }, }; ` Navbar dropdown {#navbar-dropdown} Navbar items of the type dropdown has the additional items field, an inner array of navbar items. Navbar dropdown items only accept the following \"link-like\" item types: Navbar link Navbar doc link Navbar docs version Navbar doc sidebar Navbar with custom HTML Note that the dropdown base item is a clickable link as well, so this item can receive any of the props of a plain navbar link. Accepted fields: `mdx-code-block <APITable name=\"navbar-dropdown\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | type | 'dropdown' | Optional | Sets the type of this item to a dropdown. | | label | string | Required | The name to be shown for this item. | | items | <code>LinkLikeItem[]</code> | Required | The items to be contained in the dropdown. | | position | <code>'left' \\| 'right'</code> | 'left' | The side of the navbar this item should appear on. | `mdx-code-block </APITable> ` Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { items: [ // highlight-start { type: 'dropdown', label: 'Community', position: 'left', items: [ { label: 'Facebook', href: 'https://www.facebook.com', }, { type: 'doc', label: 'Social', docId: 'social', }, // ... more items ], }, // highlight-end ], }, }, }; ` Navbar doc link {#navbar-doc-link} If you want to link to a specific doc, this special navbar item type will render the link to the doc of the provided docId. It will get the class navbar__link--active as long as you browse a doc of the same sidebar. Accepted fields: `mdx-code-block <APITable name=\"navbar-doc-link\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | type | 'doc' | Required | Sets the type of this item to a doc link. | | docId | string | Required | The ID of the doc that this item links to. | | label | string | docId | The name to be shown for this item. | | position | <code>'left' \\| 'right'</code> | 'left' | The side of the navbar this item should appear on. | | docsPluginId | string | 'default' | The ID of the docs plugin that the doc belongs to. | `mdx-code-block </APITable> ` Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { items: [ // highlight-start { type: 'doc', position: 'left', docId: 'introduction', label: 'Docs', }, // highlight-end ], }, }, }; ` Navbar linked to a sidebar {#navbar-doc-sidebar} You can link a navbar item to the first document link (which can be a doc link or a generated category index) of a given sidebar without having to hardcode a doc ID. Accepted fields: `mdx-code-block <APITable name=\"navbar-doc-sidebar\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | type | 'docSidebar' | Required | Sets the type of this navbar item to a sidebar's first document. | | sidebarId | string | Required | The ID of the sidebar that this item is linked to. | | label | string | First document link's sidebar label | The name to be shown for this item. | | position | <code>'left' \\| 'right'</code> | 'left' | The side of the navbar this item should appear on. | | docsPluginId | string | 'default' | The ID of the docs plugin that the sidebar belongs to. | `mdx-code-block </APITable> ` :::tip Use this navbar item type if your sidebar is updated often and the order is not stable. ::: Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { items: [ // highlight-start { type: 'docSidebar', position: 'left', sidebarId: 'api', label: 'API', }, // highlight-end ], }, }, }; ` `js title=\"sidebars.js\" export default { tutorial: [ { type: 'autogenerated', dirName: 'guides', }, ], api: [ // highlight-next-line 'cli', // The navbar item will be linking to this doc 'docusaurus-core', { type: 'autogenerated', dirName: 'api', }, ], }; ` Navbar docs version dropdown {#navbar-docs-version-dropdown} If you use docs with versioning, this special navbar item type that will render a dropdown with all your site's available versions. The user will be able to switch from one version to another, while staying on the same doc (as long as the doc ID is constant across versions). Accepted fields: `mdx-code-block <APITable name=\"navbar-docs-version-dropdown\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | type | 'docsVersionDropdown' | Required | Sets the type of this item to a docs version dropdown. | | position | <code>'left' \\| 'right'</code> | 'left' | The side of the navbar this item should appear on. | | dropdownItemsBefore | <code>LinkLikeItem[]</code> | [] | Add additional dropdown items at the beginning of the dropdown. | | dropdownItemsAfter | <code>LinkLikeItem[]</code> | [] | Add additional dropdown items at the end of the dropdown. | | docsPluginId | string | 'default' | The ID of the docs plugin that the doc versioning belongs to. | | dropdownActiveClassDisabled | boolean | false | Do not add the link active class when browsing docs. | | versions | DropdownVersions | undefined | Specify a custom list of versions to include in the dropdown. See the versioning guide for details. | `mdx-code-block </APITable> ` Types: `ts type DropdownVersion = { / Allows you to provide a custom display label for each version. */ label?: string; }; type DropdownVersions = string[] | {[versionName: string]: DropdownVersion}; ` Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { items: [ // highlight-start { type: 'docsVersionDropdown', position: 'left', dropdownItemsAfter: [{to: '/versions', label: 'All versions'}], dropdownActiveClassDisabled: true, }, // highlight-end ], }, }, }; ` Navbar docs version {#navbar-docs-version} If you use docs with versioning, this special navbar item type will link to the active/browsed version of your doc (depends on the current URL), and fallback to the latest version. Accepted fields: `mdx-code-block <APITable name=\"navbar-docs-version\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | type | 'docsVersion' | Required | Sets the type of this item to a doc version link. | | label | string | The active/latest version label. | The name to be shown for this item. | | to | string | The active/latest version. | The internal link that this item points to. | | position | <code>'left' \\| 'right'</code> | 'left' | The side of the navbar this item should appear on. | | docsPluginId | string | 'default' | The ID of the docs plugin that the doc versioning belongs to. | `mdx-code-block </APITable> ` Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { items: [ // highlight-start { type: 'docsVersion', position: 'left', to: '/path', label: 'label', }, // highlight-end ], }, }, }; ` Navbar locale dropdown {#navbar-locale-dropdown} If you use the i18n feature, this special navbar item type will render a dropdown with all your site's available locales. The user will be able to switch from one locale to another, while staying on the same page. Accepted fields: `mdx-code-block <APITable name=\"navbar-locale-dropdown\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | type | 'localeDropdown' | Required | Sets the type of this item to a locale dropdown. | | position | <code>'left' \\| 'right'</code> | 'left' | The side of the navbar this item should appear on. | | dropdownItemsBefore | <code>LinkLikeItem[]</code> | [] | Add additional dropdown items at the beginning of the dropdown. | | dropdownItemsAfter | <code>LinkLikeItem[]</code> | [] | Add additional dropdown items at the end of the dropdown. | | queryString | string | undefined | The query string to be appended to the URL. | `mdx-code-block </APITable> ` Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { items: [ // highlight-start { type: 'localeDropdown', position: 'left', dropdownItemsAfter: [ { to: 'https://my-site.com/help-us-translate', label: 'Help us translate', }, ], }, // highlight-end ], }, }, }; ` Navbar search {#navbar-search} If you use the search, the search bar will be the rightmost element in the navbar. However, with this special navbar item type, you can change the default location. `mdx-code-block <APITable name=\"navbar-search\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | type | 'search' | Required | Sets the type of this item to a search bar. | | position | <code>'left' \\| 'right'</code> | 'left' | The side of the navbar this item should appear on. | | className | string | / | Custom CSS class for this navbar item. | `mdx-code-block </APITable> ` `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { items: [ // highlight-start { type: 'search', position: 'right', }, // highlight-end ], }, }, }; ` Navbar with custom HTML {#navbar-with-custom-html} You can also render your own HTML markup inside a navbar item using this navbar item type. `mdx-code-block <APITable name=\"navbar-html\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | type | 'html' | Required | Sets the type of this item to a HTML element. | | position | <code>'left' \\| 'right'</code> | 'left' | The side of the navbar this item should appear on. | | className | string | '' | Custom CSS class for this navbar item. | | value | string | '' | Custom HTML to be rendered inside this navbar item. | `mdx-code-block </APITable> ` `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { items: [ // highlight-start { type: 'html', position: 'right', value: '<button>Give feedback</button>', }, // highlight-end ], }, }, }; ` Auto-hide sticky navbar {#auto-hide-sticky-navbar} You can enable this cool UI feature that automatically hides the navbar when a user starts scrolling down the page, and show it again when the user scrolls up. `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { // highlight-next-line hideOnScroll: true, }, }, }; ` Navbar style {#navbar-style} You can set the static Navbar style without disabling the theme switching ability. The selected style will always apply no matter which theme user have selected. Currently, there are two possible style options: dark and primary (based on the --ifm-color-primary color). You can see the styles preview in the Infima documentation. `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { // highlight-next-line style: 'primary', }, }, }; ` CodeBlock {#codeblock} Docusaurus uses Prism React Renderer to highlight code blocks. All configuration are in the prism object. Accepted fields: `mdx-code-block <APITable name=\"codeblock\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | theme | PrismTheme | palenight | The Prism theme to use for light-theme code blocks. | | darkTheme | PrismTheme | palenight | The Prism theme to use for dark-theme code blocks. | | defaultLanguage | string | undefined | The default language to use for code blocks not declaring any explicit language. | | magicComments | MagicCommentConfig[] | _see below_ | The list of magic comments. | `mdx-code-block </APITable> ` `ts type MagicCommentConfig = { className: string; line?: string; block?: {start: string; end: string}; }; ` `js const defaultMagicComments = [ { className: 'theme-code-block-highlighted-line', line: 'highlight-next-line', block: {start: 'highlight-start', end: 'highlight-end'}, }, ]; ` Theme {#theme} By default, we use Palenight as syntax highlighting theme. You can specify a custom theme from the list of available themes. You may also use a different syntax highlighting theme when the site is in dark mode. Example configuration: `js title=\"docusaurus.config.js\" import {themes as prismThemes} from 'prism-react-renderer'; export default { themeConfig: { prism: { // highlight-start theme: prismThemes.github, darkTheme: prismThemes.dracula, // highlight-end }, }, }; ` :::note If you use the line highlighting Markdown syntax, you might need to specify a different highlight background color for the dark mode syntax highlighting theme. Refer to the docs for guidance. ::: Default language {#default-language} You can set a default language for code blocks if no language is added after the opening triple backticks (i.e. `). Note that a valid language name must be passed. Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { prism: { // highlight-next-line defaultLanguage: 'javascript', }, }, }; ` Footer {#footer-1} You can add logo and a copyright to the footer via themeConfig.footer. Logo can be placed in static folder. Logo URL works in the same way of the navbar logo. Accepted fields: `mdx-code-block <APITable name=\"footer\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | logo | Logo | undefined | Customization of the logo object. See Navbar logo for details. | | copyright | string | undefined | The copyright message to be displayed at the bottom, also supports custom HTML. | | style | <code>'dark' \\| 'light'</code> | 'light' | The color theme of the footer component. | | links | <code>(Column \\| FooterLink)[]</code> | [] | The link groups to be present. | `mdx-code-block </APITable> ` Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { // highlight-start footer: { logo: { alt: 'Meta Open Source Logo', src: 'img/meta_oss_logo.png', href: 'https://opensource.fb.com', width: 160, height: 51, }, copyright: Copyright © ${new Date().getFullYear()} My Project, Inc. Built with Docusaurus., }, // highlight-end }, }; ` Footer Links {#footer-links} You can add links to the footer via themeConfig.footer.links. There are two types of footer configurations: multi-column footers and simple footers. Multi-column footer links have a title and a list of FooterItems for each column. `mdx-code-block <APITable name=\"footer-links\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | title | string | undefined | Label of the section of these links. | | items | FooterItem[] | [] | Links in this section. | `mdx-code-block </APITable> ` Accepted fields of each FooterItem: `mdx-code-block <APITable name=\"footer-items\"> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | label | string | Required | Text to be displayed for this link. | | to | string | Required | Client-side routing, used for navigating within the website. The baseUrl will be automatically prepended to this value. | | href | string | Required | A full-page navigation, used for navigating outside of the website. Only one of to or href should be used. | | html | string | undefined | Renders the HTML pass-through instead of a simple link. In case html is used, no other options should be provided. | `mdx-code-block </APITable> ` Example multi-column configuration: `js title=\"docusaurus.config.js\" export default { footer: { // highlight-start links: [ { title: 'Docs', items: [ { label: 'Style Guide', to: 'docs/', }, { label: 'Second Doc', to: 'docs/doc2/', }, ], }, { title: 'Community', items: [ { label: 'Stack Overflow', href: 'https://stackoverflow.com/questions/tagged/docusaurus', }, { label: 'Discord', href: 'https://discordapp.com/invite/docusaurus', }, { label: 'X', href: 'https://x.com/docusaurus', }, { html: ` <a href=\"https://www.netlify.com\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"Deploys by Netlify\"> <img src=\"https://www.netlify.com/img/global/badges/netlify-color-accent.svg\" alt=\"Deploys by Netlify\" width=\"114\" height=\"51\" /> </a> `, }, ], }, ], // highlight-end }, }; ` A simple footer just has a list of FooterItems displayed in a row. Example simple configuration: `js title=\"docusaurus.config.js\" export default { footer: { // highlight-start links: [ { label: 'Stack Overflow', href: 'https://stackoverflow.com/questions/tagged/docusaurus', }, { label: 'Discord', href: 'https://discordapp.com/invite/docusaurus', }, { label: 'X', href: 'https://x.com/docusaurus', }, { html: ` <a href=\"https://www.netlify.com\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"Deploys by Netlify\"> <img src=\"https://www.netlify.com/img/global/badges/netlify-color-accent.svg\" alt=\"Deploys by Netlify\" width=\"114\" height=\"51\" /> </a> `, }, ], // highlight-end }, }; ` Table of Contents {#table-of-contents} You can adjust the default table of contents via themeConfig.tableOfContents. `mdx-code-block <APITable> ` | Name | Type | Default | Description | | --- | --- | --- | --- | | minHeadingLevel | number | 2 | The minimum heading level shown in the table of contents. Must be between 2 and 6 and lower or equal to the max value. | | maxHeadingLevel | number | 3 | Max heading level displayed in the TOC. Should be an integer between 2 and 6. | `mdx-code-block </APITable> ` Example configuration: `js title=\"docusaurus.config.js\" export default { themeConfig: { // highlight-start tableOfContents: { minHeadingLevel: 2, maxHeadingLevel: 5, }, // highlight-end }, }; ` Hooks {#hooks} useColorMode {#use-color-mode} A React hook to access the color context. This context contains functions for selecting light/dark/system mode and exposes the current color mode and the choice from the user. The color mode values should not be used for dynamic content rendering (see below). Usage example: `jsx // highlight-next-line import {useColorMode} from '@docusaurus/theme-common'; const MyColorModeButton = () => { // highlight-start const { colorMode, // the \"effective\" color mode, never null colorModeChoice, // the color mode chosen by the user, can be null setColorMode, // set the color mode chosen by the user } = useColorMode(); // highlight-end return ( <button onClick={() => { const nextColorMode = colorModeChoice === 'dark' ? 'light' : 'dark'; setColorMode(nextColorMode); }}> Toggle color mode </button> ); }; ` Attributes: colorMode: 'light' | 'dark': The effective color mode currently applied to the UI. It cannot be null. colorModeChoice: 'light' | 'dark' | null: The color mode explicitly chosen by the user. It can be null if user has not made any choice yet, or if they reset their choice to the system/default value. setColorMode(colorModeChoice: 'light' | 'dark' | null, options: {persist: boolean}): void: A function to call when the user explicitly chose a color mode. null permits to reset the choice to the system/default value. By default, the choice is persisted in localStorage and restored on page reload, but you can opt out with {persist: false}. :::warning Don't use colorMode and colorModeChoice while rendering React components. Doing so is likely to produce FOUC, layout shifts and React hydration mismatches if you use them to render JSX content dynamically. However, these values are safe to use after React hydration, in useEffect and event listeners, like in the MyColorModeButton example above. If you need to render content dynamically depending on the current theme, the only way to avoid FOUC, layout shifts and hydration mismatch is to rely on CSS selectors to render content dynamically, based on the html data attributes that we set before the page displays anything: `html <html data-theme=\"<light | dark>\" data-theme-choice=\"<light | dark | system>\"> <!-- content --> </html> ` `css [data-theme='light'] [data-theme='dark'] [data-theme-choice='light'] [data-theme-choice='dark'] [data-theme-choice='system'] ` <details> <summary>Why are colorMode and colorModeChoice unsafe when rendering?</summary> To understand the problem, you need to understand how React hydration works. During the static site generation phase, Docusaurus doesn't know what the user color mode choice is, and useColorMode() returns the following static values: colorMode = themeConfig.colorMode.defaultMode colorModeChoice = null During the very first React client-side render (the hydration), React must produce the exact same HTML markup, and will also use these static values. The correct colorMode and colorModeChoice values will only be provided in the second React render. Typically, the following component will lead to React hydration mismatches. The label may switch from light to dark while React hydrates, leading to a confusing user experience. `jsx import {useColorMode} from '@docusaurus/theme-common'; const DisplayCurrentColorMode = () => { const {colorMode} = useColorMode(); return <span>{colorMode}</span>; }; ` </details> ::: :::note The component calling useColorMode must be a child of the Layout component. `jsx function ExamplePage() { return ( <Layout> <Example /> </Layout> ); } ` ::: i18n {#i18n} Read the i18n introduction first. Translation files location {#translation-files-location} Base path: website/i18n/[locale]/docusaurus-theme-[themeName] Multi-instance path: N/A JSON files: extracted with docusaurus write-translations Markdown files: N/A Example file-system structure {#example-file-system-structure} `bash website/i18n/[locale]/docusaurus-theme-classic │ │ translations for the theme ├── navbar.json └── footer.json `",
    "keywords": [
      "theme",
      "configuration",
      "api",
      "themes",
      "mdx",
      "src",
      "components",
      "APITable",
      "code",
      "docusaurus",
      "light",
      "JSX",
      "logo",
      "logo_dark",
      "github",
      "facebook",
      "introduction",
      "www",
      "versions",
      "browsed",
      "latest",
      "path",
      "my-site",
      "help-us-translate",
      "button",
      "meta_oss_logo",
      "opensource",
      "doc2",
      "stackoverflow",
      "questions",
      "tagged",
      "discordapp",
      "invite",
      "img",
      "global",
      "badges",
      "netlify-color-accent",
      "dark",
      "system",
      "theme-common",
      "default",
      "html",
      "summary",
      "span",
      "details",
      "Layout",
      "i18n",
      "docusaurus-theme-",
      "docusaurus-theme-classic",
      "Theme",
      "import",
      "from",
      "site",
      "This",
      "applies",
      "all",
      "main",
      "Common",
      "common",
      "Color",
      "mode",
      "color",
      "The",
      "classic",
      "provides",
      "and",
      "support",
      "with",
      "navbar",
      "switch",
      "for",
      "the",
      "user",
      "possible",
      "customize",
      "within",
      "colorMode",
      "object",
      "Accepted",
      "fields",
      "block",
      "Name",
      "Type",
      "Default",
      "Description",
      "defaultMode",
      "when",
      "first",
      "visits",
      "disableSwitch",
      "boolean",
      "false",
      "Hides",
      "Useful",
      "you",
      "want",
      "single",
      "Whether",
      "use",
      "prefers",
      "scheme",
      "media",
      "query",
      "using",
      "preferences",
      "instead",
      "hardcoded",
      "Example",
      "title",
      "config",
      "export",
      "themeConfig",
      "highlight",
      "start",
      "end",
      "warning",
      "With",
      "true",
      "overridden",
      "only",
      "one",
      "likely",
      "ignore",
      "Meta",
      "image",
      "meta",
      "You",
      "can",
      "configure",
      "that",
      "will",
      "used",
      "your",
      "tag",
      "particular",
      "twitter",
      "string",
      "undefined",
      "URL",
      "Relative",
      "static",
      "directory",
      "Cannot",
      "SVGs",
      "Can",
      "external",
      "URLs",
      "too",
      "next",
      "line",
      "png",
      "Metadata",
      "metadata",
      "additional",
      "HTML",
      "override",
      "existing",
      "ones",
      "Any",
      "field",
      "directly",
      "passed",
      "Possible",
      "include",
      "name",
      "property",
      "content",
      "itemprop",
      "etc",
      "card",
      "Announcement",
      "bar",
      "announcement",
      "Sometimes",
      "announce",
      "something",
      "website",
      "Just",
      "such",
      "case",
      "add",
      "non",
      "fixed",
      "optionally",
      "dismissible",
      "panel",
      "above",
      "All",
      "are",
      "announcementBar",
      "value",
      "identify",
      "this",
      "message",
      "text",
      "interpolated",
      "backgroundColor",
      "fff",
      "Background",
      "entire",
      "textColor",
      "isCloseable",
      "dismissed",
      "support_us",
      "looking",
      "revamp",
      "our",
      "docs",
      "please",
      "fill",
      "target",
      "_blank",
      "rel",
      "noopener",
      "noreferrer",
      "href",
      "survey",
      "fafbfc",
      "Plugins",
      "Our",
      "offer",
      "options",
      "Docusaurus",
      "core",
      "plugins",
      "Docs",
      "overview",
      "versionPersistence",
      "localStorage",
      "none",
      "Defines",
      "browser",
      "persistence",
      "preferred",
      "version",
      "sidebar",
      "hideable",
      "Show",
      "hide",
      "bottom",
      "Automatically",
      "collapse",
      "sibling",
      "categories",
      "navigate",
      "Blog",
      "groupByYear",
      "Group",
      "blog",
      "posts",
      "years",
      "Navbar",
      "Title",
      "_See",
      "below_",
      "Customization",
      "items",
      "NavbarItem",
      "list",
      "See",
      "specification",
      "below",
      "hideOnScroll",
      "hidden",
      "scrolls",
      "down",
      "style",
      "primary",
      "Same",
      "Sets",
      "ignoring",
      "placed",
      "folder",
      "Logo",
      "set",
      "base",
      "Although",
      "specify",
      "own",
      "link",
      "open",
      "new",
      "tab",
      "addition",
      "attribute",
      "come",
      "handy",
      "hosting",
      "subdirectory",
      "which",
      "probably",
      "not",
      "need",
      "improve",
      "also",
      "different",
      "alt",
      "Alt",
      "Required",
      "Base",
      "appended",
      "srcDark",
      "alternative",
      "siteConfig",
      "baseUrl",
      "Link",
      "clicked",
      "width",
      "number",
      "Specifies",
      "height",
      "Calculated",
      "based",
      "links",
      "others",
      "current",
      "controls",
      "whether",
      "opened",
      "otherwise",
      "className",
      "CSS",
      "class",
      "applied",
      "inline",
      "React",
      "flavor",
      "camelCase",
      "properties",
      "Site",
      "svg",
      "https",
      "_self",
      "custom",
      "border",
      "solid",
      "red",
      "via",
      "type",
      "doc",
      "position",
      "left",
      "docId",
      "label",
      "docsVersionDropdown",
      "right",
      "localeDropdown",
      "com",
      "header",
      "aria",
      "GitHub",
      "repository",
      "have",
      "behaviors",
      "sections",
      "introduce",
      "types",
      "available",
      "regular",
      "internal",
      "Router",
      "should",
      "automatically",
      "apply",
      "active",
      "styling",
      "but",
      "activeBasePath",
      "edge",
      "cases",
      "For",
      "several",
      "paths",
      "multiple",
      "folders",
      "under",
      "same",
      "activeBaseRegex",
      "more",
      "flexible",
      "takes",
      "precedence",
      "over",
      "parses",
      "into",
      "expression",
      "tested",
      "against",
      "Outbound",
      "get",
      "attributes",
      "Optional",
      "item",
      "shown",
      "renders",
      "pure",
      "Client",
      "side",
      "routing",
      "navigating",
      "prepended",
      "full",
      "page",
      "navigation",
      "outside",
      "Only",
      "prependBaseUrlToHref",
      "Prepends",
      "values",
      "appear",
      "routes",
      "starting",
      "usually",
      "isn",
      "necessary",
      "Alternative",
      "required",
      "Custom",
      "any",
      "note",
      "other",
      "arbitrary",
      "Introduction",
      "dropdown",
      "has",
      "inner",
      "array",
      "accept",
      "following",
      "like",
      "Note",
      "clickable",
      "well",
      "receive",
      "props",
      "plain",
      "LinkLikeItem",
      "contained",
      "Community",
      "Facebook",
      "Social",
      "social",
      "specific",
      "special",
      "render",
      "provided",
      "navbar__link",
      "long",
      "browse",
      "docsPluginId",
      "plugin",
      "belongs",
      "linked",
      "document",
      "generated",
      "category",
      "index",
      "given",
      "without",
      "having",
      "hardcode",
      "docSidebar",
      "sidebarId",
      "First",
      "tip",
      "Use",
      "updated",
      "often",
      "order",
      "stable",
      "API",
      "sidebars",
      "tutorial",
      "autogenerated",
      "dirName",
      "guides",
      "cli",
      "linking",
      "versioning",
      "able",
      "another",
      "while",
      "staying",
      "constant",
      "across",
      "dropdownItemsBefore",
      "Add",
      "beginning",
      "dropdownItemsAfter",
      "browsing",
      "DropdownVersions",
      "Specify",
      "guide",
      "Types",
      "DropdownVersion",
      "Allows",
      "provide",
      "display",
      "each",
      "versionName",
      "depends",
      "fallback",
      "docsVersion",
      "points",
      "locale",
      "feature",
      "locales",
      "queryString",
      "help",
      "translate",
      "Help",
      "search",
      "rightmost",
      "element",
      "However",
      "change",
      "location",
      "markup",
      "inside",
      "rendered",
      "Give",
      "feedback",
      "Auto",
      "sticky",
      "auto",
      "enable",
      "cool",
      "hides",
      "starts",
      "scrolling",
      "show",
      "again",
      "disabling",
      "switching",
      "ability",
      "selected",
      "always",
      "matter",
      "Currently",
      "there",
      "two",
      "ifm",
      "see",
      "styles",
      "preview",
      "Infima",
      "documentation",
      "CodeBlock",
      "codeblock",
      "uses",
      "Prism",
      "Renderer",
      "blocks",
      "prism",
      "PrismTheme",
      "palenight",
      "darkTheme",
      "defaultLanguage",
      "language",
      "declaring",
      "explicit",
      "magicComments",
      "MagicCommentConfig",
      "_see",
      "magic",
      "comments",
      "const",
      "defaultMagicComments",
      "highlighted",
      "Palenight",
      "syntax",
      "highlighting",
      "may",
      "prismThemes",
      "react",
      "renderer",
      "dracula",
      "Markdown",
      "might",
      "background",
      "Refer",
      "guidance",
      "added",
      "after",
      "opening",
      "triple",
      "backticks",
      "valid",
      "must",
      "javascript",
      "Footer",
      "footer",
      "copyright",
      "works",
      "way",
      "displayed",
      "supports",
      "component",
      "Column",
      "FooterLink",
      "groups",
      "present",
      "Open",
      "Source",
      "Copyright",
      "Date",
      "getFullYear",
      "Project",
      "Inc",
      "Built",
      "Links",
      "There",
      "configurations",
      "multi",
      "column",
      "footers",
      "simple",
      "Multi",
      "FooterItems",
      "Label",
      "section",
      "these",
      "FooterItem",
      "Text",
      "Renders",
      "pass",
      "through",
      "Style",
      "Guide",
      "Second",
      "Doc",
      "Stack",
      "Overflow",
      "Discord",
      "netlify",
      "Deploys",
      "Netlify",
      "accent",
      "just",
      "row",
      "Table",
      "Contents",
      "table",
      "contents",
      "adjust",
      "tableOfContents",
      "minHeadingLevel",
      "minimum",
      "heading",
      "level",
      "Must",
      "between",
      "lower",
      "equal",
      "max",
      "maxHeadingLevel",
      "Max",
      "TOC",
      "Should",
      "integer",
      "Hooks",
      "hooks",
      "useColorMode",
      "hook",
      "access",
      "context",
      "contains",
      "functions",
      "selecting",
      "exposes",
      "choice",
      "dynamic",
      "rendering",
      "Usage",
      "example",
      "jsx",
      "MyColorModeButton",
      "effective",
      "never",
      "null",
      "colorModeChoice",
      "chosen",
      "setColorMode",
      "return",
      "onClick",
      "nextColorMode",
      "Toggle",
      "Attributes",
      "currently",
      "cannot",
      "explicitly",
      "made",
      "yet",
      "they",
      "reset",
      "their",
      "persist",
      "void",
      "function",
      "call",
      "chose",
      "permits",
      "persisted",
      "restored",
      "reload",
      "opt",
      "out",
      "Don",
      "Doing",
      "produce",
      "FOUC",
      "layout",
      "shifts",
      "hydration",
      "mismatches",
      "them",
      "dynamically",
      "safe",
      "useEffect",
      "event",
      "listeners",
      "depending",
      "avoid",
      "mismatch",
      "rely",
      "selectors",
      "data",
      "before",
      "displays",
      "anything",
      "css",
      "Why",
      "unsafe",
      "understand",
      "problem",
      "how",
      "During",
      "generation",
      "phase",
      "doesn",
      "know",
      "what",
      "returns",
      "very",
      "client",
      "exact",
      "correct",
      "second",
      "Typically",
      "lead",
      "hydrates",
      "leading",
      "confusing",
      "experience",
      "calling",
      "child",
      "ExamplePage",
      "Read",
      "Translation",
      "files",
      "translation",
      "themeName",
      "instance",
      "JSON",
      "extracted",
      "write",
      "translations",
      "file",
      "structure",
      "bash",
      "json"
    ],
    "url": "/docs/api/themes/theme-configuration",
    "path": "api/themes/theme-configuration.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "theme-live-codeblock",
    "title": "📦 theme-live-codeblock",
    "description": "",
    "content": "📦 theme-live-codeblock This theme provides a @theme/CodeBlock component that is powered by react-live. You can read more on interactive code editor documentation. `bash npm2yarn npm install --save @docusaurus/theme-live-codeblock ` Configuration {#configuration} `js title=\"docusaurus.config.js\" export default { plugins: ['@docusaurus/theme-live-codeblock'], themeConfig: { liveCodeBlock: { / The position of the live playground, above or under the editor Possible values: \"top\" | \"bottom\" */ playgroundPosition: 'bottom', }, }, }; `",
    "keywords": [
      "📦",
      "theme-live-codeblock",
      "api",
      "themes",
      "theme",
      "live",
      "codeblock",
      "mdx",
      "CodeBlock",
      "This",
      "provides",
      "component",
      "that",
      "powered",
      "react",
      "You",
      "can",
      "read",
      "more",
      "interactive",
      "code",
      "editor",
      "documentation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "docusaurus",
      "Configuration",
      "configuration",
      "title",
      "config",
      "export",
      "default",
      "plugins",
      "themeConfig",
      "liveCodeBlock",
      "The",
      "position",
      "the",
      "playground",
      "above",
      "under",
      "Possible",
      "values",
      "top",
      "bottom",
      "playgroundPosition"
    ],
    "url": "/docs/api/themes/theme-live-codeblock",
    "path": "api/themes/theme-live-codeblock.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "theme-mermaid",
    "title": "📦 theme-mermaid",
    "description": "",
    "content": "📦 theme-mermaid This theme provides a @theme/Mermaid component that is powered by mermaid. You can read more on diagrams documentation. `bash npm2yarn npm install --save @docusaurus/theme-mermaid ` Configuration {#configuration} `js title=\"docusaurus.config.js\" export default { themes: ['@docusaurus/theme-mermaid'], // In order for Mermaid code blocks in Markdown to work, // you also need to enable the Remark plugin with this option markdown: { mermaid: true, }, }; `",
    "keywords": [
      "📦",
      "theme-mermaid",
      "api",
      "themes",
      "theme",
      "mermaid",
      "mdx",
      "Mermaid",
      "This",
      "provides",
      "component",
      "that",
      "powered",
      "You",
      "can",
      "read",
      "more",
      "diagrams",
      "documentation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "docusaurus",
      "Configuration",
      "configuration",
      "title",
      "config",
      "export",
      "default",
      "order",
      "for",
      "code",
      "blocks",
      "Markdown",
      "work",
      "you",
      "also",
      "need",
      "enable",
      "the",
      "Remark",
      "plugin",
      "with",
      "this",
      "option",
      "markdown",
      "true"
    ],
    "url": "/docs/api/themes/theme-mermaid",
    "path": "api/themes/theme-mermaid.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "theme-search-algolia",
    "title": "📦 theme-search-algolia",
    "description": "",
    "content": "📦 theme-search-algolia This theme provides a @theme/SearchBar component that integrates with Algolia DocSearch easily. Combined with @docusaurus/theme-classic, it provides a very easy search integration. You can read more on search documentation. `bash npm2yarn npm install --save @docusaurus/theme-search-algolia ` This theme also adds search page available at /search (as swizzlable SearchPage component) path with OpenSearch support. You can change this default path via themeConfig.algolia.searchPagePath. Use false to disable search page. :::tip If you have installed @docusaurus/preset-classic, you don't need to install it as a dependency. :::",
    "keywords": [
      "📦",
      "theme-search-algolia",
      "api",
      "themes",
      "theme",
      "search",
      "algolia",
      "mdx",
      "SearchBar",
      "theme-classic",
      "preset-classic",
      "This",
      "provides",
      "component",
      "that",
      "integrates",
      "with",
      "Algolia",
      "DocSearch",
      "easily",
      "Combined",
      "docusaurus",
      "classic",
      "very",
      "easy",
      "integration",
      "You",
      "can",
      "read",
      "more",
      "documentation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "also",
      "adds",
      "page",
      "available",
      "swizzlable",
      "SearchPage",
      "path",
      "OpenSearch",
      "support",
      "change",
      "this",
      "default",
      "via",
      "themeConfig",
      "searchPagePath",
      "Use",
      "false",
      "disable",
      "tip",
      "you",
      "have",
      "installed",
      "preset",
      "don",
      "need",
      "dependency"
    ],
    "url": "/docs/api/themes/theme-search-algolia",
    "path": "api/themes/theme-search-algolia.mdx",
    "type": "general",
    "category": "api"
  },
  {
    "id": "blog",
    "title": "Blog",
    "description": "Deploy a full-featured blog in no time with Docusaurus.",
    "content": "Blog import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; The blog feature enables you to deploy a full-featured blog in no time. :::info Check the Blog Plugin API Reference documentation for an exhaustive list of options. ::: Initial setup {#initial-setup} To set up your site's blog, start by creating a blog directory. Then, add an item link to your blog within docusaurus.config.js: `js title=\"docusaurus.config.js\" export default { themeConfig: { // ... navbar: { items: [ // ... // highlight-next-line {to: 'blog', label: 'Blog', position: 'left'}, // or position: 'right' ], }, }, }; ` Adding posts {#adding-posts} To publish in the blog, create a Markdown file within the blog directory. For example, create a file at website/blog/2019-09-05-hello-docusaurus.md: `md title=\"website/blog/2019-09-05-hello-docusaurus.md\" --- title: Welcome Docusaurus description: This is my first post on Docusaurus. slug: welcome-docusaurus-v2 authors: name: Joel Marcey title: Co-creator of Docusaurus 1 url: https://github.com/JoelMarcey image_url: https://github.com/JoelMarcey.png socials: x: joelmarcey github: JoelMarcey name: Sébastien Lorber title: Docusaurus maintainer url: https://sebastienlorber.com image_url: https://github.com/slorber.png socials: x: sebastienlorber github: slorber tags: [hello, docusaurus-v2] image: https://i.imgur.com/mErPwqL.png hide_table_of_contents: false --- Welcome to this blog. This blog is created with Docusaurus. <!-- truncate --> This is my first post on Docusaurus. A whole bunch of exploration to follow. ` The front matter is useful to add more metadata to your blog post, for example, author information, but Docusaurus will be able to infer all necessary metadata without the front matter. For all possible fields, see the API documentation. Blog list {#blog-list} The blog's index page (by default, it is at /blog) is the _blog list page_, where all blog posts are collectively displayed. Use the <!--truncate--> marker in your blog post to represent what will be shown as the summary when viewing all published blog posts. Anything above <!--truncate--> will be part of the summary. Note that the portion above the truncate marker must be standalone renderable Markdown. For example: `md title=\"website/blog/my-post.md\" {7} --- title: Markdown blog truncation example --- All these will be part of the blog post summary. <!-- truncate --> But anything from here on down will not be. ` For files using the .mdx extension, use a MDX comment {/ truncate /} instead: {/ prettier-ignore /} `md title=\"website/blog/my-post.mdx\" {7} --- title: MDX blog truncation Example --- All these will be part of the blog post summary. {/ truncate /} But anything from here on down will not be. ` By default, 10 posts are shown on each blog list page, but you can control pagination with the postsPerPage option in the plugin configuration. If you set postsPerPage: 'ALL', pagination will be disabled and all posts will be displayed on the first page. You can also add a meta description to the blog list page for better SEO: `js title=\"docusaurus.config.js\" export default { // ... presets: [ [ '@docusaurus/preset-classic', { blog: { // highlight-start blogTitle: 'Docusaurus blog!', blogDescription: 'A Docusaurus powered blog!', postsPerPage: 'ALL', // highlight-end }, }, ], ], }; ` Blog sidebar {#blog-sidebar} The blog sidebar displays recent blog posts. The default number of items shown is 5, but you can customize with the blogSidebarCount option in the plugin configuration. By setting blogSidebarCount: 0, the sidebar will be completely disabled, with the container removed as well. This will increase the width of the main container. Specially, if you have set blogSidebarCount: 'ALL', _all_ posts will be displayed. You can also alter the sidebar heading text with the blogSidebarTitle option. For example, if you have set blogSidebarCount: 'ALL', instead of the default \"Recent posts\", you may rather make it say \"All posts\": `js title=\"docusaurus.config.js\" export default { presets: [ [ '@docusaurus/preset-classic', { blog: { // highlight-start blogSidebarTitle: 'All posts', blogSidebarCount: 'ALL', // highlight-end }, }, ], ], }; ` Blog post date {#blog-post-date} Docusaurus will extract a YYYY-MM-DD date from many patterns such as YYYY-MM-DD-my-blog-post-title.md or YYYY/MM/DD/my-blog-post-title.md. This enables you to easily group blog posts by year, by month, or to use a flat structure. <details> <summary>Supported date extraction patterns</summary> | Pattern | Example | | --- | --- | | Single file | 2021-05-28-my-blog-post-title.md | | MDX file | 2021-05-28-my-blog-post-title.mdx | | Single folder + index.md | 2021-05-28-my-blog-post-title/index.md | | Folder named by date | 2021-05-28/my-blog-post-title.md | | Nested folders by date | 2021/05/28/my-blog-post-title.md | | Partially nested folders by date | 2021/05-28-my-blog-post-title.md | | Nested folders + index.md | 2021/05/28/my-blog-post-title/index.md | | Date in the middle of path | category/2021/05-28-my-blog-post-title.md | Docusaurus can extract the date from the posts using any of the naming patterns above. It is advisable to choose one pattern and apply it to all posts to avoid confusion. </details> :::tip Using a folder can be convenient to co-locate blog post images alongside the Markdown file. ::: This naming convention is optional, and you can also provide the date as front matter. Since the front matter follows YAML syntax where the datetime notation is supported, you can use front matter if you need more fine-grained publish dates. For example, if you have multiple posts published on the same day, you can order them according to the time of the day: `md title=\"earlier-post.md\" --- date: 2021-09-13T10:00 --- ` `md title=\"later-post.md\" --- date: 2021-09-13T18:00 --- ` Blog post authors {#blog-post-authors} Use the authors front matter field to declare blog post authors. An author should have at least a name or an image_url. Docusaurus uses information like url, email, and title, but any other information is allowed. Inline authors {#inline-authors} Blog post authors can be declared directly inside the front matter: `mdx-code-block <Tabs groupId=\"author-front-matter\"> <TabItem value=\"single\" label=\"Single author\"> ` `md title=\"my-blog-post.md\" --- authors: name: Joel Marcey title: Co-creator of Docusaurus 1 url: https://github.com/JoelMarcey image_url: https://github.com/JoelMarcey.png email: jimarcey@gmail.com socials: x: joelmarcey github: JoelMarcey --- ` `mdx-code-block </TabItem> <TabItem value=\"multiple\" label=\"Multiple authors\"> ` `md title=\"my-blog-post.md\" --- authors: name: Joel Marcey title: Co-creator of Docusaurus 1 url: https://github.com/JoelMarcey image_url: https://github.com/JoelMarcey.png email: jimarcey@gmail.com socials: x: joelmarcey github: JoelMarcey name: Sébastien Lorber title: Docusaurus maintainer url: https://sebastienlorber.com image_url: https://github.com/slorber.png socials: x: sebastienlorber github: slorber --- ` `mdx-code-block </TabItem> </Tabs> ` :::tip This option works best to get started, or for casual, irregular authors. ::: :::info Prefer using the authors front matter, but the legacy author_* front matter remains supported: `md title=\"my-blog-post.md\" --- author: Joel Marcey author_title: Co-creator of Docusaurus 1 author_url: https://github.com/JoelMarcey author_image_url: https://github.com/JoelMarcey.png --- ` ::: Global authors {#global-authors} For regular blog post authors, it can be tedious to maintain authors' information inlined in each blog post. It is possible to declare those authors globally in a configuration file: `yml title=\"website/blog/authors.yml\" jmarcey: name: Joel Marcey title: Co-creator of Docusaurus 1 url: https://github.com/JoelMarcey image_url: https://github.com/JoelMarcey.png email: jimarcey@gmail.com socials: x: joelmarcey github: JoelMarcey slorber: name: Sébastien Lorber title: Docusaurus maintainer url: https://sebastienlorber.com image_url: https://github.com/slorber.png socials: x: sebastienlorber github: slorber ` :::tip Use the authorsMapPath plugin option to configure the path. JSON is also supported. ::: In blog posts front matter, you can reference the authors declared in the global configuration file: `mdx-code-block <Tabs groupId=\"author-front-matter\"> <TabItem value=\"single\" label=\"Single author\"> ` `md title=\"my-blog-post.md\" --- authors: jmarcey --- ` `mdx-code-block </TabItem> <TabItem value=\"multiple\" label=\"Multiple authors\"> ` `md title=\"my-blog-post.md\" --- authors: [jmarcey, slorber] --- ` `mdx-code-block </TabItem> </Tabs> ` :::info The authors system is very flexible and can suit more advanced use-case: <details> <summary>Mix inline authors and global authors</summary> You can use global authors most of the time, and still use inline authors: `md title=\"my-blog-post.md\" --- authors: jmarcey slorber name: Inline Author name title: Inline Author Title url: https://github.com/inlineAuthor image_url: https://github.com/inlineAuthor --- ` </details> <details> <summary>Local override of global authors</summary> You can customize the global author's data on per-blog-post basis: `md title=\"my-blog-post.md\" --- authors: key: jmarcey title: Joel Marcey's new title key: slorber name: Sébastien Lorber's new name --- ` </details> <details> <summary>Localize the author's configuration file</summary> The configuration file can be localized, just create a localized copy of it at: `bash website/i18n/[locale]/docusaurus-plugin-content-blog/authors.yml ` </details> ::: An author, either declared through front matter or through the authors map, needs to have a name or an avatar, or both. If all authors of a post don't have names, Docusaurus will display their avatars compactly. See this test post for the effect. :::warning Feed generation RSS feeds require the author's email to be set for the author to appear in the feed. ::: Authors pages {#authors-pages} The authors pages feature is optional, and mainly useful for multi-author blogs. You can activate it independently for each author by adding a page: true attribute to the global author configuration: `yml title=\"website/blog/authors.yml\" slorber: name: Sébastien Lorber // highlight-start page: true Turns the feature on - route will be /authors/slorber // highlight-end jmarcey: name: Joel Marcey // highlight-start page: Turns the feature on - route will be /authors/custom-author-url permalink: '/custom-author-url' // highlight-end ` The blog plugin will now generate: a dedicated author page for each author (example) listing all the blog posts they contributed to an authors index page (example) listing all these authors, in the order they appear in authors.yml :::warning About inline authors Only global authors can activate this feature. Inline authors are not supported. ::: Blog post tags {#blog-post-tags} Tags are declared in the front matter and introduce another dimension of categorization. It is possible to define tags inline, or to reference predefined tags declared in a tags file (optional, usually blog/tags.yml). In the following example: docusaurus references a predefined tag key declared in blog/tags.yml Releases is an inline tag, because it does not exist in blog/tags.yml `md title=\"blog/my-post.md\" --- title: 'My blog post' tags: Releases docusaurus --- Content ` `yml title=\"blog/tags.yml\" docusaurus: label: 'Docusaurus' permalink: '/docusaurus' description: 'Blog posts related to the Docusaurus framework' ` Reading time {#reading-time} Docusaurus generates a reading time estimation for each blog post based on word count. We provide an option to customize this. `js title=\"docusaurus.config.js\" export default { presets: [ [ '@docusaurus/preset-classic', { blog: { // highlight-start showReadingTime: true, // When set to false, the \"x min read\" won't be shown readingTime: ({content, locale, frontMatter, defaultReadingTime}) => defaultReadingTime({ content, locale, options: {wordsPerMinute: 300}, }), // highlight-end }, }, ], ], }; ` The readingTime callback receives the following parameters: content: the blog content text as a string frontMatter: the front matter as a record of string keys and their values locale: the locale of the current Docusaurus site defaultReadingTime: the default built-in reading time function. It returns a number (reading time in minutes) or undefined (disable reading time for this page). The default reading time is able to accept additional options: wordsPerMinute as a number (default: 300) :::tip Use the callback for all your customization needs: `mdx-code-block <Tabs> <TabItem value=\"disable-per-post\" label=\"Per-post disabling\"> ` Disable reading time on one page: `js title=\"docusaurus.config.js\" export default { presets: [ [ '@docusaurus/preset-classic', { blog: { showReadingTime: true, // highlight-start readingTime: ({content, locale, frontMatter, defaultReadingTime}) => frontMatter.hide_reading_time ? undefined : defaultReadingTime({content, locale}), // highlight-end }, }, ], ], }; ` Usage: `md \"my-blog-post.md\" --- hide_reading_time: true --- This page will no longer display the reading time stats! ` `mdx-code-block </TabItem> <TabItem value=\"passing-options\" label=\"Passing options\"> ` Pass options to the default reading time function: `js title=\"docusaurus.config.js\" export default { presets: [ [ '@docusaurus/preset-classic', { blog: { // highlight-start readingTime: ({content, locale, defaultReadingTime}) => defaultReadingTime({ content, locale, options: {wordsPerMinute: 100}, }), // highlight-end }, }, ], ], }; ` `mdx-code-block </TabItem> <TabItem value=\"using-custom-algo\" label=\"Using custom algorithms\"> ` Use a custom implementation of reading time: `js title=\"docusaurus.config.js\" import myReadingTime from './myReadingTime'; export default { presets: [ [ '@docusaurus/preset-classic', { blog: { // highlight-next-line readingTime: ({content, locale}) => myReadingTime(content, locale), }, }, ], ], }; ` `mdx-code-block </TabItem> </Tabs> ` ::: Feed {#feed} You can generate RSS / Atom / JSON feed by passing feedOptions. By default, RSS and Atom feeds are generated. To disable feed generation, set feedOptions.type to null. `ts type FeedType = 'rss' | 'atom' | 'json'; type BlogOptions = { feedOptions?: { type?: FeedType | 'all' | FeedType[] | null; title?: string; description?: string; copyright: string; language?: string; // possible values: http://www.w3.org/TR/REC-html40/struct/dirlang.html#langcodes limit?: number | false | null; // defaults to 20 // XSLT permits browsers to style and render nicely the feed XML files xslt?: | boolean | { // rss?: string | boolean; atom?: string | boolean; }; // Allow control over the construction of BlogFeedItems createFeedItems?: (params: { blogPosts: BlogPost[]; siteConfig: DocusaurusConfig; outDir: string; defaultCreateFeedItems: (params: { blogPosts: BlogPost[]; siteConfig: DocusaurusConfig; outDir: string; }) => Promise<BlogFeedItem[]>; }) => Promise<BlogFeedItem[]>; }; }; ` Example usage: `js title=\"docusaurus.config.js\" export default { // ... presets: [ [ '@docusaurus/preset-classic', { blog: { // highlight-start feedOptions: { type: 'all', copyright: Copyright © ${new Date().getFullYear()} Facebook, Inc., createFeedItems: async (params) => { const {blogPosts, defaultCreateFeedItems, ...rest} = params; return defaultCreateFeedItems({ // keep only the 10 most recent blog posts in the feed blogPosts: blogPosts.filter((item, index) => index < 10), ...rest, }); }, }, // highlight-end }, }, ], ], }; ` The feeds can be found at: <Tabs> <TabItem value=\"RSS\"> `text https://example.com/blog/rss.xml ` </TabItem> <TabItem value=\"Atom\"> `text https://example.com/blog/atom.xml ` </TabItem> <TabItem value=\"JSON\"> `text https://example.com/blog/feed.json ` </TabItem> </Tabs> Advanced topics {#advanced-topics} Blog-only mode {#blog-only-mode} You can run your Docusaurus site without a dedicated landing page and instead have your blog's post list page as the index page. Set the routeBasePath to be '/' to serve the blog through the root route example.com/ instead of the subroute example.com/blog/. `js title=\"docusaurus.config.js\" export default { // ... presets: [ [ '@docusaurus/preset-classic', { // highlight-next-line docs: false, // Optional: disable the docs plugin blog: { // highlight-next-line routeBasePath: '/', // Serve the blog at the site's root / other blog options / }, }, ], ], }; ` :::warning Don't forget to delete the existing homepage at ./src/pages/index.js or else there will be two files mapping to the same route! ::: :::warning If you disable the docs plugin, don't forget to delete references to the docs plugin elsewhere in your configuration file. Notably, make sure to remove the docs-related navbar items. ::: :::tip There's also a \"Docs-only mode\" for those who only want to use the docs. Read Docs-only mode for detailed instructions or a more elaborate explanation of routeBasePath. ::: Multiple blogs {#multiple-blogs} By default, the classic theme assumes only one blog per website and hence includes only one instance of the blog plugin. If you would like to have multiple blogs on a single website, it's possible too! You can add another blog by specifying another blog plugin in the plugins option for docusaurus.config.js. Set the routeBasePath to the URL route that you want your second blog to be accessed on. Note that the routeBasePath here has to be different from the first blog or else there could be a collision of paths! Also, set path to the path to the directory containing your second blog's entries. As documented for multi-instance plugins, you need to assign a unique ID to the plugins. `js title=\"docusaurus.config.js\" export default { // ... plugins: [ [ '@docusaurus/plugin-content-blog', { / Required for any multi-instance plugin */ id: 'second-blog', / URL route for the blog section of your site. DO NOT* include a trailing slash. */ routeBasePath: 'my-second-blog', / Path to data on filesystem relative to site dir. */ path: './my-second-blog', }, ], ], }; ` As an example, we host a second blog here.",
    "keywords": [
      "blog",
      "deploy",
      "full-featured",
      "in",
      "no",
      "time",
      "with",
      "docusaurus.",
      "mdx",
      "Tabs",
      "TabItem",
      "2019-09-05-hello-docusaurus",
      "github",
      "JoelMarcey",
      "sebastienlorber",
      "slorber",
      "mErPwqL",
      "my-post",
      "preset-classic",
      "MM",
      "DD",
      "my-blog-post-title",
      "summary",
      "index",
      "05",
      "28",
      "05-28-my-blog-post-title",
      "2021",
      "details",
      "authors",
      "inlineAuthor",
      "i18n",
      "docusaurus-plugin-content-blog",
      "custom-author-url",
      "tags",
      "docusaurus",
      "myReadingTime",
      "www",
      "TR",
      "REC-html40",
      "struct",
      "dirlang",
      "example",
      "rss",
      "atom",
      "feed",
      "src",
      "pages",
      "plugin-content-blog",
      "my-second-blog",
      "Blog",
      "import",
      "from",
      "theme",
      "The",
      "feature",
      "enables",
      "you",
      "full",
      "featured",
      "info",
      "Check",
      "the",
      "Plugin",
      "API",
      "Reference",
      "documentation",
      "for",
      "exhaustive",
      "list",
      "options",
      "Initial",
      "setup",
      "initial",
      "set",
      "your",
      "site",
      "start",
      "creating",
      "directory",
      "Then",
      "add",
      "item",
      "link",
      "within",
      "config",
      "title",
      "export",
      "default",
      "themeConfig",
      "navbar",
      "items",
      "highlight",
      "next",
      "line",
      "label",
      "position",
      "left",
      "right",
      "Adding",
      "posts",
      "adding",
      "publish",
      "create",
      "Markdown",
      "file",
      "For",
      "website",
      "hello",
      "Welcome",
      "Docusaurus",
      "description",
      "This",
      "first",
      "post",
      "slug",
      "welcome",
      "name",
      "Joel",
      "Marcey",
      "creator",
      "url",
      "https",
      "com",
      "image_url",
      "png",
      "socials",
      "joelmarcey",
      "bastien",
      "Lorber",
      "maintainer",
      "image",
      "imgur",
      "false",
      "this",
      "created",
      "truncate",
      "whole",
      "bunch",
      "exploration",
      "follow",
      "front",
      "matter",
      "useful",
      "more",
      "metadata",
      "author",
      "information",
      "but",
      "will",
      "able",
      "infer",
      "all",
      "necessary",
      "without",
      "possible",
      "fields",
      "see",
      "page",
      "_blog",
      "page_",
      "where",
      "are",
      "collectively",
      "displayed",
      "Use",
      "marker",
      "represent",
      "what",
      "shown",
      "when",
      "viewing",
      "published",
      "Anything",
      "above",
      "part",
      "Note",
      "that",
      "portion",
      "must",
      "standalone",
      "renderable",
      "truncation",
      "All",
      "these",
      "But",
      "anything",
      "here",
      "down",
      "not",
      "files",
      "using",
      "extension",
      "use",
      "MDX",
      "comment",
      "instead",
      "prettier",
      "ignore",
      "Example",
      "each",
      "can",
      "control",
      "pagination",
      "postsPerPage",
      "option",
      "plugin",
      "configuration",
      "ALL",
      "disabled",
      "and",
      "You",
      "also",
      "meta",
      "better",
      "SEO",
      "presets",
      "preset",
      "classic",
      "blogTitle",
      "blogDescription",
      "powered",
      "end",
      "sidebar",
      "displays",
      "recent",
      "number",
      "customize",
      "blogSidebarCount",
      "setting",
      "completely",
      "container",
      "removed",
      "well",
      "increase",
      "width",
      "main",
      "Specially",
      "have",
      "_all_",
      "alter",
      "heading",
      "text",
      "blogSidebarTitle",
      "Recent",
      "may",
      "rather",
      "make",
      "say",
      "date",
      "extract",
      "YYYY",
      "many",
      "patterns",
      "such",
      "easily",
      "group",
      "year",
      "month",
      "flat",
      "structure",
      "Supported",
      "extraction",
      "Pattern",
      "Single",
      "folder",
      "Folder",
      "named",
      "Nested",
      "folders",
      "Partially",
      "nested",
      "Date",
      "middle",
      "path",
      "category",
      "any",
      "naming",
      "advisable",
      "choose",
      "one",
      "pattern",
      "apply",
      "avoid",
      "confusion",
      "tip",
      "Using",
      "convenient",
      "locate",
      "images",
      "alongside",
      "convention",
      "optional",
      "provide",
      "Since",
      "follows",
      "YAML",
      "syntax",
      "datetime",
      "notation",
      "supported",
      "need",
      "fine",
      "grained",
      "dates",
      "multiple",
      "same",
      "day",
      "order",
      "them",
      "according",
      "earlier",
      "later",
      "field",
      "declare",
      "should",
      "least",
      "uses",
      "like",
      "email",
      "other",
      "allowed",
      "Inline",
      "inline",
      "declared",
      "directly",
      "inside",
      "code",
      "block",
      "groupId",
      "value",
      "single",
      "jimarcey",
      "gmail",
      "Multiple",
      "works",
      "best",
      "get",
      "started",
      "casual",
      "irregular",
      "Prefer",
      "legacy",
      "author_",
      "remains",
      "author_title",
      "author_url",
      "author_image_url",
      "Global",
      "global",
      "regular",
      "tedious",
      "maintain",
      "inlined",
      "those",
      "globally",
      "yml",
      "jmarcey",
      "authorsMapPath",
      "configure",
      "JSON",
      "reference",
      "system",
      "very",
      "flexible",
      "suit",
      "advanced",
      "case",
      "Mix",
      "most",
      "still",
      "Author",
      "Title",
      "Local",
      "override",
      "data",
      "per",
      "basis",
      "key",
      "new",
      "Localize",
      "localized",
      "just",
      "copy",
      "bash",
      "locale",
      "content",
      "either",
      "through",
      "map",
      "needs",
      "avatar",
      "both",
      "don",
      "names",
      "display",
      "their",
      "avatars",
      "compactly",
      "See",
      "test",
      "effect",
      "warning",
      "Feed",
      "generation",
      "RSS",
      "feeds",
      "require",
      "appear",
      "Authors",
      "mainly",
      "multi",
      "blogs",
      "activate",
      "independently",
      "true",
      "attribute",
      "Turns",
      "route",
      "custom",
      "permalink",
      "now",
      "generate",
      "dedicated",
      "listing",
      "they",
      "contributed",
      "About",
      "Only",
      "Tags",
      "introduce",
      "another",
      "dimension",
      "categorization",
      "define",
      "predefined",
      "usually",
      "following",
      "references",
      "tag",
      "Releases",
      "because",
      "does",
      "exist",
      "Content",
      "related",
      "framework",
      "Reading",
      "reading",
      "generates",
      "estimation",
      "based",
      "word",
      "count",
      "showReadingTime",
      "When",
      "min",
      "read",
      "won",
      "readingTime",
      "frontMatter",
      "defaultReadingTime",
      "wordsPerMinute",
      "callback",
      "receives",
      "parameters",
      "string",
      "record",
      "keys",
      "values",
      "current",
      "built",
      "function",
      "returns",
      "minutes",
      "undefined",
      "disable",
      "accept",
      "additional",
      "customization",
      "Per",
      "disabling",
      "Disable",
      "hide_reading_time",
      "Usage",
      "longer",
      "stats",
      "passing",
      "Passing",
      "Pass",
      "algo",
      "algorithms",
      "implementation",
      "Atom",
      "feedOptions",
      "generated",
      "type",
      "null",
      "FeedType",
      "json",
      "BlogOptions",
      "copyright",
      "language",
      "http",
      "org",
      "REC",
      "html40",
      "html",
      "langcodes",
      "limit",
      "defaults",
      "XSLT",
      "permits",
      "browsers",
      "style",
      "render",
      "nicely",
      "XML",
      "xslt",
      "boolean",
      "Allow",
      "over",
      "construction",
      "BlogFeedItems",
      "createFeedItems",
      "params",
      "blogPosts",
      "BlogPost",
      "siteConfig",
      "DocusaurusConfig",
      "outDir",
      "Promise",
      "BlogFeedItem",
      "usage",
      "Copyright",
      "getFullYear",
      "Facebook",
      "Inc",
      "async",
      "const",
      "rest",
      "return",
      "keep",
      "only",
      "filter",
      "found",
      "xml",
      "Advanced",
      "topics",
      "mode",
      "run",
      "landing",
      "Set",
      "routeBasePath",
      "serve",
      "root",
      "subroute",
      "docs",
      "Optional",
      "Serve",
      "Don",
      "forget",
      "delete",
      "existing",
      "homepage",
      "else",
      "there",
      "two",
      "mapping",
      "elsewhere",
      "Notably",
      "sure",
      "remove",
      "There",
      "Docs",
      "who",
      "want",
      "Read",
      "detailed",
      "instructions",
      "elaborate",
      "explanation",
      "assumes",
      "hence",
      "includes",
      "instance",
      "would",
      "too",
      "specifying",
      "plugins",
      "URL",
      "second",
      "accessed",
      "has",
      "different",
      "could",
      "collision",
      "paths",
      "Also",
      "containing",
      "entries",
      "documented",
      "assign",
      "unique",
      "Required",
      "section",
      "NOT",
      "include",
      "trailing",
      "slash",
      "Path",
      "filesystem",
      "relative",
      "dir",
      "host"
    ],
    "url": "/docs/blog",
    "path": "blog.mdx",
    "type": "general",
    "category": "root"
  },
  {
    "id": "browser-support",
    "title": "Browser support",
    "description": "How to keep a reasonable bundle size while ensuring sufficient browser support.",
    "content": "Browser support Docusaurus allows sites to define the list of supported browsers through a browserslist configuration. Purpose {#purpose} Websites need to balance between backward compatibility and bundle size. As old browsers do not support modern APIs or syntax, more code is needed to implement the same functionality. For example, you may use the optional chaining syntax: `js const value = obj?.prop?.val; ` ...which unfortunately is only recognized by browser versions released after 2020. To be compatible with earlier browser versions, when building your site for production, our JS loader will transpile your code to a more verbose syntax: `js var _obj, _obj$prop; const value = (_obj = obj) === null || _obj === void 0 ? void 0 : (_obj$prop = _obj.prop) === null || _obj$prop === void 0 ? void 0 : _obj$prop.val; ` However, this penalizes all other users with increased site load time because the 29-character line now becomes 168 characters—a 6-fold increase! (In practice, it will be better because the names used will be shorter.) As a tradeoff, the JS loader only transpiles the syntax to the degree that's supported by all browser versions defined in the browser list. The browser list by default is provided through the package.json file as a root browserslist field. :::warning On old browsers, the compiled output will use unsupported (too recent) JS syntax, causing React to fail to initialize and end up with a static website with only HTML/CSS and no JS. ::: Default values {#default-values} Websites initialized with the default classic template has the following in package.json: `json title=\"package.json\" { \"name\": \"docusaurus\", // ... // highlight-start \"browserslist\": { \"production\": [\">0.5%\", \"not dead\", \"not op_mini all\"], \"development\": [ \"last 1 chrome version\", \"last 1 firefox version\", \"last 1 safari version\" ] } // highlight-end // ... } ` Explained in natural language, the browsers supported in production are those: With more than 0.5% of market share; _and_ Has official support or updates in the past 24 months (the opposite of \"dead\"); _and_ Is not Opera Mini. And browsers used in development are: The latest version of Chrome _or_ Firefox _or_ Safari. You can \"evaluate\" any config with the browserslist CLI to obtain the actual list: `bash npx browserslist --env=\"production\" ` The output is all browsers supported in production. Below is the output in January 2022: `text and_chr 96 and_uc 12.12 chrome 96 chrome 95 chrome 94 edge 96 firefox 95 firefox 94 ie 11 ios_saf 15.2 ios_saf 15.0-15.1 ios_saf 14.5-14.8 ios_saf 14.0-14.4 ios_saf 12.2-12.5 opera 82 opera 81 safari 15.1 safari 14.1 safari 13.1 ` Read more {#read-more} You may wish to visit the browserslist documentation for more specifications, especially the accepted query values and best practices.",
    "keywords": [
      "browser",
      "support",
      "how",
      "to",
      "keep",
      "reasonable",
      "bundle",
      "size",
      "while",
      "ensuring",
      "sufficient",
      "support.",
      "mdx",
      "CSS",
      "Browser",
      "Docusaurus",
      "allows",
      "sites",
      "define",
      "the",
      "list",
      "supported",
      "browsers",
      "through",
      "browserslist",
      "configuration",
      "Purpose",
      "purpose",
      "Websites",
      "need",
      "balance",
      "between",
      "backward",
      "compatibility",
      "and",
      "old",
      "not",
      "modern",
      "APIs",
      "syntax",
      "more",
      "code",
      "needed",
      "implement",
      "same",
      "functionality",
      "For",
      "example",
      "you",
      "may",
      "use",
      "optional",
      "chaining",
      "const",
      "value",
      "obj",
      "prop",
      "val",
      "which",
      "unfortunately",
      "only",
      "recognized",
      "versions",
      "released",
      "after",
      "compatible",
      "with",
      "earlier",
      "when",
      "building",
      "your",
      "site",
      "for",
      "production",
      "our",
      "loader",
      "will",
      "transpile",
      "verbose",
      "var",
      "_obj",
      "null",
      "void",
      "However",
      "this",
      "penalizes",
      "all",
      "other",
      "users",
      "increased",
      "load",
      "time",
      "because",
      "character",
      "line",
      "now",
      "becomes",
      "characters",
      "fold",
      "increase",
      "practice",
      "better",
      "names",
      "used",
      "shorter",
      "tradeoff",
      "transpiles",
      "degree",
      "that",
      "defined",
      "The",
      "default",
      "provided",
      "package",
      "json",
      "file",
      "root",
      "field",
      "warning",
      "compiled",
      "output",
      "unsupported",
      "too",
      "recent",
      "causing",
      "React",
      "fail",
      "initialize",
      "end",
      "static",
      "website",
      "HTML",
      "Default",
      "values",
      "initialized",
      "classic",
      "template",
      "has",
      "following",
      "title",
      "name",
      "docusaurus",
      "highlight",
      "start",
      "dead",
      "op_mini",
      "development",
      "last",
      "chrome",
      "version",
      "firefox",
      "safari",
      "Explained",
      "natural",
      "language",
      "are",
      "those",
      "With",
      "than",
      "market",
      "share",
      "_and_",
      "Has",
      "official",
      "updates",
      "past",
      "months",
      "opposite",
      "Opera",
      "Mini",
      "And",
      "latest",
      "Chrome",
      "_or_",
      "Firefox",
      "Safari",
      "You",
      "can",
      "evaluate",
      "any",
      "config",
      "CLI",
      "obtain",
      "actual",
      "bash",
      "npx",
      "env",
      "Below",
      "January",
      "text",
      "and_chr",
      "and_uc",
      "edge",
      "ios_saf",
      "opera",
      "Read",
      "read",
      "wish",
      "visit",
      "documentation",
      "specifications",
      "especially",
      "accepted",
      "query",
      "best",
      "practices"
    ],
    "url": "/docs/browser-support",
    "path": "browser-support.mdx",
    "type": "general",
    "category": "root"
  },
  {
    "id": "index",
    "title": "更新日志",
    "description": "XT API 的版本更新日志和变更记录",
    "content": "更新日志 欢迎查看 XT API 的更新日志！这里记录了所有版本的更新内容、新功能、修复的问题和重要的变更。 最新版本 v2.1.0 (2024-01-15) 🚀 新功能 新增合约跟单交易 API 支持第三方交易平台集成 新增用户中心管理 API 优化跟单交易算法 🔧 改进 提升 API 响应速度 30% 优化错误处理机制 改进文档和示例代码 增强安全性验证 🐛 修复 修复跟单交易延迟问题 解决合约 API 连接不稳定 修复用户认证异常 解决数据同步问题 历史版本 v2.0.0 (2023-12-01) 🚀 重大更新 全新 API 架构设计 支持多市场交易 引入跟单交易功能 重构用户管理系统 🔧 改进 完全重写核心模块 优化性能和稳定性 增强安全机制 改进错误处理 v1.5.0 (2023-10-15) 🚀 新功能 新增保证金现货交易 支持杠杆交易 引入风险管理系统 新增数据分析 API 🔧 改进 优化交易引擎 提升系统稳定性 改进用户体验 增强监控功能 版本规划 即将推出 (v2.2.0) 期权交易支持 AI 智能交易助手 更多第三方平台集成 移动端 SDK 长期规划 跨链交易支持 去中心化交易集成 机构级功能 全球化部署 反馈和建议 如果您有任何问题、建议或反馈，请通过以下方式联系我们： GitHub Issues 技术支持 开发者社区 相关链接 API 文档首页 快速开始 开发者工具 常见问题",
    "keywords": [
      "更新日志",
      "xt",
      "api",
      "的版本更新日志和变更记录",
      "changelog",
      "index",
      "mdx",
      "API",
      "SDK",
      "GitHub",
      "Issues"
    ],
    "url": "/docs/changelog/index",
    "path": "changelog/index.mdx",
    "type": "general",
    "category": "changelog"
  },
  {
    "id": "cli",
    "title": "CLI",
    "description": "Docusaurus provides a set of scripts to help you generate, serve, and deploy your website.",
    "content": "CLI Docusaurus provides a set of scripts to help you generate, serve, and deploy your website. Once your website is bootstrapped, the website source will contain the Docusaurus scripts that you can invoke with your package manager: `json title=\"package.json\" { // ... \"scripts\": { \"docusaurus\": \"docusaurus\", \"start\": \"docusaurus start\", \"build\": \"docusaurus build\", \"swizzle\": \"docusaurus swizzle\", \"deploy\": \"docusaurus deploy\", \"clear\": \"docusaurus clear\", \"serve\": \"docusaurus serve\", \"write-translations\": \"docusaurus write-translations\", \"write-heading-ids\": \"docusaurus write-heading-ids\" } } ` Docusaurus CLI commands {#docusaurus-cli-commands} Below is a list of Docusaurus CLI commands and their usages: docusaurus start [siteDir] {#docusaurus-start-sitedir} Builds and serves a preview of your site locally with Webpack Dev Server. Options {#options} | Name | Default | Description | | --- | --- | --- | | --port | 3000 | Specifies the port of the dev server. | | --host | localhost | Specify a host to use. For example, if you want your server to be accessible externally, you can use --host 0.0.0.0. | | --locale | | Specify site locale to be used. | | --hot-only | false | Enables Hot Module Replacement without page refresh as a fallback in case of build failures. More information here. | | --no-open | false | Do not open the page automatically in the browser. | | --config | undefined | Path to Docusaurus config file, default to [siteDir]/docusaurus.config.js | | --poll [optionalIntervalMs] | false | Use polling of files rather than watching for live reload as a fallback in environments where watching doesn't work. More information here. | | --no-minify | false | Build website without minimizing JS/CSS bundles. | :::info Please note that some functionality (for example, anchor links) will not work in development. The functionality will work as expected in production. ::: :::info Development over network When forwarding port 3000 from a remote server or VM (e.g. GitHub Codespaces), you can run the dev server on 0.0.0.0 to make it listen on the local IP. `bash npm2yarn npm run start -- --host 0.0.0.0 ` ::: Enabling HTTPS {#enabling-https} There are multiple ways to obtain a certificate. We will use mkcert as an example. Run mkcert localhost to generate localhost.pem + localhost-key.pem Run mkcert -install to install the cert in your trust store, and restart your browser Start the app with Docusaurus HTTPS env variables: `bash HTTPS=true SSL_CRT_FILE=localhost.pem SSL_KEY_FILE=localhost-key.pem yarn start ` Open https://localhost:3000/ docusaurus build [siteDir] {#docusaurus-build-sitedir} Compiles your site for production. Options {#options-1} | Name | Default | Description | | --- | --- | --- | | --dev | | Builds the website in dev mode, including full React error messages. | | --bundle-analyzer | false | Analyze your bundle with the webpack bundle analyzer. | | --out-dir | build | The full path for the new output directory, relative to the current workspace. | | --config | undefined | Path to Docusaurus config file, default to [siteDir]/docusaurus.config.js | | --locale | | Build the site in the specified locale(s). If not specified, all known locales are built. | | --no-minify | false | Build website without minimizing JS/CSS bundles. | :::info For advanced minification of CSS bundle, we use the advanced cssnano preset (along with additional several PostCSS plugins) and level 2 optimization of clean-css. If as a result of this advanced CSS minification you find broken CSS, build your website with the environment variable USE_SIMPLE_CSS_MINIFIER=true to minify CSS with the default cssnano preset. Please fill out an issue if you experience CSS minification bugs. You can skip the HTML minification with the environment variable SKIP_HTML_MINIFICATION=true. ::: docusaurus swizzle [themeName] [componentName] [siteDir] {#docusaurus-swizzle} Swizzle a theme component to customize it. `bash npm2yarn npm run swizzle [themeName] [componentName] [siteDir] Example (leaving out the siteDir to indicate this directory) npm run swizzle @docusaurus/theme-classic Footer -- --eject ` The swizzle CLI is interactive and will guide you through the whole swizzle process. Options {#options-swizzle} | Name | Description | | --- | --- | | themeName | The name of the theme to swizzle from. | | componentName | The name of the theme component to swizzle. | | --list | Display components available for swizzling | | --eject | Eject the theme component | | --wrap | Wrap the theme component | | --danger | Allow immediate swizzling of unsafe components | | --typescript | Swizzle the TypeScript variant component | | --config | Path to docusaurus config file, default to [siteDir]/docusaurus.config.js | :::warning Unsafe components have a higher risk of breaking changes due to internal refactorings. ::: docusaurus deploy [siteDir] {#docusaurus-deploy-sitedir} Deploys your site with GitHub Pages. Check out the docs on deployment for more details. Options {#options-3} | Name | Default | Description | | --- | --- | --- | | --locale | | Deploy the site in the specified locale(s). If not specified, all known locales are deployed. | | --out-dir | build | The full path for the new output directory, relative to the current workspace. | | --skip-build | false | Deploy website without building it. This may be useful when using a custom deploy script. | | --target-dir | . | Path to the target directory to deploy to. | | --config | undefined | Path to Docusaurus config file, default to [siteDir]/docusaurus.config.js | docusaurus serve [siteDir] {#docusaurus-serve-sitedir} Serve your built website locally. | Name | Default | Description | | --- | --- | --- | | --port | 3000 | Use specified port | | --dir | build | The full path for the output directory, relative to the current workspace | | --build | false | Build website before serving | | --config | undefined | Path to Docusaurus config file, default to [siteDir]/docusaurus.config.js | | --host | localhost | Specify a host to use. For example, if you want your server to be accessible externally, you can use --host 0.0.0.0. | | --no-open | false locally, true in CI | Do not open a browser window to the server location. | docusaurus clear [siteDir] {#docusaurus-clear-sitedir} Clear a Docusaurus site's generated assets, caches, build artifacts. We recommend running this command before reporting bugs, after upgrading versions, or anytime you have issues with your Docusaurus site. docusaurus write-translations [siteDir] {#docusaurus-write-translations-sitedir} Write the JSON translation files that you will have to translate. By default, the files are written in website/i18n/<defaultLocale>/.... | Name | Default | Description | | --- | --- | --- | | --locale | <defaultLocale> | Define which locale folder you want to write translations the JSON files in | | --override | false | Override existing translation messages | | --config | undefined | Path to Docusaurus config file, default to [siteDir]/docusaurus.config.js | | --messagePrefix | '' | Allows adding a prefix to each translation message, to help you highlight untranslated strings | docusaurus write-heading-ids [siteDir] [files] {#docusaurus-write-heading-ids-sitedir} Add explicit heading IDs to the Markdown documents of your site. | Name | Default | Description | | --- | --- | --- | | files | All MD files used by plugins | The files that you want heading IDs to be written to. | | --maintain-case | false | Keep the headings' casing, otherwise make all lowercase. | | --overwrite | false | Overwrite existing heading IDs. |",
    "keywords": [
      "cli",
      "docusaurus",
      "provides",
      "set",
      "of",
      "scripts",
      "to",
      "help",
      "you",
      "generate,",
      "serve,",
      "and",
      "deploy",
      "your",
      "website.",
      "mdx",
      "CSS",
      "localhost",
      "theme-classic",
      "i18n",
      "CLI",
      "Docusaurus",
      "generate",
      "serve",
      "website",
      "Once",
      "bootstrapped",
      "the",
      "source",
      "will",
      "contain",
      "that",
      "can",
      "invoke",
      "with",
      "package",
      "manager",
      "json",
      "title",
      "start",
      "build",
      "swizzle",
      "clear",
      "write",
      "translations",
      "heading",
      "ids",
      "commands",
      "Below",
      "list",
      "their",
      "usages",
      "siteDir",
      "sitedir",
      "Builds",
      "serves",
      "preview",
      "site",
      "locally",
      "Webpack",
      "Dev",
      "Server",
      "Options",
      "options",
      "Name",
      "Default",
      "Description",
      "port",
      "Specifies",
      "dev",
      "server",
      "host",
      "Specify",
      "use",
      "For",
      "example",
      "want",
      "accessible",
      "externally",
      "locale",
      "used",
      "hot",
      "only",
      "false",
      "Enables",
      "Hot",
      "Module",
      "Replacement",
      "without",
      "page",
      "refresh",
      "fallback",
      "case",
      "failures",
      "More",
      "information",
      "here",
      "open",
      "not",
      "automatically",
      "browser",
      "config",
      "undefined",
      "Path",
      "file",
      "default",
      "poll",
      "optionalIntervalMs",
      "Use",
      "polling",
      "files",
      "rather",
      "than",
      "watching",
      "for",
      "live",
      "reload",
      "environments",
      "where",
      "doesn",
      "work",
      "minify",
      "Build",
      "minimizing",
      "bundles",
      "info",
      "Please",
      "note",
      "some",
      "functionality",
      "anchor",
      "links",
      "development",
      "The",
      "expected",
      "production",
      "Development",
      "over",
      "network",
      "When",
      "forwarding",
      "from",
      "remote",
      "GitHub",
      "Codespaces",
      "run",
      "make",
      "listen",
      "local",
      "bash",
      "npm2yarn",
      "npm",
      "Enabling",
      "HTTPS",
      "enabling",
      "https",
      "There",
      "are",
      "multiple",
      "ways",
      "obtain",
      "certificate",
      "mkcert",
      "Run",
      "pem",
      "key",
      "install",
      "cert",
      "trust",
      "store",
      "restart",
      "Start",
      "app",
      "env",
      "variables",
      "true",
      "SSL_CRT_FILE",
      "SSL_KEY_FILE",
      "yarn",
      "Open",
      "Compiles",
      "mode",
      "including",
      "full",
      "React",
      "error",
      "messages",
      "bundle",
      "analyzer",
      "Analyze",
      "webpack",
      "out",
      "dir",
      "path",
      "new",
      "output",
      "directory",
      "relative",
      "current",
      "workspace",
      "specified",
      "all",
      "known",
      "locales",
      "built",
      "advanced",
      "minification",
      "cssnano",
      "preset",
      "along",
      "additional",
      "several",
      "PostCSS",
      "plugins",
      "level",
      "optimization",
      "clean",
      "css",
      "result",
      "this",
      "find",
      "broken",
      "environment",
      "variable",
      "fill",
      "issue",
      "experience",
      "bugs",
      "You",
      "skip",
      "HTML",
      "themeName",
      "componentName",
      "Swizzle",
      "theme",
      "component",
      "customize",
      "Example",
      "leaving",
      "indicate",
      "classic",
      "Footer",
      "eject",
      "interactive",
      "guide",
      "through",
      "whole",
      "process",
      "name",
      "Display",
      "components",
      "available",
      "swizzling",
      "Eject",
      "wrap",
      "Wrap",
      "danger",
      "Allow",
      "immediate",
      "unsafe",
      "typescript",
      "TypeScript",
      "variant",
      "warning",
      "Unsafe",
      "have",
      "higher",
      "risk",
      "breaking",
      "changes",
      "due",
      "internal",
      "refactorings",
      "Deploys",
      "Pages",
      "Check",
      "docs",
      "deployment",
      "more",
      "details",
      "Deploy",
      "deployed",
      "building",
      "This",
      "may",
      "useful",
      "when",
      "using",
      "custom",
      "script",
      "target",
      "Serve",
      "before",
      "serving",
      "window",
      "location",
      "Clear",
      "generated",
      "assets",
      "caches",
      "artifacts",
      "recommend",
      "running",
      "command",
      "reporting",
      "after",
      "upgrading",
      "versions",
      "anytime",
      "issues",
      "Write",
      "JSON",
      "translation",
      "translate",
      "written",
      "defaultLocale",
      "Define",
      "which",
      "folder",
      "override",
      "Override",
      "existing",
      "messagePrefix",
      "Allows",
      "adding",
      "prefix",
      "each",
      "message",
      "highlight",
      "untranslated",
      "strings",
      "Add",
      "explicit",
      "IDs",
      "Markdown",
      "documents",
      "All",
      "maintain",
      "Keep",
      "headings",
      "casing",
      "otherwise",
      "lowercase",
      "overwrite",
      "Overwrite"
    ],
    "url": "/docs/cli",
    "path": "cli.mdx",
    "type": "general",
    "category": "root"
  },
  {
    "id": "configuration",
    "title": "Configuration",
    "description": "Configuring your site's behavior through docusaurus.config.js and more.",
    "content": "Configuration import TOCInline from '@theme/TOCInline'; :::info Check the docusaurus.config.js API reference for an exhaustive list of options. ::: Docusaurus has a unique take on configurations. We encourage you to congregate information about your site into one place. We guard the fields of this file and facilitate making this data object accessible across your site. Keeping a well-maintained docusaurus.config.js helps you, your collaborators, and your open source contributors to be able to focus on documentation while still being able to customize the site. Syntax to declare docusaurus.config.js {#syntax-to-declare-docusaurus-config} The docusaurus.config.js file is run in Node.js and should export either: a config object a function that creates the config object :::info The docusaurus.config.js file supports: ES Modules CommonJS TypeScript Constraints: Required: use export default / your config/ (or module.exports) to export your Docusaurus config Optional: use import Lib from 'lib' (or require('lib')) to import Node.js packages ::: Docusaurus gives us the ability to declare its configuration in various equivalent ways, and all the following config examples lead to the exact same result: `js title=\"docusaurus.config.js\" export default { title: 'Docusaurus', url: 'https://docusaurus.io', // your site config ... }; ` `js title=\"docusaurus.config.js\" module.exports = { title: 'Docusaurus', url: 'https://docusaurus.io', // your site config ... }; ` `ts title=\"docusaurus.config.ts\" import type {Config} from '@docusaurus/types'; export default { title: 'Docusaurus', url: 'https://docusaurus.io', // your site config ... } satisfies Config; ` `js title=\"docusaurus.config.js\" const config = { title: 'Docusaurus', url: 'https://docusaurus.io', // your site config ... }; export default config; ` `js title=\"docusaurus.config.js\" export default function configCreator() { return { title: 'Docusaurus', url: 'https://docusaurus.io', // your site config ... }; } ` `js title=\"docusaurus.config.js\" export default async function createConfigAsync() { return { title: 'Docusaurus', url: 'https://docusaurus.io', // your site config ... }; } ` :::tip Using ESM-only packages Using an async config creator can be useful to import ESM-only modules (notably most Remark plugins). It is possible to import such modules thanks to dynamic imports: `js title=\"docusaurus.config.js\" export default async function createConfigAsync() { // Use a dynamic import instead of require('esm-lib') // highlight-next-line const lib = await import('lib'); return { title: 'Docusaurus', url: 'https://docusaurus.io', // rest of your site config... }; } ` ::: What goes into a docusaurus.config.js? {#what-goes-into-a-docusaurusconfigjs} You should not have to write your docusaurus.config.js from scratch even if you are developing your site. All templates come with a docusaurus.config.js that includes defaults for the common options. However, it can be helpful if you have a high-level understanding of how the configurations are designed and implemented. The high-level overview of Docusaurus configuration can be categorized into: <TOCInline toc={toc} minHeadingLevel={3} maxHeadingLevel={3} /> Site metadata {#site-metadata} Site metadata contains the essential global metadata such as title, url, baseUrl, and favicon. They are used in several places such as your site's title and headings, browser tab icon, social sharing (Facebook, X) information or even to generate the correct path to serve your static files. Deployment configurations {#deployment-configurations} Deployment configurations such as projectName, organizationName, and optionally deploymentBranch are used when you deploy your site with the deploy command. It is recommended to check the deployment docs for more information. Theme, plugin, and preset configurations {#theme-plugin-and-preset-configurations} List the themes, plugins, and presets for your site in the themes, plugins, and presets fields, respectively. These are typically npm packages: `js title=\"docusaurus.config.js\" export default { // ... plugins: [ '@docusaurus/plugin-content-blog', '@docusaurus/plugin-content-pages', ], themes: ['@docusaurus/theme-classic'], }; ` :::tip Docusaurus supports module shorthands, allowing you to simplify the above configuration as: `js title=\"docusaurus.config.js\" export default { // ... plugins: ['content-blog', 'content-pages'], themes: ['classic'], }; ` ::: They can also be loaded from local directories: `js title=\"docusaurus.config.js\" import path from 'path'; export default { // ... themes: [path.resolve(__dirname, '/path/to/docusaurus-local-theme')], }; ` To specify options for a plugin or theme, replace the name of the plugin or theme in the config file with an array containing the name and an options object: `js title=\"docusaurus.config.js\" export default { // ... plugins: [ [ 'content-blog', { path: 'blog', routeBasePath: 'blog', include: ['.md', '.mdx'], // ... }, ], 'content-pages', ], }; ` To specify options for a plugin or theme that is bundled in a preset, pass the options through the presets field. In this example, docs refers to @docusaurus/plugin-content-docs and theme refers to @docusaurus/theme-classic. `js title=\"docusaurus.config.js\" export default { // ... presets: [ [ '@docusaurus/preset-classic', { docs: { sidebarPath: './sidebars.js', }, theme: { customCss: ['./src/css/custom.css'], }, }, ], ], }; ` :::tip The presets: [['classic', {...}]] shorthand works as well. ::: For further help configuring themes, plugins, and presets, see Using Plugins. Custom configurations {#custom-configurations} Docusaurus guards docusaurus.config.js from unknown fields. To add custom fields, define them in customFields. Example: `js title=\"docusaurus.config.js\" export default { // ... // highlight-start customFields: { image: '', keywords: [], }, // highlight-end // ... }; ` Accessing configuration from components {#accessing-configuration-from-components} Your configuration object will be made available to all the components of your site. And you may access them via React context as siteConfig. Basic example: `jsx import React from 'react'; // highlight-next-line import useDocusaurusContext from '@docusaurus/useDocusaurusContext'; const Hello = () => { // highlight-start const {siteConfig} = useDocusaurusContext(); // highlight-end const {title, tagline} = siteConfig; return <div>{${title} · ${tagline}}</div>; }; ` :::tip If you just want to use those fields on the client side, you could create your own JS files and import them as ES6 modules, there is no need to put them in docusaurus.config.js. ::: Customizing Babel Configuration {#customizing-babel-configuration} Docusaurus transpiles your site's source code using Babel by default. If you want to customize the Babel configuration, you can do so by creating a babel.config.js file in your project root. To use the built-in preset as a base configuration, install the following package and use it `bash npm2yarn npm install --save @docusaurus/babel ` Then use the preset in your babel.config.js file: `js title=\"babel.config.js\" export default { presets: ['@docusaurus/babel/preset'], }; ` Most of the time, the default preset configuration will work just fine. If you want to customize your Babel configuration (e.g. to add support for Flow), you can directly edit this file. For your changes to take effect, you need to restart the Docusaurus dev server.",
    "keywords": [
      "configuration",
      "configuring",
      "your",
      "site's",
      "behavior",
      "through",
      "docusaurus.config.js",
      "and",
      "more.",
      "mdx",
      "TOCInline",
      "docusaurus",
      "types",
      "plugin-content-blog",
      "plugin-content-pages",
      "theme-classic",
      "path",
      "to",
      "docusaurus-local-theme",
      "plugin-content-docs",
      "preset-classic",
      "sidebars",
      "src",
      "css",
      "custom",
      "useDocusaurusContext",
      "div",
      "babel",
      "preset",
      "Configuration",
      "import",
      "from",
      "theme",
      "info",
      "Check",
      "the",
      "config",
      "API",
      "reference",
      "for",
      "exhaustive",
      "list",
      "options",
      "Docusaurus",
      "has",
      "unique",
      "take",
      "configurations",
      "encourage",
      "you",
      "congregate",
      "information",
      "about",
      "site",
      "into",
      "one",
      "place",
      "guard",
      "fields",
      "this",
      "file",
      "facilitate",
      "making",
      "data",
      "object",
      "accessible",
      "across",
      "Keeping",
      "well",
      "maintained",
      "helps",
      "collaborators",
      "open",
      "source",
      "contributors",
      "able",
      "focus",
      "documentation",
      "while",
      "still",
      "being",
      "customize",
      "Syntax",
      "declare",
      "syntax",
      "The",
      "run",
      "Node",
      "should",
      "export",
      "either",
      "function",
      "that",
      "creates",
      "supports",
      "Modules",
      "CommonJS",
      "TypeScript",
      "Constraints",
      "Required",
      "use",
      "default",
      "module",
      "exports",
      "Optional",
      "Lib",
      "lib",
      "require",
      "packages",
      "gives",
      "ability",
      "its",
      "various",
      "equivalent",
      "ways",
      "all",
      "following",
      "examples",
      "lead",
      "exact",
      "same",
      "result",
      "title",
      "url",
      "https",
      "type",
      "Config",
      "satisfies",
      "const",
      "configCreator",
      "return",
      "async",
      "createConfigAsync",
      "tip",
      "Using",
      "ESM",
      "only",
      "creator",
      "can",
      "useful",
      "modules",
      "notably",
      "most",
      "Remark",
      "plugins",
      "possible",
      "such",
      "thanks",
      "dynamic",
      "imports",
      "Use",
      "instead",
      "esm",
      "highlight",
      "next",
      "line",
      "await",
      "rest",
      "What",
      "goes",
      "what",
      "docusaurusconfigjs",
      "You",
      "not",
      "have",
      "write",
      "scratch",
      "even",
      "are",
      "developing",
      "All",
      "templates",
      "come",
      "with",
      "includes",
      "defaults",
      "common",
      "However",
      "helpful",
      "high",
      "level",
      "understanding",
      "how",
      "designed",
      "implemented",
      "overview",
      "categorized",
      "toc",
      "minHeadingLevel",
      "maxHeadingLevel",
      "Site",
      "metadata",
      "contains",
      "essential",
      "global",
      "baseUrl",
      "favicon",
      "They",
      "used",
      "several",
      "places",
      "headings",
      "browser",
      "tab",
      "icon",
      "social",
      "sharing",
      "Facebook",
      "generate",
      "correct",
      "serve",
      "static",
      "files",
      "Deployment",
      "deployment",
      "projectName",
      "organizationName",
      "optionally",
      "deploymentBranch",
      "when",
      "deploy",
      "command",
      "recommended",
      "check",
      "docs",
      "more",
      "Theme",
      "plugin",
      "List",
      "themes",
      "presets",
      "respectively",
      "These",
      "typically",
      "npm",
      "content",
      "blog",
      "pages",
      "classic",
      "shorthands",
      "allowing",
      "simplify",
      "above",
      "also",
      "loaded",
      "local",
      "directories",
      "resolve",
      "__dirname",
      "specify",
      "replace",
      "name",
      "array",
      "containing",
      "routeBasePath",
      "include",
      "bundled",
      "pass",
      "field",
      "example",
      "refers",
      "sidebarPath",
      "customCss",
      "shorthand",
      "works",
      "For",
      "further",
      "help",
      "see",
      "Plugins",
      "Custom",
      "guards",
      "unknown",
      "add",
      "define",
      "them",
      "customFields",
      "Example",
      "start",
      "image",
      "keywords",
      "end",
      "Accessing",
      "components",
      "accessing",
      "Your",
      "will",
      "made",
      "available",
      "And",
      "may",
      "access",
      "via",
      "React",
      "context",
      "siteConfig",
      "Basic",
      "jsx",
      "react",
      "Hello",
      "tagline",
      "just",
      "want",
      "those",
      "client",
      "side",
      "could",
      "create",
      "own",
      "ES6",
      "there",
      "need",
      "put",
      "Customizing",
      "Babel",
      "customizing",
      "transpiles",
      "code",
      "using",
      "creating",
      "project",
      "root",
      "built",
      "base",
      "install",
      "package",
      "bash",
      "npm2yarn",
      "save",
      "Then",
      "Most",
      "time",
      "work",
      "fine",
      "support",
      "Flow",
      "directly",
      "edit",
      "changes",
      "effect",
      "restart",
      "dev",
      "server"
    ],
    "url": "/docs/configuration",
    "path": "configuration.mdx",
    "type": "general",
    "category": "root"
  },
  {
    "id": "faq",
    "title": "FAQ",
    "description": "",
    "content": "1.AUTH\\_ 105: The server verifies the request header parameters validate-timestamp (validTimeStamp) and validate-recvwindow (recvwindow) The following rules must be followed: dealTimeStamp (server time when the request is processed, in milliseconds) - validTimeStamp < recvwindow, otherwise AUTH_105 will be returned. To avoid this error, validate-timestamp recommends using the time when the request was sent, and it is measured in milliseconds. The validate-recvwindow is set a little larger 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | | 响应示例",
    "keywords": [
      "faq",
      "copy",
      "trading",
      "access description",
      "mdx",
      "AUTH",
      "The",
      "server",
      "verifies",
      "the",
      "request",
      "header",
      "parameters",
      "validate",
      "timestamp",
      "validTimeStamp",
      "and",
      "recvwindow",
      "following",
      "rules",
      "must",
      "followed",
      "dealTimeStamp",
      "time",
      "when",
      "processed",
      "milliseconds",
      "otherwise",
      "AUTH_105",
      "will",
      "returned",
      "avoid",
      "this",
      "error",
      "recommends",
      "using",
      "was",
      "sent",
      "measured",
      "set",
      "little",
      "larger",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/copy-trading/Access Description/FAQ",
    "path": "copy-trading/Access Description/FAQ.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "RestApi",
    "title": "REST API",
    "description": "",
    "content": "production environment: https://sapi.xt.com 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | | 响应示例",
    "keywords": [
      "rest",
      "api",
      "copy",
      "trading",
      "access description",
      "restapi",
      "mdx",
      "sapi",
      "production",
      "environment",
      "https",
      "com",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/copy-trading/Access Description/RestApi",
    "path": "copy-trading/Access Description/RestApi.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "interface",
    "title": "Basic information of the interface",
    "description": "",
    "content": "Due to reasons such as high latency and poor stability, it is not recommended to access the API through a proxy. GET request parameters are placed in query Params, POST request parameters are placed in request body Please set the request header information to：Content-Type=application/json For requests that start other than /public, the request message needs to be signed 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | | 响应示例",
    "keywords": [
      "basic",
      "information",
      "of",
      "the",
      "interface",
      "copy",
      "trading",
      "access description",
      "apibasicinfo",
      "mdx",
      "json",
      "public",
      "get",
      "post",
      "Due",
      "reasons",
      "such",
      "high",
      "latency",
      "and",
      "poor",
      "stability",
      "not",
      "recommended",
      "access",
      "API",
      "through",
      "proxy",
      "GET",
      "request",
      "parameters",
      "are",
      "placed",
      "query",
      "Params",
      "POST",
      "body",
      "Please",
      "set",
      "header",
      "Content",
      "Type",
      "application",
      "For",
      "requests",
      "that",
      "start",
      "other",
      "than",
      "message",
      "needs",
      "signed",
      "Name",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/copy-trading/Access Description/apiBasicInfo",
    "path": "copy-trading/Access Description/apiBasicInfo.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "apidemo",
    "title": "API code library",
    "description": "",
    "content": "Java connector A lightweight Java codebase that provides methods that allow users to directly call the API。 Sdks for each language: java : https://github.com/xt-com/xt4-java-demo golang : https://github.com/xt-com/xt4-go-demo c: https://github.com/xt-com/xt4-c--demo Sample request information for each interface： https://github.com/xt-com/xt4-request-demo/blob/master/request-xt.txt 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | | 响应示例",
    "keywords": [
      "api",
      "code",
      "library",
      "copy",
      "trading",
      "access description",
      "apidemo",
      "mdx",
      "github",
      "xt-com",
      "xt4-java-demo",
      "xt4-go-demo",
      "xt4-c--demo",
      "xt4-request-demo",
      "blob",
      "master",
      "request-xt",
      "Java",
      "connector",
      "lightweight",
      "codebase",
      "that",
      "provides",
      "methods",
      "allow",
      "users",
      "directly",
      "call",
      "the",
      "API",
      "Sdks",
      "for",
      "each",
      "language",
      "java",
      "https",
      "com",
      "xt4",
      "demo",
      "golang",
      "Sample",
      "request",
      "information",
      "interface",
      "txt",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/copy-trading/Access Description/BasicInformationOfTheInterfaceo",
    "path": "copy-trading/Access Description/BasicInformationOfTheInterface.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "applyapi",
    "title": "API Key application steps",
    "description": "",
    "content": "The interface may require the user's API Key,How to create API-KEY please refer to here 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | | 响应示例",
    "keywords": [
      "api",
      "key",
      "application",
      "steps",
      "copy",
      "trading",
      "access description",
      "applyapi",
      "mdx",
      "The",
      "interface",
      "may",
      "require",
      "the",
      "user",
      "API",
      "Key",
      "How",
      "create",
      "KEY",
      "please",
      "refer",
      "here",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/copy-trading/Access Description/applyApi",
    "path": "copy-trading/Access Description/applyApi.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "errorcode",
    "title": "response code",
    "description": "",
    "content": "| httpStatus | description | | --- | --- | | 200 | The request is successful, please check the rc and mc sections further | | 404 | interface does not exist | | 429 | The request is too frequent, please control the request rate according to the speed limit requirement | | 500 | Service exception | | 502 | Gateway exception | | 503 | Service unavailable, please try again later | | rc | return Code | | --- | ---------------- | | 0 | business success | | 1 | business failure | | mc | message code | | --- | --- | | SUCCESS | success | | FAILURE | fail | | AUTH_001 | missing request header validate-appkey | | AUTH_002 | missing request header validate-timestamp | | AUTH_003 | missing request header validate-recvwindow | | AUTH_004 | bad request header validate-recvwindow | | AUTH_005 | missing request header validate-algorithms | | AUTH_006 | bad request header validate-algorithms | | AUTH_007 | missing request header validate-signature | | AUTH_101 | ApiKey does not exist | | AUTH_102 | ApiKey is not activated | | AUTH_103 | Signature error | | AUTH_104 | Unbound IP request | | AUTH_105 | outdated message | | AUTH_106 | Exceeded apikey permission | | SYMBOL_001 | Symbol not exist | | SYMBOL_002 | Symbol offline | | SYMBOL_003 | Symbol suspend trading | | SYMBOL_004 | Symbol country disallow trading | | SYMBOL_005 | The symbol does not support trading via API | | ORDER_001 | Platform rejection | | ORDER_002 | insufficient funds | | ORDER_003 | Trading Pair Suspended | | ORDER_004 | no transaction | | ORDER_005 | Order not exist | | ORDER_006 | Too many open orders | | ORDER_007 | The sub-account has no transaction authority | | ORDER_008 | The order price or quantity precision is abnormal | | ORDER_F0101 | Trigger Price Filter - Min | | ORDER_F0102 | Trigger Price Filter - Max | | ORDER_F0103 | Trigger Price Filter - Step Value | | ORDER_F0201 | Trigger Quantity Filter - Min | | ORDER_F0202 | Trigger Quantity Filter - Max | | ORDER_F0203 | Trigger Quantity Filter - Step Value | | ORDER_F0301 | Trigger QUOTE_QTY Filter - Min Value | | ORDER_F0401 | Trigger PROTECTION_ONLINE Filter or PROTECTION_LIMIT Filter | | ORDER_F0501 | Trigger PROTECTION_LIMIT Filter - Buy Max Deviation | | ORDER_F0502 | Trigger PROTECTION_LIMIT Filter - Sell Max Deviation | | ORDER_F0503 | Trigger PROTECTION_LIMIT Filter - Buy Limit Coefficient | | ORDER_F0504 | Trigger PROTECTION_LIMIT Filter - Sell Limit Coefficient | | ORDER_F0601 | Trigger PROTECTION_MARKET Filter | | COMMON_001 | The user does not exist | | COMMON_002 | System busy, please try it later | | COMMON_003 | Operation failed, please try it later | | CURRENCY_001 | Information of currency is abnormal | | SYMBOL_001 | Symbol does not exist | | GATEWAY_0001 | Trigger risk control | | GATEWAY_0002 | Trigger risk control | | GATEWAY_0003 | Trigger risk control | | GATEWAY_0004 | Trigger risk control | | COPY_TRADE_SPOT_000 | The system is busy, please try again later | | COPY_TRADE_SPOT_001 | You are already a leader | | COPY_TRADE_SPOT_002 | You already have a leader | | COPY_TRADE_SPOT_003 | You have already submitted your leader application | | COPY_TRADE_SPOT_004 | You have not completed real-name authentication or your real-name authentication level does not meet the application requirements | | COPY_TRADE_SPOT_005 | Your account total assets do not meet the application requirements | | COPY_TRADE_SPOT_006 | The leader does not exist | | COPY_TRADE_SPOT_007 | You have already submitted your leader application, follow order is not supported | | COPY_TRADE_SPOT_008 | The copy margin exceeds the limit | | COPY_TRADE_SPOT_009 | The copy order ratio exceeds the limit | | COPY_TRADE_SPOT_010 | The number of followers is full | | COPY_TRADE_SPOT_011 | Exceeded the maximum number of followers | | COPY_TRADE_SPOT_012 | The precision of the take-profit price is abnormal | | COPY_TRADE_SPOT_013 | The precision of the stop-loss price is abnormal | | COPY_TRADE_SPOT_014 | The take-profit trigger price must be greater than the latest transaction price | | COPY_TRADE_SPOT_015 | The stop-loss trigger price must be less than the latest transaction price | | COPY_TRADE_SPOT_016 | The leader has spot orders and is not allowed to cancel the termination | 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | |",
    "keywords": [
      "response",
      "code",
      "copy",
      "trading",
      "access description",
      "errorcode",
      "mdx",
      "httpStatus",
      "description",
      "The",
      "request",
      "successful",
      "please",
      "check",
      "the",
      "and",
      "sections",
      "further",
      "interface",
      "does",
      "not",
      "exist",
      "too",
      "frequent",
      "control",
      "rate",
      "according",
      "speed",
      "limit",
      "requirement",
      "Service",
      "exception",
      "Gateway",
      "unavailable",
      "try",
      "again",
      "later",
      "return",
      "Code",
      "business",
      "success",
      "failure",
      "message",
      "SUCCESS",
      "FAILURE",
      "fail",
      "AUTH_001",
      "missing",
      "header",
      "validate",
      "appkey",
      "AUTH_002",
      "timestamp",
      "AUTH_003",
      "recvwindow",
      "AUTH_004",
      "bad",
      "AUTH_005",
      "algorithms",
      "AUTH_006",
      "AUTH_007",
      "signature",
      "AUTH_101",
      "ApiKey",
      "AUTH_102",
      "activated",
      "AUTH_103",
      "Signature",
      "error",
      "AUTH_104",
      "Unbound",
      "AUTH_105",
      "outdated",
      "AUTH_106",
      "Exceeded",
      "apikey",
      "permission",
      "SYMBOL_001",
      "Symbol",
      "SYMBOL_002",
      "offline",
      "SYMBOL_003",
      "suspend",
      "SYMBOL_004",
      "country",
      "disallow",
      "SYMBOL_005",
      "symbol",
      "support",
      "via",
      "API",
      "ORDER_001",
      "Platform",
      "rejection",
      "ORDER_002",
      "insufficient",
      "funds",
      "ORDER_003",
      "Trading",
      "Pair",
      "Suspended",
      "ORDER_004",
      "transaction",
      "ORDER_005",
      "Order",
      "ORDER_006",
      "Too",
      "many",
      "open",
      "orders",
      "ORDER_007",
      "sub",
      "account",
      "has",
      "authority",
      "ORDER_008",
      "order",
      "price",
      "quantity",
      "precision",
      "abnormal",
      "ORDER_F0101",
      "Trigger",
      "Price",
      "Filter",
      "Min",
      "ORDER_F0102",
      "Max",
      "ORDER_F0103",
      "Step",
      "Value",
      "ORDER_F0201",
      "Quantity",
      "ORDER_F0202",
      "ORDER_F0203",
      "ORDER_F0301",
      "QUOTE_QTY",
      "ORDER_F0401",
      "PROTECTION_ONLINE",
      "PROTECTION_LIMIT",
      "ORDER_F0501",
      "Buy",
      "Deviation",
      "ORDER_F0502",
      "Sell",
      "ORDER_F0503",
      "Limit",
      "Coefficient",
      "ORDER_F0504",
      "ORDER_F0601",
      "PROTECTION_MARKET",
      "COMMON_001",
      "user",
      "COMMON_002",
      "System",
      "busy",
      "COMMON_003",
      "Operation",
      "failed",
      "CURRENCY_001",
      "Information",
      "currency",
      "GATEWAY_0001",
      "risk",
      "GATEWAY_0002",
      "GATEWAY_0003",
      "GATEWAY_0004",
      "COPY_TRADE_SPOT_000",
      "system",
      "COPY_TRADE_SPOT_001",
      "You",
      "are",
      "already",
      "leader",
      "COPY_TRADE_SPOT_002",
      "have",
      "COPY_TRADE_SPOT_003",
      "submitted",
      "your",
      "application",
      "COPY_TRADE_SPOT_004",
      "completed",
      "real",
      "name",
      "authentication",
      "level",
      "meet",
      "requirements",
      "COPY_TRADE_SPOT_005",
      "Your",
      "total",
      "assets",
      "COPY_TRADE_SPOT_006",
      "COPY_TRADE_SPOT_007",
      "follow",
      "supported",
      "COPY_TRADE_SPOT_008",
      "margin",
      "exceeds",
      "COPY_TRADE_SPOT_009",
      "ratio",
      "COPY_TRADE_SPOT_010",
      "number",
      "followers",
      "full",
      "COPY_TRADE_SPOT_011",
      "maximum",
      "COPY_TRADE_SPOT_012",
      "take",
      "profit",
      "COPY_TRADE_SPOT_013",
      "stop",
      "loss",
      "COPY_TRADE_SPOT_014",
      "trigger",
      "must",
      "greater",
      "than",
      "latest",
      "COPY_TRADE_SPOT_015",
      "less",
      "COPY_TRADE_SPOT_016",
      "spot",
      "allowed",
      "cancel",
      "termination",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/copy-trading/Access Description/errorCode",
    "path": "copy-trading/Access Description/errorCode.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "limitrules",
    "title": "Frequency Limiting Rules",
    "description": "",
    "content": "Some interfaces will have limited flow control (the corresponding interface will have a limited flow description). The flow limit is mainly divided into gateway flow limit and WAF flow limit. If the interface request triggers the gateway flow limit, 429 will be returned, indicating that the access frequency exceeds the limit, and the IP or apiKey will be blocked. Gateway flow limiting is divided into IP and apiKey flow limiting. Example description of IP flow limit: 100/s/ip, indicating the limit of the number of requests per second for this interface per IP. apiKey current limit example description: 50/s/apiKey, indicating the limit of the number of requests per second for the interface per apiKey. 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | |",
    "keywords": [
      "frequency",
      "limiting",
      "rules",
      "copy",
      "trading",
      "access description",
      "limitrules",
      "mdx",
      "ip",
      "apiKey",
      "Some",
      "interfaces",
      "will",
      "have",
      "limited",
      "flow",
      "control",
      "the",
      "corresponding",
      "interface",
      "description",
      "The",
      "limit",
      "mainly",
      "divided",
      "into",
      "gateway",
      "and",
      "WAF",
      "request",
      "triggers",
      "returned",
      "indicating",
      "that",
      "access",
      "exceeds",
      "blocked",
      "Gateway",
      "Example",
      "number",
      "requests",
      "per",
      "second",
      "for",
      "this",
      "current",
      "example",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/copy-trading/Access Description/limitRules",
    "path": "copy-trading/Access Description/limitRules.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "publicmodule",
    "title": "Public module",
    "description": "",
    "content": "<span id=\"leaderOrderRequestType\">Leader order request type</span> | Type | Description | | ---- | -------------------------------- | | 1 | Query order details. | | 2 | Query order summary information. | <span id=\"copyTradeUserStatus\">Copy trade user status</span> | User status | Description | | ----------- | ------------------- | | LEADER | Copy trade leader | | FOLLOWER | Copy trade follower | | NONE | None | <span id=\"leaderType\">Leader type</span> | Type | Description | | ---- | -------------- | | 1 | Current follow | | 2 | History follow | <span id=\"followType\">Copy trade follow type</span> | Follow type | Description | | ----------- | --------------------------------------- | | FUND | Copy trading according to fixed amount. | | RATE | Copy trading according to fund ratio. | <span id=\"followLossOperate\">Copy stop loss position processing</span> | FollowLossOperate | Description | | ----------------- | ------------------------------------- | | MARKET_SELL | Immediately settle at market price | | LEADER_CLOSE | Follow the lead to close the position | | MANUAL_PROCESS | Manual Processing | 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | |",
    "keywords": [
      "public",
      "module",
      "copy",
      "trading",
      "access description",
      "publicmodule",
      "mdx",
      "span",
      "Leader",
      "order",
      "request",
      "type",
      "Type",
      "Description",
      "Query",
      "details",
      "summary",
      "information",
      "copyTradeUserStatus",
      "Copy",
      "trade",
      "user",
      "status",
      "User",
      "LEADER",
      "leader",
      "FOLLOWER",
      "follower",
      "NONE",
      "None",
      "leaderType",
      "Current",
      "follow",
      "History",
      "followType",
      "Follow",
      "FUND",
      "according",
      "fixed",
      "amount",
      "RATE",
      "fund",
      "ratio",
      "followLossOperate",
      "stop",
      "loss",
      "position",
      "processing",
      "FollowLossOperate",
      "MARKET_SELL",
      "Immediately",
      "settle",
      "market",
      "price",
      "LEADER_CLOSE",
      "the",
      "lead",
      "close",
      "MANUAL_PROCESS",
      "Manual",
      "Processing",
      "Name",
      "Mandatory",
      "Default"
    ],
    "url": "/docs/copy-trading/Access Description/publicModule",
    "path": "copy-trading/Access Description/publicModule.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "returnformat",
    "title": "response format",
    "description": "",
    "content": "All interface returns are in JSON format. 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | | 响应示例 `json { \"rc\": 0, \"result\": { }, \"mc\": \"SUCCESS\" \"ma\": [] } `",
    "keywords": [
      "response",
      "format",
      "copy",
      "trading",
      "access description",
      "returnformat",
      "mdx",
      "All",
      "interface",
      "returns",
      "are",
      "JSON",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None",
      "json",
      "result",
      "SUCCESS"
    ],
    "url": "/docs/copy-trading/Access Description/returnFormat",
    "path": "copy-trading/Access Description/returnFormat.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "Signstatement",
    "title": "Signature Instructions",
    "description": "",
    "content": "Since XT needs to provide some open interfaces for third-party platforms，therefore, the issue of data security needs to be considered. Such as whether the data has been tampered with, whether the data is outdated, whether the data can be submitted repeatedly, and the access frequency of the interface, and whether data has been tampered with is the most important issue. Please apply for appkey and secretkey in the user center first, each user's appkey and secretkey are different. Add timestamp, its value should be the unix timestamp (milliseconds) of the time when the request is sent, and the time of the data is calculated based on this value. Add signature, its value is obtained by a certain rule of signature algorithm. Add recvwindow (defining the valid time of the request), the valid time is currently relatively simple and uniformly fixed at a certain value. When a request is received by the server, the timestamp in the request is checked to ensure it falls between 2 to 60 seconds. Any request with a timestamp older than 5,000 milliseconds is considered invalid. The time window value can be set using the optional parameter: \"recvWindow\". Additionally, if the server determines that the client's timestamp is more than one second ahead of the server, the request will also be invalid. Online conditions are not always 100% reliable in terms of the timeliness of trades, resulting in varying levels of latency between your local program and the XT server. This is why we provide the \"recvWindow\" parameter - if you engage in high-frequency trading and require stricter transaction timeliness, you can adjust the \"recvWindow\" parameter to better meet your needs. Recvwindow longer than 5 seconds is not recommended. 5、Added algorithm (signature method/algorithm), the user calculates the signature according to the protocol of the hash, and HmacSHA256 is recommended. For those protocols that are supported, see the table below. HmacMD5、HmacSHA1、HmacSHA224、HmacSHA256(recommended)、HmacSHA384、HmacSHA512 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | |",
    "keywords": [
      "signature",
      "instructions",
      "copy",
      "trading",
      "access description",
      "signstatement",
      "mdx",
      "algorithm",
      "Since",
      "needs",
      "provide",
      "some",
      "open",
      "interfaces",
      "for",
      "third",
      "party",
      "platforms",
      "therefore",
      "the",
      "issue",
      "data",
      "security",
      "considered",
      "Such",
      "whether",
      "has",
      "been",
      "tampered",
      "with",
      "outdated",
      "can",
      "submitted",
      "repeatedly",
      "and",
      "access",
      "frequency",
      "interface",
      "most",
      "important",
      "Please",
      "apply",
      "appkey",
      "secretkey",
      "user",
      "center",
      "first",
      "each",
      "are",
      "different",
      "Add",
      "timestamp",
      "its",
      "value",
      "should",
      "unix",
      "milliseconds",
      "time",
      "when",
      "request",
      "sent",
      "calculated",
      "based",
      "this",
      "obtained",
      "certain",
      "rule",
      "recvwindow",
      "defining",
      "valid",
      "currently",
      "relatively",
      "simple",
      "uniformly",
      "fixed",
      "When",
      "received",
      "server",
      "checked",
      "ensure",
      "falls",
      "between",
      "seconds",
      "Any",
      "older",
      "than",
      "invalid",
      "The",
      "window",
      "set",
      "using",
      "optional",
      "parameter",
      "recvWindow",
      "Additionally",
      "determines",
      "that",
      "client",
      "more",
      "one",
      "second",
      "ahead",
      "will",
      "also",
      "Online",
      "conditions",
      "not",
      "always",
      "reliable",
      "terms",
      "timeliness",
      "trades",
      "resulting",
      "varying",
      "levels",
      "latency",
      "your",
      "local",
      "program",
      "This",
      "why",
      "you",
      "engage",
      "high",
      "require",
      "stricter",
      "transaction",
      "adjust",
      "better",
      "meet",
      "Recvwindow",
      "longer",
      "recommended",
      "Added",
      "method",
      "calculates",
      "according",
      "protocol",
      "hash",
      "HmacSHA256",
      "For",
      "those",
      "protocols",
      "supported",
      "see",
      "table",
      "below",
      "HmacMD5",
      "HmacSHA1",
      "HmacSHA224",
      "HmacSHA384",
      "HmacSHA512",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/copy-trading/Access Description/signStatement",
    "path": "copy-trading/Access Description/signStatement.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "signSteps",
    "title": "Untitled",
    "description": "",
    "content": "",
    "keywords": [
      "untitled",
      "copy",
      "trading",
      "access description",
      "signsteps",
      "mdx"
    ],
    "url": "/docs/copy-trading/Access Description/signSteps",
    "path": "copy-trading/Access Description/signSteps.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "applyleadtrading",
    "title": "Apply for lead trading",
    "description": "/v1/copy-trade-account/copy-trade/apply",
    "content": "接口 POST /v1/copy-trade-account/copy-trade/apply Limit Flow Rules 2/s/ip 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": true //true or false } `",
    "keywords": [
      "apply",
      "for",
      "lead",
      "trading",
      "/v1/copy-trade-account/copy-trade/apply",
      "copy",
      "copy tradeing",
      "applyleadtrading",
      "mdx",
      "v1",
      "copy-trade-account",
      "copy-trade",
      "ip",
      "true",
      "post",
      "POST",
      "trade",
      "account",
      "Limit",
      "Flow",
      "Rules",
      "json",
      "string",
      "result",
      "false"
    ],
    "url": "/docs/copy-trading/Copy tradeing/applyLeadTrading",
    "path": "copy-trading/Copy tradeing/applyLeadTrading.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "copytradeclose",
    "title": "Close copy order",
    "description": "/v1/copy-trade-order/copy-trade/order/close",
    "content": "接口 POST /v1/copy-trade-order/copy-trade/order/close Limit Flow Rules 50/s/apikey 请求参数 | Name | Type | Mandatory | Default | Description | | --------------- | ------ | --------- | ------- | --------------- | | leaderOrderId | number | Yes | | leader order id | | symbol | string | Yes | | symbol | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": true } `",
    "keywords": [
      "close",
      "copy",
      "order",
      "/v1/copy-trade-order/copy-trade/order/close",
      "trading",
      "copy tradeing",
      "copytradeclose",
      "mdx",
      "v1",
      "copy-trade-order",
      "copy-trade",
      "apikey",
      "post",
      "POST",
      "trade",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "leaderOrderId",
      "number",
      "Yes",
      "leader",
      "symbol",
      "string",
      "json",
      "result",
      "true"
    ],
    "url": "/docs/copy-trading/Copy tradeing/copyTradeClose",
    "path": "copy-trading/Copy tradeing/copyTradeClose.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "copytradecloseall",
    "title": "Close all copy order",
    "description": "/v1/copy-trade-order/copy-trade/order/close-all",
    "content": "接口 POST /v1/copy-trade-order/copy-trade/order/close-all Limit Flow Rules 50/s/apikey 请求参数 | Name | Type | Mandatory | Default | Description | | -------- | ------ | --------- | ------- | ----------- | | symbol | string | Yes | | symbol | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": true } `",
    "keywords": [
      "close",
      "all",
      "copy",
      "order",
      "/v1/copy-trade-order/copy-trade/order/close-all",
      "trading",
      "copy tradeing",
      "copytradecloseall",
      "mdx",
      "v1",
      "copy-trade-order",
      "copy-trade",
      "close-all",
      "apikey",
      "post",
      "POST",
      "trade",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "symbol",
      "string",
      "Yes",
      "json",
      "result",
      "true"
    ],
    "url": "/docs/copy-trading/Copy tradeing/copyTradeCloseAll",
    "path": "copy-trading/Copy tradeing/copyTradeCloseAll.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "copytradesell",
    "title": "Sell lead order",
    "description": "/v1/copy-trade-order/copy-trade/order/sell",
    "content": "接口 POST /v1/copy-trade-order/copy-trade/order/sell Limit Flow Rules 50/s/apikey 请求参数 | Name | Type | Mandatory | Default | Description | | --------------- | ------ | --------- | ------- | --------------- | | leaderOrderId | number | Yes | | leader order id | | symbol | string | Yes | | symbol | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": true } `",
    "keywords": [
      "sell",
      "lead",
      "order",
      "/v1/copy-trade-order/copy-trade/order/sell",
      "copy",
      "trading",
      "copy tradeing",
      "copytradesell",
      "mdx",
      "v1",
      "copy-trade-order",
      "copy-trade",
      "apikey",
      "post",
      "POST",
      "trade",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "leaderOrderId",
      "number",
      "Yes",
      "leader",
      "symbol",
      "string",
      "json",
      "result",
      "true"
    ],
    "url": "/docs/copy-trading/Copy tradeing/copyTradeSell",
    "path": "copy-trading/Copy tradeing/copyTradeSell.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "copytradesellall",
    "title": "Sell all lead order",
    "description": "/v1/copy-trade-order/copy-trade/order/sell-all",
    "content": "接口 POST /v1/copy-trade-order/copy-trade/order/sell-all Limit Flow Rules 50/s/apikey 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | leaderOrder | bool | Yes | | true：sell all lead order; false：sell all copy order | | symbol | string | No | | symbol | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": true } `",
    "keywords": [
      "sell",
      "all",
      "lead",
      "order",
      "/v1/copy-trade-order/copy-trade/order/sell-all",
      "copy",
      "trading",
      "copy tradeing",
      "copytradesellall",
      "mdx",
      "v1",
      "copy-trade-order",
      "copy-trade",
      "sell-all",
      "apikey",
      "post",
      "POST",
      "trade",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "leaderOrder",
      "bool",
      "Yes",
      "true",
      "false",
      "symbol",
      "string",
      "json",
      "result"
    ],
    "url": "/docs/copy-trading/Copy tradeing/copyTradeSellAll",
    "path": "copy-trading/Copy tradeing/copyTradeSellAll.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "copytradesetting",
    "title": "Get my copy setting",
    "description": "/v1/copy-trade-account/copy-trade/follow-leader-config",
    "content": "接口 GET /v1/copy-trade-account/copy-trade/follow-leader-config Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | ----------------- | ------ | --------- | ------- | ----------------- | | leaderAccountId | number | Yes | | leader account id | 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": { \"autoFollowSymbol\": true, //auto follow new symbol or not \"followLoss\": 0, //follow loss \"followLossOperate\": \"LEADER_CLOSE\", //follow loss operate.MARKET_SELL;LEADER_CLOSE;MANUAL_PROCESS \"followSymbols\": [ //follow symbols, comma separated (the symbols has been selected) \"string\" ], \"followType\": \"FUND\", //follow type,FUND;RATE \"followVal\": 0, //follow value, fund or rate value \"leaderSymbols\": [ //leader symbols, all copy trading symbols \"string\" ], \"profitRate\": 0, //profit rate \"triggerProfitRate\": 0, //trigger profit rate \"triggerStopRate\": 0 //trigger stop rate } } `",
    "keywords": [
      "get",
      "my",
      "copy",
      "setting",
      "/v1/copy-trade-account/copy-trade/follow-leader-config",
      "trading",
      "copy tradeing",
      "copytradesetting",
      "mdx",
      "v1",
      "copy-trade-account",
      "copy-trade",
      "follow-leader-config",
      "ip",
      "auto",
      "follow",
      "leader",
      "profit",
      "trigger",
      "GET",
      "trade",
      "account",
      "config",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "leaderAccountId",
      "number",
      "Yes",
      "json",
      "string",
      "result",
      "autoFollowSymbol",
      "true",
      "new",
      "symbol",
      "not",
      "followLoss",
      "loss",
      "followLossOperate",
      "LEADER_CLOSE",
      "operate",
      "MARKET_SELL",
      "MANUAL_PROCESS",
      "followSymbols",
      "symbols",
      "comma",
      "separated",
      "the",
      "has",
      "been",
      "selected",
      "followType",
      "FUND",
      "type",
      "RATE",
      "followVal",
      "value",
      "fund",
      "rate",
      "leaderSymbols",
      "all",
      "profitRate",
      "triggerProfitRate",
      "triggerStopRate",
      "stop"
    ],
    "url": "/docs/copy-trading/Copy tradeing/copyTradeSetting",
    "path": "copy-trading/Copy tradeing/copyTradeSetting.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "currentcopyorderget",
    "title": "Get current copy order",
    "description": "/v1/copy-trade-order/copy-trade/order/cur-follower-order",
    "content": "接口 GET /v1/copy-trade-order/copy-trade/order/cur-follower-order Limit Flow Rules 2/s/apikey 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | symbol | string | No | | Trading pair, if not filled in, represents all | | type | number | No | 2 | <a href=\"#leaderOrderRequestType\">Leader order request type</a>, 1,detail; 2,summarize | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": [ { \"id\": \"string\", \"orderId\": \"string\", //order id \"symbol\": \"string\", //symbol \"buySize\": 0, //buy quantity \"buyTime\": 0, //buy time \"buyPrice\": 0, //buy price \"sellSize\": 0, //sell quantity \"sellTime\": 0, //sell time \"sellPrice\": 0, //sell price \"profit\": 0, //profit \"profitRate\": 0, //profit rate \"triggerProfitPrice\": 0, //trigger profit price \"triggerStopPrice\": 0, //trigger stop price \"leaderOrderId\": \"string\", //leader order id \"leaderNickname\": \"string\", //leader nick name \"leaderAvatar\": \"string\" //leader avatar } ] } `",
    "keywords": [
      "get",
      "current",
      "copy",
      "order",
      "/v1/copy-trade-order/copy-trade/order/cur-follower-order",
      "trading",
      "copy tradeing",
      "currentcopyorderget",
      "mdx",
      "v1",
      "copy-trade-order",
      "copy-trade",
      "cur-follower-order",
      "apikey",
      "symbol",
      "buy",
      "sell",
      "profit",
      "trigger",
      "leader",
      "GET",
      "trade",
      "cur",
      "follower",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "string",
      "Trading",
      "pair",
      "not",
      "filled",
      "represents",
      "all",
      "type",
      "number",
      "href",
      "Leader",
      "request",
      "detail",
      "summarize",
      "json",
      "result",
      "orderId",
      "buySize",
      "quantity",
      "buyTime",
      "time",
      "buyPrice",
      "price",
      "sellSize",
      "sellTime",
      "sellPrice",
      "profitRate",
      "rate",
      "triggerProfitPrice",
      "triggerStopPrice",
      "stop",
      "leaderOrderId",
      "leaderNickname",
      "nick",
      "name",
      "leaderAvatar",
      "avatar"
    ],
    "url": "/docs/copy-trading/Copy tradeing/currentCopyOrderGet",
    "path": "copy-trading/Copy tradeing/currentCopyOrderGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "currentleadorderget",
    "title": "Get current lead order",
    "description": "/v1/copy-trade-order/copy-trade/order/cur-leader-order",
    "content": "接口 GET /v1/copy-trade-order/copy-trade/order/cur-leader-order Limit Flow Rules 2/s/apikey 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | symbol | string | No | | Trading pair, if not filled in, represents all | | type | number | No | 2 | <a href=\"#leaderOrderRequestType\">Leader order request type</a>, 1,detail; 2,summarize | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": [ { \"id\": \"string\", \"orderId\": \"string\", //order id \"symbol\": \"string\", //symbol \"buySize\": 0, //buy quantity \"buyTime\": 0, //buy time \"buyPrice\": 0, //buy price \"sellSize\": 0, //sell quantity \"sellTime\": 0, //sell time \"sellPrice\": 0, //sell price \"profit\": 0, //profit \"profitRate\": 0, //profit rate \"triggerProfitPrice\": 0, //trigger profit price \"triggerStopPrice\": 0, //trigger stop price \"followCount\": 0 //number of followers } ] } `",
    "keywords": [
      "get",
      "current",
      "lead",
      "order",
      "/v1/copy-trade-order/copy-trade/order/cur-leader-order",
      "copy",
      "trading",
      "copy tradeing",
      "currentleadorderget",
      "mdx",
      "v1",
      "copy-trade-order",
      "copy-trade",
      "cur-leader-order",
      "apikey",
      "symbol",
      "buy",
      "sell",
      "profit",
      "trigger",
      "number",
      "GET",
      "trade",
      "cur",
      "leader",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "string",
      "Trading",
      "pair",
      "not",
      "filled",
      "represents",
      "all",
      "type",
      "href",
      "Leader",
      "request",
      "detail",
      "summarize",
      "json",
      "result",
      "orderId",
      "buySize",
      "quantity",
      "buyTime",
      "time",
      "buyPrice",
      "price",
      "sellSize",
      "sellTime",
      "sellPrice",
      "profitRate",
      "rate",
      "triggerProfitPrice",
      "triggerStopPrice",
      "stop",
      "followCount",
      "followers"
    ],
    "url": "/docs/copy-trading/Copy tradeing/currentLeadOrderGet",
    "path": "copy-trading/Copy tradeing/currentLeadOrderGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "followcopytrade",
    "title": "Follow copy trading",
    "description": "/v1/copy-trade-account/copy-trade/follow",
    "content": "接口 POST /v1/copy-trade-account/copy-trade/follow Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | leaderAccountId | number | Yes | | leader account id | | followType | string | Yes | | follow type | | followVal | number | Yes | | follow fund value or rate value | | followLoss | number | No | | follow loss | | followLossOperate | string | Yes | | follow loss operate | | triggerStopRate | number | No | | single stop loss rate | | triggerProfitRate | number | No | | single take profit rate | | autoFollowSymbol | bool | Yes | | auto follow symbol or not | | symbols | string | Yes | | copy trade symbols. e.g. xt_usdt,btc_usdt | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": true } `",
    "keywords": [
      "follow",
      "copy",
      "trading",
      "/v1/copy-trade-account/copy-trade/follow",
      "copy tradeing",
      "followcopytrade",
      "mdx",
      "v1",
      "copy-trade-account",
      "copy-trade",
      "ip",
      "post",
      "POST",
      "trade",
      "account",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "leaderAccountId",
      "number",
      "Yes",
      "leader",
      "followType",
      "string",
      "type",
      "followVal",
      "fund",
      "value",
      "rate",
      "followLoss",
      "loss",
      "followLossOperate",
      "operate",
      "triggerStopRate",
      "single",
      "stop",
      "triggerProfitRate",
      "take",
      "profit",
      "autoFollowSymbol",
      "bool",
      "auto",
      "symbol",
      "not",
      "symbols",
      "xt_usdt",
      "btc_usdt",
      "json",
      "result",
      "true"
    ],
    "url": "/docs/copy-trading/Copy tradeing/followCopyTrade",
    "path": "copy-trading/Copy tradeing/followCopyTrade.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "getcopytradesymbol",
    "title": "Get copy trade symbols",
    "description": "/v1/copy-trade-market/public/copy-trade/symbol",
    "content": "接口 GET /v1/copy-trade-market/public/copy-trade/symbol Limit Flow Rules 2/s/apikey 响应示例 `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [], \"result\": [ { \"symbolId\": 1, //symbol id \"symbol\": \"btc_usdt\" //symbol } ] } `",
    "keywords": [
      "get",
      "copy",
      "trade",
      "symbols",
      "/v1/copy-trade-market/public/copy-trade/symbol",
      "trading",
      "copy tradeing",
      "getcopytradesymbol",
      "mdx",
      "v1",
      "copy-trade-market",
      "public",
      "copy-trade",
      "symbol",
      "apikey",
      "GET",
      "market",
      "Limit",
      "Flow",
      "Rules",
      "json",
      "SUCCESS",
      "result",
      "symbolId",
      "btc_usdt"
    ],
    "url": "/docs/copy-trading/Copy tradeing/getCopyTradeSymbol",
    "path": "copy-trading/Copy tradeing/getCopyTradeSymbol.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "getuserrole",
    "title": "Get user role",
    "description": "/v1/copy-trade-account/copy-trade/user-status",
    "content": "接口 GET /v1/copy-trade-account/copy-trade/user-status Limit Flow Rules 2/s/ip 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": \"string\" //LEADER、FOLLOWER、NONE } `",
    "keywords": [
      "get",
      "user",
      "role",
      "/v1/copy-trade-account/copy-trade/user-status",
      "copy",
      "trading",
      "copy tradeing",
      "getuserrole",
      "mdx",
      "v1",
      "copy-trade-account",
      "copy-trade",
      "user-status",
      "ip",
      "LEADER",
      "GET",
      "trade",
      "account",
      "status",
      "Limit",
      "Flow",
      "Rules",
      "json",
      "string",
      "result",
      "FOLLOWER",
      "NONE"
    ],
    "url": "/docs/copy-trading/Copy tradeing/getUserRole",
    "path": "copy-trading/Copy tradeing/getUserRole.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "historycopyorderget",
    "title": "Get historical copy order",
    "description": "/v1/copy-trade-order/copy-trade/order/his-follower-order",
    "content": "接口 GET /v1/copy-trade-order/copy-trade/order/his-follower-order Limit Flow Rules 2/s/apikey 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | symbol | string | No | | Trading pair, if not filled in, represents all | | direction | string | No | NEXT | query direction | | limit | number | No | 10 | number of pages | | id | object | No | | start ID，e.g. 6216559590087220004 | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": [ { \"id\": \"string\", \"orderId\": \"string\", //order id \"symbol\": \"string\", //symbol \"buySize\": 0, //buy quantity \"buyTime\": 0, //buy time \"buyPrice\": 0, //buy price \"sellSize\": 0, //sell quantity \"sellTime\": 0, //sell time \"sellPrice\": 0, //sell price \"profit\": 0, //profit \"profitRate\": 0, //profit rate \"triggerProfitPrice\": 0, //trigger profit price \"triggerStopPrice\": 0, //trigger stop price \"leaderOrderId\": \"string\", //leader order id \"leaderNickname\": \"string\", //leader nickname \"leaderAvatar\": \"string\" //leader avatar } ] } `",
    "keywords": [
      "get",
      "historical",
      "copy",
      "order",
      "/v1/copy-trade-order/copy-trade/order/his-follower-order",
      "trading",
      "copy tradeing",
      "historycopyorderget",
      "mdx",
      "v1",
      "copy-trade-order",
      "copy-trade",
      "his-follower-order",
      "apikey",
      "symbol",
      "buy",
      "sell",
      "profit",
      "trigger",
      "leader",
      "GET",
      "trade",
      "his",
      "follower",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "string",
      "Trading",
      "pair",
      "not",
      "filled",
      "represents",
      "all",
      "direction",
      "NEXT",
      "query",
      "limit",
      "number",
      "pages",
      "object",
      "start",
      "json",
      "result",
      "orderId",
      "buySize",
      "quantity",
      "buyTime",
      "time",
      "buyPrice",
      "price",
      "sellSize",
      "sellTime",
      "sellPrice",
      "profitRate",
      "rate",
      "triggerProfitPrice",
      "triggerStopPrice",
      "stop",
      "leaderOrderId",
      "leaderNickname",
      "nickname",
      "leaderAvatar",
      "avatar"
    ],
    "url": "/docs/copy-trading/Copy tradeing/historyCopyOrderGet",
    "path": "copy-trading/Copy tradeing/historyCopyOrderGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "historyleadorderget",
    "title": "Get historical lead order",
    "description": "/v1/copy-trade-order/copy-trade/order/his-leader-order",
    "content": "接口 GET /v1/copy-trade-order/copy-trade/order/his-leader-order Limit Flow Rules 2/s/apikey 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | symbol | string | No | | Trading pair, if not filled in, represents all | | direction | string | No | NEXT | query direction | | limit | number | No | 10 | number of pages | | id | object | No | | start ID，e.g. 6216559590087220004 | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": [ { \"id\": \"string\", \"orderId\": \"string\", //order id \"symbol\": \"string\", //symbol \"buySize\": 0, //buy quantity \"buyTime\": 0, //buy time \"buyPrice\": 0, //buy price \"sellSize\": 0, //sell quantity \"sellTime\": 0, //sell time \"sellPrice\": 0, //sell price \"profit\": 0, //profit \"profitRate\": 0, //profit rate \"triggerProfitPrice\": 0, //trigger profit price \"triggerStopPrice\": 0, //trigger stop price \"followCount\": 0 //number of followers } ] } `",
    "keywords": [
      "get",
      "historical",
      "lead",
      "order",
      "/v1/copy-trade-order/copy-trade/order/his-leader-order",
      "copy",
      "trading",
      "copy tradeing",
      "historyleadorderget",
      "mdx",
      "v1",
      "copy-trade-order",
      "copy-trade",
      "his-leader-order",
      "apikey",
      "symbol",
      "buy",
      "sell",
      "profit",
      "trigger",
      "number",
      "GET",
      "trade",
      "his",
      "leader",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "string",
      "Trading",
      "pair",
      "not",
      "filled",
      "represents",
      "all",
      "direction",
      "NEXT",
      "query",
      "limit",
      "pages",
      "object",
      "start",
      "json",
      "result",
      "orderId",
      "buySize",
      "quantity",
      "buyTime",
      "time",
      "buyPrice",
      "price",
      "sellSize",
      "sellTime",
      "sellPrice",
      "profitRate",
      "rate",
      "triggerProfitPrice",
      "triggerStopPrice",
      "stop",
      "followCount",
      "followers"
    ],
    "url": "/docs/copy-trading/Copy tradeing/historyLeadOrderGet",
    "path": "copy-trading/Copy tradeing/historyLeadOrderGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "historyprofitdetailget",
    "title": "Get historical profit sharing detail",
    "description": "/v1/copy-trade-balance/copy-trade/share-profit/his-detail",
    "content": "接口 GET /v1/copy-trade-balance/copy-trade/share-profit/his-detail Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | time | number | Yes | | profit sharing time. e.g. 1717545600000 | | direction | string | No | NEXT | query direction | | limit | number | No | 10 | number of pages | | id | object | No | | start ID，e.g. 6216559590087220004 | 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": { \"hasNext\": true, \"hasPrev\": true, \"items\": [ { \"amount\": 0, //profit sharing amount. \"avatar\": \"string\", //avatar of copy trader. \"id\": 0, //the id used for pagination query. \"name\": \"string\" //nickname of copy trader. } ] } } `",
    "keywords": [
      "get",
      "historical",
      "profit",
      "sharing",
      "detail",
      "/v1/copy-trade-balance/copy-trade/share-profit/his-detail",
      "copy",
      "trading",
      "copy tradeing",
      "historyprofitdetailget",
      "mdx",
      "v1",
      "copy-trade-balance",
      "copy-trade",
      "share-profit",
      "his-detail",
      "ip",
      "avatar",
      "the",
      "nickname",
      "GET",
      "trade",
      "balance",
      "share",
      "his",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "time",
      "number",
      "Yes",
      "direction",
      "string",
      "NEXT",
      "query",
      "limit",
      "pages",
      "object",
      "start",
      "json",
      "result",
      "hasNext",
      "true",
      "hasPrev",
      "items",
      "amount",
      "trader",
      "used",
      "for",
      "pagination",
      "name"
    ],
    "url": "/docs/copy-trading/Copy tradeing/historyProfitDetailGet",
    "path": "copy-trading/Copy tradeing/historyProfitDetailGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "historytotalprofitget",
    "title": "Get historical total profit sharing",
    "description": "/v1/copy-trade-balance/copy-trade/share-profit/his",
    "content": "接口 GET /v1/copy-trade-balance/copy-trade/share-profit/his Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | direction | string | No | NEXT | query direction | | limit | number | No | 10 | number of pages | | id | object | No | | start ID，e.g. 6216559590087220004 | 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": { \"hasNext\": true, \"hasPrev\": true, \"items\": [ { \"amount\": 0, //profit sharing amount \"id\": \"string\", //the id used for pagination query \"time\": 0 //profit sharing time } ] } } `",
    "keywords": [
      "get",
      "historical",
      "total",
      "profit",
      "sharing",
      "/v1/copy-trade-balance/copy-trade/share-profit/his",
      "copy",
      "trading",
      "copy tradeing",
      "historytotalprofitget",
      "mdx",
      "v1",
      "copy-trade-balance",
      "copy-trade",
      "share-profit",
      "his",
      "ip",
      "the",
      "GET",
      "trade",
      "balance",
      "share",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "direction",
      "string",
      "NEXT",
      "query",
      "limit",
      "number",
      "pages",
      "object",
      "start",
      "json",
      "result",
      "hasNext",
      "true",
      "hasPrev",
      "items",
      "amount",
      "used",
      "for",
      "pagination",
      "time"
    ],
    "url": "/docs/copy-trading/Copy tradeing/historyTotalProfitGet",
    "path": "copy-trading/Copy tradeing/historyTotalProfitGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "eadcurrencypreferencesget",
    "title": "Get lead trader currency preferences",
    "description": "/v1/copy-trade-balance/public/copy-trade/leader-trading-prefer",
    "content": "接口 GET /v1/copy-trade-balance/public/copy-trade/leader-trading-prefer Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | ----------- | ------ | --------- | ------- | ----------------- | | accountId | number | Yes | | leader account id | | days | number | No | 7 | query days | 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": [ { \"count\": 0, //trade count \"index\": 0, \"percentage\": 0, //percentage \"pnl\": 0, //trading Profit and Loss \"symbol\": \"string\" //symbol, others return others } ] } `",
    "keywords": [
      "get",
      "lead",
      "trader",
      "currency",
      "preferences",
      "/v1/copy-trade-balance/public/copy-trade/leader-trading-prefer",
      "copy",
      "trading",
      "copy tradeing",
      "leadcurrencypreferencesget",
      "mdx",
      "v1",
      "copy-trade-balance",
      "public",
      "copy-trade",
      "leader-trading-prefer",
      "ip",
      "trade",
      "percentage",
      "symbol",
      "GET",
      "balance",
      "leader",
      "prefer",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "accountId",
      "number",
      "Yes",
      "account",
      "days",
      "query",
      "json",
      "string",
      "result",
      "count",
      "index",
      "pnl",
      "Profit",
      "and",
      "Loss",
      "others",
      "return"
    ],
    "url": "/docs/copy-trading/Copy tradeing/leadCurrencyPreferencesGet",
    "path": "copy-trading/Copy tradeing/leadCurrencyPreferencesGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "leadcurrentleadorderget",
    "title": "Get lead trader current lead order",
    "description": "/v1/copy-trade-order/public/copy-trade/order/leader-order-page",
    "content": "接口 GET /v1/copy-trade-order/public/copy-trade/order/leader-order-page Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | leaderAccountId | number | Yes | | leader account id | | symbol | string | No | | trading pair eg:btc_usdt. if null, defaults to all | | type | number | Yes | | type | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": [ { \"id\": \"string\", //id \"orderId\": \"string\", //order id \"symbol\": \"string\", //symbol \"buySize\": 0, //buy size \"buyTime\": 0, //buy time \"buyPrice\": 0, //buy price \"sellSize\": 0, //sell size \"sellTime\": 0, //sell time \"sellPrice\": 0, //sell price \"profit\": 0, //profit \"profitRate\": 0, //profit rate \"triggerProfitPrice\": 0, //take profit price \"triggerStopPrice\": 0, //stop Loss Price \"followCount\": 0 //follow count } ] } `",
    "keywords": [
      "get",
      "lead",
      "trader",
      "current",
      "order",
      "/v1/copy-trade-order/public/copy-trade/order/leader-order-page",
      "copy",
      "trading",
      "copy tradeing",
      "leadcurrentleadorderget",
      "mdx",
      "v1",
      "copy-trade-order",
      "public",
      "copy-trade",
      "leader-order-page",
      "ip",
      "id",
      "symbol",
      "buy",
      "sell",
      "profit",
      "take",
      "stop",
      "follow",
      "GET",
      "trade",
      "leader",
      "page",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "leaderAccountId",
      "number",
      "Yes",
      "account",
      "string",
      "pair",
      "btc_usdt",
      "null",
      "defaults",
      "all",
      "type",
      "json",
      "result",
      "orderId",
      "buySize",
      "size",
      "buyTime",
      "time",
      "buyPrice",
      "price",
      "sellSize",
      "sellTime",
      "sellPrice",
      "profitRate",
      "rate",
      "triggerProfitPrice",
      "triggerStopPrice",
      "Loss",
      "Price",
      "followCount",
      "count"
    ],
    "url": "/docs/copy-trading/Copy tradeing/leadCurrentleadOrderGet",
    "path": "copy-trading/Copy tradeing/leadCurrentleadOrderGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "leadhistoricalleadorderget",
    "title": "Get lead trader historical lead order",
    "description": "/v1/copy-trade-order/public/copy-trade/order/leader-order-history",
    "content": "接口 GET /v1/copy-trade-order/public/copy-trade/order/leader-order-history Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | leaderAccountId | number | Yes | | leader account id | | symbol | string | No | | trading pair eg:btc_usdt. if null, defaults to all | | direction | string | No | NEXT | query direction | | limit | number | No | 10 | number of pages | | id | object | No | | start ID，e.g. 6216559590087220004 | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": [ { \"id\": \"string\", //id \"orderId\": \"string\", //order id \"symbol\": \"string\", //symbol \"buySize\": 0, //buy size \"buyTime\": 0, //buy time \"buyPrice\": 0, //buy price \"sellSize\": 0, //sell size \"sellTime\": 0, //sell time \"sellPrice\": 0, //sell price \"profit\": 0, //profit \"profitRate\": 0, //profit rate \"triggerProfitPrice\": 0, //take profit price \"triggerStopPrice\": 0, //stop Loss Price \"followCount\": 0 //follow count } ] } `",
    "keywords": [
      "get",
      "lead",
      "trader",
      "historical",
      "order",
      "/v1/copy-trade-order/public/copy-trade/order/leader-order-history",
      "copy",
      "trading",
      "copy tradeing",
      "leadhistoricalleadorderget",
      "mdx",
      "v1",
      "copy-trade-order",
      "public",
      "copy-trade",
      "leader-order-history",
      "ip",
      "id",
      "symbol",
      "buy",
      "sell",
      "profit",
      "take",
      "stop",
      "follow",
      "GET",
      "trade",
      "leader",
      "history",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "leaderAccountId",
      "number",
      "Yes",
      "account",
      "string",
      "pair",
      "btc_usdt",
      "null",
      "defaults",
      "all",
      "direction",
      "NEXT",
      "query",
      "limit",
      "pages",
      "object",
      "start",
      "json",
      "result",
      "orderId",
      "buySize",
      "size",
      "buyTime",
      "time",
      "buyPrice",
      "price",
      "sellSize",
      "sellTime",
      "sellPrice",
      "profitRate",
      "rate",
      "triggerProfitPrice",
      "triggerStopPrice",
      "Loss",
      "Price",
      "followCount",
      "count"
    ],
    "url": "/docs/copy-trading/Copy tradeing/leadHistoricalLeadOrderGet",
    "path": "copy-trading/Copy tradeing/leadHistoricalLeadOrderGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "leadincomeget",
    "title": "Get leader daily income chart",
    "description": "/v1/copy-trade-balance/public/copy-trade/leader-income-chart",
    "content": "接口 GET /v1/copy-trade-balance/public/copy-trade/leader-income-chart Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | ----------- | ------ | --------- | ------- | ----------------- | | accountId | number | Yes | | leader account id | | days | number | No | 7 | query days | 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": [ { \"amount\": 0, \"id\": \"string\", \"time\": 0 } ] } `",
    "keywords": [
      "get",
      "leader",
      "daily",
      "income",
      "chart",
      "/v1/copy-trade-balance/public/copy-trade/leader-income-chart",
      "copy",
      "trading",
      "copy tradeing",
      "leadincomeget",
      "mdx",
      "v1",
      "copy-trade-balance",
      "public",
      "copy-trade",
      "leader-income-chart",
      "ip",
      "GET",
      "trade",
      "balance",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "accountId",
      "number",
      "Yes",
      "account",
      "days",
      "query",
      "json",
      "string",
      "result",
      "amount",
      "time"
    ],
    "url": "/docs/copy-trading/Copy tradeing/leadIncomeGet",
    "path": "copy-trading/Copy tradeing/leadIncomeGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "leadincomerateget",
    "title": "Get leader daily cumulative income chart",
    "description": "/v1/copy-trade-balance/public/copy-trade/leader-income-rate",
    "content": "接口 GET /v1/copy-trade-balance/public/copy-trade/leader-income-rate Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | ----------- | ------ | --------- | ------- | ----------------- | | accountId | number | Yes | | leader account id | | days | number | No | 7 | query days | 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": { \"incomeRate\": [ //income rate { \"amount\": 0, \"id\": \"string\", \"time\": 0 } ], \"totalIncome\": [ //total income { \"amount\": 0, \"id\": \"string\", \"time\": 0 } ], \"totalIncomeRate\": [ //total income rate { \"amount\": 0, \"id\": \"string\", \"time\": 0 } ] } } `",
    "keywords": [
      "get",
      "leader",
      "daily",
      "cumulative",
      "income",
      "chart",
      "/v1/copy-trade-balance/public/copy-trade/leader-income-rate",
      "copy",
      "trading",
      "copy tradeing",
      "leadincomerateget",
      "mdx",
      "v1",
      "copy-trade-balance",
      "public",
      "copy-trade",
      "leader-income-rate",
      "ip",
      "total",
      "GET",
      "trade",
      "balance",
      "rate",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "accountId",
      "number",
      "Yes",
      "account",
      "days",
      "query",
      "json",
      "string",
      "result",
      "incomeRate",
      "amount",
      "time",
      "totalIncome",
      "totalIncomeRate"
    ],
    "url": "/docs/copy-trading/Copy tradeing/leadIncomeRateGet",
    "path": "copy-trading/Copy tradeing/leadIncomeRateGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "eadtradestatsget",
    "title": "Get lead trader stats",
    "description": "/v1/copy-trade-balance/public/copy-trade/leader-stats",
    "content": "接口 GET /v1/copy-trade-balance/public/copy-trade/leader-stats Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | ----------- | ------ | --------- | ------- | ----------------- | | accountId | number | Yes | | leader account id | | days | string | No | 7 | query days | 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": { \"avgHoldTime\": 0, //average holding time (seconds) \"avgLossAmount\": 0, //average loss amount \"avgProfitAmount\": 0, //average profit amount \"followerMargin\": 0, //follower margin \"followersEarnings\": 0, //follower profit \"lastTradeTime\": 0, //latest trading time \"lossCount\": 0, //loss count \"maxRetraction\": 0, //max retraction \"pnlRate\": \"string\", //Profit and loss ratio \"profitCount\": 0, //profit count \"recentRate\": 0, //yield rate \"totalEarnings\": 0, //total revenue \"totalTransactions\": 0, //total transactions \"tradeDays\": 0, //trade days \"weeklyTradeFrequency\": 0, //trading frequency (weekly) \"winRate\": 0 //win rate } } `",
    "keywords": [
      "get",
      "lead",
      "trader",
      "stats",
      "/v1/copy-trade-balance/public/copy-trade/leader-stats",
      "copy",
      "trading",
      "copy tradeing",
      "leadtradestatsget",
      "mdx",
      "v1",
      "copy-trade-balance",
      "public",
      "copy-trade",
      "leader-stats",
      "ip",
      "average",
      "follower",
      "latest",
      "loss",
      "max",
      "Profit",
      "profit",
      "yield",
      "total",
      "trade",
      "win",
      "GET",
      "balance",
      "leader",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "accountId",
      "number",
      "Yes",
      "account",
      "days",
      "string",
      "query",
      "json",
      "result",
      "avgHoldTime",
      "holding",
      "time",
      "seconds",
      "avgLossAmount",
      "amount",
      "avgProfitAmount",
      "followerMargin",
      "margin",
      "followersEarnings",
      "lastTradeTime",
      "lossCount",
      "count",
      "maxRetraction",
      "retraction",
      "pnlRate",
      "and",
      "ratio",
      "profitCount",
      "recentRate",
      "rate",
      "totalEarnings",
      "revenue",
      "totalTransactions",
      "transactions",
      "tradeDays",
      "weeklyTradeFrequency",
      "frequency",
      "weekly",
      "winRate"
    ],
    "url": "/docs/copy-trading/Copy tradeing/leadTradeStatsGet",
    "path": "copy-trading/Copy tradeing/leadTradeStatsGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "leaderconfigurationget",
    "title": "Get leader account configuration",
    "description": "/v1/copy-trade-account/public/copy-trade/leader-detail",
    "content": "接口 GET /v1/copy-trade-account/public/copy-trade/leader-detail Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | ----------- | ------ | --------- | ------- | ----------------- | | accountId | number | Yes | | leader account id | 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": { \"avatar\": \"string\", //avatar \"currentFollowNumber\": 0, //current number of copy traders \"displayEquity\": true, //display total assets or not \"displayQuantity\": true, //display the purchase quantity or not \"fansNum\": 0, //fans number \"followNumber\": 0, //follow number \"label\": [ //label \"string\" ], \"leadDays\": 0, //time to become a lead \"leaderIntro\": \"string\", //leader introduction \"level\": 0, //current level \"levelId\": 0, //current level id \"levelName\": \"string\", //current level name \"maxFollowerSize\": 0, //maximum number of copy traders \"nickName\": \"string\", //nickname \"profitRate\": 0, //profit sharing ratio. \"totalRights\": 0 //total assets } } `",
    "keywords": [
      "get",
      "leader",
      "account",
      "configuration",
      "/v1/copy-trade-account/public/copy-trade/leader-detail",
      "copy",
      "trading",
      "copy tradeing",
      "leaderconfigurationget",
      "mdx",
      "v1",
      "copy-trade-account",
      "public",
      "copy-trade",
      "leader-detail",
      "ip",
      "avatar",
      "current",
      "display",
      "fans",
      "follow",
      "label",
      "time",
      "maximum",
      "nickname",
      "profit",
      "total",
      "GET",
      "trade",
      "detail",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "accountId",
      "number",
      "Yes",
      "json",
      "string",
      "result",
      "currentFollowNumber",
      "traders",
      "displayEquity",
      "true",
      "assets",
      "not",
      "displayQuantity",
      "the",
      "purchase",
      "quantity",
      "fansNum",
      "followNumber",
      "leadDays",
      "become",
      "lead",
      "leaderIntro",
      "introduction",
      "level",
      "levelId",
      "levelName",
      "name",
      "maxFollowerSize",
      "nickName",
      "profitRate",
      "sharing",
      "ratio",
      "totalRights"
    ],
    "url": "/docs/copy-trading/Copy tradeing/leaderConfigurationGet",
    "path": "copy-trading/Copy tradeing/leaderConfigurationGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "leadersettingget",
    "title": "Get leader setting",
    "description": "/v1/copy-trade-account/copy-trade/leader-settings",
    "content": "接口 GET /v1/copy-trade-account/copy-trade/leader-settings Limit Flow Rules 2/s/ip 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": { \"displayEquity\": true, //Display total assets or not \"displayQuantity\": true, //Display buy quantity or not \"labelIds\": \"string\", //Label ids, separated by commas \"leaderIntro\": \"string\", //Leader introduction \"leaderSymbol\": [ //Selected copy trade symbols \"btc_usdt\" ], \"openLeader\": true, //Open leader or not \"symbolConfig\": [ //All copy trade symbols \"btc_usdt\" ], \"tagsConfig\": [ //tag config, label list { \"id\": 0, \"label\": \"string\" } ] } } `",
    "keywords": [
      "get",
      "leader",
      "setting",
      "/v1/copy-trade-account/copy-trade/leader-settings",
      "copy",
      "trading",
      "copy tradeing",
      "leadersettingget",
      "mdx",
      "v1",
      "copy-trade-account",
      "copy-trade",
      "leader-settings",
      "ip",
      "Display",
      "Label",
      "Leader",
      "Selected",
      "Open",
      "All",
      "tag",
      "GET",
      "trade",
      "account",
      "settings",
      "Limit",
      "Flow",
      "Rules",
      "json",
      "string",
      "result",
      "displayEquity",
      "true",
      "total",
      "assets",
      "not",
      "displayQuantity",
      "buy",
      "quantity",
      "labelIds",
      "ids",
      "separated",
      "commas",
      "leaderIntro",
      "introduction",
      "leaderSymbol",
      "symbols",
      "btc_usdt",
      "openLeader",
      "symbolConfig",
      "tagsConfig",
      "config",
      "label",
      "list"
    ],
    "url": "/docs/copy-trading/Copy tradeing/leaderSettingGet",
    "path": "copy-trading/Copy tradeing/leaderSettingGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "leadersget",
    "title": "Get my lead trades",
    "description": "/v1/copy-trade-account/copy-trade/my-leaders",
    "content": "接口 GET /v1/copy-trade-account/copy-trade/my-leaders Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | type | number | Yes | | the type of lead trade | | direction | string | No | NEXT | query direction | | limit | number | No | 10 | number of pages | | id | object | No | | start ID，e.g. 6216559590087220004 | 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": { \"hasNext\": true, \"hasPrev\": true, \"items\": [ { \"accountId\": 0, //account id \"avatar\": \"string\", //avatar \"followMargin\": 0, //follow amount \"followProfit\": 0, //follow profit \"id\": 0, //the id used for pagination query \"leaderName\": \"string\" //nickname of lead trader } ] } } `",
    "keywords": [
      "get",
      "my",
      "lead",
      "trades",
      "/v1/copy-trade-account/copy-trade/my-leaders",
      "copy",
      "trading",
      "copy tradeing",
      "leadersget",
      "mdx",
      "v1",
      "copy-trade-account",
      "copy-trade",
      "my-leaders",
      "ip",
      "account",
      "avatar",
      "follow",
      "the",
      "nickname",
      "GET",
      "trade",
      "leaders",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "type",
      "number",
      "Yes",
      "direction",
      "string",
      "NEXT",
      "query",
      "limit",
      "pages",
      "object",
      "start",
      "json",
      "result",
      "hasNext",
      "true",
      "hasPrev",
      "items",
      "accountId",
      "followMargin",
      "amount",
      "followProfit",
      "profit",
      "used",
      "for",
      "pagination",
      "leaderName",
      "trader"
    ],
    "url": "/docs/copy-trading/Copy tradeing/leadersGet",
    "path": "copy-trading/Copy tradeing/leadersGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "modifyleadersetting",
    "title": "Modify leader setting",
    "description": "/v1/copy-trade-account/copy-trade/leader-settings",
    "content": "接口 POST /v1/copy-trade-account/copy-trade/leader-settings Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | leaderIntro | string | No | | Leader introduction | | labelIds | string | No | | Label ids, separated by commas, e.g. 1,2,3,4 | | displayEquity | bool | No | | Display total assets or not | | displayQuantity | bool | No | | Display buy quantity or not | | symbols | string | Yes | | Selected copy trade symbols, e.g. btc_usdt,eth_usdt | | openLeader | bool | No | | Open leader or not | 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": true } `",
    "keywords": [
      "modify",
      "leader",
      "setting",
      "/v1/copy-trade-account/copy-trade/leader-settings",
      "copy",
      "trading",
      "copy tradeing",
      "modifyleadersetting",
      "mdx",
      "v1",
      "copy-trade-account",
      "copy-trade",
      "leader-settings",
      "ip",
      "post",
      "POST",
      "trade",
      "account",
      "settings",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "leaderIntro",
      "string",
      "Leader",
      "introduction",
      "labelIds",
      "Label",
      "ids",
      "separated",
      "commas",
      "displayEquity",
      "bool",
      "Display",
      "total",
      "assets",
      "not",
      "displayQuantity",
      "buy",
      "quantity",
      "symbols",
      "Yes",
      "Selected",
      "btc_usdt",
      "eth_usdt",
      "openLeader",
      "Open",
      "json",
      "result",
      "true"
    ],
    "url": "/docs/copy-trading/Copy tradeing/modifyLeaderSetting",
    "path": "copy-trading/Copy tradeing/modifyLeaderSetting.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "mycopytradersget",
    "title": "Get my copy trader list",
    "description": "/v1/copy-trade-account/copy-trade/leader-followers",
    "content": "接口 GET /v1/copy-trade-account/copy-trade/leader-followers Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | direction | string | No | NEXT | query direction | | limit | number | No | 10 | number of pages | | id | object | No | | start ID，e.g. 6216559590087220004 | 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": { \"hasNext\": true, \"hasPrev\": true, \"items\": [ { \"accountId\": 0, //copy trader account id \"avatar\": \"string\", //avatar of copy trader \"days\": 0, //follow days \"followMargin\": 0, //follow margin \"followProfit\": 0, //follow profit \"followProfitRate\": 0, //follow profit rate \"followerName\": \"string\", //name of copy trader \"id\": 0, //id \"pageId\": 0 //the id used for pagination query } ] } } `",
    "keywords": [
      "get",
      "my",
      "copy",
      "trader",
      "list",
      "/v1/copy-trade-account/copy-trade/leader-followers",
      "trading",
      "copy tradeing",
      "mycopytradersget",
      "mdx",
      "v1",
      "copy-trade-account",
      "copy-trade",
      "leader-followers",
      "ip",
      "avatar",
      "follow",
      "name",
      "id",
      "the",
      "GET",
      "trade",
      "account",
      "leader",
      "followers",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "direction",
      "string",
      "NEXT",
      "query",
      "limit",
      "number",
      "pages",
      "object",
      "start",
      "json",
      "result",
      "hasNext",
      "true",
      "hasPrev",
      "items",
      "accountId",
      "days",
      "followMargin",
      "margin",
      "followProfit",
      "profit",
      "followProfitRate",
      "rate",
      "followerName",
      "pageId",
      "used",
      "for",
      "pagination"
    ],
    "url": "/docs/copy-trading/Copy tradeing/myCopyTradersGet",
    "path": "copy-trading/Copy tradeing/myCopyTradersGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "stopcopytrade",
    "title": "Stop copy trading",
    "description": "/v1/copy-trade-account/copy-trade/cancel-follow",
    "content": "接口 POST /v1/copy-trade-account/copy-trade/cancel-follow Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | ----------------- | ------ | --------- | ------- | ----------------- | | leaderAccountId | number | Yes | | leader account id | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": true } `",
    "keywords": [
      "stop",
      "copy",
      "trading",
      "/v1/copy-trade-account/copy-trade/cancel-follow",
      "copy tradeing",
      "stopcopytrade",
      "mdx",
      "v1",
      "copy-trade-account",
      "copy-trade",
      "cancel-follow",
      "ip",
      "post",
      "POST",
      "trade",
      "account",
      "cancel",
      "follow",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "leaderAccountId",
      "number",
      "Yes",
      "leader",
      "json",
      "string",
      "result",
      "true"
    ],
    "url": "/docs/copy-trading/Copy tradeing/stopCopyTrade",
    "path": "copy-trading/Copy tradeing/stopCopyTrade.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "stopleadtrading",
    "title": "Stop lead trading",
    "description": "/v1/copy-trade-account/copy-trade/cancel-leader",
    "content": "接口 POST /v1/copy-trade-account/copy-trade/cancel-leader Limit Flow Rules 2/s/ip 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": true //true or false } `",
    "keywords": [
      "stop",
      "lead",
      "trading",
      "/v1/copy-trade-account/copy-trade/cancel-leader",
      "copy",
      "copy tradeing",
      "stopleadtrading",
      "mdx",
      "v1",
      "copy-trade-account",
      "copy-trade",
      "cancel-leader",
      "ip",
      "true",
      "post",
      "POST",
      "trade",
      "account",
      "cancel",
      "leader",
      "Limit",
      "Flow",
      "Rules",
      "json",
      "string",
      "result",
      "false"
    ],
    "url": "/docs/copy-trading/Copy tradeing/stopLeadTrading",
    "path": "copy-trading/Copy tradeing/stopLeadTrading.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "stoplosstakeprofit",
    "title": "Set stop-loss or stop-profit for lead or copy order",
    "description": "/v1/copy-trade-order/copy-trade/order/stop-profit-loss",
    "content": "接口 GET /v1/copy-trade-order/copy-trade/order/stop-profit-loss Limit Flow Rules 2/s/apikey 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | symbol | string | Yes | | symbol | | leaderOrderId | number | Yes | | For copy order, need leaderOrderId; for lead order, need orderId | | triggerProfitPrice | number | No | | trigger profit price | | triggerStopPrice | number | No | | trigger stop price | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": true } `",
    "keywords": [
      "set",
      "stop-loss",
      "or",
      "stop-profit",
      "for",
      "lead",
      "copy",
      "order",
      "/v1/copy-trade-order/copy-trade/order/stop-profit-loss",
      "trading",
      "copy tradeing",
      "stoplosstakeprofit",
      "mdx",
      "v1",
      "copy-trade-order",
      "copy-trade",
      "stop-profit-loss",
      "apikey",
      "get",
      "GET",
      "trade",
      "stop",
      "profit",
      "loss",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "symbol",
      "string",
      "Yes",
      "leaderOrderId",
      "number",
      "For",
      "need",
      "orderId",
      "triggerProfitPrice",
      "trigger",
      "price",
      "triggerStopPrice",
      "json",
      "result",
      "true"
    ],
    "url": "/docs/copy-trading/Copy tradeing/stopLossTakeProfit",
    "path": "copy-trading/Copy tradeing/stopLossTakeProfit.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "symbol",
    "title": "Get copy trade symbols",
    "description": "/v4/public/copy-trade/symbol",
    "content": "接口 GET /v4/public/copy-trade/symbol 响应示例 `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [], \"result\": [ { \"symbolId\": 1, //symbol id \"symbol\": \"btc_usdt\" //symbol } ] } `",
    "keywords": [
      "get",
      "copy",
      "trade",
      "symbols",
      "/v4/public/copy-trade/symbol",
      "trading",
      "copy tradeing",
      "symbol",
      "mdx",
      "v4",
      "public",
      "copy-trade",
      "GET",
      "json",
      "SUCCESS",
      "result",
      "symbolId",
      "btc_usdt"
    ],
    "url": "/docs/copy-trading/Copy tradeing/symbol",
    "path": "copy-trading/Copy tradeing/symbol.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "unrealizedprofitdetailget",
    "title": "Get unrealized profit sharing detail",
    "description": "/v1/copy-trade-balance/copy-trade/share-profit/expected-detail",
    "content": "接口 GET /v1/copy-trade-balance/copy-trade/share-profit/expected-detail Limit Flow Rules 2/s/ip 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | direction | string | No | NEXT | query direction | | limit | number | No | 10 | number of pages | | id | object | No | | start ID，e.g. 6216559590087220004 | 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": { \"hasNext\": true, \"hasPrev\": true, \"items\": [ { \"amount\": 0, //profit sharing amount. \"avatar\": \"string\", //avatar of copy trader. \"id\": 0, //the id used for pagination query. \"name\": \"string\" //nickname of copy trader. } ] } } `",
    "keywords": [
      "get",
      "unrealized",
      "profit",
      "sharing",
      "detail",
      "/v1/copy-trade-balance/copy-trade/share-profit/expected-detail",
      "copy",
      "trading",
      "copy tradeing",
      "unrealizedprofitdetailget",
      "mdx",
      "v1",
      "copy-trade-balance",
      "copy-trade",
      "share-profit",
      "expected-detail",
      "ip",
      "avatar",
      "the",
      "nickname",
      "GET",
      "trade",
      "balance",
      "share",
      "expected",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "direction",
      "string",
      "NEXT",
      "query",
      "limit",
      "number",
      "pages",
      "object",
      "start",
      "json",
      "result",
      "hasNext",
      "true",
      "hasPrev",
      "items",
      "amount",
      "trader",
      "used",
      "for",
      "pagination",
      "name"
    ],
    "url": "/docs/copy-trading/Copy tradeing/unrealizedProfitDetailGet",
    "path": "copy-trading/Copy tradeing/unrealizedProfitDetailGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "unrealizedtotalprofitget",
    "title": "Get unrealized total profit sharing",
    "description": "/v1/copy-trade-balance/copy-trade/share-profit/expected",
    "content": "接口 GET /v1/copy-trade-balance/copy-trade/share-profit/expected Limit Flow Rules 2/s/ip 响应示例 `json { \"ma\": [{}], \"mc\": \"string\", \"rc\": 0, \"result\": 0 //unrealized profit sharing amount } `",
    "keywords": [
      "get",
      "unrealized",
      "total",
      "profit",
      "sharing",
      "/v1/copy-trade-balance/copy-trade/share-profit/expected",
      "copy",
      "trading",
      "copy tradeing",
      "unrealizedtotalprofitget",
      "mdx",
      "v1",
      "copy-trade-balance",
      "copy-trade",
      "share-profit",
      "expected",
      "ip",
      "GET",
      "trade",
      "balance",
      "share",
      "Limit",
      "Flow",
      "Rules",
      "json",
      "string",
      "result",
      "amount"
    ],
    "url": "/docs/copy-trading/Copy tradeing/unrealizedTotalProfitGet",
    "path": "copy-trading/Copy tradeing/unrealizedTotalProfitGet.mdx",
    "type": "copy-trading",
    "category": "copy-trading"
  },
  {
    "id": "deployment",
    "title": "Deployment",
    "description": "Deploy your Docusaurus app for production on a range of static site hosting services.",
    "content": "Deployment To build the static files of your website for production, run: `bash npm2yarn npm run build ` Once it finishes, the static files will be generated within the build directory. :::note The only responsibility of Docusaurus is to build your site and emit static files in build. It is now up to you to choose how to host those static files. ::: You can deploy your site to static site hosting services such as Vercel, GitHub Pages, Netlify, Render, and Surge. A Docusaurus site is statically rendered, and it can generally work without JavaScript! Configuration {#configuration} The following parameters are required in docusaurus.config.js to optimize routing and serve files from the correct location: | Name | Description | | --- | --- | | url | URL for your site. For a site deployed at https://my-org.com/my-project/, url is https://my-org.com/. | | baseUrl | Base URL for your project, with a trailing slash. For a site deployed at https://my-org.com/my-project/, baseUrl is /my-project/. | Testing your Build Locally {#testing-build-locally} It is important to test your build locally before deploying it for production. Docusaurus provides a docusaurus serve command for that: `bash npm2yarn npm run serve ` By default, this will load your site at http://localhost:3000/. Trailing slash configuration {#trailing-slashes} Docusaurus has a trailingSlash config to allow customizing URLs/links and emitted filename patterns. The default value generally works fine. Unfortunately, each static hosting provider has a different behavior, and deploying the exact same site to various hosts can lead to distinct results. Depending on your host, it can be useful to change this config. :::tip Use slorber/trailing-slash-guide to understand better the behavior of your host and configure trailingSlash appropriately. ::: Using environment variables {#using-environment-variables} Putting potentially sensitive information in the environment is common practice. However, in a typical Docusaurus website, the docusaurus.config.js file is the only interface to the Node.js environment (see our architecture overview), while everything else (MDX pages, React components, etc.) are client side and do not have direct access to the process global variable. In this case, you can consider using customFields to pass environment variables to the client side. `js title=\"docusaurus.config.js\" // If you are using dotenv (https://www.npmjs.com/package/dotenv) import 'dotenv/config'; export default { title: '...', url: process.env.URL, // You can use environment variables to control site specifics as well // highlight-start customFields: { // Put your custom environment here teamEmail: process.env.EMAIL, }, // highlight-end }; ` `jsx title=\"home.jsx\" import useDocusaurusContext from '@docusaurus/useDocusaurusContext'; export default function Home() { const { siteConfig: {customFields}, } = useDocusaurusContext(); return <div>Contact us through {customFields.teamEmail}!</div>; } ` Choosing a hosting provider {#choosing-a-hosting-provider} There are a few common hosting options: Self hosting with an HTTP server like Apache2 or Nginx. Jamstack providers (e.g. Netlify and Vercel). We will use them as references, but the same reasoning can apply to other providers. GitHub Pages (by definition, it is also Jamstack, but we compare it separately). If you are unsure of which one to choose, ask the following questions: <details> <summary> How many resources (money, person-hours, etc.) am I willing to invest in this? </summary> 🔴 Self-hosting requires experience in networking as well as Linux and web server administration. It's the most difficult option, and would require the most time to manage successfully. Expense-wise, cloud services are almost never free, and purchasing/deploying an onsite server can be even more costly. 🟢 Jamstack providers can help you set up a working website in almost no time and offer features like server-side redirects that are easily configurable. Many providers offer generous build-time quotas even for free plans that you would almost never exceed. However, free plans have limits, and you would need to pay once you hit those limits. Check the pricing page of your provider for details. 🟡 The GitHub Pages deployment workflow can be tedious to set up. (Evidence: see the length of Deploying to GitHub Pages!) However, this service (including build and deployment) is always free for public repositories, and we have detailed instructions to help you make it work. </details> <details> <summary>How much server-side customization do I need?</summary> 🟢 With self-hosting, you have access to the entire server's configuration. You can configure the virtual host to serve different content based on the request URL, you can do complicated server-side redirects, you can implement authentication, and so on. If you need a lot of server-side features, self-host your website. 🟡 Jamstack usually offers some server-side configuration (e.g. URL formatting (trailing slashes), server-side redirects, etc.). 🔴 GitHub Pages doesn't expose server-side configuration besides enforcing HTTPS and setting CNAME records. </details> <details> <summary>Do I need collaboration-friendly deployment workflows?</summary> 🟡 Self-hosted services can leverage continuous deployment functionality like Netlify, but more heavy-lifting is involved. Usually, you would designate a specific person to manage the deployment, and the workflow wouldn't be very git-based as opposed to the other two options. 🟢 Netlify and Vercel have deploy previews for every pull request, which is useful for a team to review work before merging to production. You can also manage a team with different member access to the deployment. 🟡 GitHub Pages cannot do deploy previews in a non-convoluted way. One repo can only be associated with one site deployment. On the other hand, you can control who has write access to the site's deployment. </details> There isn't a silver bullet. You need to weigh your needs and resources before making a choice. Self-Hosting {#self-hosting} Docusaurus can be self-hosted using docusaurus serve. Change port using --port and --host to change host. `bash npm2yarn npm run serve -- --build --port 80 --host 0.0.0.0 ` :::warning It is not the best option, compared to a static hosting provider / CDN. ::: :::warning In the following sections, we will introduce a few common hosting providers and how they should be configured to deploy Docusaurus sites most efficiently. Docusaurus is not affiliated with any of these services, and this information is provided for convenience only. Some of the write-ups are provided by third-parties, and recent API changes may not be reflected on our side. If you see outdated content, PRs are welcome. Because we can only provide this content on a best-effort basis only, we have stopped accepting PRs adding new hosting options. You can, however, publish your writeup on a separate site (e.g. your blog, or the provider's official website), and ask us to include a link to your writeup. ::: Deploying to Netlify {#deploying-to-netlify} To deploy your Docusaurus sites to Netlify, first make sure the following options are properly configured: `js title=\"docusaurus.config.js\" export default { // highlight-start url: 'https://docusaurus-2.netlify.app', // Url to your site with no trailing slash baseUrl: '/', // Base directory of your site relative to your repo // highlight-end // ... }; ` Then, create your site with Netlify. While you set up the site, specify the build commands and directories as follows: build command: npm run build publish directory: build If you did not configure these build options, you may still go to \"Site settings\" -> \"Build & deploy\" after your site is created. Once properly configured with the above options, your site should deploy and automatically redeploy upon merging to your deploy branch, which defaults to main. :::warning Some Docusaurus sites put the docs folder outside of website (most likely former Docusaurus v1 sites): `bash repo git root ├── docs MD files └── website Docusaurus root ` If you decide to use the website folder as Netlify's base directory, Netlify will not trigger builds when you update the docs folder, and you need to configure a custom ignore command: `toml title=\"website/netlify.toml\" [build] ignore = \"git diff --quiet $CACHED_COMMIT_REF $COMMIT_REF . ../docs/\" ` ::: :::warning By default, Netlify adds trailing slashes to Docusaurus URLs. It is recommended to disable the Netlify setting Post Processing > Asset Optimization > Pretty Urls to prevent lowercase URLs, unnecessary redirects, and 404 errors. Be very careful: the Disable asset optimization global checkbox is broken and does not really disable the Pretty URLs setting in practice. Please make sure to uncheck it independently. If you want to keep the Pretty Urls Netlify setting on, adjust the trailingSlash Docusaurus config appropriately. Refer to slorber/trailing-slash-guide for more information. ::: Deploying to Vercel {#deploying-to-vercel} Deploying your Docusaurus project to Vercel will provide you with various benefits in the areas of performance and ease of use. To deploy your Docusaurus project with a Vercel for Git Integration, make sure it has been pushed to a Git repository. Import the project into Vercel using the Import Flow. During the import, you will find all relevant options preconfigured for you; however, you can choose to change any of these options. After your project has been imported, all subsequent pushes to branches will generate Preview Deployments, and all changes made to the Production Branch (usually \"main\" or \"master\") will result in a Production Deployment. Deploying to GitHub Pages {#deploying-to-github-pages} Docusaurus provides an easy way to publish to GitHub Pages, which comes free with every GitHub repository. Overview {#github-pages-overview} Usually, there are two repositories (at least two branches) involved in a publishing process: the branch containing the source files, and the branch containing the build output to be served with GitHub Pages. In the following tutorial, they will be referred to as \"source\" and \"deployment\", respectively. Each GitHub repository is associated with a GitHub Pages service. If the deployment repository is called my-org/my-project (where my-org is the organization name or username), the deployed site will appear at https://my-org.github.io/my-project/. If the deployment repository is called my-org/my-org.github.io (the _organization GitHub Pages repo_), the site will appear at https://my-org.github.io/. :::info In case you want to use your custom domain for GitHub Pages, create a CNAME file in the static directory. Anything within the static directory will be copied to the root of the build directory for deployment. When using a custom domain, you should be able to move back from baseUrl: '/projectName/' to baseUrl: '/', and also set your url to your custom domain. You may refer to GitHub Pages' documentation User, Organization, and Project Pages for more details. ::: GitHub Pages picks up deploy-ready files (the output from docusaurus build) from the default branch (master / main, usually) or the gh-pages branch, and either from the root or the /docs folder. You can configure that through Settings > Pages in your repository. This branch will be called the \"deployment branch\". We provide a docusaurus deploy command that helps you deploy your site from the source branch to the deployment branch in one command: clone, build, and commit. docusaurus.config.js settings {#docusaurusconfigjs-settings} First, modify your docusaurus.config.js and add the following params: | Name | Description | | --- | --- | | organizationName | The GitHub user or organization that owns the deployment repository. | | projectName | The name of the deployment repository. | | deploymentBranch | The name of the deployment branch. It defaults to 'gh-pages' for non-organization GitHub Pages repos (projectName not ending in .github.io). Otherwise, it needs to be explicit as a config field or environment variable. | These fields also have their environment variable counterparts which have a higher priority: ORGANIZATION_NAME, PROJECT_NAME, and DEPLOYMENT_BRANCH. :::warning GitHub Pages adds a trailing slash to Docusaurus URLs by default. It is recommended to set a trailingSlash config (true or false, not undefined). ::: Example: `js title=\"docusaurus.config.js\" export default { // ... url: 'https://endiliey.github.io', // Your website URL baseUrl: '/', // highlight-start projectName: 'endiliey.github.io', organizationName: 'endiliey', trailingSlash: false, // highlight-end // ... }; ` :::warning By default, GitHub Pages runs published files through Jekyll. Since Jekyll will discard any files that begin with _, it is recommended that you disable Jekyll by adding an empty file named .nojekyll file to your static directory. ::: Environment settings {#environment-settings} | Name | Description | | --- | --- | | USE_SSH | Set to true to use SSH instead of the default HTTPS for the connection to the GitHub repo. If the source repo URL is an SSH URL (e.g. git@github.com:facebook/docusaurus.git), USE_SSH is inferred to be true. | | GIT_USER | The username for a GitHub account that has push access to the deployment repo. For your own repositories, this will usually be your GitHub username. Required if not using SSH, and ignored otherwise. | | GIT_PASS | Personal access token of the git user (specified by GIT_USER), to facilitate non-interactive deployment (e.g. continuous deployment) | | CURRENT_BRANCH | The source branch. Usually, the branch will be main or master, but it could be any branch except for gh-pages. If nothing is set for this variable, then the current branch from which docusaurus deploy is invoked will be used. | | GIT_USER_NAME | The git config user.name value to use when pushing to the deployment repo | | GIT_USER_EMAIL | The git config user.email value to use when pushing to the deployment repo | GitHub enterprise installations should work in the same manner as github.com; you only need to set the organization's GitHub Enterprise host as an environment variable: | Name | Description | | ------------- | ----------------------------------------------- | | GITHUB_HOST | The domain name of your GitHub enterprise site. | | GITHUB_PORT | The port of your GitHub enterprise site. | Deploy {#deploy} Finally, to deploy your site to GitHub Pages, run: `mdx-code-block <Tabs> <TabItem value=\"bash\" label=\"Bash\"> ` `bash GIT_USER=<GITHUB_USERNAME> yarn deploy ` `mdx-code-block </TabItem> <TabItem value=\"windows\" label=\"Windows\"> ` `batch cmd /C \"set \"GIT_USER=<GITHUB_USERNAME>\" && yarn deploy\" ` `mdx-code-block </TabItem> <TabItem value=\"powershell\" label=\"PowerShell\"> ` `powershell cmd /C 'set \"GIT_USER=<GITHUB_USERNAME>\" && yarn deploy' ` `mdx-code-block </TabItem> </Tabs> ` :::warning Beginning in August 2021, GitHub requires every command-line sign-in to use the personal access token instead of the password. When GitHub prompts for your password, enter the PAT instead. See the GitHub documentation for more information. Alternatively, you can use SSH (USE_SSH=true) to log in. ::: Triggering deployment with GitHub Actions {#triggering-deployment-with-github-actions} GitHub Actions allow you to automate, customize, and execute your software development workflows right in your repository. The workflow examples below assume your website source resides in the main branch of your repository (the _source branch_ is main), and your publishing source is configured for publishing with a custom GitHub Actions Workflow. Our goal is that: When a new pull request is made to main, there's an action that ensures the site builds successfully, without actually deploying. This job will be called test-deploy. When a pull request is merged to the main branch or someone pushes to the main branch directly, it will be built and deployed to GitHub Pages. This job will be called deploy. Here are two approaches to deploying your docs with GitHub Actions. Based on the location of your deployment repository, choose the relevant tab below: Source repo and deployment repo are the same repository. The deployment repo is a remote repository, different from the source. Instructions for this scenario assume publishing source is the gh-pages branch. `mdx-code-block <Tabs> <TabItem value=\"same\" label=\"Same\"> ` While you can have both jobs defined in the same workflow file, the original deploy workflow will always be listed as skipped in the PR check suite status, which is not indicative of the actual status and provides no value to the review process. We therefore propose to manage them as separate workflows instead. <details> <summary>GitHub action files</summary> Add these two workflow files: :::warning Tweak the parameters for your setup If your Docusaurus project is not at the root of your repo, you may need to configure a default working directory, and adjust the paths accordingly. ::: <Tabs> <TabItem value=\"npm\" label=\"npm\"> `yml title=\".github/workflows/deploy.yml\" name: Deploy to GitHub Pages on: push: branches: main Review gh actions docs if you want to further define triggers, paths, etc https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on jobs: build: name: Build Docusaurus runs-on: ubuntu-latest steps: uses: actions/checkout@v4 with: fetch-depth: 0 uses: actions/setup-node@v4 with: node-version: 18 cache: npm name: Install dependencies run: npm ci name: Build website run: npm run build name: Upload Build Artifact uses: actions/upload-pages-artifact@v3 with: path: build deploy: name: Deploy to GitHub Pages needs: build Grant GITHUB_TOKEN the permissions required to make a Pages deployment permissions: pages: write to deploy to Pages id-token: write to verify the deployment originates from an appropriate source Deploy to the github-pages environment environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest steps: name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 ` `yml title=\".github/workflows/test-deploy.yml\" name: Test deployment on: pull_request: branches: main Review gh actions docs if you want to further define triggers, paths, etc https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on jobs: test-deploy: name: Test deployment runs-on: ubuntu-latest steps: uses: actions/checkout@v4 with: fetch-depth: 0 uses: actions/setup-node@v4 with: node-version: 18 cache: npm name: Install dependencies run: npm ci name: Test build website run: npm run build ` </TabItem> <TabItem value=\"yarn\" label=\"Yarn\"> `yml title=\".github/workflows/deploy.yml\" name: Deploy to GitHub Pages on: push: branches: main Review gh actions docs if you want to further define triggers, paths, etc https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on jobs: build: name: Build Docusaurus runs-on: ubuntu-latest steps: uses: actions/checkout@v4 with: fetch-depth: 0 uses: actions/setup-node@v4 with: node-version: 18 cache: yarn name: Install dependencies run: yarn install --frozen-lockfile name: Build website run: yarn build name: Upload Build Artifact uses: actions/upload-pages-artifact@v3 with: path: build deploy: name: Deploy to GitHub Pages needs: build Grant GITHUB_TOKEN the permissions required to make a Pages deployment permissions: pages: write to deploy to Pages id-token: write to verify the deployment originates from an appropriate source Deploy to the github-pages environment environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest steps: name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 ` `yml title=\".github/workflows/test-deploy.yml\" name: Test deployment on: pull_request: branches: main Review gh actions docs if you want to further define triggers, paths, etc https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on jobs: test-deploy: name: Test deployment runs-on: ubuntu-latest steps: uses: actions/checkout@v4 with: fetch-depth: 0 uses: actions/setup-node@v4 with: node-version: 18 cache: yarn name: Install dependencies run: yarn install --frozen-lockfile name: Test build website run: yarn build ` </TabItem> </Tabs> </details> `mdx-code-block </TabItem> <TabItem value=\"remote\" label=\"Remote\"> ` A cross-repo publish is more difficult to set up because you need to push to another repo with permission checks. We will be using SSH to do the authentication. Generate a new SSH key. Since this SSH key will be used in CI, make sure to not enter any passphrase. By default, your public key should have been created in ~/.ssh/id_rsa.pub; otherwise, use the name you've provided in the previous step to add your key to GitHub deploy keys. Copy the key to clipboard with pbcopy < ~/.ssh/id_rsa.pub and paste it as a deploy key in the deployment repository. Copy the file content if the command line doesn't work for you. Check the box for Allow write access before saving your deployment key. You'll need your private key as a GitHub secret to allow Docusaurus to run the deployment for you. Copy your private key with pbcopy < ~/.ssh/id_rsa and paste a GitHub secret with the name GH_PAGES_DEPLOY on your source repository. Copy the file content if the command line doesn't work for you. Save your secret. Create your documentation workflow in the .github/workflows/ directory. In this example it's the deploy.yml file. At this point, you should have: the source repo with the GitHub workflow set with the private SSH key as the GitHub Secret, and your deployment repo set with the public SSH key in GitHub Deploy Keys. <details> <summary>GitHub action file</summary> :::warning Please make sure that you replace actions@github.com with your GitHub email and gh-actions with your name. This file assumes you are using Yarn. If you use npm, change cache: yarn, yarn install --frozen-lockfile, yarn build to cache: npm, npm ci, npm run build accordingly. ::: `yml title=\".github/workflows/deploy.yml\" name: Deploy to GitHub Pages on: pull_request: branches: [main] push: branches: [main] permissions: contents: write jobs: test-deploy: if: github.event_name != 'push' runs-on: ubuntu-latest steps: uses: actions/checkout@v4 with: fetch-depth: 0 uses: actions/setup-node@v4 with: node-version: 18 cache: yarn name: Install dependencies run: yarn install --frozen-lockfile name: Test build website run: yarn build deploy: if: github.event_name != 'pull_request' runs-on: ubuntu-latest steps: uses: actions/checkout@v4 with: fetch-depth: 0 uses: actions/setup-node@v4 with: node-version: 18 cache: yarn uses: webfactory/ssh-agent@v0.5.0 with: ssh-private-key: ${{ secrets.GH_PAGES_DEPLOY }} name: Deploy to GitHub Pages env: USE_SSH: true run: | git config --global user.email \"actions@github.com\" git config --global user.name \"gh-actions\" yarn install --frozen-lockfile yarn deploy ` </details> `mdx-code-block </TabItem> </Tabs> ` <details> <summary>Site not deployed properly?</summary> After pushing to main, if you don't see your site published at the desired location (for example, it says \"There isn't a GitHub Pages site here\", or it's showing your repo's README.md file), try the following: Wait about three minutes and refresh. It may take a few minutes for GitHub pages to pick up the new files. Check your repo's landing page for a little green tick next to the last commit's title, indicating the CI has passed. If you see a cross, it means the build or deployment failed, and you should check the log for more debugging information. Click on the tick and make sure you see a \"Deploy to GitHub Pages\" workflow. Names like \"pages build and deployment / deploy\" are GitHub's default workflows, indicating your custom deployment workflow failed to be triggered at all. Make sure the YAML files are placed under the .github/workflows folder, and that the trigger condition is set correctly (e.g., if your default branch is \"master\" instead of \"main\", you need to change the on.push property). Under your repo's Settings > Pages, make sure the \"Source\" (which is the source for the _deployment_ files, not \"source\" as in our terminology) is set to \"gh-pages\" + \"/ (root)\", since we are using gh-pages as the deployment branch. If you are using a custom domain: Verify that you have the correct DNS records set up if you're using a custom domain. See GitHub pages documentation on configuring custom domains. Also, please be aware that it may take up to 24 hours for DNS changes to propagate through the internet. </details> Triggering deployment with Travis CI {#triggering-deployment-with-travis-ci} Continuous integration (CI) services are typically used to perform routine tasks whenever new commits are checked in to source control. These tasks can be any combination of running unit tests and integration tests, automating builds, publishing packages to npm, and deploying changes to your website. All you need to do to automate the deployment of your website is to invoke the yarn deploy script whenever your website is updated. The following section covers how to do just that using Travis CI, a popular continuous integration service provider. Go to https://github.com/settings/tokens and generate a new personal access token. When creating the token, grant it the repo scope so that it has the permissions it needs. Using your GitHub account, add the Travis CI app to the repository you want to activate. Open your Travis CI dashboard. The URL looks like https://travis-ci.com/USERNAME/REPO, and navigate to the More options > Setting > Environment Variables section of your repository. Create a new environment variable named GH_TOKEN with your newly generated token as its value, then GH_EMAIL (your email address) and GH_NAME (your GitHub username). Create a .travis.yml on the root of your repository with the following: `yml title=\".travis.yml\" language: node_js node_js: 18 branches: only: main cache: yarn: true script: git config --global user.name \"${GH_NAME}\" git config --global user.email \"${GH_EMAIL}\" echo \"machine github.com login ${GH_NAME} password ${GH_TOKEN}\" > ~/.netrc yarn install GIT_USER=\"${GH_NAME}\" yarn deploy ` Now, whenever a new commit lands in main, Travis CI will run your suite of tests and if everything passes, your website will be deployed via the yarn deploy script. Triggering deployment with Buddy {#triggering-deployment-with-buddy} Buddy is an easy-to-use CI/CD tool that allows you to automate the deployment of your portal to different environments, including GitHub Pages. Follow these steps to create a pipeline that automatically deploys a new version of your website whenever you push changes to the selected branch of your project: Go to https://github.com/settings/tokens and generate a new personal access token. When creating the token, grant it the repo scope so that it has the permissions it needs. Sign in to your Buddy account and create a new project. Choose GitHub as your git hosting provider and select the repository with the code of your website. Using the left navigation panel, switch to the Pipelines view. Create a new pipeline. Define its name, set the trigger mode to On push, and select the branch that triggers the pipeline execution. Add a Node.js action. Add these commands in the action's terminal: `bash GIT_USER=<GH_PERSONAL_ACCESS_TOKEN> git config --global user.email \"<YOUR_GH_EMAIL>\" git config --global user.name \"<YOUR_GH_USERNAME>\" yarn deploy ` After creating this simple pipeline, each new commit pushed to the branch you selected deploys your website to GitHub Pages using yarn deploy. Read this guide to learn more about setting up a CI/CD pipeline for Docusaurus. Using Azure Pipelines {#using-azure-pipelines} Sign Up at Azure Pipelines if you haven't already. Create an organization. Within the organization, create a project and connect your repository from GitHub. Go to https://github.com/settings/tokens and generate a new personal access token with the repo scope. In the project page (which looks like https://dev.azure.com/ORG_NAME/REPO_NAME/_build), create a new pipeline with the following text. Also, click on edit and add a new environment variable named GH_TOKEN with your newly generated token as its value, then GH_EMAIL (your email address) and GH_NAME (your GitHub username). Make sure to mark them as secret. Alternatively, you can also add a file named azure-pipelines.yml at your repository root. `yml title=\"azure-pipelines.yml\" trigger: main pool: vmImage: ubuntu-latest steps: checkout: self persistCredentials: true task: NodeTool@0 inputs: versionSpec: '18' displayName: Install Node.js script: | git config --global user.name \"${GH_NAME}\" git config --global user.email \"${GH_EMAIL}\" git checkout -b main echo \"machine github.com login ${GH_NAME} password ${GH_TOKEN}\" > ~/.netrc yarn install GIT_USER=\"${GH_NAME}\" yarn deploy env: GH_NAME: $(GH_NAME) GH_EMAIL: $(GH_EMAIL) GH_TOKEN: $(GH_TOKEN) displayName: Install and build ` Using Drone {#using-drone} Create a new SSH key that will be the deploy key for your project. Name your private and public keys to be specific and so that it does not overwrite your other SSH keys. Go to https://github.com/USERNAME/REPO/settings/keys and add a new deploy key by pasting in the public key you just generated. Open your Drone.io dashboard and log in. The URL looks like https://cloud.drone.io/USERNAME/REPO. Click on the repository, click on activate repository, and add a secret called git_deploy_private_key with your private key value that you just generated. Create a .drone.yml on the root of your repository with the below text. `yml title=\".drone.yml\" kind: pipeline type: docker trigger: event: tag name: Website image: node commands: mkdir -p $HOME/.ssh ssh-keyscan -t rsa github.com >> $HOME/.ssh/known_hosts echo \"$GITHUB_PRIVATE_KEY\" > \"$HOME/.ssh/id_rsa\" chmod 0600 $HOME/.ssh/id_rsa cd website yarn install yarn deploy environment: USE_SSH: true GITHUB_PRIVATE_KEY: from_secret: git_deploy_private_key ` Now, whenever you push a new tag to GitHub, this trigger will start the drone CI job to publish your website. Deploying to Flightcontrol {#deploying-to-flightcontrol} Flightcontrol is a service that automatically builds and deploys your web apps to AWS Fargate directly from your Git repository. It gives you full access to inspect and make infrastructure changes without the limitations of a traditional PaaS. Get started by following Flightcontrol's step-by-step Docusaurus guide. Deploying to Koyeb {#deploying-to-koyeb} Koyeb is a developer-friendly serverless platform to deploy apps globally. The platform lets you seamlessly run Docker containers, web apps, and APIs with git-based deployment, native autoscaling, a global edge network, and built-in service mesh and discovery. Check out the Koyeb's Docusaurus deployment guide to get started. Deploying to Render {#deploying-to-render} Render offers free static site hosting with fully managed SSL, custom domains, a global CDN, and continuous auto-deploy from your Git repo. Get started in just a few minutes by following Render's guide to deploying Docusaurus. Deploying to Qovery {#deploying-to-qovery} Qovery is a fully-managed cloud platform that runs on your AWS, Digital Ocean, and Scaleway account where you can host static sites, backend APIs, databases, cron jobs, and all your other apps in one place. Create a Qovery account. Visit the Qovery dashboard to create an account if you don't already have one. Create a project. Click on Create project and give a name to your project. Click on Next. Create a new environment. Click on Create environment and give a name (e.g. staging, production). Add an application. Click on Create an application, give a name and select your GitHub or GitLab repository where your Docusaurus app is located. Define the main branch name and the root application path. Click on Create. After the application is created: Navigate to your application Settings Select Port Add port used by your Docusaurus application Deploy All you have to do now is to navigate to your application and click on Deploy. !Deploy the app That's it. Watch the status and wait till the app is deployed. To open the application in your browser, click on Action and Open in your application overview. Deploying to Hostman {#deploying-to-hostman} Hostman allows you to host static websites for free. Hostman automates everything, you just need to connect your repository and follow these easy steps: Create a service. To deploy a Docusaurus static website, click Create in the top-left corner of your Dashboard and choose Front-end app or static website. Select the project to deploy. If you are logged in to Hostman with your GitHub, GitLab, or Bitbucket account, you will see the repository with your projects, including the private ones. Choose the project you want to deploy. It must contain the directory with the project's files (e.g. website). To access a different repository, click Connect another repository. If you didn't use your Git account credentials to log in, you'll be able to access the necessary account now, and then select the project. Configure the build settings. Next, the Website customization window will appear. Choose the Static website option from the list of frameworks. The Directory with app points at the directory that will contain the project's files after the build. If you selected the repository with the contents of the website (or my_website) directory during Step 2, you can leave it empty. The standard build command for Docusaurus is: `bash npm2yarn npm run build ` You can modify the build command if needed. You can enter multiple commands separated by &&. Deploy. Click Deploy to start the build process. Once it starts, you will enter the deployment log. If there are any issues with the code, you will get warning or error messages in the log specifying the cause of the problem. Usually, the log contains all the debugging data you'll need. When the deployment is complete, you will receive an email notification and also see a log entry. All done! Your project is up and ready. Deploying to Surge {#deploying-to-surge} Surge is a static web hosting platform that you can use to deploy your Docusaurus project from the command line in seconds. Deploying your project to Surge is easy and free (including custom domains and SSL certs). Deploy your app in a matter of seconds using Surge with the following steps: First, install Surge using npm by running the following command: `bash npm2yarn npm install -g surge ` To build the static files of your site for production in the root directory of your project, run: `bash npm2yarn npm run build ` Then, run this command inside the root directory of your project: `bash surge build/ ` First-time users of Surge would be prompted to create an account from the command line (which happens only once). Confirm that the site you want to publish is in the build directory. A randomly generated subdomain *.surge.sh subdomain is always given (which can be edited). Using your domain {#using-your-domain} If you have a domain name you can deploy your site using the command: `bash surge build/ your-domain.com ` Your site is now deployed for free at subdomain.surge.sh or your-domain.com depending on the method you chose. Setting up CNAME file {#setting-up-cname-file} Store your domain in a CNAME file for future deployments with the following command: `bash echo subdomain.surge.sh > CNAME ` You can deploy any other changes in the future with the command surge. Deploying to Stormkit {#deploying-to-stormkit} You can deploy your Docusaurus project to Stormkit, a deployment platform for static websites, single-page applications (SPAs), and serverless functions. For detailed instructions, refer to this guide. Deploying to QuantCDN {#deploying-to-quantcdn} Install Quant CLI Create a QuantCDN account by signing up Initialize your project with quant init and fill in your credentials: `bash quant init ` Deploy your site. `bash quant deploy ` See docs and blog for more examples and use cases for deploying to QuantCDN. Deploying to Cloudflare Pages {#deploying-to-cloudflare-pages} Cloudflare Pages is a Jamstack platform for frontend developers to collaborate and deploy websites. Get started within a few minutes by following this page. Deploying to Azure Static Web Apps {#deploying-to-azure-static-web-apps} Azure Static Web Apps is a service that automatically builds and deploys full-stack web apps to Azure directly from the code repository, simplifying the developer experience for CI/CD. Static Web Apps separates the web application's static assets from its dynamic (API) endpoints. Static assets are served from globally-distributed content servers, making it faster for clients to retrieve files using servers nearby. Dynamic APIs are scaled with serverless architectures using an event-driven functions-based approach that is more cost-effective and scales on demand. Get started in a few minutes by following this step-by-step guide. Deploying to Kinsta {#deploying-to-kinsta} Kinsta Static Site Hosting lets you deploy up to 100 static sites for free, custom domains with SSL, 100 GB monthly bandwidth, and 260+ Cloudflare CDN locations. Get started in just a few clicks by following our Docusaurus on Kinsta article.",
    "keywords": [
      "deployment",
      "deploy",
      "your",
      "docusaurus",
      "app",
      "for",
      "production",
      "on",
      "range",
      "of",
      "static",
      "site",
      "hosting",
      "services.",
      "mdx",
      "my-org",
      "my-project",
      "localhost",
      "links",
      "trailing-slash-guide",
      "www",
      "package",
      "dotenv",
      "config",
      "useDocusaurusContext",
      "div",
      "summary",
      "deploying",
      "details",
      "docusaurus-2",
      "netlify",
      "docs",
      "projectName",
      "endiliey",
      "TabItem",
      "Tabs",
      "workflows",
      "en",
      "actions",
      "using-workflows",
      "workflow-syntax-for-github-actions",
      "checkout",
      "setup-node",
      "upload-pages-artifact",
      "deploy-pages",
      "test-deploy",
      "id_rsa",
      "ssh-agent",
      "github",
      "settings",
      "tokens",
      "travis-ci",
      "USERNAME",
      "REPO",
      "CD",
      "dev",
      "ORG_NAME",
      "REPO_NAME",
      "_build",
      "keys",
      "cloud",
      "known_hosts",
      "Deployment",
      "build",
      "the",
      "files",
      "website",
      "run",
      "bash",
      "npm2yarn",
      "npm",
      "Once",
      "finishes",
      "will",
      "generated",
      "within",
      "directory",
      "note",
      "The",
      "only",
      "responsibility",
      "Docusaurus",
      "and",
      "emit",
      "now",
      "you",
      "choose",
      "how",
      "host",
      "those",
      "You",
      "can",
      "services",
      "such",
      "Vercel",
      "GitHub",
      "Pages",
      "Netlify",
      "Render",
      "Surge",
      "statically",
      "rendered",
      "generally",
      "work",
      "without",
      "JavaScript",
      "Configuration",
      "configuration",
      "following",
      "parameters",
      "are",
      "required",
      "optimize",
      "routing",
      "serve",
      "from",
      "correct",
      "location",
      "Name",
      "Description",
      "url",
      "URL",
      "For",
      "deployed",
      "https",
      "org",
      "com",
      "project",
      "baseUrl",
      "Base",
      "with",
      "trailing",
      "slash",
      "Testing",
      "Build",
      "Locally",
      "testing",
      "locally",
      "important",
      "test",
      "before",
      "provides",
      "command",
      "that",
      "default",
      "this",
      "load",
      "http",
      "Trailing",
      "slashes",
      "has",
      "trailingSlash",
      "allow",
      "customizing",
      "URLs",
      "emitted",
      "filename",
      "patterns",
      "value",
      "works",
      "fine",
      "Unfortunately",
      "each",
      "provider",
      "different",
      "behavior",
      "exact",
      "same",
      "various",
      "hosts",
      "lead",
      "distinct",
      "results",
      "Depending",
      "useful",
      "change",
      "tip",
      "Use",
      "slorber",
      "guide",
      "understand",
      "better",
      "configure",
      "appropriately",
      "Using",
      "environment",
      "variables",
      "using",
      "Putting",
      "potentially",
      "sensitive",
      "information",
      "common",
      "practice",
      "However",
      "typical",
      "file",
      "interface",
      "Node",
      "see",
      "our",
      "architecture",
      "overview",
      "while",
      "everything",
      "else",
      "MDX",
      "pages",
      "React",
      "components",
      "etc",
      "client",
      "side",
      "not",
      "have",
      "direct",
      "access",
      "process",
      "global",
      "variable",
      "case",
      "consider",
      "customFields",
      "pass",
      "title",
      "npmjs",
      "import",
      "export",
      "env",
      "use",
      "control",
      "specifics",
      "well",
      "highlight",
      "start",
      "Put",
      "custom",
      "here",
      "teamEmail",
      "EMAIL",
      "end",
      "jsx",
      "home",
      "function",
      "Home",
      "const",
      "siteConfig",
      "return",
      "Contact",
      "through",
      "Choosing",
      "choosing",
      "There",
      "few",
      "options",
      "Self",
      "HTTP",
      "server",
      "like",
      "Apache2",
      "Nginx",
      "Jamstack",
      "providers",
      "them",
      "references",
      "but",
      "reasoning",
      "apply",
      "other",
      "definition",
      "also",
      "compare",
      "separately",
      "unsure",
      "which",
      "one",
      "ask",
      "questions",
      "How",
      "many",
      "resources",
      "money",
      "person",
      "hours",
      "willing",
      "invest",
      "requires",
      "experience",
      "networking",
      "Linux",
      "web",
      "administration",
      "most",
      "difficult",
      "option",
      "would",
      "require",
      "time",
      "manage",
      "successfully",
      "Expense",
      "wise",
      "almost",
      "never",
      "free",
      "purchasing",
      "onsite",
      "even",
      "more",
      "costly",
      "help",
      "set",
      "working",
      "offer",
      "features",
      "redirects",
      "easily",
      "configurable",
      "Many",
      "generous",
      "quotas",
      "plans",
      "exceed",
      "limits",
      "need",
      "pay",
      "once",
      "hit",
      "Check",
      "pricing",
      "page",
      "workflow",
      "tedious",
      "Evidence",
      "length",
      "Deploying",
      "service",
      "including",
      "always",
      "public",
      "repositories",
      "detailed",
      "instructions",
      "make",
      "much",
      "customization",
      "With",
      "self",
      "entire",
      "virtual",
      "content",
      "based",
      "request",
      "complicated",
      "implement",
      "authentication",
      "lot",
      "usually",
      "offers",
      "some",
      "formatting",
      "doesn",
      "expose",
      "besides",
      "enforcing",
      "HTTPS",
      "setting",
      "CNAME",
      "records",
      "collaboration",
      "friendly",
      "hosted",
      "leverage",
      "continuous",
      "functionality",
      "heavy",
      "lifting",
      "involved",
      "Usually",
      "designate",
      "specific",
      "wouldn",
      "very",
      "git",
      "opposed",
      "two",
      "previews",
      "every",
      "pull",
      "team",
      "review",
      "merging",
      "member",
      "cannot",
      "non",
      "convoluted",
      "way",
      "One",
      "repo",
      "associated",
      "hand",
      "who",
      "write",
      "isn",
      "silver",
      "bullet",
      "weigh",
      "needs",
      "making",
      "choice",
      "Hosting",
      "Change",
      "port",
      "warning",
      "best",
      "compared",
      "CDN",
      "sections",
      "introduce",
      "they",
      "should",
      "configured",
      "sites",
      "efficiently",
      "affiliated",
      "any",
      "these",
      "provided",
      "convenience",
      "Some",
      "ups",
      "third",
      "parties",
      "recent",
      "API",
      "changes",
      "may",
      "reflected",
      "outdated",
      "PRs",
      "welcome",
      "Because",
      "provide",
      "effort",
      "basis",
      "stopped",
      "accepting",
      "adding",
      "new",
      "however",
      "publish",
      "writeup",
      "separate",
      "blog",
      "official",
      "include",
      "link",
      "first",
      "sure",
      "properly",
      "Url",
      "relative",
      "Then",
      "create",
      "While",
      "specify",
      "commands",
      "directories",
      "follows",
      "did",
      "still",
      "Site",
      "after",
      "created",
      "above",
      "automatically",
      "redeploy",
      "upon",
      "branch",
      "defaults",
      "main",
      "put",
      "folder",
      "outside",
      "likely",
      "former",
      "root",
      "decide",
      "base",
      "trigger",
      "builds",
      "when",
      "update",
      "ignore",
      "toml",
      "diff",
      "quiet",
      "CACHED_COMMIT_REF",
      "COMMIT_REF",
      "adds",
      "recommended",
      "disable",
      "Post",
      "Processing",
      "Asset",
      "Optimization",
      "Pretty",
      "Urls",
      "prevent",
      "lowercase",
      "unnecessary",
      "errors",
      "careful",
      "Disable",
      "asset",
      "optimization",
      "checkbox",
      "broken",
      "does",
      "really",
      "Please",
      "uncheck",
      "independently",
      "want",
      "keep",
      "adjust",
      "Refer",
      "vercel",
      "benefits",
      "areas",
      "performance",
      "ease",
      "Git",
      "Integration",
      "been",
      "pushed",
      "repository",
      "Import",
      "into",
      "Flow",
      "During",
      "find",
      "all",
      "relevant",
      "preconfigured",
      "After",
      "imported",
      "subsequent",
      "pushes",
      "branches",
      "generate",
      "Preview",
      "Deployments",
      "made",
      "Production",
      "Branch",
      "master",
      "result",
      "easy",
      "comes",
      "Overview",
      "there",
      "least",
      "publishing",
      "containing",
      "source",
      "output",
      "served",
      "tutorial",
      "referred",
      "respectively",
      "Each",
      "called",
      "where",
      "organization",
      "name",
      "username",
      "appear",
      "_organization",
      "repo_",
      "info",
      "domain",
      "Anything",
      "copied",
      "When",
      "able",
      "move",
      "back",
      "refer",
      "documentation",
      "User",
      "Organization",
      "Project",
      "picks",
      "ready",
      "either",
      "Settings",
      "This",
      "helps",
      "clone",
      "commit",
      "docusaurusconfigjs",
      "First",
      "modify",
      "add",
      "params",
      "organizationName",
      "user",
      "owns",
      "deploymentBranch",
      "repos",
      "ending",
      "Otherwise",
      "explicit",
      "field",
      "These",
      "fields",
      "their",
      "counterparts",
      "higher",
      "priority",
      "ORGANIZATION_NAME",
      "PROJECT_NAME",
      "DEPLOYMENT_BRANCH",
      "true",
      "false",
      "undefined",
      "Example",
      "Your",
      "runs",
      "published",
      "Jekyll",
      "Since",
      "discard",
      "begin",
      "empty",
      "named",
      "nojekyll",
      "Environment",
      "USE_SSH",
      "Set",
      "SSH",
      "instead",
      "connection",
      "facebook",
      "inferred",
      "GIT_USER",
      "account",
      "push",
      "own",
      "Required",
      "ignored",
      "otherwise",
      "GIT_PASS",
      "Personal",
      "token",
      "specified",
      "facilitate",
      "interactive",
      "CURRENT_BRANCH",
      "could",
      "except",
      "nothing",
      "then",
      "current",
      "invoked",
      "used",
      "GIT_USER_NAME",
      "pushing",
      "GIT_USER_EMAIL",
      "email",
      "enterprise",
      "installations",
      "manner",
      "Enterprise",
      "GITHUB_HOST",
      "GITHUB_PORT",
      "Deploy",
      "Finally",
      "code",
      "block",
      "label",
      "Bash",
      "GITHUB_USERNAME",
      "yarn",
      "windows",
      "Windows",
      "batch",
      "cmd",
      "powershell",
      "PowerShell",
      "Beginning",
      "August",
      "line",
      "sign",
      "personal",
      "password",
      "prompts",
      "enter",
      "PAT",
      "See",
      "Alternatively",
      "log",
      "Triggering",
      "Actions",
      "triggering",
      "automate",
      "customize",
      "execute",
      "software",
      "development",
      "right",
      "examples",
      "below",
      "assume",
      "resides",
      "_source",
      "branch_",
      "Workflow",
      "Our",
      "goal",
      "action",
      "ensures",
      "actually",
      "job",
      "merged",
      "someone",
      "directly",
      "built",
      "Here",
      "approaches",
      "Based",
      "tab",
      "Source",
      "remote",
      "Instructions",
      "scenario",
      "Same",
      "both",
      "jobs",
      "defined",
      "original",
      "listed",
      "skipped",
      "check",
      "suite",
      "status",
      "indicative",
      "actual",
      "therefore",
      "propose",
      "Add",
      "Tweak",
      "setup",
      "paths",
      "accordingly",
      "yml",
      "Review",
      "further",
      "define",
      "triggers",
      "syntax",
      "ubuntu",
      "latest",
      "steps",
      "uses",
      "fetch",
      "depth",
      "node",
      "version",
      "cache",
      "Install",
      "dependencies",
      "Upload",
      "Artifact",
      "upload",
      "artifact",
      "path",
      "Grant",
      "GITHUB_TOKEN",
      "permissions",
      "verify",
      "originates",
      "appropriate",
      "outputs",
      "page_url",
      "Test",
      "pull_request",
      "Yarn",
      "install",
      "frozen",
      "lockfile",
      "Remote",
      "cross",
      "because",
      "another",
      "permission",
      "checks",
      "Generate",
      "key",
      "passphrase",
      "ssh",
      "pub",
      "previous",
      "step",
      "Copy",
      "clipboard",
      "pbcopy",
      "paste",
      "box",
      "Allow",
      "saving",
      "private",
      "secret",
      "GH_PAGES_DEPLOY",
      "Save",
      "Create",
      "example",
      "point",
      "Secret",
      "Keys",
      "replace",
      "assumes",
      "contents",
      "event_name",
      "webfactory",
      "agent",
      "secrets",
      "don",
      "desired",
      "says",
      "showing",
      "README",
      "try",
      "Wait",
      "about",
      "three",
      "minutes",
      "refresh",
      "take",
      "pick",
      "landing",
      "little",
      "green",
      "tick",
      "next",
      "last",
      "indicating",
      "passed",
      "means",
      "failed",
      "debugging",
      "Click",
      "Names",
      "triggered",
      "Make",
      "YAML",
      "placed",
      "under",
      "condition",
      "correctly",
      "property",
      "Under",
      "_deployment_",
      "terminology",
      "since",
      "Verify",
      "DNS",
      "configuring",
      "domains",
      "Also",
      "please",
      "aware",
      "propagate",
      "internet",
      "Travis",
      "travis",
      "Continuous",
      "integration",
      "typically",
      "perform",
      "routine",
      "tasks",
      "whenever",
      "commits",
      "checked",
      "combination",
      "running",
      "unit",
      "tests",
      "automating",
      "packages",
      "All",
      "invoke",
      "script",
      "updated",
      "section",
      "covers",
      "just",
      "popular",
      "creating",
      "grant",
      "scope",
      "activate",
      "Open",
      "dashboard",
      "looks",
      "navigate",
      "More",
      "Setting",
      "Variables",
      "GH_TOKEN",
      "newly",
      "its",
      "GH_EMAIL",
      "address",
      "GH_NAME",
      "language",
      "node_js",
      "echo",
      "machine",
      "login",
      "netrc",
      "Now",
      "lands",
      "passes",
      "via",
      "Buddy",
      "buddy",
      "tool",
      "allows",
      "portal",
      "environments",
      "Follow",
      "pipeline",
      "deploys",
      "selected",
      "Sign",
      "Choose",
      "select",
      "left",
      "navigation",
      "panel",
      "switch",
      "Pipelines",
      "view",
      "Define",
      "mode",
      "execution",
      "terminal",
      "YOUR_GH_EMAIL",
      "YOUR_GH_USERNAME",
      "simple",
      "Read",
      "learn",
      "Azure",
      "azure",
      "pipelines",
      "haven",
      "already",
      "Within",
      "connect",
      "text",
      "click",
      "edit",
      "mark",
      "pool",
      "vmImage",
      "persistCredentials",
      "task",
      "NodeTool",
      "inputs",
      "versionSpec",
      "displayName",
      "Drone",
      "drone",
      "overwrite",
      "pasting",
      "kind",
      "type",
      "docker",
      "event",
      "tag",
      "Website",
      "image",
      "mkdir",
      "HOME",
      "keyscan",
      "rsa",
      "GITHUB_PRIVATE_KEY",
      "chmod",
      "from_secret",
      "Flightcontrol",
      "flightcontrol",
      "apps",
      "AWS",
      "Fargate",
      "gives",
      "full",
      "inspect",
      "infrastructure",
      "limitations",
      "traditional",
      "PaaS",
      "Get",
      "started",
      "Koyeb",
      "koyeb",
      "developer",
      "serverless",
      "platform",
      "globally",
      "lets",
      "seamlessly",
      "Docker",
      "containers",
      "APIs",
      "native",
      "autoscaling",
      "edge",
      "network",
      "mesh",
      "discovery",
      "out",
      "get",
      "render",
      "fully",
      "managed",
      "SSL",
      "auto",
      "Qovery",
      "qovery",
      "Digital",
      "Ocean",
      "Scaleway",
      "backend",
      "databases",
      "cron",
      "place",
      "Visit",
      "give",
      "Next",
      "staging",
      "application",
      "GitLab",
      "located",
      "Navigate",
      "Select",
      "Port",
      "That",
      "Watch",
      "wait",
      "till",
      "open",
      "browser",
      "Action",
      "Hostman",
      "hostman",
      "websites",
      "automates",
      "follow",
      "top",
      "corner",
      "Dashboard",
      "Front",
      "logged",
      "Bitbucket",
      "projects",
      "ones",
      "must",
      "contain",
      "Connect",
      "didn",
      "credentials",
      "necessary",
      "Configure",
      "window",
      "Static",
      "list",
      "frameworks",
      "Directory",
      "points",
      "my_website",
      "during",
      "Step",
      "leave",
      "standard",
      "needed",
      "multiple",
      "separated",
      "starts",
      "issues",
      "error",
      "messages",
      "specifying",
      "cause",
      "problem",
      "contains",
      "data",
      "complete",
      "receive",
      "notification",
      "entry",
      "done",
      "surge",
      "seconds",
      "certs",
      "matter",
      "inside",
      "users",
      "prompted",
      "happens",
      "Confirm",
      "randomly",
      "subdomain",
      "given",
      "edited",
      "depending",
      "method",
      "chose",
      "cname",
      "Store",
      "future",
      "deployments",
      "Stormkit",
      "stormkit",
      "single",
      "applications",
      "SPAs",
      "functions",
      "QuantCDN",
      "quantcdn",
      "Quant",
      "CLI",
      "signing",
      "Initialize",
      "quant",
      "init",
      "fill",
      "cases",
      "Cloudflare",
      "cloudflare",
      "frontend",
      "developers",
      "collaborate",
      "Web",
      "Apps",
      "stack",
      "simplifying",
      "separates",
      "assets",
      "dynamic",
      "endpoints",
      "distributed",
      "servers",
      "faster",
      "clients",
      "retrieve",
      "nearby",
      "Dynamic",
      "scaled",
      "architectures",
      "driven",
      "approach",
      "cost",
      "effective",
      "scales",
      "demand",
      "Kinsta",
      "kinsta",
      "monthly",
      "bandwidth",
      "locations",
      "clicks",
      "article"
    ],
    "url": "/docs/deployment",
    "path": "deployment.mdx",
    "type": "general",
    "category": "root"
  },
  {
    "id": "docusaurus-core",
    "title": "Docusaurus Client API",
    "description": "",
    "content": "Docusaurus Client API Docusaurus provides some APIs on the clients that can be helpful to you when building your site. Components {#components} <ErrorBoundary /> {#errorboundary} This component creates a React error boundary. Use it to wrap components that might throw, and display a fallback when that happens instead of crashing the whole app. `jsx import React from 'react'; import ErrorBoundary from '@docusaurus/ErrorBoundary'; const SafeComponent = () => ( <ErrorBoundary fallback={({error, tryAgain}) => ( <div> <p>This component crashed because of error: {error.message}.</p> <button onClick={tryAgain}>Try Again!</button> </div> )}> <SomeDangerousComponentThatMayThrow /> </ErrorBoundary> ); ` `mdx-code-block import ErrorBoundaryTestButton from '@site/src/components/ErrorBoundaryTestButton' ` :::tip To see it in action, click here: <ErrorBoundaryTestButton/> ::: :::info Docusaurus uses this component to catch errors within the theme's layout, and also within the entire app. ::: :::note This component doesn't catch build-time errors and only protects against client-side render errors that can happen when using stateful React components. ::: Props {#errorboundary-props} fallback: an optional render callback returning a JSX element. It will receive an object with 2 attributes: error, the error that was caught, and tryAgain, a function (() => void) callback to reset the error in the component and try rendering it again. If not present, @theme/Error will be rendered instead. @theme/Error is used for the error boundaries wrapping the site, above the layout. :::warning The fallback prop is a callback, and not a React functional component. You can't use React hooks inside this callback. ::: <Head/> {#head} This reusable React component will manage all of your changes to the document head. It takes plain HTML tags and outputs plain HTML tags and is beginner-friendly. It is a wrapper around React Helmet. Usage Example: `jsx import React from 'react'; // highlight-next-line import Head from '@docusaurus/Head'; const MySEO = () => ( // highlight-start <Head> <meta property=\"og:description\" content=\"My custom description\" /> <meta charSet=\"utf-8\" /> <title>My Title</title> <link rel=\"canonical\" href=\"http://mysite.com/example\" /> </Head> // highlight-end ); ` Nested or latter components will override duplicate usages: `jsx <Parent> {/ highlight-start /} <Head> <title>My Title</title> <meta name=\"description\" content=\"Helmet application\" /> </Head> {/ highlight-end /} <Child> {/ highlight-start /} <Head> <title>Nested Title</title> <meta name=\"description\" content=\"Nested component\" /> </Head> {/ highlight-end /} </Child> </Parent> ` Outputs: `html <head> <title>Nested Title</title> <meta name=\"description\" content=\"Nested component\" /> </head> ` <Link/> {#link} This component enables linking to internal pages as well as a powerful performance feature called preloading. Preloading is used to prefetch resources so that the resources are fetched by the time the user navigates with this component. We use an IntersectionObserver to fetch a low-priority request when the <Link> is in the viewport and then use an onMouseOver event to trigger a high-priority request when it is likely that a user will navigate to the requested resource. The component is a wrapper around react-router’s <Link> component that adds useful enhancements specific to Docusaurus. All props are passed through to react-router’s <Link> component. External links also work, and automatically have these props: target=\"_blank\" rel=\"noopener noreferrer\". `jsx import React from 'react'; // highlight-next-line import Link from '@docusaurus/Link'; const Page = () => ( <div> <p> {/ highlight-next-line /} Check out my <Link to=\"/blog\">blog</Link>! </p> <p> {/ highlight-next-line /} Follow me on <Link to=\"https://x.com/docusaurus\">X</Link>! </p> </div> ); ` to: string {#to-string} The target location to navigate to. Example: /docs/introduction. `jsx <Link to=\"/courses\" /> ` :::tip Prefer this component to vanilla <a> tags because Docusaurus does a lot of optimizations (e.g. broken path detection, prefetching, applying base URL...) if you use <Link>. ::: <Redirect/> {#redirect} Rendering a <Redirect> will navigate to a new location. The new location will override the current location in the history stack like server-side redirects (HTTP 3xx) do. You can refer to React Router's Redirect documentation for more info on available props. Example usage: `jsx import React from 'react'; // highlight-next-line import {Redirect} from '@docusaurus/router'; const Home = () => { // highlight-next-line return <Redirect to=\"/docs/test\" />; }; ` :::note @docusaurus/router implements React Router and supports its features. ::: <BrowserOnly/> {#browseronly} The <BrowserOnly> component permits to render React components only in the browser after the React app has hydrated. :::tip Use it for integrating with code that can't run in Node.js, because the window or document objects are being accessed. ::: Props {#browseronly-props} children: render function prop returning browser-only JSX. Will not be executed in Node.js fallback (optional): JSX to render on the server (Node.js) and until React hydration completes. Example with code {#browseronly-example-code} `jsx // highlight-start import BrowserOnly from '@docusaurus/BrowserOnly'; // highlight-end const MyComponent = () => { return ( // highlight-start <BrowserOnly> {() => <span>page url = {window.location.href}</span>} </BrowserOnly> // highlight-end ); }; ` Example with a library {#browseronly-example-library} `jsx // highlight-start import BrowserOnly from '@docusaurus/BrowserOnly'; // highlight-end const MyComponent = (props) => { return ( // highlight-start <BrowserOnly fallback={<div>Loading...</div>}> {() => { const LibComponent = require('some-lib').LibComponent; return <LibComponent {...props} />; }} </BrowserOnly> // highlight-end ); }; ` <Interpolate/> {#interpolate} A simple interpolation component for text containing dynamic placeholders. The placeholders will be replaced with the provided dynamic values and JSX elements of your choice (strings, links, styled elements...). Props {#interpolate-props} children: text containing interpolation placeholders like {placeholderName} values: object containing interpolation placeholder values `jsx import React from 'react'; import Link from '@docusaurus/Link'; import Interpolate from '@docusaurus/Interpolate'; export default function VisitMyWebsiteMessage() { return ( // highlight-start <Interpolate values={{ firstName: 'Sébastien', website: ( <Link to=\"https://docusaurus.io\" className=\"my-website-class\"> website </Link> ), }}> {'Hello, {firstName}! How are you? Take a look at my {website}'} </Interpolate> // highlight-end ); } ` <Translate/> {#translate} When localizing your site, the <Translate/> component will allow providing translation support to React components, such as your homepage. The <Translate> component supports interpolation. The translation strings will statically extracted from your code with the docusaurus write-translations CLI and a code.json translation file will be created in website/i18n/[locale]. :::note The <Translate/> props must be hardcoded strings. Apart from the values prop used for interpolation, it is not possible to use variables, or the static extraction wouldn't work. ::: Props {#translate-props} children: untranslated string in the default site locale (can contain interpolation placeholders) id: optional value to be used as the key in JSON translation files description: optional text to help the translator values: optional object containing interpolation placeholder values Example {#example} `jsx title=\"src/pages/index.js\" import React from 'react'; import Layout from '@theme/Layout'; // highlight-start import Translate from '@docusaurus/Translate'; // highlight-end export default function Home() { return ( <Layout> <h1> {/ highlight-start /} <Translate id=\"homepage.title\" description=\"The homepage welcome message\"> Welcome to my website </Translate> {/ highlight-end /} </h1> <main> {/ highlight-start /} <Translate values={{firstName: 'Sébastien'}}> {'Welcome, {firstName}! How are you?'} </Translate> {/ highlight-end /} </main> </Layout> ); } ` :::note You can even omit the children prop and specify a translation string in your code.json file manually after running the docusaurus write-translations CLI command. `jsx <Translate id=\"homepage.title\" /> ` ::: :::info The <Translate> component supports interpolation. You can also implement string pluralization through some custom code and the translate imperative API. ::: Hooks {#hooks} useDocusaurusContext {#useDocusaurusContext} React hook to access Docusaurus Context. The context contains the siteConfig object from docusaurus.config.js and some additional site metadata. `ts type PluginVersionInformation = | {readonly type: 'package'; readonly version?: string} | {readonly type: 'project'} | {readonly type: 'local'} | {readonly type: 'synthetic'}; type SiteMetadata = { readonly docusaurusVersion: string; readonly siteVersion?: string; readonly pluginVersions: Record<string, PluginVersionInformation>; }; type I18nLocaleConfig = { label: string; direction: string; }; type I18n = { defaultLocale: string; locales: [string, ...string[]]; currentLocale: string; localeConfigs: Record<string, I18nLocaleConfig>; }; type DocusaurusContext = { siteConfig: DocusaurusConfig; siteMetadata: SiteMetadata; globalData: Record<string, unknown>; i18n: I18n; codeTranslations: Record<string, string>; }; ` Usage example: `jsx import React from 'react'; import useDocusaurusContext from '@docusaurus/useDocusaurusContext'; const MyComponent = () => { // highlight-next-line const {siteConfig, siteMetadata} = useDocusaurusContext(); return ( <div> {/ highlight-start /} <h1>{siteConfig.title}</h1> <div>{siteMetadata.siteVersion}</div> <div>{siteMetadata.docusaurusVersion}</div> {/ highlight-end /} </div> ); }; ` :::note The siteConfig object only contains serializable values (values that are preserved after JSON.stringify()). Functions, regexes, etc. would be lost on the client side. ::: useIsBrowser {#useIsBrowser} Returns true when the React app has successfully hydrated in the browser. :::warning Use this hook instead of typeof windows !== 'undefined' in React rendering logic. The first client-side render output (in the browser) must be exactly the same as the server-side render output (Node.js). Not following this rule can lead to unexpected hydration behaviors, as described in The Perils of Rehydration. ::: Usage example: `jsx import React from 'react'; import useIsBrowser from '@docusaurus/useIsBrowser'; const MyComponent = () => { // highlight-start const isBrowser = useIsBrowser(); // highlight-end return <div>{isBrowser ? 'Client' : 'Server'}</div>; }; ` useBaseUrl {#useBaseUrl} React hook to prepend your site baseUrl to a string. :::warning Don't use it for regular links! The /baseUrl/ prefix is automatically added to all absolute paths by default: Markdown: link will link to /baseUrl/my/path React: <Link to=\"/my/path/\">link</Link> will link to /baseUrl/my/path ::: Options {#options} `ts type BaseUrlOptions = { forcePrependBaseUrl: boolean; absolute: boolean; }; ` Example usage: {#example-usage} `jsx import React from 'react'; import useBaseUrl from '@docusaurus/useBaseUrl'; const SomeImage = () => { // highlight-start const imgSrc = useBaseUrl('/img/myImage.png'); // highlight-end return <img src={imgSrc} />; }; ` :::tip In most cases, you don't need useBaseUrl. Prefer a require() call for assets: `jsx <img src={require('@site/static/img/myImage.png').default} /> ` ::: useBaseUrlUtils {#useBaseUrlUtils} Sometimes useBaseUrl is not good enough. This hook return additional utils related to your site's base URL. withBaseUrl: useful if you need to add base URLs to multiple URLs at once. `jsx import React from 'react'; import {useBaseUrlUtils} from '@docusaurus/useBaseUrl'; const Component = () => { const urls = ['/a', '/b']; // highlight-start const {withBaseUrl} = useBaseUrlUtils(); const urlsWithBaseUrl = urls.map(withBaseUrl); // highlight-end return <div>{/ ... /}</div>; }; ` useGlobalData {#useGlobalData} React hook to access Docusaurus global data created by all the plugins. Global data is namespaced by plugin name then by plugin ID. :::info Plugin ID is only useful when a plugin is used multiple times on the same site. Each plugin instance is able to create its own global data. ::: `ts type GlobalData = Record< PluginName, Record< PluginId, // \"default\" by default any // plugin-specific data > >; ` Usage example: `jsx import React from 'react'; // highlight-next-line import useGlobalData from '@docusaurus/useGlobalData'; const MyComponent = () => { // highlight-start const globalData = useGlobalData(); const myPluginData = globalData['my-plugin']['default']; return <div>{myPluginData.someAttribute}</div>; // highlight-end }; ` :::tip Inspect your site's global data at .docusaurus/globalData.json ::: usePluginData {#usePluginData} Access global data created by a specific plugin instance. This is the most convenient hook to access plugin global data and should be used most of the time. pluginId is optional if you don't use multi-instance plugins. `ts function usePluginData( pluginName: string, pluginId?: string, options?: {failfast?: boolean}, ); ` Usage example: `jsx import React from 'react'; // highlight-next-line import {usePluginData} from '@docusaurus/useGlobalData'; const MyComponent = () => { // highlight-start const myPluginData = usePluginData('my-plugin'); return <div>{myPluginData.someAttribute}</div>; // highlight-end }; ` useAllPluginInstancesData {#useAllPluginInstancesData} Access global data created by a specific plugin. Given a plugin name, it returns the data of all the plugins instances of that name, by plugin id. `ts function useAllPluginInstancesData( pluginName: string, options?: {failfast?: boolean}, ); ` Usage example: `jsx import React from 'react'; // highlight-next-line import {useAllPluginInstancesData} from '@docusaurus/useGlobalData'; const MyComponent = () => { // highlight-start const allPluginInstancesData = useAllPluginInstancesData('my-plugin'); const myPluginData = allPluginInstancesData['default']; return <div>{myPluginData.someAttribute}</div>; // highlight-end }; ` useBrokenLinks {#useBrokenLinks} React hook to access the Docusaurus broken link checker APIs, exposing a way for a Docusaurus pages to report and collect their links and anchors. :::warning This is an advanced API that most Docusaurus users don't need to use directly. It is already built-in in existing high-level components: the <Link> component will collect links for you the @theme/Heading (used for Markdown headings) will collect anchors Use useBrokenLinks() if you implement your own <Heading> or <Link> component. ::: Usage example: `js title=\"MyHeading.js\" import useBrokenLinks from '@docusaurus/useBrokenLinks'; export default function MyHeading(props) { useBrokenLinks().collectAnchor(props.id); return <h2 {...props} />; } ` `js title=\"MyLink.js\" import useBrokenLinks from '@docusaurus/useBrokenLinks'; export default function MyLink(props) { useBrokenLinks().collectLink(props.href); return <a {...props} />; } ` Functions {#functions} interpolate {#interpolate-1} The imperative counterpart of the <Interpolate> component. Signature {#signature} `ts // Simple string interpolation function interpolate(text: string, values: Record<string, string>): string; // JSX interpolation function interpolate( text: string, values: Record<string, ReactNode>, ): ReactNode; ` Example {#example-1} `js // highlight-next-line import {interpolate} from '@docusaurus/Interpolate'; const message = interpolate('Welcome {firstName}', {firstName: 'Sébastien'}); ` translate {#translate-imperative} The imperative counterpart of the <Translate> component. Also supporting placeholders interpolation. :::tip Use the imperative API for the rare cases where a component cannot be used, such as: the page title metadata the placeholder props of form inputs the aria-label props for accessibility ::: Signature {#signature-1} `ts function translate( translation: {message: string; id?: string; description?: string}, values: Record<string, string>, ): string; ` Example {#example-2} `jsx title=\"src/pages/index.js\" import React from 'react'; import Layout from '@theme/Layout'; // highlight-next-line import {translate} from '@docusaurus/Translate'; export default function Home() { return ( <Layout // highlight-next-line title={translate({message: 'My page meta title'})}> <img src={'https://docusaurus.io/logo.png'} aria-label={ // highlight-start translate( { message: 'The logo of site {siteName}', // Optional id: 'homepage.logo.ariaLabel', description: 'The home page logo aria label', }, {siteName: 'Docusaurus'}, ) // highlight-end } /> </Layout> ); } ` Modules {#modules} ExecutionEnvironment {#executionenvironment} A module that exposes a few boolean variables to check the current rendering environment. :::warning For React rendering logic, use useIsBrowser() or <BrowserOnly> instead. ::: Example: `js import ExecutionEnvironment from '@docusaurus/ExecutionEnvironment'; if (ExecutionEnvironment.canUseDOM) { require('lib-that-only-works-client-side'); } ` | Field | Description | | --- | --- | | ExecutionEnvironment.canUseDOM | true if on client/browser, false on Node.js/prerendering. | | ExecutionEnvironment.canUseEventListeners | true if on client and has window.addEventListener. | | ExecutionEnvironment.canUseIntersectionObserver | true if on client and has IntersectionObserver. | | ExecutionEnvironment.canUseViewport | true if on client and has window.screen. | constants {#constants} A module exposing useful constants to client-side theme code. `js import {DEFAULT_PLUGIN_ID} from '@docusaurus/constants'; ` | Named export | Value | | ------------------- | --------- | | DEFAULT_PLUGIN_ID | default |",
    "keywords": [
      "docusaurus",
      "client",
      "api",
      "core",
      "mdx",
      "ErrorBoundary",
      "button",
      "div",
      "src",
      "components",
      "ErrorBoundaryTestButton",
      "Error",
      "Head",
      "title",
      "mysite",
      "example",
      "Child",
      "Parent",
      "head",
      "Link",
      "blog",
      "docs",
      "introduction",
      "courses",
      "router",
      "test",
      "BrowserOnly",
      "span",
      "Interpolate",
      "i18n",
      "pages",
      "index",
      "Layout",
      "Translate",
      "h1",
      "main",
      "useDocusaurusContext",
      "useIsBrowser",
      "baseUrl",
      "my",
      "path",
      "useBaseUrl",
      "img",
      "myImage",
      "static",
      "useGlobalData",
      "globalData",
      "Heading",
      "useBrokenLinks",
      "logo",
      "ExecutionEnvironment",
      "browser",
      "prerendering",
      "constants",
      "Docusaurus",
      "Client",
      "API",
      "provides",
      "some",
      "APIs",
      "the",
      "clients",
      "that",
      "can",
      "helpful",
      "you",
      "when",
      "building",
      "your",
      "site",
      "Components",
      "errorboundary",
      "This",
      "component",
      "creates",
      "React",
      "error",
      "boundary",
      "Use",
      "wrap",
      "might",
      "throw",
      "and",
      "display",
      "fallback",
      "happens",
      "instead",
      "crashing",
      "whole",
      "app",
      "jsx",
      "import",
      "from",
      "react",
      "const",
      "SafeComponent",
      "tryAgain",
      "crashed",
      "because",
      "message",
      "onClick",
      "Try",
      "Again",
      "code",
      "block",
      "tip",
      "see",
      "action",
      "click",
      "here",
      "info",
      "uses",
      "this",
      "catch",
      "errors",
      "within",
      "theme",
      "layout",
      "also",
      "entire",
      "note",
      "doesn",
      "build",
      "time",
      "only",
      "protects",
      "against",
      "side",
      "render",
      "happen",
      "using",
      "stateful",
      "Props",
      "props",
      "optional",
      "callback",
      "returning",
      "JSX",
      "element",
      "will",
      "receive",
      "object",
      "with",
      "attributes",
      "was",
      "caught",
      "function",
      "void",
      "reset",
      "try",
      "rendering",
      "again",
      "not",
      "present",
      "rendered",
      "used",
      "for",
      "boundaries",
      "wrapping",
      "above",
      "warning",
      "The",
      "prop",
      "functional",
      "You",
      "use",
      "hooks",
      "inside",
      "reusable",
      "manage",
      "all",
      "changes",
      "document",
      "takes",
      "plain",
      "HTML",
      "tags",
      "outputs",
      "beginner",
      "friendly",
      "wrapper",
      "around",
      "Helmet",
      "Usage",
      "Example",
      "highlight",
      "next",
      "line",
      "MySEO",
      "start",
      "meta",
      "property",
      "description",
      "content",
      "custom",
      "charSet",
      "utf",
      "Title",
      "link",
      "rel",
      "canonical",
      "href",
      "http",
      "com",
      "end",
      "Nested",
      "latter",
      "override",
      "duplicate",
      "usages",
      "name",
      "application",
      "Outputs",
      "html",
      "enables",
      "linking",
      "internal",
      "well",
      "powerful",
      "performance",
      "feature",
      "called",
      "preloading",
      "Preloading",
      "prefetch",
      "resources",
      "are",
      "fetched",
      "user",
      "navigates",
      "IntersectionObserver",
      "fetch",
      "low",
      "priority",
      "request",
      "viewport",
      "then",
      "onMouseOver",
      "event",
      "trigger",
      "high",
      "likely",
      "navigate",
      "requested",
      "resource",
      "adds",
      "useful",
      "enhancements",
      "specific",
      "All",
      "passed",
      "through",
      "External",
      "links",
      "work",
      "automatically",
      "have",
      "these",
      "target",
      "_blank",
      "noopener",
      "noreferrer",
      "Page",
      "Check",
      "out",
      "Follow",
      "https",
      "string",
      "location",
      "Prefer",
      "vanilla",
      "does",
      "lot",
      "optimizations",
      "broken",
      "detection",
      "prefetching",
      "applying",
      "base",
      "URL",
      "Redirect",
      "redirect",
      "Rendering",
      "new",
      "current",
      "history",
      "stack",
      "like",
      "server",
      "redirects",
      "HTTP",
      "refer",
      "Router",
      "documentation",
      "more",
      "available",
      "usage",
      "Home",
      "return",
      "implements",
      "supports",
      "its",
      "features",
      "browseronly",
      "permits",
      "after",
      "has",
      "hydrated",
      "integrating",
      "run",
      "Node",
      "window",
      "objects",
      "being",
      "accessed",
      "children",
      "Will",
      "executed",
      "until",
      "hydration",
      "completes",
      "MyComponent",
      "page",
      "url",
      "library",
      "Loading",
      "LibComponent",
      "require",
      "lib",
      "interpolate",
      "simple",
      "interpolation",
      "text",
      "containing",
      "dynamic",
      "placeholders",
      "replaced",
      "provided",
      "values",
      "elements",
      "choice",
      "strings",
      "styled",
      "placeholderName",
      "placeholder",
      "export",
      "default",
      "firstName",
      "bastien",
      "website",
      "className",
      "class",
      "Hello",
      "How",
      "Take",
      "look",
      "translate",
      "When",
      "localizing",
      "allow",
      "providing",
      "translation",
      "support",
      "such",
      "homepage",
      "statically",
      "extracted",
      "write",
      "translations",
      "CLI",
      "json",
      "file",
      "created",
      "locale",
      "must",
      "hardcoded",
      "Apart",
      "possible",
      "variables",
      "extraction",
      "wouldn",
      "untranslated",
      "contain",
      "value",
      "key",
      "JSON",
      "files",
      "help",
      "translator",
      "welcome",
      "Welcome",
      "even",
      "omit",
      "specify",
      "manually",
      "running",
      "command",
      "implement",
      "pluralization",
      "imperative",
      "Hooks",
      "hook",
      "access",
      "Context",
      "context",
      "contains",
      "siteConfig",
      "config",
      "additional",
      "metadata",
      "type",
      "readonly",
      "package",
      "version",
      "project",
      "local",
      "synthetic",
      "SiteMetadata",
      "docusaurusVersion",
      "siteVersion",
      "pluginVersions",
      "Record",
      "I18nLocaleConfig",
      "label",
      "direction",
      "I18n",
      "defaultLocale",
      "locales",
      "currentLocale",
      "localeConfigs",
      "DocusaurusContext",
      "DocusaurusConfig",
      "siteMetadata",
      "unknown",
      "codeTranslations",
      "serializable",
      "preserved",
      "stringify",
      "Functions",
      "regexes",
      "etc",
      "would",
      "lost",
      "Returns",
      "true",
      "successfully",
      "typeof",
      "windows",
      "undefined",
      "logic",
      "first",
      "output",
      "exactly",
      "same",
      "Not",
      "following",
      "rule",
      "lead",
      "unexpected",
      "behaviors",
      "described",
      "Perils",
      "Rehydration",
      "isBrowser",
      "Server",
      "prepend",
      "Don",
      "regular",
      "prefix",
      "added",
      "absolute",
      "paths",
      "Markdown",
      "Options",
      "options",
      "BaseUrlOptions",
      "forcePrependBaseUrl",
      "boolean",
      "SomeImage",
      "imgSrc",
      "png",
      "most",
      "cases",
      "don",
      "need",
      "call",
      "assets",
      "useBaseUrlUtils",
      "Sometimes",
      "good",
      "enough",
      "utils",
      "related",
      "withBaseUrl",
      "add",
      "URLs",
      "multiple",
      "once",
      "Component",
      "urls",
      "urlsWithBaseUrl",
      "map",
      "global",
      "data",
      "plugins",
      "Global",
      "namespaced",
      "plugin",
      "Plugin",
      "times",
      "Each",
      "instance",
      "able",
      "create",
      "own",
      "GlobalData",
      "PluginName",
      "PluginId",
      "any",
      "myPluginData",
      "someAttribute",
      "Inspect",
      "usePluginData",
      "Access",
      "convenient",
      "should",
      "pluginId",
      "multi",
      "pluginName",
      "failfast",
      "Given",
      "returns",
      "instances",
      "checker",
      "exposing",
      "way",
      "report",
      "collect",
      "their",
      "anchors",
      "advanced",
      "users",
      "directly",
      "already",
      "built",
      "existing",
      "level",
      "headings",
      "MyHeading",
      "collectAnchor",
      "MyLink",
      "collectLink",
      "functions",
      "counterpart",
      "Signature",
      "signature",
      "Simple",
      "ReactNode",
      "Also",
      "supporting",
      "rare",
      "where",
      "cannot",
      "form",
      "inputs",
      "aria",
      "accessibility",
      "siteName",
      "Optional",
      "ariaLabel",
      "home",
      "Modules",
      "modules",
      "executionenvironment",
      "module",
      "exposes",
      "few",
      "check",
      "environment",
      "For",
      "canUseDOM",
      "works",
      "Field",
      "Description",
      "false",
      "canUseEventListeners",
      "addEventListener",
      "canUseViewport",
      "screen",
      "DEFAULT_PLUGIN_ID",
      "Named",
      "Value"
    ],
    "url": "/docs/docusaurus-core",
    "path": "docusaurus-core.mdx",
    "type": "general",
    "category": "root"
  },
  {
    "id": "_futures_documentation_2applyApi",
    "title": "How to Apply for API Key",
    "description": "",
    "content": "The interface may require the user’s API Key, please refer to how to create an API-KEY this page(https://xtsupport.zendesk.com/hc/zh-cn/articles/900006868163-%E5%A6%82%E4%BD%95%E7%94%B3%E8%AF%B7API%E4%BA%A4%E6%98%93-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAAPI%E5%AF%86%E9%92%A5-) 请求参数 | 名称 | 类型 | 必填 | 默认值 | 说明 | 范围 | | ------ | ---- | ---- | ------ | ---- | ---- | | None | | 否 | | | | 示例请求 更多示例",
    "keywords": [
      "how",
      "to",
      "apply",
      "for",
      "api",
      "key",
      "futures",
      "accessdescription",
      "2applyapi",
      "mdx",
      "xtsupport",
      "hc",
      "zh-cn",
      "articles",
      "900006868163-",
      "The",
      "interface",
      "may",
      "require",
      "the",
      "user",
      "API",
      "Key",
      "please",
      "refer",
      "create",
      "KEY",
      "this",
      "page",
      "https",
      "zendesk",
      "com",
      "B7API",
      "BAAPI",
      "None"
    ],
    "url": "/docs/futures/Access Description/2applyApi",
    "path": "futures/Access Description/2applyApi.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "futures_documentation_apiBasicInfo",
    "title": "Basic Information of the Interface",
    "description": "",
    "content": "DDue to the reasons of high latency and poor stability, it is not recommend to access the XT API through a proxy. GET request parameters are put in query Params, POST request parameters are put in request body. The request header information is set to: Content-Type=application/x-www-form-urlencoded In addition to the parameters required by the interface itself, signature, which is the signature parameter, needs to be passed in the query Params or request body. The interface that does not need to pass the signature parameter will be additionally explained.",
    "keywords": [
      "basic",
      "information",
      "of",
      "the",
      "interface",
      "futures",
      "accessdescription",
      "apibasicinfo",
      "mdx",
      "x-www-form-urlencoded",
      "get",
      "post",
      "DDue",
      "reasons",
      "high",
      "latency",
      "and",
      "poor",
      "stability",
      "not",
      "recommend",
      "access",
      "API",
      "through",
      "proxy",
      "GET",
      "request",
      "parameters",
      "are",
      "put",
      "query",
      "Params",
      "POST",
      "body",
      "The",
      "header",
      "set",
      "Content",
      "Type",
      "application",
      "www",
      "form",
      "urlencoded",
      "addition",
      "required",
      "itself",
      "signature",
      "which",
      "parameter",
      "needs",
      "passed",
      "that",
      "does",
      "need",
      "pass",
      "will",
      "additionally",
      "explained"
    ],
    "url": "/docs/futures/Access Description/apiBasicInfo",
    "path": "futures/Access Description/apiBasicInfo.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "apiDemo",
    "title": "API Library",
    "description": "",
    "content": "Java connector A lightweight Java code library that provides a method for users to directly call the API Sdks for each language: java: https://github.com/xt-com/xt4-java-demo 请求参数 | 名称 | 类型 | 必填 | 默认值 | 说明 | 范围 | | ------ | ---- | ---- | ------ | ---- | ---- | | None | | 否 | | | | 示例请求 更多示例",
    "keywords": [
      "api",
      "library",
      "futures",
      "accessdescription",
      "apidemo",
      "mdx",
      "github",
      "xt-com",
      "xt4-java-demo",
      "Java",
      "connector",
      "lightweight",
      "code",
      "that",
      "provides",
      "method",
      "for",
      "users",
      "directly",
      "call",
      "the",
      "API",
      "Sdks",
      "each",
      "language",
      "java",
      "https",
      "com",
      "xt4",
      "demo",
      "None"
    ],
    "url": "/docs/futures/Access Description/BasicInformationOfTheInterface",
    "path": "futures/Access Description/BasicInformationOfTheInterface.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "_futures_documentation_errorcode",
    "title": "Error Code",
    "description": "",
    "content": "| Status code | Error information | | ----------- | ----------------- | | 200 | Success | | 401 | Login required | | 403 | Login expired | 请求参数 | 名称 | 类型 | 必填 | 默认值 | 说明 | 范围 | | ------ | ---- | ---- | ------ | ---- | ---- | | None | | 否 | | | | 示例请求",
    "keywords": [
      "error",
      "code",
      "futures",
      "accessdescription",
      "errorcode",
      "mdx",
      "Status",
      "Error",
      "information",
      "Success",
      "Login",
      "required",
      "expired",
      "None"
    ],
    "url": "/docs/futures/Access Description/errorCode",
    "path": "futures/Access Description/errorCode.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Frequency Limiting Rules",
    "title": "Frequency Limiting Rules",
    "description": "",
    "content": "Get assets 3 times per second, other methods 10 times per second for each single user, 1000 times per minute for each single IP, exceeding the requested times, account will be locked for 10 minutes.",
    "keywords": [
      "frequency",
      "limiting",
      "rules",
      "futures",
      "accessdescription",
      "limitrules",
      "mdx",
      "Get",
      "assets",
      "times",
      "per",
      "second",
      "other",
      "methods",
      "for",
      "each",
      "single",
      "user",
      "minute",
      "exceeding",
      "the",
      "requested",
      "account",
      "will",
      "locked",
      "minutes"
    ],
    "url": "/docs/futures/Access Description/limitRules",
    "path": "futures/Access Description/limitRules.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "REST API",
    "title": "REST API",
    "description": "",
    "content": "Official: USDT-M:https://fapi.xt.com Coin-M:https://dapi.xt.com 请求参数 | 名称 | 类型 | 必填 | 默认值 | 说明 | 范围 | | ------ | ---- | ---- | ------ | ---- | ---- | | None | | 否 | | | | 示例请求 更多示例",
    "keywords": [
      "rest",
      "api",
      "futures",
      "accessdescription",
      "restapi",
      "mdx",
      "fapi",
      "dapi",
      "Official",
      "USDT",
      "https",
      "com",
      "Coin",
      "None"
    ],
    "url": "/docs/futures/Access Description/restApi",
    "path": "futures/Access Description/restApi.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Return Format",
    "title": "Return Format",
    "description": "",
    "content": "All interfaces’ returns are in JSON format. 请求参数 | 名称 | 类型 | 必填 | 默认值 | 说明 | 范围 | | ------ | ---- | ---- | ------ | ---- | ---- | | None | | 否 | | | | 示例请求 响应示例 Response `json { \"returnCode\": 200, \"result\": { \"serverTime\": 1636612706739 }, \"msgInfo\": \"Success.\" \"error\": null, } `",
    "keywords": [
      "return",
      "format",
      "futures",
      "accessdescription",
      "returnformat",
      "mdx",
      "All",
      "interfaces",
      "returns",
      "are",
      "JSON",
      "None",
      "Response",
      "json",
      "returnCode",
      "result",
      "serverTime",
      "msgInfo",
      "Success",
      "error",
      "null"
    ],
    "url": "/docs/futures/Access Description/returnFormat",
    "path": "futures/Access Description/returnFormat.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Signature Statement",
    "title": "Signature Statement",
    "description": "",
    "content": "Since XT needs to provide some open interfaces for third-party platforms, it requires data security issues of the interface, such as whether the data has been tampered with, whether the data is outdated, whether the data can be submitted repeatedly, and the frequency of access to the interface within a certain period of time. Among them, whether the data has been tampered with is most important. Offline distribution of appkey and secretkey, for different calls, provide different appkey and secretkey. Add timestamp, the value of which should be the unix timestamp (milliseconds) of the time when the request is sent, and the valid time of the data is calculated according to this value. Add signature information for all data. Add recvwindow, the valid time is relatively simple and fixed to a certain value. For example, the data is valid within 10 minutes under the same api and appid. Here, it can be further optimized to the valid time of a single api is different. The server determines the timestamp when it receives a request. Up to 60 seconds, and the default is 5 seconds. If it was sent 5000 milliseconds ago, the request will be considered invalid. This time window value can be customized by sending the optional parameter recvWindow. In addition, the server will also reject the request if it calculates that the client timestamp is more than one second 'in the future' of server time. Regarding the transaction timeliness, the Internet is not 100% reliable and cannot be completely relied upon, so your application's local time delay to the XT server may be jitter.This is the purpose of setting recvWindow. If you are engaged in high-frequency trading and have high requirements for trading timeliness, you can flexibly set recvWindow to meet your requirements. RecvWindow for more than 5 seconds is not recommended. Add algorithms (signature method/algorithm). User's signature calculation is a HSC-based protocol, where HmacSHA256 is used by default. See the specific supported protocols listed in the table below. 请求参数 | 名称 | 类型 | 必填 | 默认值 | 说明 | 范围 | | ------ | ---- | ---- | ------ | ---- | ---- | | None | | 否 | | | | 示例请求",
    "keywords": [
      "signature",
      "statement",
      "futures",
      "accessdescription",
      "signstatement",
      "mdx",
      "algorithm",
      "Since",
      "needs",
      "provide",
      "some",
      "open",
      "interfaces",
      "for",
      "third",
      "party",
      "platforms",
      "requires",
      "data",
      "security",
      "issues",
      "the",
      "interface",
      "such",
      "whether",
      "has",
      "been",
      "tampered",
      "with",
      "outdated",
      "can",
      "submitted",
      "repeatedly",
      "and",
      "frequency",
      "access",
      "within",
      "certain",
      "period",
      "time",
      "Among",
      "them",
      "most",
      "important",
      "Offline",
      "distribution",
      "appkey",
      "secretkey",
      "different",
      "calls",
      "Add",
      "timestamp",
      "value",
      "which",
      "should",
      "unix",
      "milliseconds",
      "when",
      "request",
      "sent",
      "valid",
      "calculated",
      "according",
      "this",
      "information",
      "all",
      "recvwindow",
      "relatively",
      "simple",
      "fixed",
      "For",
      "example",
      "minutes",
      "under",
      "same",
      "api",
      "appid",
      "Here",
      "further",
      "optimized",
      "single",
      "The",
      "server",
      "determines",
      "receives",
      "seconds",
      "default",
      "was",
      "ago",
      "will",
      "considered",
      "invalid",
      "This",
      "window",
      "customized",
      "sending",
      "optional",
      "parameter",
      "recvWindow",
      "addition",
      "also",
      "reject",
      "calculates",
      "that",
      "client",
      "more",
      "than",
      "one",
      "second",
      "future",
      "Regarding",
      "transaction",
      "timeliness",
      "Internet",
      "not",
      "reliable",
      "cannot",
      "completely",
      "relied",
      "upon",
      "your",
      "application",
      "local",
      "delay",
      "may",
      "jitter",
      "purpose",
      "setting",
      "you",
      "are",
      "engaged",
      "high",
      "trading",
      "have",
      "requirements",
      "flexibly",
      "set",
      "meet",
      "RecvWindow",
      "recommended",
      "algorithms",
      "method",
      "User",
      "calculation",
      "HSC",
      "based",
      "protocol",
      "where",
      "HmacSHA256",
      "used",
      "See",
      "specific",
      "supported",
      "protocols",
      "listed",
      "table",
      "below",
      "None"
    ],
    "url": "/docs/futures/Access Description/signStatement",
    "path": "futures/Access Description/signStatement.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "_futures_documentation_signsteps",
    "title": "Obtain Signature",
    "description": "",
    "content": "Example for http://fapi.xt.com/api/v1/public/symbol/detail?symbol=btc_usdt The following is an example of an order placed in a call interface using echo openssl and curl tools in a Linux bash environment. Appkey, secret for demonstration purposes only: appKey: 3976eb88-76d0-4f6e-a6b2-a57980770085 secretKey: bc6630d0231fda5cd98794f52c4998659beda290 Partial data of Header： validate-appkey: 3976eb88-76d0-4f6e-a6b2-a57980770085 validate-timestamp: 1641446237201 validate-algorithms: HmacSHA256 Request data： ` { type: 'LIMIT', timeInForce: 'GTC', side: 'BUY', symbol: 'btc_usdt', price: '39000', quantity: '2' } ` 1、Data path: Concatenate all values in the order in path. The restful path in the form of /test/{var1}/{var2}/ will be spliced according to the actual parameters filled in, for example: /sign/test/bb/aa query: Sorted by lexicographic order of key, concatenate all key=value. Example: userName=dfdfdf&password=ggg body: Json: Operate as JSON string is not converted or sorted. x-www-form-urlencoded: Sorted by lexicographic order of key, concatenate all key=value. Example: userName=dfdfdf&password=ggg form-data：Not supported. If there are multiple data forms, re-concatenate in the order of path, query, and body to obtain the concatenate value of all data. Example of Path: /future/api/v1/public/symbol/detail The above concatenated value is recorded as path Example 1: All parameters sent via query string symbol=btc_usdt&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1 The above concatenate value is recorded as query Example 2: All parameters send X-www-form-urlencoded request body string via the request body Request body string of json symbol=btc_usdt&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1 The above concatenate value is recorded as body Request body string of www-form-urlencoded {\"symbol\" : \"btc_usdt\",\"side\" : \"BUY\",\"type\":\"LIMIT\",\"timeInForce\":\"GTC\",\"quantity\":2,\"price\":39000} The above concatenate value is recorded as body Example 3: Mix to use query string and request body (form and json format) queryString: symbol=btc_usdt&side=BUY&type=LIMIT&timeInForce=GTC 上述拼接值记作 query requestBody: {\"quantity\":2,\"price\":39000} The above concatenate value is recorded as query The final concatenate value of the entire data is concatenated with path, query, and body and form #path, #query, and #body. The finalconcatenate value is recorded asY=#path#query#body。 Note: query without data, body with data:Y=#path#body query with data, body without data:Y=#path#query query with data, body with data:Y=#path#query#body 2:Request header X=”validate-appkey=3976eb88-76d0-4f6e-a6b2-a57980770085&validate-timestamp=1641446237201” 3:Obtain Signature Finally, record the string that needs to be encrypted as sign=XY Finally, encrypt the final concatenated value according to the following method to obtain a signature. signature=org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(secretkey, sign); Put the generated signature in the request header, with validate-signature as the key and singature as the value. 请求参数 | 名称 | 类型 | 必填 | 默认值 | 说明 | 范围 | | ------ | ---- | ---- | ------ | ---- | ---- | | None | | 否 | | | | 示例请求 更多示例",
    "keywords": [
      "obtain",
      "signature",
      "futures",
      "accessdescription",
      "signsteps",
      "mdx",
      "fapi",
      "api",
      "v1",
      "public",
      "symbol",
      "detail",
      "test",
      "sign",
      "bb",
      "aa",
      "future",
      "Example",
      "for",
      "http",
      "com",
      "btc_usdt",
      "The",
      "following",
      "example",
      "order",
      "placed",
      "call",
      "interface",
      "using",
      "echo",
      "openssl",
      "and",
      "curl",
      "tools",
      "Linux",
      "bash",
      "environment",
      "Appkey",
      "secret",
      "demonstration",
      "purposes",
      "only",
      "appKey",
      "a6b2",
      "a57980770085",
      "secretKey",
      "Partial",
      "data",
      "Header",
      "validate",
      "appkey",
      "timestamp",
      "algorithms",
      "HmacSHA256",
      "Request",
      "type",
      "LIMIT",
      "timeInForce",
      "GTC",
      "side",
      "BUY",
      "price",
      "quantity",
      "Data",
      "path",
      "Concatenate",
      "all",
      "values",
      "the",
      "restful",
      "form",
      "var1",
      "var2",
      "will",
      "spliced",
      "according",
      "actual",
      "parameters",
      "filled",
      "query",
      "Sorted",
      "lexicographic",
      "key",
      "concatenate",
      "value",
      "userName",
      "dfdfdf",
      "password",
      "ggg",
      "body",
      "Json",
      "Operate",
      "JSON",
      "string",
      "not",
      "converted",
      "sorted",
      "www",
      "urlencoded",
      "Not",
      "supported",
      "there",
      "are",
      "multiple",
      "forms",
      "Path",
      "above",
      "concatenated",
      "recorded",
      "All",
      "sent",
      "via",
      "send",
      "request",
      "json",
      "Mix",
      "use",
      "format",
      "queryString",
      "requestBody",
      "final",
      "entire",
      "with",
      "finalconcatenate",
      "asY",
      "Note",
      "without",
      "header",
      "Obtain",
      "Signature",
      "Finally",
      "record",
      "that",
      "needs",
      "encrypted",
      "encrypt",
      "method",
      "org",
      "apache",
      "commons",
      "codec",
      "digest",
      "HmacUtils",
      "hmacSha256Hex",
      "secretkey",
      "Put",
      "generated",
      "singature",
      "None"
    ],
    "url": "/docs/futures/Access Description/signSteps",
    "path": "futures/Access Description/signSteps.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "alter_Stop_Limit",
    "title": "Alter Stop Limit",
    "description": "",
    "content": "接口描述 POST /future/trade/v1/entrust/update-profit-stop Content-Type = application/x-www-form-urlencoded && application/json Limit Flow Rules 200/s/apikey 请求参数 | 名称 | 类型 | 必填 | 默认值 | 描述 | | ------------------ | ------- | ----- | ------ | ---------------- | | profitId | integer | true | N/A | Stop limit ID | | triggerProfitPrice | number | false | N/A | TP trigger price | | triggerStopPrice | number | false | N/A | SL trigger price | 响应示例 `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": {}, \"returnCode\": 0 } `",
    "keywords": [
      "alter",
      "stop",
      "limit",
      "futures",
      "entrust",
      "alter stop limit",
      "mdx",
      "future",
      "trade",
      "v1",
      "update-profit-stop",
      "x-www-form-urlencoded",
      "json",
      "apikey",
      "post",
      "POST",
      "update",
      "profit",
      "Content",
      "Type",
      "application",
      "www",
      "form",
      "urlencoded",
      "Limit",
      "Flow",
      "Rules",
      "profitId",
      "integer",
      "true",
      "Stop",
      "triggerProfitPrice",
      "number",
      "false",
      "trigger",
      "price",
      "triggerStopPrice",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/Alter Stop Limit",
    "path": "futures/Entrust/Alter Stop Limit.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "cancel_All_Stop_Limit",
    "title": "Cancel All Stop Limit",
    "description": "",
    "content": "接口描述 POST /future/trade/v1/stop/cancel-all Limit Flow Rules 200/s/apikey 响应示例 `json { \"error\": {\"code\": \"\", \"msg\": \"\"}, \"msgInfo\": \"\", \"result\": true, \"returnCode\": 0 } `",
    "keywords": [
      "cancel",
      "all",
      "stop",
      "limit",
      "futures",
      "entrust",
      "cancel all stop limit",
      "mdx",
      "future",
      "trade",
      "v1",
      "cancel-all",
      "apikey",
      "post",
      "POST",
      "Limit",
      "Flow",
      "Rules",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "true",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/Cancel All Stop Limit",
    "path": "futures/Entrust/Cancel All Stop Limit.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "cancel_Stop_Limit",
    "title": "Cancel Stop Limit",
    "description": "",
    "content": "接口描述 POST /future/trade/v1/stop/cancel Limit Flow Rules 200/s/apikey 响应示例 `json { \"error\": {\"code\": \"\", \"msg\": \"\"}, \"msgInfo\": \"\", \"result\": true, \"returnCode\": 0 } `",
    "keywords": [
      "cancel",
      "stop",
      "limit",
      "futures",
      "entrust",
      "cancel stop limit",
      "mdx",
      "future",
      "trade",
      "v1",
      "apikey",
      "post",
      "POST",
      "Limit",
      "Flow",
      "Rules",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "true",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/Cancel Stop Limit",
    "path": "futures/Entrust/Cancel Stop Limit.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "cancel_Trigger_Orders",
    "title": "Cancel Trigger Orders",
    "description": "",
    "content": "接口描述 POST /future/trade/v1/entrust/cancel Limit Flow Rules 200/s/apikey 参数 | 参数名 | 类型 | 是否必填 | 默认值 | 描述 | | --------- | ------ | -------- | ------ | ---------------- | | entrustId | string | true | N/A | Trigger Order ID | 响应示例 `json { \"error\": {\"code\": \"\", \"msg\": \"\"}, \"msgInfo\": \"\", \"result\": true, \"returnCode\": 0 } `",
    "keywords": [
      "cancel",
      "trigger",
      "orders",
      "futures",
      "entrust",
      "cancel trigger orders ",
      "mdx",
      "future",
      "trade",
      "v1",
      "apikey",
      "post",
      "POST",
      "Limit",
      "Flow",
      "Rules",
      "entrustId",
      "string",
      "true",
      "Trigger",
      "Order",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/Cancel Trigger Orders ",
    "path": "futures/Entrust/Cancel Trigger Orders .mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "cancelAllTrack",
    "title": "Cancel all track",
    "description": "",
    "content": "Description POST /future/trade/v1/entrust/cancel-all-track Content-Type: application/x-www-form-urlencoded Limit Flow Rules 200/s/apikey Response `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": {}, \"returnCode\": 0 } `",
    "keywords": [
      "cancel",
      "all",
      "track",
      "futures",
      "entrust",
      "cancel all track",
      "mdx",
      "future",
      "trade",
      "v1",
      "cancel-all-track",
      "x-www-form-urlencoded",
      "apikey",
      "post",
      "Description",
      "POST",
      "Content",
      "Type",
      "application",
      "www",
      "form",
      "urlencoded",
      "Limit",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/Cancel all track",
    "path": "futures/Entrust/Cancel all track.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Cancel_AllTrigger_Orders",
    "title": "Cancel All Trigger Orders",
    "description": "",
    "content": "接口描述 POST /future/trade/v1/entrust/cancel-all Limit Flow Rules 200/s/apikey 参数 | 参数名 | 类型 | 是否必填 | 默认值 | 描述 | | ------ | ------ | -------- | ------ | ------------ | | symbol | string | true | N/A | Trading Pair | 响应示例 `json { \"error\": {\"code\": \"\", \"msg\": \"\"}, \"msgInfo\": \"\", \"result\": true, \"returnCode\": 0 } `",
    "keywords": [
      "cancel",
      "all",
      "trigger",
      "orders",
      "futures",
      "entrust",
      "cancelalltriggerorders",
      "mdx",
      "future",
      "trade",
      "v1",
      "cancel-all",
      "apikey",
      "post",
      "POST",
      "Limit",
      "Flow",
      "Rules",
      "symbol",
      "string",
      "true",
      "Trading",
      "Pair",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/CancelAllTriggerOrders",
    "path": "futures/Entrust/CancelAllTriggerOrders.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "create_Stop_Limit",
    "title": "Create Stop Limit",
    "description": "",
    "content": "接口描述 POST /future/trade/v1/stop/create Limit Flow Rules 200/s/apikey 响应示例 `json { \"error\": {\"code\": \"\", \"msg\": \"\"}, \"msgInfo\": \"\", \"result\": {}, \"returnCode\": 0 } `",
    "keywords": [
      "create",
      "stop",
      "limit",
      "futures",
      "entrust",
      "create stop limit",
      "mdx",
      "future",
      "trade",
      "v1",
      "apikey",
      "post",
      "POST",
      "Limit",
      "Flow",
      "Rules",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/Create Stop Limit",
    "path": "futures/Entrust/Create Stop Limit.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "create_Trigger_Orders",
    "title": "Create Trigger Orders",
    "description": "",
    "content": "接口描述 POST /future/trade/v1/entrust/create Limit Flow Rules 200/s/apikey 参数 | 参数名 | 类型 | 是否必填 | 默认值 | 描述 | | ------ | ---- | -------- | ------ | ---- | | ... | ... | ... | ... | ... | 响应示例 `json { \"error\": {\"code\": \"\", \"msg\": \"\"}, \"msgInfo\": \"\", \"result\": {}, \"returnCode\": 0 } `",
    "keywords": [
      "create",
      "trigger",
      "orders",
      "futures",
      "entrust",
      "create trigger orders ",
      "mdx",
      "future",
      "trade",
      "v1",
      "apikey",
      "post",
      "POST",
      "Limit",
      "Flow",
      "Rules",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/Create Trigger Orders ",
    "path": "futures/Entrust/Create Trigger Orders .mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "create_Track",
    "title": "Create track",
    "description": "",
    "content": "接口描述 POST /future/trade/v1/entrust/create-track Content-Type = application/x-www-form-urlencoded Limit Flow Rules 200/s/apikey 请求参数 | 名称 | 类型 | 必填 | 默认值 | 描述 | | --- | --- | --- | --- | --- | | callback | string | true | N/A | Callback range configuration | | callbackVal | number | true | N/A | Callback value (greater than 0) | | orderSide | string | true | N/A | Order side (BUY / SELL) | | origQty | number | true | N/A | Original quantity (count) | | positionSide | string | true | N/A | Position side (BOTH / LONG / SHORT) | | positionType | string | true | N/A | Position type (CROSSED / ISOLATED) | | symbol | string | true | N/A | Trading pair | | triggerPriceType | string | true | N/A | Trigger price type (INDEX_PRICE / MARK_PRICE / LATEST_PRICE) | | activationPrice | number | false | N/A | Activation price | | clientMedia | string | false | N/A | Client media | | clientMediaChannel | string | false | N/A | Client media channel | | clientOrderId | string | false | N/A | Client order ID | | expireTime | integer | false | N/A | Expire time | 示例代码 ` { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": {}, \"returnCode\": 0 } `",
    "keywords": [
      "create",
      "track",
      "futures",
      "entrust",
      "create track",
      "mdx",
      "future",
      "trade",
      "v1",
      "create-track",
      "x-www-form-urlencoded",
      "apikey",
      "post",
      "POST",
      "Content",
      "Type",
      "application",
      "www",
      "form",
      "urlencoded",
      "Limit",
      "Flow",
      "Rules",
      "callback",
      "string",
      "true",
      "Callback",
      "range",
      "configuration",
      "callbackVal",
      "number",
      "value",
      "greater",
      "than",
      "orderSide",
      "Order",
      "side",
      "BUY",
      "SELL",
      "origQty",
      "Original",
      "quantity",
      "count",
      "positionSide",
      "Position",
      "BOTH",
      "LONG",
      "SHORT",
      "positionType",
      "type",
      "CROSSED",
      "ISOLATED",
      "symbol",
      "Trading",
      "pair",
      "triggerPriceType",
      "Trigger",
      "price",
      "INDEX_PRICE",
      "MARK_PRICE",
      "LATEST_PRICE",
      "activationPrice",
      "false",
      "Activation",
      "clientMedia",
      "Client",
      "media",
      "clientMediaChannel",
      "channel",
      "clientOrderId",
      "order",
      "expireTime",
      "integer",
      "Expire",
      "time",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/Create track",
    "path": "futures/Entrust/Create track.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Get_history_track_list(inactive)",
    "title": "Get history track list(inactive)",
    "description": "",
    "content": "Description GET /future/trade/v1/entrust/track-list-history Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | direction | string | false | NEXT | Direction (PREV: Previous page; NEXT: Next page) | PREV; NEXT | | limit | integer | false | 10 | Limit | | | id | integer | false | N/A | | | | endTime | integer | false | N/A | End time | | | startTime | integer | false | N/A | Start time | | | symbol | string | false | N/A | Symbol | | Limit Flow Rules 200/s/apikey Example (Java) `java public void getTrackDetail() { String text = HttpUtil.get(URL + \"/data/api/future/trade/v1/entrust/track-list-history\"); Response { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"hasNext\": true, // Is there a next page \"hasPre\": true, // Is there a previous page \"items\": [ { \"activationPrice\": 0, // Activation price \"avgPrice\": 0, // Average price \"callback\": \"\", // Callback range configuration 1: PROPORTION 2: FIXED \"callbackVal\": 0, // Callback value \"configActivation\": false, // Whether to configure activation price \"createdTime\": 0, // Create time \"currentPrice\": 0, // Real-time price, compared with the activation price and order price \"desc\": \"\", // Description \"executedQty\": 0, // Actual transaction quantity \"orderSide\": \"\", // Order side \"ordinary\": true, \"origQty\": 0, // Quantity (Cont) \"positionSide\": \"\", // Position side \"price\": 0, // Order price \"state\": \"\", // Order state: NOT_ACTIVATION, NOT_TRIGGERED, TRIGGERING, TRIGGERED, USER_REVOCATION, PLATFORM_REVOCATION, EXPIRED, DELEGATION_FAILED \"stopPrice\": 0, // Trigger price \"symbol\": \"\", // Symbol \"trackId\": 0, // Track id \"triggerPriceType\": \"\", // Trigger price type \"updatedTime\": 0 // Update time } ] }, \"returnCode\": 0 } `",
    "keywords": [
      "get",
      "history",
      "track",
      "list(inactive)",
      "futures",
      "entrust",
      "get history track list(inactive)",
      "mdx",
      "future",
      "trade",
      "v1",
      "track-list-history",
      "apikey",
      "data",
      "api",
      "Description",
      "GET",
      "list",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Ranges",
      "direction",
      "string",
      "false",
      "NEXT",
      "Direction",
      "PREV",
      "Previous",
      "page",
      "Next",
      "limit",
      "integer",
      "Limit",
      "endTime",
      "End",
      "time",
      "startTime",
      "Start",
      "symbol",
      "Symbol",
      "Flow",
      "Rules",
      "Example",
      "Java",
      "java",
      "public",
      "void",
      "getTrackDetail",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "hasNext",
      "true",
      "there",
      "next",
      "hasPre",
      "previous",
      "items",
      "activationPrice",
      "Activation",
      "price",
      "avgPrice",
      "Average",
      "callback",
      "Callback",
      "range",
      "configuration",
      "PROPORTION",
      "FIXED",
      "callbackVal",
      "value",
      "configActivation",
      "Whether",
      "configure",
      "activation",
      "createdTime",
      "Create",
      "currentPrice",
      "Real",
      "compared",
      "with",
      "the",
      "and",
      "order",
      "desc",
      "executedQty",
      "Actual",
      "transaction",
      "quantity",
      "orderSide",
      "Order",
      "side",
      "ordinary",
      "origQty",
      "Quantity",
      "Cont",
      "positionSide",
      "Position",
      "state",
      "NOT_ACTIVATION",
      "NOT_TRIGGERED",
      "TRIGGERING",
      "TRIGGERED",
      "USER_REVOCATION",
      "PLATFORM_REVOCATION",
      "EXPIRED",
      "DELEGATION_FAILED",
      "stopPrice",
      "Trigger",
      "trackId",
      "Track",
      "triggerPriceType",
      "type",
      "updatedTime",
      "Update",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/Get history track list(inactive)",
    "path": "futures/Entrust/Get history track list(inactive).mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "getSingleTrackDetail",
    "title": "Get single track detail",
    "description": "",
    "content": "Description GET /future/trade/v1/entrust/track-detail Limit Flow Rules 200/s/apikey Parameters | Name | Type | Mandatory | Default | Description | | ------- | ------- | --------- | ------- | ----------- | | trackId | integer | true | N/A | Track id | Example Code `java public void getTrackDetail() { String text = HttpUtil.get(URL + \"/data/api/future/trade/v1/entrust/track-detail\"); System.out.println(text); } ###c Response Example { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"activationPrice\": 0, // Activation price \"avgPrice\": 0, // Average price \"callback\": \"\", // Callback range configuration 1:PROPORTION 2:FIXED \"callbackVal\": 0, // Callback value \"configActivation\": false, // Whether to configure activation price \"createdTime\": 0, // Create time \"currentPrice\": 0, // Real-time price, compared with activation price and order price, to determine activation direction \"desc\": \"\", // Description \"executedQty\": 0, // Actual transaction quantity \"orderSide\": \"\", // Order side \"ordinary\": true, // Ordinary \"origQty\": 0, // Quantity (Cont) \"positionSide\": \"\", // Position side \"price\": 0, // Order price \"state\": \"\", // Order state: NOT_ACTIVATION; NOT_TRIGGERED; TRIGGERING; TRIGGERED; USER_REVOCATION; PLATFORM_REVOCATION; EXPIRED; DELEGATION_FAILED \"stopPrice\": 0, // Trigger price \"symbol\": \"\", // Symbol \"trackId\": 0, // Track id \"triggerPriceType\": \"\", // Trigger price type \"updatedTime\": 0 // Update time }, \"returnCode\": 0 } `",
    "keywords": [
      "get",
      "single",
      "track",
      "detail",
      "futures",
      "entrust",
      "get single track detail",
      "mdx",
      "future",
      "trade",
      "v1",
      "track-detail",
      "apikey",
      "data",
      "api",
      "Description",
      "GET",
      "Limit",
      "Flow",
      "Rules",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "trackId",
      "integer",
      "true",
      "Track",
      "Example",
      "Code",
      "java",
      "public",
      "void",
      "getTrackDetail",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "System",
      "out",
      "println",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "activationPrice",
      "Activation",
      "price",
      "avgPrice",
      "Average",
      "callback",
      "Callback",
      "range",
      "configuration",
      "PROPORTION",
      "FIXED",
      "callbackVal",
      "value",
      "configActivation",
      "false",
      "Whether",
      "configure",
      "activation",
      "createdTime",
      "Create",
      "time",
      "currentPrice",
      "Real",
      "compared",
      "with",
      "and",
      "order",
      "determine",
      "direction",
      "desc",
      "executedQty",
      "Actual",
      "transaction",
      "quantity",
      "orderSide",
      "Order",
      "side",
      "ordinary",
      "Ordinary",
      "origQty",
      "Quantity",
      "Cont",
      "positionSide",
      "Position",
      "state",
      "NOT_ACTIVATION",
      "NOT_TRIGGERED",
      "TRIGGERING",
      "TRIGGERED",
      "USER_REVOCATION",
      "PLATFORM_REVOCATION",
      "EXPIRED",
      "DELEGATION_FAILED",
      "stopPrice",
      "Trigger",
      "symbol",
      "Symbol",
      "triggerPriceType",
      "type",
      "updatedTime",
      "Update",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/Get single track detail",
    "path": "futures/Entrust/Get single track detail.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "getTrackList",
    "title": "Get track list (all active)",
    "description": "",
    "content": "Description GET /future/trade/v1/entrust/track-list Limit Flow Rules 200/s/apikey Parameters | Name | Type | Mandatory | Default | Description | | --------- | ------- | --------- | ------- | ------------------------- | | page | integer | false | 1 | Page | | size | integer | false | 10 | Quantity of a single page | | endTime | integer | false | N/A | End time | | startTime | integer | false | N/A | Start time | | symbol | string | false | N/A | Symbol | Example Code `java public void getTrackDetail() { String text = HttpUtil.get(URL + \"/data/api/future/trade/v1/entrust/track-list\"); System.out.println(text); } ###Example Code { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"items\": [ { \"activationPrice\": 0, // Activation price \"avgPrice\": 0, // Average price \"callback\": \"\", // Callback range configuration: PROPORTION or FIXED \"callbackVal\": 0, // Callback value \"configActivation\": false, // Whether to configure activation price \"createdTime\": 0, // Create time \"currentPrice\": 0, // Real-time price, compared with activation and order price \"desc\": \"\", // Description \"executedQty\": 0, // Actual transaction quantity \"orderSide\": \"\", // Order side \"ordinary\": true, // Ordinary \"origQty\": 0, // Quantity (Cont) \"positionSide\": \"\", // Position side \"price\": 0, // Order price \"state\": \"\", // Order state: NOT_ACTIVATION; NOT_TRIGGERED; TRIGGERING; TRIGGERED; USER_REVOCATION; PLATFORM_REVOCATION; EXPIRED; DELEGATION_FAILED \"stopPrice\": 0, // Trigger price \"symbol\": \"\", // Symbol \"trackId\": 0, // Track id \"triggerPriceType\": \"\", // Trigger price type \"updatedTime\": 0 // Update time } ], \"page\": 1, // Page \"ps\": 10, // Page size \"total\": 20 // Total }, \"returnCode\": 0 } `",
    "keywords": [
      "get",
      "track",
      "list",
      "(all",
      "active)",
      "futures",
      "entrust",
      "get track list(all active)",
      "mdx",
      "future",
      "trade",
      "v1",
      "track-list",
      "apikey",
      "data",
      "api",
      "Description",
      "GET",
      "Limit",
      "Flow",
      "Rules",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "page",
      "integer",
      "false",
      "Page",
      "size",
      "Quantity",
      "single",
      "endTime",
      "End",
      "time",
      "startTime",
      "Start",
      "symbol",
      "string",
      "Symbol",
      "Example",
      "Code",
      "java",
      "public",
      "void",
      "getTrackDetail",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "System",
      "out",
      "println",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "items",
      "activationPrice",
      "Activation",
      "price",
      "avgPrice",
      "Average",
      "callback",
      "Callback",
      "range",
      "configuration",
      "PROPORTION",
      "FIXED",
      "callbackVal",
      "value",
      "configActivation",
      "Whether",
      "configure",
      "activation",
      "createdTime",
      "Create",
      "currentPrice",
      "Real",
      "compared",
      "with",
      "and",
      "order",
      "desc",
      "executedQty",
      "Actual",
      "transaction",
      "quantity",
      "orderSide",
      "Order",
      "side",
      "ordinary",
      "true",
      "Ordinary",
      "origQty",
      "Cont",
      "positionSide",
      "Position",
      "state",
      "NOT_ACTIVATION",
      "NOT_TRIGGERED",
      "TRIGGERING",
      "TRIGGERED",
      "USER_REVOCATION",
      "PLATFORM_REVOCATION",
      "EXPIRED",
      "DELEGATION_FAILED",
      "stopPrice",
      "Trigger",
      "trackId",
      "Track",
      "triggerPriceType",
      "type",
      "updatedTime",
      "Update",
      "total",
      "Total",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/Get track list(all active)",
    "path": "futures/Entrust/Get track list(all active).mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "see_Stop_Limit_History",
    "title": "See Stop Limit History",
    "description": "",
    "content": "接口描述 GET /future/trade/v1/stop/history Limit Flow Rules 200/s/apikey 响应示例 `json { \"error\": {\"code\": \"\", \"msg\": \"\"}, \"msgInfo\": \"\", \"result\": {\"items\": []}, \"returnCode\": 0 } `",
    "keywords": [
      "see",
      "stop",
      "limit",
      "history",
      "futures",
      "entrust",
      "see stop limit history",
      "mdx",
      "future",
      "trade",
      "v1",
      "apikey",
      "get",
      "GET",
      "Limit",
      "Flow",
      "Rules",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "items",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/See Stop Limit History",
    "path": "futures/Entrust/See Stop Limit History.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "see_Stop_Limit_Profit_Detail",
    "title": "See Stop Limit base on ProfitId",
    "description": "",
    "content": "接口描述 GET /future/trade/v1/entrust/profit-detail Limit Flow Rules 200/s/apikey 请求参数 | 名称 | 类型 | 必填 | 默认值 | 描述 | | -------- | ------- | ---- | ------ | ------------- | | profitId | integer | true | N/A | Stop limit ID | 示例代码 `java public void getMarketConfig() { String text = HttpUtil.get(URL + \"/data/api/future/trade/v1/getMarketConfig\"); System.out.println(text); } { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"createdTime\": 0, \"entryPrice\": 0, \"executedQty\": 0, \"isolatedMargin\": 0, \"origQty\": 0, \"positionSide\": \"\", \"positionSize\": 0, \"profitId\": 0, \"state\": \"\", \"symbol\": \"\", \"triggerProfitPrice\": 0, \"triggerStopPrice\": 0 }, \"returnCode\": 0 } `",
    "keywords": [
      "see",
      "stop",
      "limit",
      "base",
      "on",
      "profitid",
      "futures",
      "entrust",
      "see stop limit base on profitld",
      "mdx",
      "future",
      "trade",
      "v1",
      "profit-detail",
      "apikey",
      "data",
      "api",
      "getMarketConfig",
      "get",
      "GET",
      "profit",
      "detail",
      "Limit",
      "Flow",
      "Rules",
      "profitId",
      "integer",
      "true",
      "Stop",
      "java",
      "public",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "System",
      "out",
      "println",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "createdTime",
      "entryPrice",
      "executedQty",
      "isolatedMargin",
      "origQty",
      "positionSide",
      "positionSize",
      "state",
      "symbol",
      "triggerProfitPrice",
      "triggerStopPrice",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/See Stop Limit base on Profitld",
    "path": "futures/Entrust/See Stop Limit base on Profitld.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "cancel_Single_Track",
    "title": "Cancel single track",
    "description": "",
    "content": "Description POST /future/trade/v1/entrust/cancel-track Content-Type = application/x-www-form-urlencoded Limit Flow Rules 200/s/apikey Parameters | Name | Type | Mandatory | Default | Description | | ------- | ------- | --------- | ------- | ----------- | | trackId | integer | true | N/A | Track id | Example Code ` { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": {}, \"returnCode\": 0 } `",
    "keywords": [
      "cancel",
      "single",
      "track",
      "futures",
      "entrust",
      "see stop limit",
      "mdx",
      "future",
      "trade",
      "v1",
      "cancel-track",
      "x-www-form-urlencoded",
      "apikey",
      "post",
      "Description",
      "POST",
      "Content",
      "Type",
      "application",
      "www",
      "form",
      "urlencoded",
      "Limit",
      "Flow",
      "Rules",
      "Parameters",
      "Name",
      "Mandatory",
      "Default",
      "trackId",
      "integer",
      "true",
      "Track",
      "Example",
      "Code",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/See Stop Limit",
    "path": "futures/Entrust/See Stop Limit.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "see_Trigger_Orders_History",
    "title": "See Trigger Orders History",
    "description": "",
    "content": "接口描述 GET /future/trade/v1/entrust/history Limit Flow Rules 200/s/apikey 响应示例 `json { \"error\": {\"code\": \"\", \"msg\": \"\"}, \"msgInfo\": \"\", \"result\": {\"items\": []}, \"returnCode\": 0 } `",
    "keywords": [
      "see",
      "trigger",
      "orders",
      "history",
      "futures",
      "entrust",
      "see trigger orders history",
      "mdx",
      "future",
      "trade",
      "v1",
      "apikey",
      "get",
      "GET",
      "Limit",
      "Flow",
      "Rules",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "items",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/See Trigger Orders History",
    "path": "futures/Entrust/See Trigger Orders History.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "see_Trigger_Orders_ById",
    "title": "See Trigger Orders base on EntrustId",
    "description": "",
    "content": "接口描述 GET /future/trade/v1/entrust/detail Limit Flow Rules 200/s/apikey 响应示例 `json { \"error\": {\"code\": \"\", \"msg\": \"\"}, \"msgInfo\": \"\", \"result\": {\"entrustId\": \"\"}, \"returnCode\": 0 } `",
    "keywords": [
      "see",
      "trigger",
      "orders",
      "base",
      "on",
      "entrustid",
      "futures",
      "entrust",
      "see trigger orders base on entrustid ",
      "mdx",
      "future",
      "trade",
      "v1",
      "detail",
      "apikey",
      "get",
      "GET",
      "Limit",
      "Flow",
      "Rules",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "entrustId",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/See Trigger Orders base on EntrustId ",
    "path": "futures/Entrust/See Trigger Orders base on EntrustId .mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "see_Trigger_Orders",
    "title": "See Trigger Orders",
    "description": "",
    "content": "接口描述 GET /future/trade/v1/entrust/list Limit Flow Rules 200/s/apikey 响应示例 `json { \"error\": {\"code\": \"\", \"msg\": \"\"}, \"msgInfo\": \"\", \"result\": {\"items\": []}, \"returnCode\": 0 } `",
    "keywords": [
      "see",
      "trigger",
      "orders",
      "futures",
      "entrust",
      "see trigger orders",
      "mdx",
      "future",
      "trade",
      "v1",
      "list",
      "apikey",
      "get",
      "GET",
      "Limit",
      "Flow",
      "Rules",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "items",
      "returnCode"
    ],
    "url": "/docs/futures/Entrust/See Trigger Orders",
    "path": "futures/Entrust/See Trigger Orders.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "index",
    "title": "合约委托接口",
    "description": "合约交易委托相关接口，包括下单、撤单、查询等功能",
    "content": "合约委托接口 合约交易委托相关接口提供了完整的合约交易委托管理功能，包括创建、取消、查询等操作。 主要功能 📋 委托管理 创建追踪委托 取消单个追踪委托 取消所有追踪委托 查询委托详情 📊 计划委托 创建计划委托 取消计划委托 批量取消计划委托 查询计划委托 💰 止盈止损 创建止盈止损 取消止盈止损 批量取消止盈止损 修改止盈止损 接口列表 追踪委托相关 创建追踪委托 - 创建新的追踪委托订单 取消单个追踪委托 - 取消指定的追踪委托 取消所有追踪委托 - 取消所有活跃的追踪委托 查询追踪委托详情 - 获取追踪委托的详细信息 查询追踪委托列表 - 获取所有追踪委托列表 查询追踪委托历史 - 获取历史追踪委托记录 计划委托相关 创建计划委托 - 创建新的计划委托订单 取消计划委托 - 取消指定的计划委托 批量取消计划委托 - 批量取消计划委托 查询计划委托 - 获取计划委托列表 根据 ID 查询计划委托 - 根据 ID 获取计划委托详情 查询计划委托历史 - 获取历史计划委托记录 止盈止损相关 创建止盈止损 - 创建新的止盈止损订单 取消止盈止损 - 取消指定的止盈止损 批量取消止盈止损 - 批量取消止盈止损 修改止盈止损 - 修改止盈止损参数 查询止盈止损 - 获取止盈止损列表 根据 ID 查询止盈止损 - 根据 ID 获取止盈止损详情 注意事项 权限要求：所有委托接口都需要有效的 API 密钥和签名 频率限制：大部分接口限制为 200 次/秒/API 密钥 参数验证：请确保传入的参数符合接口要求 错误处理：请根据返回的错误码进行相应的错误处理 快速开始 首先确保您已经申请了 API 密钥 了解基础信息和签名算法 查看具体接口的请求参数和响应格式 在测试环境中验证接口调用 更多详细信息请参考各个具体接口的文档。",
    "keywords": [
      "合约委托接口",
      "合约交易委托相关接口，包括下单、撤单、查询等功能",
      "futures",
      "entrust",
      "index",
      "mdx",
      "API"
    ],
    "url": "/docs/futures/Entrust/index",
    "path": "futures/Entrust/index.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-aggregated-market-information-for-all-trading-pairs",
    "title": "Get Aggregated Market Information for All Trading Pairs",
    "description": "",
    "content": "/future/market/v1/public/q/agg-tickers > Note：This method does not require a signature. import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [ { \"a\": \"\", // 24h volume \"ap\": \"\", // ask price \"bp\": \"\", // bid price \"c\": \"\", // Latest price \"h\": \"\", // Highest price in 24 hours \"i\": \"\", // index price \"l\": \"\", // Lowest price in 24 hours \"m\": \"\", // mark price \"o\": \"\", // The first transaction price 24 hours ago \"r\": \"\", // 24h price fluctuation limit \"s\": \"\", // Trading pair \"t\": 0, // Time \"v\": \"\" // 24h Turnover } ], \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "aggregated",
      "market",
      "information",
      "for",
      "all",
      "trading",
      "pairs",
      "futures",
      "market data",
      "get aggregated market information for all trading pairs",
      "mdx",
      "future",
      "v1",
      "public",
      "agg-tickers",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "agg",
      "tickers",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "volume",
      "ask",
      "price",
      "bid",
      "Latest",
      "Highest",
      "hours",
      "index",
      "Lowest",
      "mark",
      "The",
      "first",
      "transaction",
      "ago",
      "fluctuation",
      "limit",
      "Trading",
      "pair",
      "Time",
      "Turnover",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Aggregated Market Information for All Trading Pairs",
    "path": "futures/Market data/Get Aggregated Market Information for All Trading Pairs.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-aggregated-market-information-for-specific-trading-pair",
    "title": "Get Aggregated Market Information for Specific Trading Pair",
    "description": "",
    "content": "/future/market/v1/public/q/agg-ticker > Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------ | ------ | --------- | ------- | ------------ | ------ | | symbol | string | true | N/A | Trading pair | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"a\": \"\", // 24h volume \"ap\": \"\", // ask price \"bp\": \"\", // bid price \"c\": \"\", // Latest price \"h\": \"\", // Highest price in 24 hours \"i\": \"\", // index price \"l\": \"\", // Lowest price in 24 hours \"m\": \"\", // mark price \"o\": \"\", // The first transaction price 24 hours ago \"r\": \"\", // 24h price fluctuation limit \"s\": \"\", // Trading pair \"t\": 0, // Time \"v\": \"\" // 24h Turnover }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "aggregated",
      "market",
      "information",
      "for",
      "specific",
      "trading",
      "pair",
      "futures",
      "market data",
      "get aggregated market information for specific trading pair ",
      "mdx",
      "future",
      "v1",
      "public",
      "agg-ticker",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "agg",
      "ticker",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "symbol",
      "string",
      "true",
      "Trading",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "volume",
      "ask",
      "price",
      "bid",
      "Latest",
      "Highest",
      "hours",
      "index",
      "Lowest",
      "mark",
      "The",
      "first",
      "transaction",
      "ago",
      "fluctuation",
      "limit",
      "Time",
      "Turnover",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Aggregated Market Information for Specific Trading Pair ",
    "path": "futures/Market data/Get Aggregated Market Information for Specific Trading Pair .mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-ask-bid-market-information-for-all-trading-pairs",
    "title": "Get Ask Bid Market Information for All Trading Pairs",
    "description": "",
    "content": "/future/market/v1/public/q/ticker/books > Note：This method does not require a signature. import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getTickerBokk() { String text = HttpUtil.get(URL + \"/data/api//future/market/v1/public/q/ticker/books?symbol=btc_usdt\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [ { \"ap\": \"\", // ask price \"aq\": \"\", // ask amount \"bp\": \"\", // bid price \"bq\": \"\", // bid amount \"s\": \"\", // Trading pair \"t\": 0 // Time } ], \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "ask",
      "bid",
      "market",
      "information",
      "for",
      "all",
      "trading",
      "pairs",
      "futures",
      "market data",
      "get ask bid market information for all trading pairs",
      "mdx",
      "future",
      "v1",
      "public",
      "ticker",
      "books",
      "CodeBlock",
      "data",
      "api",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "getTickerBokk",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "symbol",
      "btc_usdt",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "price",
      "amount",
      "Trading",
      "pair",
      "Time",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Ask Bid Market Information for All Trading Pairs",
    "path": "futures/Market data/Get Ask Bid Market Information for All Trading Pairs.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-ask-bid-market-information-for-specific-trading-pair",
    "title": "Get Ask Bid Market Information for Specific Trading Pair",
    "description": "",
    "content": "/future/market/v1/public/q/ticker/book > Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------ | ------ | --------- | ------- | ------------ | ------ | | symbol | string | true | N/A | Trading pair | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getTickerBokk() { String text = HttpUtil.get(URL + \"/data/api//future/market/v1/public/q/ticker/book?symbol=btc_usdt\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"ap\": \"\", // ask price \"aq\": \"\", // ask amount \"bp\": \"\", // bid price \"bq\": \"\", // bid amount \"s\": \"\", // Trading pair \"t\": 0 // Time }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "ask",
      "bid",
      "market",
      "information",
      "for",
      "specific",
      "trading",
      "pair",
      "futures",
      "market data",
      "get ask bid market information for specific trading pair",
      "mdx",
      "future",
      "v1",
      "public",
      "ticker",
      "book",
      "CodeBlock",
      "data",
      "api",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "symbol",
      "string",
      "true",
      "Trading",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "getTickerBokk",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "price",
      "amount",
      "Time",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Ask Bid Market Information for Specific Trading Pair",
    "path": "futures/Market data/Get Ask Bid Market Information for Specific Trading Pair.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-configuration-information-for-listed-and-tradeable-symbols",
    "title": "Get Configuration Information for Listed And Tradeable Symbols",
    "description": "",
    "content": "/future/market/v3/public/symbol/list > Note：This method does not require a signature. import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [ { \"baseCoin\": \"\", //Target Assets \"baseCoinDisplayPrecision\": 0, //Displayed target currency precision \"cnDesc\": \"\", //Chinese description of the contract \"cnName\": \"\", //Contract Chinese name \"cnRemark\": \"\", //Contract Remarks (Chinese) \"contractSize\": 0, //Contract multiplier(face value) \"contractType\": \"\", //Contract type, perpetual, delivery \"deliveryCompletion\": false, \"deliveryDate\": 0, \"deliveryPrice\": 0, \"depthPrecisionMerge\": 0, \"enDesc\": \"\", \"enName\": \"\", \"enRemark\": \"\", \"initLeverage\": 0, \"initPositionType\": \"\", \"isDisplay\": false, \"isOpenApi\": false, \"labels\": [], \"liquidationFee\": 0, \"makerFee\": 0, \"marketTakeBound\": 0, \"maxEntrusts\": 0, \"maxNotional\": 0, \"maxOpenOrders\": 0, \"maxPrice\": 0, \"minNotional\": 0, \"minPrice\": 0, \"minQty\": 0, \"minStepPrice\": 0, \"multiplierDown\": 0, \"multiplierUp\": 0, \"onboardDate\": 0, \"pair\": \"\", \"plates\": [], \"predictEventParam\": \"\", \"predictEventSort\": \"\", \"predictEventType\": \"\", \"pricePrecision\": 0, \"productType\": \"\", \"quantityPrecision\": 0, // Deprecated \"quoteCoin\": \"\", \"quoteCoinDisplayPrecision\": 0, \"quoteCoinPrecision\": 0, \"baseCoinPrecision\": 0, \"state\": 0, \"supportEntrustType\": \"\", \"supportOrderType\": \"\", \"supportPositionType\": \"\", \"supportTimeInForce\": \"\", \"symbol\": \"\", \"symbolGroupId\": 0, \"takerFee\": 0, \"tradeSwitch\": false, \"underlyingType\": \"\" } ], \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "configuration",
      "information",
      "for",
      "listed",
      "and",
      "tradeable",
      "symbols",
      "futures",
      "market data",
      "get configuration information for listed and tradeable symbols",
      "mdx",
      "future",
      "market",
      "v3",
      "public",
      "symbol",
      "list",
      "CodeBlock",
      "data",
      "api",
      "v1",
      "getKLine",
      "Target",
      "Displayed",
      "Chinese",
      "Contract",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "baseCoin",
      "Assets",
      "target",
      "currency",
      "precision",
      "cnDesc",
      "description",
      "the",
      "contract",
      "cnName",
      "name",
      "cnRemark",
      "Remarks",
      "contractSize",
      "multiplier",
      "face",
      "value",
      "contractType",
      "perpetual",
      "delivery",
      "deliveryCompletion",
      "false",
      "deliveryDate",
      "deliveryPrice",
      "depthPrecisionMerge",
      "enDesc",
      "enName",
      "enRemark",
      "initLeverage",
      "initPositionType",
      "isDisplay",
      "isOpenApi",
      "labels",
      "liquidationFee",
      "makerFee",
      "marketTakeBound",
      "maxEntrusts",
      "maxNotional",
      "maxOpenOrders",
      "maxPrice",
      "minNotional",
      "minPrice",
      "minQty",
      "minStepPrice",
      "multiplierDown",
      "multiplierUp",
      "onboardDate",
      "pair",
      "plates",
      "predictEventParam",
      "predictEventSort",
      "predictEventType",
      "pricePrecision",
      "productType",
      "quantityPrecision",
      "Deprecated",
      "quoteCoin",
      "quoteCoinPrecision",
      "baseCoinPrecision",
      "state",
      "supportEntrustType",
      "supportOrderType",
      "supportPositionType",
      "supportTimeInForce",
      "symbolGroupId",
      "takerFee",
      "tradeSwitch",
      "underlyingType",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Configuration Information for Listed And Tradeable Symbols",
    "path": "futures/Market data/Get Configuration Information for Listed And Tradeable Symbols.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-configuration-information-for-single-trading-pair",
    "title": "Get Configuration Information for Single Trading Pair",
    "description": "",
    "content": "/future/market/v1/public/symbol/detail > Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------ | ------ | --------- | ------- | ------------ | ------ | | symbol | string | true | N/A | Trading pair | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"baseCoin\": \"\", //Target Assets \"baseCoinDisplayPrecision\": 0, //Displayed target currency precision \"baseCoinPrecision\": 0, //Target currency precision \"cnDesc\": \"\", //Chinese description of the contract \"cnName\": \"\", //Contract Chinese name \"cnRemark\": \"\", //Contract Remarks (Chinese) \"contractSize\": 0, //Contract multiplier(face value) \"contractType\": \"\", //Contract type, perpetual, delivery \"deliveryCompletion\": false, //Whether the delivery is completed \"deliveryDate\": 0, //delivery time \"deliveryPrice\": 0, //delivery price \"depthPrecisionMerge\": 0, //Handicap Precision Consolidation \"enDesc\": \"\", //English description of the contract \"enName\": \"\", //Contract English name \"enRemark\": \"\", //Contract Remarks (English) \"initLeverage\": 0, //Initial leverage \"initPositionType\": \"\", //Initial position type \"isDisplay\": false, //whether to display \"isOpenApi\": false, //Whether to support OpenApi \"labels\": [], //Label \"liquidationFee\": 0, //Forced liquidation fee \"makerFee\": 0, //Maker fee \"marketTakeBound\": 0, //Market order maximum price deviation \"maxEntrusts\": 0, //Maximum active orders \"maxNotional\": 0, //Maximum Notional Value \"maxOpenOrders\": 0, //Maximum open orders \"maxPrice\": 0, //Maximum price \"minNotional\": 0, //Minimum notional value \"minPrice\": 0, //Minimum price \"minQty\": 0, //Minimum quantity \"minStepPrice\": 0, //Smallest tick \"multiplierDown\": 0, //Floor percentage of sell limit order \"multiplierUp\": 0, //Cap percentage of buy limit order \"onboardDate\": 0, //List time \"pair\": \"\", //Target trading pair \"plates\": [], \"predictEventParam\": \"\", //Event Correlation Parameters \"predictEventSort\": \"\", //Event Correlation Sorting \"predictEventType\": \"\", //Forecast event type \"pricePrecision\": 0, //Price precision \"productType\": \"\", //Contract type \"quantityPrecision\": 0, //Quantity precision \"quoteCoin\": \"\", //Quote currency \"quoteCoinDisplayPrecision\": 0, \"quoteCoinPrecision\": 0, \"state\": 0, \"supportEntrustType\": \"\", \"supportOrderType\": \"\", \"supportPositionType\": \"\", \"supportTimeInForce\": \"\", \"symbol\": \"\", \"symbolGroupId\": 0, \"takerFee\": 0, \"tradeSwitch\": false, \"underlyingType\": \"\" }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "configuration",
      "information",
      "for",
      "single",
      "trading",
      "pair",
      "futures",
      "market data",
      "get configuration information for single trading pair",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "symbol",
      "detail",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "Target",
      "Displayed",
      "Chinese",
      "Contract",
      "Whether",
      "delivery",
      "Handicap",
      "English",
      "Initial",
      "whether",
      "Label",
      "Forced",
      "Maker",
      "Market",
      "Maximum",
      "Minimum",
      "Smallest",
      "Floor",
      "Cap",
      "List",
      "Event",
      "Forecast",
      "Price",
      "Quantity",
      "Quote",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "string",
      "true",
      "Trading",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "baseCoin",
      "Assets",
      "target",
      "currency",
      "precision",
      "baseCoinPrecision",
      "cnDesc",
      "description",
      "the",
      "contract",
      "cnName",
      "name",
      "cnRemark",
      "Remarks",
      "contractSize",
      "multiplier",
      "face",
      "value",
      "contractType",
      "perpetual",
      "deliveryCompletion",
      "false",
      "completed",
      "deliveryDate",
      "time",
      "deliveryPrice",
      "price",
      "depthPrecisionMerge",
      "Precision",
      "Consolidation",
      "enDesc",
      "enName",
      "enRemark",
      "initLeverage",
      "leverage",
      "initPositionType",
      "position",
      "isDisplay",
      "display",
      "isOpenApi",
      "support",
      "OpenApi",
      "labels",
      "liquidationFee",
      "liquidation",
      "fee",
      "makerFee",
      "marketTakeBound",
      "order",
      "maximum",
      "deviation",
      "maxEntrusts",
      "active",
      "orders",
      "maxNotional",
      "Notional",
      "Value",
      "maxOpenOrders",
      "open",
      "maxPrice",
      "minNotional",
      "notional",
      "minPrice",
      "minQty",
      "quantity",
      "minStepPrice",
      "tick",
      "multiplierDown",
      "percentage",
      "sell",
      "limit",
      "multiplierUp",
      "buy",
      "onboardDate",
      "plates",
      "predictEventParam",
      "Correlation",
      "predictEventSort",
      "Sorting",
      "predictEventType",
      "event",
      "pricePrecision",
      "productType",
      "quantityPrecision",
      "quoteCoin",
      "quoteCoinPrecision",
      "state",
      "supportEntrustType",
      "supportOrderType",
      "supportPositionType",
      "supportTimeInForce",
      "symbolGroupId",
      "takerFee",
      "tradeSwitch",
      "underlyingType",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Configuration Information for Single Trading Pair",
    "path": "futures/Market data/Get Configuration Information for Single Trading Pair.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-depth-data-of-trading-pairs",
    "title": "Get Depth Data of Trading Pairs",
    "description": "",
    "content": "/future/market/v1/public/q/depth Limit Flow Rules 10/s/ip <br />> Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------ | ------- | --------- | ------- | --------------------- | ------ | | symbol | string | true | N/A | Trading pair | | | level | integer | true | N/A | Level (min:1, max:50) | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"a\": [], // Buy \"b\": [], // Sell \"s\": \"\", // Trading pair \"t\": 0, // Time \"u\": 0 // updateId }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "depth",
      "data",
      "of",
      "trading",
      "pairs",
      "futures",
      "market data",
      "get depth data of trading pairs",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "ip",
      "CodeBlock",
      "api",
      "getKLine",
      "Limit",
      "Flow",
      "Rules",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "symbol",
      "string",
      "true",
      "Trading",
      "pair",
      "level",
      "integer",
      "Level",
      "min",
      "max",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "Buy",
      "Sell",
      "Time",
      "updateId",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Depth Data of Trading Pairs",
    "path": "futures/Market data/Get Depth Data of Trading Pairs.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-funding-rate-information",
    "title": "Get Funding Rate Information",
    "description": "",
    "content": "/future/market/v1/public/q/funding-rate Limit Flow Rules 1/s/ip <br />> Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------ | ------ | --------- | ------- | ------------ | ------ | | symbol | string | true | N/A | Trading pair | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"hasNext\": false, // Is there a next page \"hasPrev\": false, // Is there a previous page \"items\": [ // Datasheets { \"collectionInternal\": 0, // Billing Cycle (hour) \"createdTime\": 0, // Time \"fundingRate\": 0, // Latest funding rate \"id\": 0, // id \"symbol\": \"\" // Trading pair } ] }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "funding",
      "rate",
      "information",
      "futures",
      "market data",
      "get funding rate information",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "funding-rate",
      "ip",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "Limit",
      "Flow",
      "Rules",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "symbol",
      "string",
      "true",
      "Trading",
      "pair",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "hasNext",
      "false",
      "there",
      "next",
      "page",
      "hasPrev",
      "previous",
      "items",
      "Datasheets",
      "collectionInternal",
      "Billing",
      "Cycle",
      "hour",
      "createdTime",
      "Time",
      "fundingRate",
      "Latest",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Funding Rate Information",
    "path": "futures/Market data/Get Funding Rate Information.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-funding-rate-records",
    "title": "Get Funding Rate Records",
    "description": "",
    "content": "/future/market/v1/public/q/funding-rate-record > Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | symbol | string | false | N/A | Trading pair | | | direction | string | false | NEXT | Direction (PREV: Previous page; NEXT: Next page) | PREV;NEXT | | id | integer | false | N/A | id | | | limit | integer | false | 10 | Limit | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"hasNext\": false, // Is there a next page \"hasPrev\": false, // Is there a previous page \"items\": [ // Datasheets { \"collectionInternal\": 0, // Billing Cycle (second) \"createdTime\": 0, // Time \"fundingRate\": 0, // Latest funding rate \"id\": 0, // id \"symbol\": \"\" // Trading pair } ] }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "funding",
      "rate",
      "records",
      "futures",
      "market data",
      "get funding rate records",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "funding-rate-record",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "record",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "symbol",
      "string",
      "false",
      "Trading",
      "pair",
      "direction",
      "NEXT",
      "Direction",
      "PREV",
      "Previous",
      "page",
      "Next",
      "integer",
      "limit",
      "Limit",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "hasNext",
      "there",
      "next",
      "hasPrev",
      "previous",
      "items",
      "Datasheets",
      "collectionInternal",
      "Billing",
      "Cycle",
      "second",
      "createdTime",
      "Time",
      "fundingRate",
      "Latest",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Funding Rate Records",
    "path": "futures/Market data/Get Funding Rate Records.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-index-price-for-all-trading-pairs",
    "title": "Get Index Price for All Trading Pairs",
    "description": "",
    "content": "/future/market/v1/public/q/index-price > Note：This method does not require a signature. import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [ { \"p\": 0, // Price \"s\": \"\", // Trading pair \"t\": 0 // Time } ], \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "index",
      "price",
      "for",
      "all",
      "trading",
      "pairs",
      "futures",
      "market data",
      "get index price for all trading pairs",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "index-price",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "Price",
      "Trading",
      "pair",
      "Time",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Index Price for All Trading Pairs",
    "path": "futures/Market data/Get Index Price for All Trading Pairs.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-index-price-for-single-trading-pair",
    "title": "Get Index Price for Single Trading Pair",
    "description": "",
    "content": "/future/market/v1/public/q/symbol-index-price > Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------ | ------ | --------- | ------- | ------------ | ------ | | symbol | string | true | N/A | Trading pair | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"p\": 0, // Price \"s\": \"\", // Trading pair \"t\": 0 // Time }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "index",
      "price",
      "for",
      "single",
      "trading",
      "pair",
      "futures",
      "market data",
      "get index price for single trading pair",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "symbol-index-price",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "symbol",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "string",
      "true",
      "Trading",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "Price",
      "Time",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Index Price for Single Trading Pair",
    "path": "futures/Market data/Get Index Price for Single Trading Pair.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-latest-transaction-information-of-trading-pairs",
    "title": "Get Latest Transaction Information of Trading Pairs",
    "description": "",
    "content": "/future/market/v1/public/q/deal > Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------ | ------- | --------- | ------- | ------------ | ------ | | symbol | string | true | N/A | Trading pair | | | num | integer | false | 50 | Quantity | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [ { \"a\": 0, // Volume \"m\": \"\", // Order side \"p\": 0, // Price \"s\": \"\", // Trading pair \"t\": 0 // Time } ], \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "latest",
      "transaction",
      "information",
      "of",
      "trading",
      "pairs",
      "futures",
      "market data",
      "get latest transaction information of trading pairs",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "deal",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "symbol",
      "string",
      "true",
      "Trading",
      "pair",
      "num",
      "integer",
      "false",
      "Quantity",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "Volume",
      "Order",
      "side",
      "Price",
      "Time",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Latest Transaction Information of Trading Pairs",
    "path": "futures/Market data/Get Latest Transaction Information of Trading Pairs.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-mark-price-for-all-trading-pairs",
    "title": "Get Mark Price for All Trading Pairs",
    "description": "",
    "content": "/future/market/v1/public/q/mark-price > Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------ | ------ | --------- | ------- | ------------ | ------ | | symbol | string | false | N/A | Trading pair | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [ { \"p\": 0, // Price \"s\": \"\", // Trading pair \"t\": 0 // Time } ], \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "mark",
      "price",
      "for",
      "all",
      "trading",
      "pairs",
      "futures",
      "market data",
      "get mark price for all trading pairs ",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "mark-price",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "symbol",
      "string",
      "false",
      "Trading",
      "pair",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "Price",
      "Time",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Mark Price for All Trading Pairs ",
    "path": "futures/Market data/Get Mark Price for All Trading Pairs .mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-mark-price-for-single-trading-pair",
    "title": "Get Mark Price for Single Trading Pair",
    "description": "",
    "content": "/future/market/v1/public/q/symbol-mark-price > Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------ | ------ | --------- | ------- | ------------ | ------ | | symbol | string | true | N/A | Trading pair | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"p\": 0, // Price \"s\": \"\", // Trading pair \"t\": 0 // Time }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "mark",
      "price",
      "for",
      "single",
      "trading",
      "pair",
      "futures",
      "market data",
      "get mark price for single trading pair",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "symbol-mark-price",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "symbol",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "string",
      "true",
      "Trading",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "Price",
      "Time",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Mark Price for Single Trading Pair",
    "path": "futures/Market data/Get Mark Price for Single Trading Pair.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-market-information-for-all-trading-pairs",
    "title": "Get Market Information for All Trading Pairs",
    "description": "",
    "content": "/future/market/v1/public/q/tickers > Note：This method does not require a signature. import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [ { \"a\": \"\", // 24h volume \"c\": \"\", // Latest price \"h\": \"\", // Highest price in 24 hours \"l\": \"\", // Lowest price in 24 hours \"o\": \"\", // The first transaction price 24 hours ago \"r\": \"\", // 24h Price Fluctuation Limit \"s\": \"\", // Trading pair \"t\": 0, // Time \"v\": \"\" // 24h turnover } ], \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "market",
      "information",
      "for",
      "all",
      "trading",
      "pairs",
      "futures",
      "market data",
      "get market information for all trading pairs",
      "mdx",
      "future",
      "v1",
      "public",
      "tickers",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "volume",
      "Latest",
      "price",
      "Highest",
      "hours",
      "Lowest",
      "The",
      "first",
      "transaction",
      "ago",
      "Price",
      "Fluctuation",
      "Limit",
      "Trading",
      "pair",
      "Time",
      "turnover",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Market Information for All Trading Pairs",
    "path": "futures/Market data/Get Market Information for All Trading Pairs.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-market-information-for-specific-trading-pair",
    "title": "Get Market Information for Specific Trading Pair",
    "description": "",
    "content": "/future/market/v1/public/q/ticker > Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------ | ------ | --------- | ------- | ------------ | ------ | | symbol | string | true | N/A | Trading pair | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"a\": \"\", // 24h volume \"c\": \"\", // Latest price \"h\": \"\", // Highest price in 24 hours \"l\": \"\", // Lowest price in 24 hours \"o\": \"\", // The first transaction price 24 hours ago \"r\": \"\", // 24h Price Fluctuation Limit \"s\": \"\", // Trading pair \"t\": 0, // Time \"v\": \"\" // 24h turnover }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "market",
      "information",
      "for",
      "specific",
      "trading",
      "pair",
      "futures",
      "market data",
      "get market information for specific trading pair",
      "mdx",
      "future",
      "v1",
      "public",
      "ticker",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "symbol",
      "string",
      "true",
      "Trading",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "volume",
      "Latest",
      "price",
      "Highest",
      "hours",
      "Lowest",
      "The",
      "first",
      "transaction",
      "ago",
      "Price",
      "Fluctuation",
      "Limit",
      "Time",
      "turnover",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Market Information for Specific Trading Pair",
    "path": "futures/Market data/Get Market Information for Specific Trading Pair.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-trading-pair-currency",
    "title": "Get Trading Pair Currency",
    "description": "",
    "content": "/future/market/v1/public/symbol/coins > Note：This method does not require a signature. import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getMarketConfig() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getMarketConfig\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [], \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "trading",
      "pair",
      "currency",
      "futures",
      "market data",
      "get trading pair currency",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "symbol",
      "coins",
      "CodeBlock",
      "data",
      "api",
      "getMarketConfig",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Trading Pair Currency",
    "path": "futures/Market data/Get Trading Pair Currency.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-trading-pair-information-of-kline",
    "title": "Get Trading Pair Information of Kline",
    "description": "",
    "content": "/future/market/v1/public/q/kline > Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | symbol | string | true | N/A | Trading pair | | | interval | string | true | N/A | Time-interval | 1m;5m;15m;30m;1h;4h;1d;1w | | startTime | integer | false | N/A | Start time | | | endTime | integer | false | N/A | End time | | | limit | integer | false | N/A | Limit | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [ { \"a\": 0, // Volume \"c\": 0, // Close price \"h\": 0, // Highest price \"l\": 0, // Lowest price \"o\": 0, // Open price \"s\": \"\", // Trading pair \"t\": 0, // Time \"v\": 0 // Turnover } ], \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "trading",
      "pair",
      "information",
      "of",
      "kline",
      "futures",
      "market data",
      "get trading pair information of kline",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "symbol",
      "string",
      "true",
      "Trading",
      "interval",
      "Time",
      "startTime",
      "integer",
      "false",
      "Start",
      "time",
      "endTime",
      "End",
      "limit",
      "Limit",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "Volume",
      "Close",
      "price",
      "Highest",
      "Lowest",
      "Open",
      "Turnover",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Trading Pair Information of Kline",
    "path": "futures/Market data/Get Trading Pair Information of Kline.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-trading-pair-risk-fund-balance",
    "title": "Get Trading Pair Risk Fund Balance",
    "description": "",
    "content": "/future/market/v1/public/contract/risk-balance > Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | symbol | string | true | | Trading pair | | | direction | string | false | NEXT | Direction (PREV: Previous page; NEXT: Next page) | PREV;NEXT | | id | integer | false | N/A | id | | | limit | integer | false | 10 | Limit | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"hasNext\": false, // Is there a next page \"hasPrev\": false, // Is there a previous page \"items\": [ // Datasheets { \"amount\": 0, // Balance \"coin\": \"\", // Currency \"createdTime\": 0, // Time \"id\": 0 // id } ] }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "trading",
      "pair",
      "risk",
      "fund",
      "balance",
      "futures",
      "market data",
      "get trading pair risk fund balance",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "contract",
      "risk-balance",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "symbol",
      "string",
      "true",
      "Trading",
      "direction",
      "false",
      "NEXT",
      "Direction",
      "PREV",
      "Previous",
      "page",
      "Next",
      "integer",
      "limit",
      "Limit",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "hasNext",
      "there",
      "next",
      "hasPrev",
      "previous",
      "items",
      "Datasheets",
      "amount",
      "Balance",
      "coin",
      "Currency",
      "createdTime",
      "Time",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get Trading Pair Risk Fund Balance",
    "path": "futures/Market data/Get Trading Pair Risk Fund Balance.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-client-ip",
    "title": "Get client ip",
    "description": "",
    "content": "/future/public/client > Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ---- | ------ | --------- | ------- | ----------- | ------ | | | number | false | | | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public String getClient(){ }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"returnCode\": 0, \"msgInfo\": \"success\", \"error\": null, \"result\": { \"ip\": \"192.168.1.1\" } }`} </CodeBlock>",
    "keywords": [
      "get",
      "client",
      "ip",
      "futures",
      "market data",
      "get client ip",
      "mdx",
      "future",
      "public",
      "CodeBlock",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "number",
      "false",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "String",
      "getClient",
      "json",
      "Response",
      "returnCode",
      "msgInfo",
      "success",
      "error",
      "null",
      "result"
    ],
    "url": "/docs/futures/Market data/Get client ip",
    "path": "futures/Market data/Get client ip.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-the-open-position-of-a-trading-pair",
    "title": "Get the open position of a trading pair",
    "description": "",
    "content": "/future/market/v1/public/contract/open-interest Limit Flow Rules 1/s/ip <br />> Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------ | ------ | --------- | ------- | ------------ | ------ | | symbol | string | true | N/A | Trading pair | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"symbol\": \"\", // Trading pair \"openInterest\": \"\", // Open position \"openInterestUsd\": 0, // Open value \"time\": \"\" // Time }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "get",
      "the",
      "open",
      "position",
      "of",
      "trading",
      "pair",
      "futures",
      "market data",
      "get the open position of a trading pair",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "contract",
      "open-interest",
      "ip",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "interest",
      "Limit",
      "Flow",
      "Rules",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "symbol",
      "string",
      "true",
      "Trading",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "openInterest",
      "Open",
      "openInterestUsd",
      "value",
      "time",
      "Time",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/Get the open position of a trading pair",
    "path": "futures/Market data/Get the open position of a trading pair.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "see-leverage-stratification-of-single-trading-pair",
    "title": "See Leverage Stratification of Single Trading Pair",
    "description": "",
    "content": "/future/market/v1/public/leverage/bracket/detail > Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------ | ------ | --------- | ------- | ------------ | ------ | | symbol | string | true | N/A | Trading pair | | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"leverageBrackets\": [ { \"bracket\": 0, // Level \"maintMarginRate\": 0, // Maintain margin rate \"maxLeverage\": 0, // Maximum leverage \"maxNominalValue\": 0, // Maximum notional value \"maxStartMarginRate\": 0, // Maximum initial margin rate \"minLeverage\": 0, // Minimum leverage \"startMarginRate\": 0, // Initial margin rate \"symbol\": \"\" // Trading pair } ], \"symbol\": \"\" }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "see",
      "leverage",
      "stratification",
      "of",
      "single",
      "trading",
      "pair",
      "futures",
      "market data",
      "see leverage stratification of single trading pair",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "bracket",
      "detail",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "symbol",
      "string",
      "true",
      "Trading",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "get",
      "URL",
      "btc_usdt",
      "type",
      "since",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "leverageBrackets",
      "Level",
      "maintMarginRate",
      "Maintain",
      "margin",
      "rate",
      "maxLeverage",
      "Maximum",
      "maxNominalValue",
      "notional",
      "value",
      "maxStartMarginRate",
      "initial",
      "minLeverage",
      "Minimum",
      "startMarginRate",
      "Initial",
      "returnCode"
    ],
    "url": "/docs/futures/Market data/See Leverage Stratification of Single Trading Pair",
    "path": "futures/Market data/See Leverage Stratification of Single Trading Pair.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "batch-cancel-orders",
    "title": "Batch Cancel Orders",
    "description": "",
    "content": "/future/trade/v1/order/cancel-batch --- Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | orderIds | string | true | N/A | Order IDs (comma-separated) | | --- Limit Flow Rules 200/s/apikey --- import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": true, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "batch",
      "cancel",
      "orders",
      "futures",
      "order",
      "batch cancel orders",
      "mdx",
      "future",
      "trade",
      "v1",
      "cancel-batch",
      "apikey",
      "CodeBlock",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "orderIds",
      "string",
      "true",
      "Order",
      "IDs",
      "comma",
      "separated",
      "Limit",
      "Flow",
      "Rules",
      "import",
      "from",
      "theme",
      "language",
      "json",
      "title",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/Order/Batch Cancel Orders",
    "path": "futures/Order/Batch Cancel Orders.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "bulk-orders",
    "title": "Bulk Orders",
    "description": "",
    "content": "/future/trade/v2/order/create-batch > Content-Type = application/x-www-form-urlencoded && application/json Note：This method does not require a signature. --- Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ---- | ------ | --------- | ------- | ----------------------------- | ------ | | list | string | true | N/A | List collection of order data | | --- Limit Flow Rules",
    "keywords": [
      "bulk",
      "orders",
      "futures",
      "order",
      "bulk orders",
      "mdx",
      "future",
      "trade",
      "v2",
      "create-batch",
      "x-www-form-urlencoded",
      "json",
      "create",
      "batch",
      "Content",
      "Type",
      "application",
      "www",
      "form",
      "urlencoded",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "list",
      "string",
      "true",
      "List",
      "collection",
      "data",
      "Limit",
      "Flow",
      "Rules"
    ],
    "url": "/docs/futures/Order/Bulk Orders",
    "path": "futures/Order/Bulk Orders.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "cancel-all-orders",
    "title": "Cancel All Orders",
    "description": "",
    "content": "/future/trade/v1/order/cancel-all --- Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | symbol | string | true | N/A | Trading pair (cancel all trading pair orders if pass \"\") | | --- Limit Flow Rules 200/s/apikey --- import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": true, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "cancel",
      "all",
      "orders",
      "futures",
      "order",
      "cancel all orders",
      "mdx",
      "future",
      "trade",
      "v1",
      "cancel-all",
      "apikey",
      "CodeBlock",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "symbol",
      "string",
      "true",
      "Trading",
      "pair",
      "trading",
      "pass",
      "Limit",
      "Flow",
      "Rules",
      "import",
      "from",
      "theme",
      "language",
      "json",
      "title",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/Order/Cancel All Orders",
    "path": "futures/Order/Cancel All Orders.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "cancel-orders",
    "title": "Cancel Orders",
    "description": "",
    "content": "/future/trade/v1/order/cancel --- Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------- | ------- | --------- | ------- | ----------- | ------ | | orderId | integer | true | N/A | Order ID | | --- Limit Flow Rules 200/s/apikey --- import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": \"\", // Order ID \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "cancel",
      "orders",
      "futures",
      "order",
      "cancel orders",
      "mdx",
      "future",
      "trade",
      "v1",
      "apikey",
      "CodeBlock",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "orderId",
      "integer",
      "true",
      "Order",
      "Limit",
      "Flow",
      "Rules",
      "import",
      "from",
      "theme",
      "language",
      "json",
      "title",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/Order/Cancel Orders",
    "path": "futures/Order/Cancel Orders.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "create-orders",
    "title": "Create Orders",
    "description": "",
    "content": "/future/trade/v1/order/create > Content-Type = application/x-www-form-urlencoded && application/json Note：This method does not require a signature. --- Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | clientOrderId | string | false | N/A | Client order ID | | | symbol | string | true | - | Trading pair | | | orderSide | string | true | N/A | Order side | BUY;SELL | | orderType | string | true | N/A | Order type | LIMIT;MARKET | | origQty | number | true | N/A | Quantity (Cont) | | | price | number | false | N/A | Price | | | timeInForce | string | false | GTC | Valid way | GTC;IOC;FOK;GTX | | triggerProfitPrice | number | false | N/A | Stop profit price | | | triggerStopPrice | number | false | N/A | Stop loss price | | | positionSide | string | true | N/A | Position side | LONG;SHORT | --- OrigQty Calculation Formula Formula Explain Truncate: take the integer part Balance: (walletBalance - openOrderMarginFrozen), api: /future/user/v1/compat/balance/list Percent: user input, e.g. 0.2 Leverage: leverage you want, e.g. 20 Mark_price: current symbol mark price, e.g. 88888 (btc_usdt) Contract_size: contractSize, api: /future/market/v1/public/symbol/detail, contract multiplier (face value) Example truncate(10000 _ 0.2 _ 20 / 88888 / 0.0001) = 4500 --- Limit Flow Rules 200/s/apikey --- import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/trade/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": {}, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "create",
      "orders",
      "futures",
      "order",
      "create orders",
      "mdx",
      "future",
      "trade",
      "v1",
      "x-www-form-urlencoded",
      "json",
      "user",
      "compat",
      "balance",
      "list",
      "market",
      "public",
      "symbol",
      "detail",
      "apikey",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "Content",
      "Type",
      "application",
      "www",
      "form",
      "urlencoded",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "clientOrderId",
      "string",
      "false",
      "Client",
      "true",
      "Trading",
      "pair",
      "orderSide",
      "Order",
      "side",
      "BUY",
      "SELL",
      "orderType",
      "type",
      "LIMIT",
      "MARKET",
      "origQty",
      "number",
      "Quantity",
      "Cont",
      "price",
      "Price",
      "timeInForce",
      "GTC",
      "Valid",
      "way",
      "IOC",
      "FOK",
      "GTX",
      "triggerProfitPrice",
      "Stop",
      "profit",
      "triggerStopPrice",
      "loss",
      "positionSide",
      "Position",
      "LONG",
      "SHORT",
      "OrigQty",
      "Calculation",
      "Formula",
      "Explain",
      "Truncate",
      "take",
      "the",
      "integer",
      "part",
      "Balance",
      "walletBalance",
      "Percent",
      "input",
      "Leverage",
      "leverage",
      "you",
      "want",
      "Mark_price",
      "current",
      "mark",
      "btc_usdt",
      "Contract_size",
      "contractSize",
      "contract",
      "multiplier",
      "face",
      "value",
      "Example",
      "truncate",
      "Limit",
      "Flow",
      "Rules",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "String",
      "text",
      "HttpUtil",
      "get",
      "URL",
      "since",
      "System",
      "out",
      "println",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/Order/Create Orders",
    "path": "futures/Order/Create Orders.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "see-order-history",
    "title": "See Order History",
    "description": "",
    "content": "/future/trade/v1/order/list-history > Note：This method does not require a signature. --- Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | symbol | string | true | N/A | Trading pairs (queries all trading pairs if not passed) | | | direction | string | false | NEXT | Direction | PREV;NEXT | | id | integer | false | N/A | id | | | limit | integer | false | 10 | Limit | | | startTime | integer | false | N/A | Start time | | | endTime | integer | false | N/A | End time | | --- Limit Flow Rules 200/s/apikey --- import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getMarketConfig() { String text = HttpUtil.get(URL + \"/data/api/future/trade/v1/getMarketConfig\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"hasNext\": false, // Is there a next page \"hasPrev\": false, // Is there a previous page \"items\": [ // Datasheets { \"clientOrderId\": \"\", // Client order ID \"avgPrice\": 0, // Average price \"closePosition\": false, // Whether to close all when order condition is triggered \"closeProfit\": 0, // Offset profit and loss \"createdTime\": 0, // Create time \"executedQty\": 0, // Volume (Cont) \"forceClose\": false, // Is it a liquidation order \"marginFrozen\": 0, // Occupied margin \"orderId\": 0, // Order ID \"orderSide\": \"\", // Order side \"orderType\": \"\", // Order type \"origQty\": 0, // Quantity (Cont) \"positionSide\": \"\", // Position side \"price\": 0, // Order price \"sourceId\": 0, // Triggering conditions ID \"state\": \"\", // Order state: NEW; PARTIALLY_FILLED; FILLED; CANCELED; REJECTED; EXPIRED \"symbol\": \"\", // Trading pair \"timeInForce\": \"\", // Valid type \"triggerProfitPrice\": 0, // TP trigger price \"triggerStopPrice\": 0 // SL trigger price } ] }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "see",
      "order",
      "history",
      "futures",
      "see order history",
      "mdx",
      "future",
      "trade",
      "v1",
      "list-history",
      "apikey",
      "CodeBlock",
      "data",
      "api",
      "getMarketConfig",
      "list",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "symbol",
      "string",
      "true",
      "Trading",
      "pairs",
      "queries",
      "all",
      "trading",
      "passed",
      "direction",
      "false",
      "NEXT",
      "Direction",
      "PREV",
      "integer",
      "limit",
      "Limit",
      "startTime",
      "Start",
      "time",
      "endTime",
      "End",
      "Flow",
      "Rules",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "public",
      "void",
      "String",
      "text",
      "HttpUtil",
      "get",
      "URL",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "hasNext",
      "there",
      "next",
      "page",
      "hasPrev",
      "previous",
      "items",
      "Datasheets",
      "clientOrderId",
      "Client",
      "avgPrice",
      "Average",
      "price",
      "closePosition",
      "Whether",
      "close",
      "when",
      "condition",
      "triggered",
      "closeProfit",
      "Offset",
      "profit",
      "and",
      "loss",
      "createdTime",
      "Create",
      "executedQty",
      "Volume",
      "Cont",
      "forceClose",
      "liquidation",
      "marginFrozen",
      "Occupied",
      "margin",
      "orderId",
      "Order",
      "orderSide",
      "side",
      "orderType",
      "type",
      "origQty",
      "Quantity",
      "positionSide",
      "Position",
      "sourceId",
      "Triggering",
      "conditions",
      "state",
      "NEW",
      "PARTIALLY_FILLED",
      "FILLED",
      "CANCELED",
      "REJECTED",
      "EXPIRED",
      "pair",
      "timeInForce",
      "Valid",
      "triggerProfitPrice",
      "trigger",
      "triggerStopPrice",
      "returnCode"
    ],
    "url": "/docs/futures/Order/See Order History",
    "path": "futures/Order/See Order History.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "see-orders-by-id",
    "title": "See Orders by ID",
    "description": "",
    "content": "/future/trade/v1/order/detail --- Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------- | ------- | --------- | ------- | ----------- | ------ | | orderId | integer | true | N/A | Order ID | | --- Limit Flow Rules 200/s/apikey --- import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getMarketConfig() { String text = HttpUtil.get(URL + \"/data/api/future/trade/v1/getMarketConfig\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"avgPrice\": 0, // Average price \"closePosition\": false, // Whether to close all when order condition is triggered \"closeProfit\": 0, // Offset profit and loss \"createdTime\": 0, // Create time \"executedQty\": 0, // Volume (Cont) \"forceClose\": false, // Is it a liquidation order \"marginFrozen\": 0, // Occupied margin \"orderId\": 0, // Order ID \"orderSide\": \"\", // Order side \"orderType\": \"\", // Order type \"origQty\": 0, // Quantity (Cont) \"positionSide\": \"\", // Position side \"price\": 0, // Order price \"sourceId\": 0, // Triggering conditions ID \"state\": \"\", // Order state \"symbol\": \"\", // Trading pair \"timeInForce\": \"\", // Valid type \"triggerProfitPrice\": 0, // TP trigger price \"triggerStopPrice\": 0 // SL trigger price }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "see",
      "orders",
      "by",
      "id",
      "futures",
      "order",
      "see orders by id",
      "mdx",
      "future",
      "trade",
      "v1",
      "detail",
      "apikey",
      "CodeBlock",
      "data",
      "api",
      "getMarketConfig",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "orderId",
      "integer",
      "true",
      "Order",
      "Limit",
      "Flow",
      "Rules",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "public",
      "void",
      "String",
      "text",
      "HttpUtil",
      "get",
      "URL",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "avgPrice",
      "Average",
      "price",
      "closePosition",
      "false",
      "Whether",
      "close",
      "all",
      "when",
      "condition",
      "triggered",
      "closeProfit",
      "Offset",
      "profit",
      "and",
      "loss",
      "createdTime",
      "Create",
      "time",
      "executedQty",
      "Volume",
      "Cont",
      "forceClose",
      "liquidation",
      "marginFrozen",
      "Occupied",
      "margin",
      "orderSide",
      "side",
      "orderType",
      "type",
      "origQty",
      "Quantity",
      "positionSide",
      "Position",
      "sourceId",
      "Triggering",
      "conditions",
      "state",
      "symbol",
      "Trading",
      "pair",
      "timeInForce",
      "Valid",
      "triggerProfitPrice",
      "trigger",
      "triggerStopPrice",
      "returnCode"
    ],
    "url": "/docs/futures/Order/See Orders by ID",
    "path": "futures/Order/See Orders by ID.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "see-orders",
    "title": "See Orders",
    "description": "",
    "content": "/future/trade/v1/order/list --- Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | clientOrderId | string | false | N/A | Client order ID | | | page | integer | false | 1 | Page | | | size | integer | false | 10 | Quantity of a single page | | | startTime | integer | false | N/A | Start time | | | endTime | integer | false | N/A | End time | | | state | string | false | NEW | Order state: NEW (New order, unfilled); PARTIALLY_FILLED (Partial deal); PARTIALLY_CANCELED (Partial revocation); FILLED (Filled); CANCELED (Cancelled); REJECTED (Order failed); EXPIRED (Expired); UNFINISHED (Unfinished); HISTORY (History) | PREV; NEXT | | symbol | string | false | N/A | Trading pair | | --- Limit Flow Rules 200/s/apikey --- import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getMarketConfig() { String text = HttpUtil.get(URL + \"/data/api/future/trade/v1/getMarketConfig\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"items\": [ { \"clientOrderId\": \"\", // Client order ID \"avgPrice\": 0, // Average price \"closePosition\": false, // Whether to close all when order condition is triggered \"closeProfit\": 0, // Offset profit and loss \"createdTime\": 0, // Create time \"executedQty\": 0, // Volume (Cont) \"forceClose\": false, // Is it a liquidation order \"marginFrozen\": 0, // Occupied margin \"orderId\": 0, // Order ID \"orderSide\": \"\", // Order side \"orderType\": \"\", // Order type \"origQty\": 0, // Quantity (Cont) \"positionSide\": \"\", // Position side \"price\": 0, // Order price \"sourceId\": 0, // Triggering conditions ID \"state\": \"\", // Order state \"symbol\": \"\", // Trading pair \"timeInForce\": \"\", // Valid type \"triggerProfitPrice\": 0, // TP trigger price \"triggerStopPrice\": 0 // SL trigger price } ], \"page\": 0, \"ps\": 0, \"total\": 0 }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "see",
      "orders",
      "futures",
      "order",
      "see orders",
      "mdx",
      "future",
      "trade",
      "v1",
      "list",
      "apikey",
      "CodeBlock",
      "data",
      "api",
      "getMarketConfig",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "clientOrderId",
      "string",
      "false",
      "Client",
      "page",
      "integer",
      "Page",
      "size",
      "Quantity",
      "single",
      "startTime",
      "Start",
      "time",
      "endTime",
      "End",
      "state",
      "NEW",
      "Order",
      "New",
      "unfilled",
      "PARTIALLY_FILLED",
      "Partial",
      "deal",
      "PARTIALLY_CANCELED",
      "revocation",
      "FILLED",
      "Filled",
      "CANCELED",
      "Cancelled",
      "REJECTED",
      "failed",
      "EXPIRED",
      "Expired",
      "UNFINISHED",
      "Unfinished",
      "HISTORY",
      "History",
      "PREV",
      "NEXT",
      "symbol",
      "Trading",
      "pair",
      "Limit",
      "Flow",
      "Rules",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "public",
      "void",
      "String",
      "text",
      "HttpUtil",
      "get",
      "URL",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "items",
      "avgPrice",
      "Average",
      "price",
      "closePosition",
      "Whether",
      "close",
      "all",
      "when",
      "condition",
      "triggered",
      "closeProfit",
      "Offset",
      "profit",
      "and",
      "loss",
      "createdTime",
      "Create",
      "executedQty",
      "Volume",
      "Cont",
      "forceClose",
      "liquidation",
      "marginFrozen",
      "Occupied",
      "margin",
      "orderId",
      "orderSide",
      "side",
      "orderType",
      "type",
      "origQty",
      "positionSide",
      "Position",
      "sourceId",
      "Triggering",
      "conditions",
      "timeInForce",
      "Valid",
      "triggerProfitPrice",
      "trigger",
      "triggerStopPrice",
      "total",
      "returnCode"
    ],
    "url": "/docs/futures/Order/See Orders",
    "path": "futures/Order/See Orders.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "see-transaction-details",
    "title": "See Transaction Details",
    "description": "",
    "content": "/future/trade/v1/order/trade-list > Note：This method does not require a signature. --- Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | orderId | integer | false | N/A | Order ID | | | symbol | string | false | N/A | Trading pair | | | page | integer | false | 1 | Page | | | size | integer | false | 10 | Quantity of a single page | | | startTime | integer | false | N/A | Start time | | | endTime | integer | false | N/A | End time | | --- Limit Flow Rules 200/s/apikey --- import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getMarketConfig() { String text = HttpUtil.get(URL + \"/data/api/future/trade/v1/getMarketConfig\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"items\": [ { \"fee\": 0, // Fee \"feeCoin\": \"\", // Currency of fee \"orderId\": 0, // Order ID \"execId\": 0, // Trade ID \"price\": 0, // Price \"quantity\": 0, // Volume \"symbol\": \"\", // Trading pair \"timestamp\": 0, // Time \"takerMaker\": \"TAKER\" // taker or maker } ], \"page\": 0, \"ps\": 0, \"total\": 0 }, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "see",
      "transaction",
      "details",
      "futures",
      "order",
      "see transaction details",
      "mdx",
      "future",
      "trade",
      "v1",
      "trade-list",
      "apikey",
      "CodeBlock",
      "data",
      "api",
      "getMarketConfig",
      "list",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "orderId",
      "integer",
      "false",
      "Order",
      "symbol",
      "string",
      "Trading",
      "pair",
      "page",
      "Page",
      "size",
      "Quantity",
      "single",
      "startTime",
      "Start",
      "time",
      "endTime",
      "End",
      "Limit",
      "Flow",
      "Rules",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "public",
      "void",
      "String",
      "text",
      "HttpUtil",
      "get",
      "URL",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "items",
      "fee",
      "Fee",
      "feeCoin",
      "Currency",
      "execId",
      "Trade",
      "price",
      "Price",
      "quantity",
      "Volume",
      "timestamp",
      "Time",
      "takerMaker",
      "TAKER",
      "taker",
      "maker",
      "total",
      "returnCode"
    ],
    "url": "/docs/futures/Order/See Transaction Details",
    "path": "futures/Order/See Transaction Details.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "update-orders",
    "title": "Update Orders",
    "description": "",
    "content": "/future/trade/v1/order/update > Content-Type = application/x-www-form-urlencoded && application/json Note：This method does not require a signature. --- Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | orderId | number | true | | Order ID | | | price | number | true | | Target price | | | origQty | number | true | | Target quantity (cont) | | | triggerProfitPrice | number | false | N/A | Profit target price | | | triggerStopPrice | number | false | N/A | Stop-Loss price | | | triggerPriceType | string | false | LATEST_PRICE | Trigger price type | INDEX_PRICE; MARK_PRICE; LATEST_PRICE | | profitDelegateOrderType | string | false | N/A | Take-Profit order type | LIMIT; MARKET | | profitDelegateTimeInForce | string | false | N/A | Take-Profit order validity method | GTC; IOC; FOK; GTX | | profitDelegatePrice | number | false | N/A | Take-Profit order price | | | stopDelegateOrderType | string | false | N/A | Stop-Loss order type | LIMIT; MARKET | | stopDelegateTimeInForce | string | false | N/A | Stop-Loss order validity method | GTC; IOC; FOK; GTX | | stopDelegatePrice | number | false | N/A | Stop-Loss order price | | | followUpOrder | boolean | false | N/A | If true, indicates chase order | | --- Limit Flow Rules 200/s/apikey --- import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getKLine() { String text = HttpUtil.get(URL + \"/data/api/future/trade/v1/getKLine?market=btc_usdt&type=1min&since=0\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": {}, \"returnCode\": 0 }`} </CodeBlock>",
    "keywords": [
      "update",
      "orders",
      "futures",
      "order",
      "update orders",
      "mdx",
      "future",
      "trade",
      "v1",
      "x-www-form-urlencoded",
      "json",
      "apikey",
      "CodeBlock",
      "data",
      "api",
      "getKLine",
      "Content",
      "Type",
      "application",
      "www",
      "form",
      "urlencoded",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "orderId",
      "number",
      "true",
      "Order",
      "price",
      "Target",
      "origQty",
      "quantity",
      "cont",
      "triggerProfitPrice",
      "false",
      "Profit",
      "target",
      "triggerStopPrice",
      "Stop",
      "Loss",
      "triggerPriceType",
      "string",
      "LATEST_PRICE",
      "Trigger",
      "type",
      "INDEX_PRICE",
      "MARK_PRICE",
      "Take",
      "LIMIT",
      "MARKET",
      "validity",
      "GTC",
      "IOC",
      "FOK",
      "GTX",
      "profitDelegatePrice",
      "stopDelegatePrice",
      "followUpOrder",
      "boolean",
      "indicates",
      "chase",
      "Limit",
      "Flow",
      "Rules",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "public",
      "void",
      "String",
      "text",
      "HttpUtil",
      "get",
      "URL",
      "market",
      "btc_usdt",
      "since",
      "System",
      "out",
      "println",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/Order/Update Orders",
    "path": "futures/Order/Update Orders.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Python Package",
    "title": "Python Package",
    "description": "",
    "content": "Official Python3 API connector for XT.COM's HTTP APIs You can find the official Python3 API connector for XT.COM's HTTP APIs at the following link: PyPI Project: pyxt Example Code `python You can add your Python example code here import pyxt Example usage of the pyxt connector `",
    "keywords": [
      "python",
      "package",
      "futures",
      "pythonpackage",
      "mdx",
      "Official",
      "Python3",
      "API",
      "connector",
      "for",
      "COM",
      "HTTP",
      "APIs",
      "You",
      "can",
      "find",
      "the",
      "official",
      "following",
      "link",
      "PyPI",
      "Project",
      "pyxt",
      "Example",
      "Code",
      "add",
      "your",
      "Python",
      "example",
      "code",
      "here",
      "import",
      "usage"
    ],
    "url": "/docs/futures/PythonPackage/Python Package",
    "path": "futures/PythonPackage/Python Package.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-depth-info",
    "title": "Get Depth Info",
    "description": "",
    "content": "/future/market/v1/public/cg/orderbook > Content-Type = application/x-www-form-urlencoded Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------ | ------ | --------- | ------- | --------------------------- | ------ | | symbol | string | true | N/A | Trading pair, e.g. BTC-USDT | | | level | int | false | 50 | Depth level | 1-200 | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getMarketConfig() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/public/cg/orderbook\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`{ \"ticker_id\": \"BTC-USDT\", \"timestamp\": 1698668957638, \"bids\": [ [\"34794.6\", \"97164\"], [\"34794.5\", \"9897\"], ... ], \"asks\": [ [\"34794.7\", \"168479\"], [\"34794.8\", \"4009\"], ... ] }`} </CodeBlock>",
    "keywords": [
      "get",
      "depth",
      "info",
      "futures",
      "quote collection",
      "get depth info",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "cg",
      "orderbook",
      "x-www-form-urlencoded",
      "CodeBlock",
      "data",
      "api",
      "Content",
      "Type",
      "application",
      "www",
      "form",
      "urlencoded",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "symbol",
      "string",
      "true",
      "Trading",
      "pair",
      "BTC",
      "USDT",
      "level",
      "int",
      "false",
      "Depth",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "getMarketConfig",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "ticker_id",
      "timestamp",
      "bids",
      "asks"
    ],
    "url": "/docs/futures/Quote collection/Get Depth Info",
    "path": "futures/Quote collection/Get Depth Info.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-futures-info",
    "title": "Get Futures Info",
    "description": "",
    "content": "/future/market/v1/public/cg/contracts > Content-Type = application/x-www-form-urlencoded Note：This method does not require a signature. Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ---- | ---- | --------- | ------- | ----------- | ------ | | - | - | - | - | - | - | import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"java\" title=\"Java\"> {`public void getMarketConfig() { String text = HttpUtil.get(URL + \"/data/api/future/market/v1/public/cg/contracts\"); System.out.println(text); }`} </CodeBlock> <CodeBlock language=\"json\" title=\"Response\"> {`[{ \"id\": 123, \"ask\": \"1817.32\", // Current lowest ask price \"base_currency\": \"ETH\", // Symbol/currency code of base pair, eg. BTC \"base_volume\": \"13267684284\", // 24 hour trading volume \"bid\": \"1817.31\", // Current highest bid price \"contractSize\": 10, // Futures par value \"end_timestamp\": 253402099200000, // Ending of this derivative product \"funding_rate\": \"-0.03\", // Fund rate \"high\": \"1828.89\", // 24-hour highest trading price \"index_currency\": \"USD\", // Underlying currency for index \"index_name\": \"ETH-USD\", // Name of the underlying index if any \"index_price\": \"1816.61\", // Underlying index price \"last_price\": \"1817.31\", // Latest price \"low\": \"1778.65\", // 24-hour lowest trading price \"next_funding_rate\": \"-0.03\", // Upcoming predicted funding rate \"next_funding_rate_timestamp\":1698681600000, // Next funding rate time \"open_interest\": \"2419347630\", // The open interest in the last 24 hours in contracts \"product_type\": \"PERPETUAL\", // Product type \"start_timestamp\": 1651328033000, // Starting of this derivative product (relevant for expirable futures or options) \"symbol\": \"eth_usd\", \"target_currency\": \"USD\", // Symbol/currency code of target pair, eg. ETH \"target_volume\": \"73698647.51054371\", // 24 hours trading volume \"ticker_id\": \"ETH-USD\", // Identifier of a ticker with delimiter to separate base/target, eg. BTC-PERP \"underlyingType\": 1 // Target type, Coin-M, USDT-M }]`} </CodeBlock>",
    "keywords": [
      "get",
      "futures",
      "info",
      "quote collection",
      "get futures info",
      "mdx",
      "future",
      "market",
      "v1",
      "public",
      "cg",
      "contracts",
      "x-www-form-urlencoded",
      "CodeBlock",
      "data",
      "api",
      "currency",
      "target",
      "Content",
      "Type",
      "application",
      "www",
      "form",
      "urlencoded",
      "Note",
      "This",
      "method",
      "does",
      "not",
      "require",
      "signature",
      "Parameters",
      "Name",
      "Mandatory",
      "Default",
      "Description",
      "Ranges",
      "import",
      "from",
      "theme",
      "language",
      "java",
      "title",
      "Java",
      "void",
      "getMarketConfig",
      "String",
      "text",
      "HttpUtil",
      "URL",
      "System",
      "out",
      "println",
      "json",
      "Response",
      "ask",
      "Current",
      "lowest",
      "price",
      "base_currency",
      "ETH",
      "Symbol",
      "code",
      "base",
      "pair",
      "BTC",
      "base_volume",
      "hour",
      "trading",
      "volume",
      "bid",
      "highest",
      "contractSize",
      "Futures",
      "par",
      "value",
      "end_timestamp",
      "Ending",
      "this",
      "derivative",
      "product",
      "funding_rate",
      "Fund",
      "rate",
      "high",
      "index_currency",
      "USD",
      "Underlying",
      "for",
      "index",
      "index_name",
      "the",
      "underlying",
      "any",
      "index_price",
      "last_price",
      "Latest",
      "low",
      "next_funding_rate",
      "Upcoming",
      "predicted",
      "funding",
      "Next",
      "time",
      "open_interest",
      "The",
      "open",
      "interest",
      "last",
      "hours",
      "product_type",
      "PERPETUAL",
      "Product",
      "type",
      "start_timestamp",
      "Starting",
      "relevant",
      "expirable",
      "options",
      "symbol",
      "eth_usd",
      "target_currency",
      "target_volume",
      "ticker_id",
      "Identifier",
      "ticker",
      "with",
      "delimiter",
      "separate",
      "PERP",
      "underlyingType",
      "Target",
      "Coin",
      "USDT"
    ],
    "url": "/docs/futures/Quote collection/Get Futures Info",
    "path": "futures/Quote collection/Get Futures Info.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Adjust Leverage",
    "title": "Adjust Leverage",
    "description": "",
    "content": "Description POST /future/user/v1/position/adjust-leverage Parameters | Name | Type | Mandatory | Default | Description | | ------------ | ------- | --------- | ------- | --------------------------- | | symbol | string | Yes | N/A | Trading pair | | positionSide | string | Yes | N/A | Position side (LONG, SHORT) | | leverage | integer | Yes | N/A | Leverage | --- Limit Flow Rules 200/s/apikey --- Response `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": {}, \"returnCode\": 0 } `",
    "keywords": [
      "adjust",
      "leverage",
      "futures",
      "user",
      "adjust leverage",
      "mdx",
      "future",
      "v1",
      "position",
      "adjust-leverage",
      "apikey",
      "post",
      "Description",
      "POST",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "symbol",
      "string",
      "Yes",
      "Trading",
      "pair",
      "positionSide",
      "Position",
      "side",
      "LONG",
      "SHORT",
      "integer",
      "Leverage",
      "Limit",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/User/Adjust Leverage",
    "path": "futures/User/Adjust Leverage.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Alter Margin",
    "title": "Alter Margin",
    "description": "",
    "content": "Description POST /future/user/v1/position/margin Parameters | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | symbol | string | Yes | N/A | Trading pair | | margin | number | No | N/A | Quantity | | positionSide | string | No | N/A | Position side (LONG, SHORT) | | type | string | No | N/A | Adjust direction (ADD: add isolated margin, SUB: reduce isolated margin) | --- Limit Flow Rules 200/s/apikey --- Response `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": {}, \"returnCode\": 0 } `",
    "keywords": [
      "alter",
      "margin",
      "futures",
      "user",
      "alter margin",
      "mdx",
      "future",
      "v1",
      "position",
      "apikey",
      "post",
      "Description",
      "POST",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "symbol",
      "string",
      "Yes",
      "Trading",
      "pair",
      "number",
      "Quantity",
      "positionSide",
      "Position",
      "side",
      "LONG",
      "SHORT",
      "type",
      "Adjust",
      "direction",
      "ADD",
      "add",
      "isolated",
      "SUB",
      "reduce",
      "Limit",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/User/Alter Margin",
    "path": "futures/User/Alter Margin.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Cancel Trading Pair Collection",
    "title": "Cancel Trading Pair Collection",
    "description": "",
    "content": "Description POST /future/user/v1/user/collection/cancel --- Limit Flow Rules 200/s/apikey --- Response `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": true, \"returnCode\": 0 } `",
    "keywords": [
      "cancel",
      "trading",
      "pair",
      "collection",
      "futures",
      "user",
      "cancel trading pair collection",
      "mdx",
      "future",
      "v1",
      "apikey",
      "post",
      "Description",
      "POST",
      "Limit",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "true",
      "returnCode"
    ],
    "url": "/docs/futures/User/Cancel Trading Pair Collection",
    "path": "futures/User/Cancel Trading Pair Collection.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Change Position Type",
    "title": "Change Position Type",
    "description": "",
    "content": "Description POST /future/user/v1/position/change-type --- Limit Flow Rules 200/s/apikey --- Response `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": {}, \"returnCode\": 0 } `",
    "keywords": [
      "change",
      "position",
      "type",
      "futures",
      "user",
      "change position type",
      "mdx",
      "future",
      "v1",
      "change-type",
      "apikey",
      "post",
      "Description",
      "POST",
      "Limit",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/User/Change Position Type",
    "path": "futures/User/Change Position Type.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Close All",
    "title": "Untitled",
    "description": "",
    "content": "",
    "keywords": ["untitled", "futures", "user", "close all", "mdx"],
    "url": "/docs/futures/User/Close All",
    "path": "futures/User/Close All.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Collect Trading Pair",
    "title": "Untitled",
    "description": "",
    "content": "",
    "keywords": ["untitled", "futures", "user", "collect trading pair", "mdx"],
    "url": "/docs/futures/User/Collect Trading Pair",
    "path": "futures/User/Collect Trading Pair.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Get ADL Information",
    "title": "Get ADL Information",
    "description": "",
    "content": "Description GET /future/user/v1/position/adl --- Limit Flow Rules 200/s/apikey --- Response `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [ { \"longQuantile\": 0, //long position adl \"shortQuantile\": 0, //Short position adl \"symbol\": \"\" //Trading pair } ], \"returnCode\": 0 } `",
    "keywords": [
      "get",
      "adl",
      "information",
      "futures",
      "user",
      "get adl information",
      "mdx",
      "future",
      "v1",
      "position",
      "apikey",
      "long",
      "Short",
      "Trading",
      "Description",
      "GET",
      "Limit",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "longQuantile",
      "shortQuantile",
      "symbol",
      "pair",
      "returnCode"
    ],
    "url": "/docs/futures/User/Get ADL Information",
    "path": "futures/User/Get ADL Information.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Get history track list(inactive)",
    "title": "Get history track list(inactive)",
    "description": "",
    "content": "Description GET /future/trade/v1/entrust/track-list-history Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | direction | string | false | NEXT | Direction (PREV: Previous page; NEXT: Next page) | PREV; NEXT | | limit | integer | false | 10 | Limit | | | id | integer | false | N/A | | | | endTime | integer | false | N/A | End time | | | startTime | integer | false | N/A | Start time | | | symbol | string | false | N/A | Symbol | | Limit Flow Rules 200/s/apikey Example (Java) ` Response { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"hasNext\": true, // Is there a next page \"hasPre\": true, // Is there a previous page \"items\": [ { \"activationPrice\": 0, // Activation price \"avgPrice\": 0, // Average price \"callback\": \"\", // Callback range configuration 1: PROPORTION 2: FIXED \"callbackVal\": 0, // Callback value \"configActivation\": false, // Whether to configure activation price \"createdTime\": 0, // Create time \"currentPrice\": 0, // Real-time price, compared with the activation price and order price \"desc\": \"\", // Description \"executedQty\": 0, // Actual transaction quantity \"orderSide\": \"\", // Order side \"ordinary\": true, \"origQty\": 0, // Quantity (Cont) \"positionSide\": \"\", // Position side \"price\": 0, // Order price \"state\": \"\", // Order state: NOT_ACTIVATION, NOT_TRIGGERED, TRIGGERING, TRIGGERED, USER_REVOCATION, PLATFORM_REVOCATION, EXPIRED, DELEGATION_FAILED \"stopPrice\": 0, // Trigger price \"symbol\": \"\", // Symbol \"trackId\": 0, // Track id \"triggerPriceType\": \"\", // Trigger price type \"updatedTime\": 0 // Update time } ] }, \"returnCode\": 0 } `",
    "keywords": [
      "get",
      "history",
      "track",
      "list(inactive)",
      "futures",
      "user",
      "get account related information",
      "mdx",
      "future",
      "trade",
      "v1",
      "entrust",
      "track-list-history",
      "apikey",
      "Description",
      "GET",
      "list",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Ranges",
      "direction",
      "string",
      "false",
      "NEXT",
      "Direction",
      "PREV",
      "Previous",
      "page",
      "Next",
      "limit",
      "integer",
      "Limit",
      "endTime",
      "End",
      "time",
      "startTime",
      "Start",
      "symbol",
      "Symbol",
      "Flow",
      "Rules",
      "Example",
      "Java",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "hasNext",
      "true",
      "there",
      "next",
      "hasPre",
      "previous",
      "items",
      "activationPrice",
      "Activation",
      "price",
      "avgPrice",
      "Average",
      "callback",
      "Callback",
      "range",
      "configuration",
      "PROPORTION",
      "FIXED",
      "callbackVal",
      "value",
      "configActivation",
      "Whether",
      "configure",
      "activation",
      "createdTime",
      "Create",
      "currentPrice",
      "Real",
      "compared",
      "with",
      "the",
      "and",
      "order",
      "desc",
      "executedQty",
      "Actual",
      "transaction",
      "quantity",
      "orderSide",
      "Order",
      "side",
      "ordinary",
      "origQty",
      "Quantity",
      "Cont",
      "positionSide",
      "Position",
      "state",
      "NOT_ACTIVATION",
      "NOT_TRIGGERED",
      "TRIGGERING",
      "TRIGGERED",
      "USER_REVOCATION",
      "PLATFORM_REVOCATION",
      "EXPIRED",
      "DELEGATION_FAILED",
      "stopPrice",
      "Trigger",
      "trackId",
      "Track",
      "triggerPriceType",
      "type",
      "updatedTime",
      "Update",
      "returnCode"
    ],
    "url": "/docs/futures/User/Get Account Related Information",
    "path": "futures/User/Get Account Related Information.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Get Fund Fee Information",
    "title": "Get Fund Fee Information",
    "description": "",
    "content": "Description GET /future/user/v1/balance/funding-rate-list Parameters | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | symbol | string | Yes | N/A | Trading pair (queries all if not passed) | | direction | string | No | NEXT | Direction (PREV: Previous page; NEXT: Next page) | | id | integer | No | N/A | Record ID | | limit | integer | No | 10 | Limit | | startTime | integer | No | N/A | Start time | | endTime | integer | No | N/A | End time | --- Limit Flow Rules 200/s/apikey --- Response `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"hasNext\": false, // Is there a next page \"hasPrev\": false, // Is there a previous page \"items\": [ // Datasheets { \"cast\": 0, // Fund fee \"coin\": \"\", // Currency \"createdTime\": 0, // Time \"id\": 0, // ID \"positionSide\": \"\", // Direction \"symbol\": \"\" // Trading pair } ] }, \"returnCode\": 0 } `",
    "keywords": [
      "get",
      "fund",
      "fee",
      "information",
      "futures",
      "user",
      "get fund fee information",
      "mdx",
      "future",
      "v1",
      "balance",
      "funding-rate-list",
      "apikey",
      "Description",
      "GET",
      "funding",
      "rate",
      "list",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "symbol",
      "string",
      "Yes",
      "Trading",
      "pair",
      "queries",
      "all",
      "not",
      "passed",
      "direction",
      "NEXT",
      "Direction",
      "PREV",
      "Previous",
      "page",
      "Next",
      "integer",
      "Record",
      "limit",
      "Limit",
      "startTime",
      "Start",
      "time",
      "endTime",
      "End",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "hasNext",
      "false",
      "there",
      "next",
      "hasPrev",
      "previous",
      "items",
      "Datasheets",
      "cast",
      "Fund",
      "coin",
      "Currency",
      "createdTime",
      "Time",
      "positionSide",
      "returnCode"
    ],
    "url": "/docs/futures/User/Get Fund Fee Information",
    "path": "futures/User/Get Fund Fee Information.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Get ListenKey",
    "title": "Get ListenKey",
    "description": "",
    "content": "Description GET /future/user/v1/user/listen-key Note: Valid time is 8 hours Limit Flow Rules 200/s/apikey Response `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": {}, \"returnCode\": 0 } `",
    "keywords": [
      "get",
      "listenkey",
      "futures",
      "user",
      "get listenkey",
      "mdx",
      "future",
      "v1",
      "listen-key",
      "apikey",
      "Description",
      "GET",
      "listen",
      "key",
      "Note",
      "Valid",
      "time",
      "hours",
      "Limit",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/User/Get ListenKey",
    "path": "futures/User/Get ListenKey.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Get Margin Call Information",
    "title": "Get Margin Call Information",
    "description": "",
    "content": "Description GET /future/user/v1/position/break-list --- Limit Flow Rules 200/s/apikey --- Response `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [ { \"breakPrice\": 0, //Margin call price. 0 means no margin call \"calMarkPrice\": 0, //Mark price \"contractType\": \"\", //Futures type: PERPETUAL;PREDICT \"entryPrice\": 0, //Open position average price \"isolatedMargin\": 0, //Isolated Margin \"leverage\": 0, //Leverage \"positionSide\": \"\", //Position side:LONG;SHORT \"positionSize\": 0, //Position quantity (Cont) \"positionType\": \"\", //Position type:CROSSED;ISOLATED \"symbol\": \"\" //Symbol } ], \"returnCode\": 0 } `",
    "keywords": [
      "get",
      "margin",
      "call",
      "information",
      "futures",
      "user",
      "get margin call information",
      "mdx",
      "future",
      "v1",
      "position",
      "break-list",
      "apikey",
      "Margin",
      "Mark",
      "Futures",
      "Open",
      "Isolated",
      "Leverage",
      "Position",
      "Symbol",
      "Description",
      "GET",
      "break",
      "list",
      "Limit",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "breakPrice",
      "price",
      "means",
      "calMarkPrice",
      "contractType",
      "type",
      "PERPETUAL",
      "PREDICT",
      "entryPrice",
      "average",
      "isolatedMargin",
      "leverage",
      "positionSide",
      "side",
      "LONG",
      "SHORT",
      "positionSize",
      "quantity",
      "Cont",
      "positionType",
      "CROSSED",
      "ISOLATED",
      "symbol",
      "returnCode"
    ],
    "url": "/docs/futures/User/Get Margin Call Information",
    "path": "futures/User/Get Margin Call Information.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Get Position Information",
    "title": "Get Position Information",
    "description": "",
    "content": "Description GET /future/user/v1/position/list Parameters | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | symbol | string | No | N/A | Trading pair (queries position information for all trading pairs when not provided) | --- Limit Flow Rules 200/s/apikey --- Response `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [ { \"autoMargin\": false, // Whether to automatically call margin \"availableCloseSize\": 0, // Available quantity (Cont) \"closeOrderSize\": 0, // Pending order quantity (Cont) \"entryPrice\": 0, // Open position average price \"isolatedMargin\": 0, // Isolated Margin \"leverage\": 0, // Leverage \"openOrderMarginFrozen\": 0, // Occupied open position margin \"positionSide\": \"\", // Position side \"positionSize\": 0, // Position quantity (Cont) \"positionType\": \"\", // Position type \"realizedProfit\": 0, // Realized profit and loss \"symbol\": \"\" // Trading pair } ], \"returnCode\": 0 } `",
    "keywords": [
      "get",
      "position",
      "information",
      "futures",
      "user",
      "get position information",
      "mdx",
      "future",
      "v1",
      "list",
      "apikey",
      "Description",
      "GET",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "symbol",
      "string",
      "Trading",
      "pair",
      "queries",
      "for",
      "all",
      "trading",
      "pairs",
      "when",
      "not",
      "provided",
      "Limit",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "autoMargin",
      "false",
      "Whether",
      "automatically",
      "call",
      "margin",
      "availableCloseSize",
      "Available",
      "quantity",
      "Cont",
      "closeOrderSize",
      "Pending",
      "order",
      "entryPrice",
      "Open",
      "average",
      "price",
      "isolatedMargin",
      "Isolated",
      "Margin",
      "leverage",
      "Leverage",
      "Occupied",
      "open",
      "positionSide",
      "Position",
      "side",
      "positionSize",
      "positionType",
      "type",
      "realizedProfit",
      "Realized",
      "profit",
      "and",
      "loss",
      "returnCode"
    ],
    "url": "/docs/futures/User/Get Position Information",
    "path": "futures/User/Get Position Information.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Get User's Account Flow Information",
    "title": "Get User's Account Flow Information",
    "description": "",
    "content": "Description GET /future/user/v1/balance/bills Parameters | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | symbol | string | Yes | N/A | Trading pairs (queries all if not passed) | | direction | string | No | NEXT | Direction (PREV: Previous page; NEXT: Next page) | | id | integer | No | N/A | Record ID | | limit | integer | No | 10 | Limit | | startTime | integer | No | N/A | Start time | | endTime | integer | No | N/A | End time | --- Limit Flow Rules 200/s/apikey --- Response `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"hasNext\": false, // Is there a next page \"hasPrev\": false, // Is there a previous page \"items\": [ // Datasheets { \"afterAmount\": 0, // Balance after change \"amount\": 0, // Quantity \"coin\": \"\", // Currency \"createdTime\": 0, // Time \"id\": 0, // ID \"side\": \"\", // ADD: transfer in; SUB: transfer out \"symbol\": \"\", // Trading pair \"type\": \"\" // EXCHANGE: transfer; CLOSE_POSITION: Offset PnL; TAKE_OVER: position takeover; QIANG_PING_MANAGER: Liquidation management fee; FUND: Fund fee; FEE: Fee (open position, liquidation, forced liquidation); ADL: Auto-deleveraging; MERGE: Position merge } ] }, \"returnCode\": 0 } `",
    "keywords": [
      "get",
      "user's",
      "account",
      "flow",
      "information",
      "futures",
      "user",
      "get user's account flow information",
      "mdx",
      "future",
      "v1",
      "balance",
      "bills",
      "apikey",
      "Description",
      "GET",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "symbol",
      "string",
      "Yes",
      "Trading",
      "pairs",
      "queries",
      "all",
      "not",
      "passed",
      "direction",
      "NEXT",
      "Direction",
      "PREV",
      "Previous",
      "page",
      "Next",
      "integer",
      "Record",
      "limit",
      "Limit",
      "startTime",
      "Start",
      "time",
      "endTime",
      "End",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "hasNext",
      "false",
      "there",
      "next",
      "hasPrev",
      "previous",
      "items",
      "Datasheets",
      "afterAmount",
      "Balance",
      "after",
      "change",
      "amount",
      "Quantity",
      "coin",
      "Currency",
      "createdTime",
      "Time",
      "side",
      "ADD",
      "transfer",
      "SUB",
      "out",
      "pair",
      "type",
      "EXCHANGE",
      "CLOSE_POSITION",
      "Offset",
      "PnL",
      "TAKE_OVER",
      "position",
      "takeover",
      "QIANG_PING_MANAGER",
      "Liquidation",
      "management",
      "fee",
      "FUND",
      "Fund",
      "FEE",
      "Fee",
      "open",
      "liquidation",
      "forced",
      "ADL",
      "Auto",
      "deleveraging",
      "MERGE",
      "Position",
      "merge",
      "returnCode"
    ],
    "url": "/docs/futures/User/Get User's Account Flow Information",
    "path": "futures/User/Get User's Account Flow Information.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Get symbol list",
    "title": "Get symbol list",
    "description": "",
    "content": "Description GET /v4/public/lever/symbol --- Limit Flow Rules 200/s/apikey --- Response `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [], \"result\": [ { \"symbolId\": 123, // Spot symbol id \"symbol\": \"btc_usdt\", // Spot symbol \"buyCurrencyId\": 123, // Buy currency id \"buyCurrency\": \"btc\", // Buy currency \"sellCurrencyId\": 234, // Sell currency id \"sellCurrency\": \"usdt\", // Sell currency \"maxLoanAmountBuy\": \"\", // The maximum amount of buy currency that can be borrowed \"maxLoanAmountSell\": \"\", // The maximum amount of sell currency that can be borrowed \"maxLeverage\": \"\", // Maximum loan multiple \"dailyInterestRate\": \"\", // Daily interest rate \"liquidationRate\": \"\", // Liquidation risk rate \"tipsRate\": \"\" // Reminder coefficient } ] } `",
    "keywords": [
      "get",
      "symbol",
      "list",
      "futures",
      "user",
      "get user's funds information",
      "mdx",
      "v4",
      "public",
      "lever",
      "apikey",
      "Description",
      "GET",
      "Limit",
      "Flow",
      "Rules",
      "Response",
      "json",
      "SUCCESS",
      "result",
      "symbolId",
      "Spot",
      "btc_usdt",
      "buyCurrencyId",
      "Buy",
      "currency",
      "buyCurrency",
      "btc",
      "sellCurrencyId",
      "Sell",
      "sellCurrency",
      "usdt",
      "maxLoanAmountBuy",
      "The",
      "maximum",
      "amount",
      "buy",
      "that",
      "can",
      "borrowed",
      "maxLoanAmountSell",
      "sell",
      "maxLeverage",
      "Maximum",
      "loan",
      "multiple",
      "dailyInterestRate",
      "Daily",
      "interest",
      "rate",
      "liquidationRate",
      "Liquidation",
      "risk",
      "tipsRate",
      "Reminder",
      "coefficient"
    ],
    "url": "/docs/futures/User/Get User's Funds Information",
    "path": "futures/User/Get User's Funds Information.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Get User's Single Currency Fund Information",
    "title": "Get User's Single Currency Fund Information",
    "description": "",
    "content": "Description GET /future/user/v1/balance/detail Parameters | Name | Type | Mandatory | Default | Description | | ---- | ------ | --------- | ------- | ----------- | | coin | string | Yes | N/A | Currency | --- Limit Flow Rules 200/s/apikey --- Response `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": { \"availableBalance\": 0, //Available balance \"coin\": \"\", //Currency \"isolatedMargin\": 0, //Frozen isolated margin \"openOrderMarginFrozen\": 0, //Frozen order \"crossedMargin\": 0, //Crossed Margin \"bonus\": 0, //Bonus \"coupon\": 0, //Coupon \"walletBalance\": 0 //Balance }, \"returnCode\": 0 } `",
    "keywords": [
      "get",
      "user's",
      "single",
      "currency",
      "fund",
      "information",
      "futures",
      "user",
      "get user's single currency fund information",
      "mdx",
      "future",
      "v1",
      "balance",
      "detail",
      "apikey",
      "Available",
      "Currency",
      "Frozen",
      "Crossed",
      "Bonus",
      "Coupon",
      "Balance",
      "Description",
      "GET",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "coin",
      "string",
      "Yes",
      "Limit",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "availableBalance",
      "isolatedMargin",
      "isolated",
      "margin",
      "order",
      "crossedMargin",
      "Margin",
      "bonus",
      "coupon",
      "walletBalance",
      "returnCode"
    ],
    "url": "/docs/futures/User/Get User's Single Currency Fund Information",
    "path": "futures/User/Get User's Single Currency Fund Information.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Get User's Step Rate",
    "title": "Get User's Step Rate",
    "description": "",
    "content": "Description GET /future/user/v1/user/step-rate Parameters | Name | Type | Mandatory | Default | Description | | ---- | ---- | --------- | ------- | ----------- | | None | | | | | --- Limit Flow Rules 200/s/apikey --- Response `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"success\", \"result\": { \"specialType\": false, // Is special account \"vipProType\": true, // Is professional rate \"stepRateProName\": \"VIP_PRO_1\", // Professional rate name \"discountLevel\": 2, // Discount level \"makerFee\": \"0.0015\", // Maker fee rate \"takerFee\": \"0.0025\", // Taker fee rate \"levelReturnDay\": 30, // Current level retention days \"totalTradeVolume\": \"1250000.50\", // Trading volume in the past 29 days + today (updated every 10 minutes) \"uBasedTotalTradeVolume\": \"850000.75\", // USDT-margined trading volume in the past 29 days + today \"coinBasedTotalTradeVolume\": \"400000.25\", // Coin-margined trading volume in the past 29 days + today \"walletBalance\": \"50000.00\", // Account equity (USDT, updated every 10 minutes): wallet balance + unrealized profit and loss \"notProfit\": \"1250.50\", // Position unrealized profit and loss (USDT, updated every 10 minutes) \"nextLvTradeVolume\": \"1500000.00\", // Next level trading volume \"lackTradeVolume\": \"250000.50\", // Trading volume needed for next level \"nextLvWalletBalance\": \"75000.00\", // Next level wallet balance \"lackWalletBalance\": \"25000.00\", // Wallet balance needed for next level \"nextLvMakerFee\": \"0.0010\", // Next level maker fee rate \"nextLvTakerFee\": \"0.0020\" // Next level taker fee rate }, \"returnCode\": 0 } `",
    "keywords": [
      "get",
      "user's",
      "step",
      "rate",
      "futures",
      "user",
      "get user's step rate",
      "mdx",
      "future",
      "v1",
      "step-rate",
      "apikey",
      "Description",
      "GET",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "None",
      "Limit",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "success",
      "result",
      "specialType",
      "false",
      "special",
      "account",
      "vipProType",
      "true",
      "professional",
      "stepRateProName",
      "VIP_PRO_1",
      "Professional",
      "name",
      "discountLevel",
      "Discount",
      "level",
      "makerFee",
      "Maker",
      "fee",
      "takerFee",
      "Taker",
      "levelReturnDay",
      "Current",
      "retention",
      "days",
      "totalTradeVolume",
      "Trading",
      "volume",
      "the",
      "past",
      "today",
      "updated",
      "every",
      "minutes",
      "USDT",
      "margined",
      "trading",
      "Coin",
      "walletBalance",
      "Account",
      "equity",
      "wallet",
      "balance",
      "unrealized",
      "profit",
      "and",
      "loss",
      "notProfit",
      "Position",
      "nextLvTradeVolume",
      "Next",
      "lackTradeVolume",
      "needed",
      "for",
      "next",
      "nextLvWalletBalance",
      "lackWalletBalance",
      "Wallet",
      "nextLvMakerFee",
      "maker",
      "nextLvTakerFee",
      "taker",
      "returnCode"
    ],
    "url": "/docs/futures/User/Get User's Step Rate",
    "path": "futures/User/Get User's Step Rate.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Get active position information",
    "title": "Get active position information",
    "description": "",
    "content": "Description GET /future/user/v1/position Parameters | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | symbol | string | No | N/A | Trading pairs (queries position information for all trading pairs when not provided) | --- Limit Flow Rules 200/s/apikey --- Response `json { \"error\": { \"args\": [], \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [ { \"autoMargin\": false, // Whether to automatically call margin \"availableCloseSize\": 0, // Available quantity (Cont) \"breakPrice\": 0, // Blowout price \"calMarkPrice\": 0, // Calculated mark price \"closeOrderSize\": 0, // Quantity of open order (Cont) \"contractType\": \"\", // Contract Types: PERPETUAL (Perpetual Contract), PREDICT (Predict Contract) \"entryPrice\": 0, // Average opening price \"floatingPL\": 0, // Unrealized profit or loss \"isolatedMargin\": 0, // Warehouse-by-warehouse margin \"leverage\": 0, // Leverage ratio \"openOrderMarginFrozen\": 0, // Occupation of deposit for opening order \"openOrderSize\": 0, // Opening warehouse orders occupied \"positionSide\": \"\", // Position direction \"positionSize\": 0, // Position quantity (Cont) \"positionType\": \"\", // Position type: CROSSED (full position); ISOLATED (warehouse by warehouse) \"profitId\": 0, // Take profit and stop loss id \"realizedProfit\": 0, // Realized profit and loss \"symbol\": \"\", // Trading pair \"triggerPriceType\": \"\", // Trigger price type 1. Index price 2: Mark price (reasonable price); 3: Latest price \"triggerProfitPrice\": 0, // Take profit trigger price \"triggerStopPrice\": 0, // Stop loss trigger price \"welfareAccount\": true } ], \"returnCode\": 0 } `",
    "keywords": [
      "get",
      "active",
      "position",
      "information",
      "futures",
      "user",
      "get active position information",
      "mdx",
      "future",
      "v1",
      "apikey",
      "Description",
      "GET",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "symbol",
      "string",
      "Trading",
      "pairs",
      "queries",
      "for",
      "all",
      "trading",
      "when",
      "not",
      "provided",
      "Limit",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "args",
      "code",
      "msg",
      "msgInfo",
      "result",
      "autoMargin",
      "false",
      "Whether",
      "automatically",
      "call",
      "margin",
      "availableCloseSize",
      "Available",
      "quantity",
      "Cont",
      "breakPrice",
      "Blowout",
      "price",
      "calMarkPrice",
      "Calculated",
      "mark",
      "closeOrderSize",
      "Quantity",
      "open",
      "order",
      "contractType",
      "Contract",
      "Types",
      "PERPETUAL",
      "Perpetual",
      "PREDICT",
      "Predict",
      "entryPrice",
      "Average",
      "opening",
      "floatingPL",
      "Unrealized",
      "profit",
      "loss",
      "isolatedMargin",
      "Warehouse",
      "warehouse",
      "leverage",
      "Leverage",
      "ratio",
      "Occupation",
      "deposit",
      "openOrderSize",
      "Opening",
      "orders",
      "occupied",
      "positionSide",
      "Position",
      "direction",
      "positionSize",
      "positionType",
      "type",
      "CROSSED",
      "full",
      "ISOLATED",
      "profitId",
      "Take",
      "and",
      "stop",
      "realizedProfit",
      "Realized",
      "pair",
      "triggerPriceType",
      "Trigger",
      "Index",
      "Mark",
      "reasonable",
      "Latest",
      "triggerProfitPrice",
      "trigger",
      "triggerStopPrice",
      "Stop",
      "welfareAccount",
      "true",
      "returnCode"
    ],
    "url": "/docs/futures/User/Get active position information",
    "path": "futures/User/Get active position information.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "get-contract-account-assets",
    "title": "Get Contract Account Assets",
    "description": "/future/user/v1/compat/balance/list",
    "content": "Limit Flow Rules 200/s/apikey --- Parameters | Name | Type | Mandatory | Default | Description | | -------------- | ------ | --------- | ------- | ----------- | | queryAccountId | string | false | N/A | Account ID | --- Request Example ` Response { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [ { \"accountId\": 500000000000, // account id \"userId\": 500000000000, // user id \"coin\": \"usdt\", // Currency \"underlyingType\": 2, // Coin standard, u standard \"walletBalance\": \"2078.57264793\", // Currency balance \"openOrderMarginFrozen\": \"0\", // Order frozen \"isolatedMargin\": \"0\", // Margin freeze \"crossedMargin\": \"0\", // Full margin freeze \"amount\": \"2078.57264793\", // Net asset balance \"totalAmount\": \"2078.57264793\", // Margin balance \"convertBtcAmount\": \"0.03638940\", // walletBalance conversion BTC \"convertUsdtAmount\": \"2078.5726\", // walletBalance conversion USDT \"profit\": \"0\", // Profit and loss \"notProfit\": \"0\", // Unrealized profit/loss \"bonus\": \"0\", // Trial fee \"coupon\": \"0\" // Deduction } ], \"returnCode\": 0 } `",
    "keywords": [
      "get",
      "contract",
      "account",
      "assets",
      "/future/user/v1/compat/balance/list",
      "futures",
      "user",
      "get contract account assets",
      "mdx",
      "apikey",
      "loss",
      "Limit",
      "Flow",
      "Rules",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "queryAccountId",
      "string",
      "false",
      "Account",
      "Request",
      "Example",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "accountId",
      "userId",
      "coin",
      "usdt",
      "Currency",
      "underlyingType",
      "Coin",
      "standard",
      "walletBalance",
      "balance",
      "Order",
      "frozen",
      "isolatedMargin",
      "Margin",
      "freeze",
      "crossedMargin",
      "Full",
      "margin",
      "amount",
      "Net",
      "asset",
      "totalAmount",
      "convertBtcAmount",
      "conversion",
      "BTC",
      "convertUsdtAmount",
      "USDT",
      "profit",
      "Profit",
      "and",
      "notProfit",
      "Unrealized",
      "bonus",
      "Trial",
      "fee",
      "coupon",
      "Deduction",
      "returnCode"
    ],
    "url": "/docs/futures/User/Get contract account assets",
    "path": "futures/User/Get contract account assets.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "List of Collected Trading Pairs",
    "title": "List of Collected Trading Pairs",
    "description": "",
    "content": "Description GET /future/user/v1/user/collection/list --- Limit Flow Rules 200/s/apikey --- Response `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [], \"returnCode\": 0 } `",
    "keywords": [
      "list",
      "of",
      "collected",
      "trading",
      "pairs",
      "futures",
      "user",
      "list of collected trading pairs",
      "mdx",
      "future",
      "v1",
      "collection",
      "apikey",
      "get",
      "Description",
      "GET",
      "Limit",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/User/List of Collected Trading Pairs",
    "path": "futures/User/List of Collected Trading Pairs.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Open Contract",
    "title": "Open Contract",
    "description": "",
    "content": "Description POST /future/user/v1/account/open Limit Flow Rules 200/s/apikey Response `json { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": true, \"returnCode\": 0 } `",
    "keywords": [
      "open",
      "contract",
      "futures",
      "user",
      "open contract ",
      "mdx",
      "future",
      "v1",
      "account",
      "apikey",
      "post",
      "Description",
      "POST",
      "Limit",
      "Flow",
      "Rules",
      "Response",
      "json",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "true",
      "returnCode"
    ],
    "url": "/docs/futures/User/Open Contract ",
    "path": "futures/User/Open Contract .mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "General_WSS_information",
    "title": "General WSS information",
    "description": "",
    "content": "Description This section describes general WebSocket information for connecting to XT's WebSocket services. Base Address wss://fstream.xt.com/ws/user Request Headers The request header of the compression extension protocol must be added. `plaintext Sec-Websocket-Extensions: permessage-deflate Subscription Steps Step 1: The user needs to call the interface: /v1/user/listen-key to get the listenKey. Step 2: When subscribing to user-related WebSocket events, users need to send: { \"method\": \"SUBSCRIBE\", \"params\": [\"order@{listenKey obtained in the previous step}\"], \"id\": \"test1\" } If you receive \"invalid_listen_key\", it means that the listenKey is expired or invalid, and you need to re-request to obtain the listenKey. Note: The listenKey is obtained through the interface. User-related data will be pushed after subscription. `",
    "keywords": [
      "general",
      "wss",
      "information",
      "futures",
      "websocket(v2)",
      "general wss information",
      "mdx",
      "fstream",
      "ws",
      "user",
      "v1",
      "listen-key",
      "Description",
      "This",
      "section",
      "describes",
      "WebSocket",
      "for",
      "connecting",
      "services",
      "Base",
      "Address",
      "com",
      "Request",
      "Headers",
      "The",
      "request",
      "header",
      "the",
      "compression",
      "extension",
      "protocol",
      "must",
      "added",
      "plaintext",
      "Sec",
      "Websocket",
      "Extensions",
      "permessage",
      "deflate",
      "Subscription",
      "Steps",
      "Step",
      "needs",
      "call",
      "interface",
      "listen",
      "key",
      "get",
      "listenKey",
      "When",
      "subscribing",
      "related",
      "events",
      "users",
      "need",
      "send",
      "method",
      "SUBSCRIBE",
      "params",
      "order",
      "obtained",
      "previous",
      "step",
      "test1",
      "you",
      "receive",
      "invalid_listen_key",
      "means",
      "that",
      "expired",
      "invalid",
      "and",
      "obtain",
      "Note",
      "through",
      "User",
      "data",
      "will",
      "pushed",
      "after",
      "subscription"
    ],
    "url": "/docs/futures/WEBSOCKET(V2)/General WSS information",
    "path": "futures/WEBSOCKET(V2)/General WSS information.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Heartbeat",
    "title": "Heartbeat",
    "description": "",
    "content": "Heartbeat Each link of the client needs to send a text \"ping\" periodically, and the server will reply to the text \"pong\". If the server does not receive a ping message from the client within 30 seconds, it will actively disconnect the link. Python Example `python Python code to send \"ping\" to the server import websocket ws = websocket.create_connection(\"wss://example.com/ws\") ws.send(\"ping\") Response Example { \"id\": \"123\", \"code\": 0, \"msg\": \"pong\" } `",
    "keywords": [
      "heartbeat",
      "futures",
      "websocket(v2)",
      "mdx",
      "example",
      "ws",
      "Heartbeat",
      "Each",
      "link",
      "the",
      "client",
      "needs",
      "send",
      "text",
      "ping",
      "periodically",
      "and",
      "server",
      "will",
      "reply",
      "pong",
      "does",
      "not",
      "receive",
      "message",
      "from",
      "within",
      "seconds",
      "actively",
      "disconnect",
      "Python",
      "Example",
      "python",
      "code",
      "import",
      "websocket",
      "create_connection",
      "wss",
      "com",
      "Response",
      "msg"
    ],
    "url": "/docs/futures/WEBSOCKET(V2)/Heartbeat",
    "path": "futures/WEBSOCKET(V2)/Heartbeat.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "K_line",
    "title": "K-line",
    "description": "",
    "content": "K-line Request Format: kline@{symbol},{interval} Available intervals: 1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 8h, 12h, 1d, 3d, 1w, 1M Example: kline@btc_usdt,5m Rate: 1000ms --- Python Example `python import websocket Open a WebSocket connection ws = websocket.create_connection(\"wss://fstream.xt.com/ws/market\") ws.send('{\"method\":\"SUBSCRIBE\",\"params\":[\"kline@btc_usdt,5m\"],\"id\":1}') { \"topic\": \"kline\", \"event\": \"kline@btc_usdt,5m\", \"data\": { \"s\": \"btc_index\", // Trading pair \"o\": \"49000\", // Opening price \"c\": \"50000\", // Closing price \"h\": \"0.1\", // Highest price \"l\": \"0.1\", // Lowest price \"a\": \"0.1\", // Volume \"v\": \"0.1\", // Turnover \"ch\": \"0.21\", // Quote change \"t\": 123124124 // Timestamp } } `",
    "keywords": [
      "k-line",
      "futures",
      "websocket(v2)",
      "line",
      "mdx",
      "fstream",
      "ws",
      "market",
      "Request",
      "Format",
      "kline",
      "symbol",
      "interval",
      "Available",
      "intervals",
      "Example",
      "btc_usdt",
      "Rate",
      "Python",
      "python",
      "import",
      "websocket",
      "Open",
      "WebSocket",
      "connection",
      "create_connection",
      "wss",
      "com",
      "send",
      "method",
      "SUBSCRIBE",
      "params",
      "topic",
      "event",
      "data",
      "btc_index",
      "Trading",
      "pair",
      "Opening",
      "price",
      "Closing",
      "Highest",
      "Lowest",
      "Volume",
      "Turnover",
      "Quote",
      "change",
      "Timestamp"
    ],
    "url": "/docs/futures/WEBSOCKET(V2)/K-line",
    "path": "futures/WEBSOCKET(V2)/K-line.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Orderbook_manage",
    "title": "Orderbook manage",
    "description": "",
    "content": "Orderbook Manage How to manage a local order book correctly Open a stream to wss://fstream.xt.com/ws/market, subscribe to depth_update@btc_usdt. Buffer the events you receive from the stream. Get a depth snapshot from https://fapi.xt.com/future/market/v1/public/depth?symbol=btc_usdt&level=500. Drop any event where u is less than or equal to lastUpdateId in the snapshot. The first processed event should have fu <= lastUpdateId+1 AND u >= lastUpdateId+1. While listening to the stream, each new event's fu should be equal to the previous event's u+1. The data in each event is the absolute quantity for a price level. If the quantity is 0, remove the price level. Receiving an event that removes a price level that is not in your local order book can happen and is normal. Note: Due to depth snapshots having a limit on the number of price levels, a price level outside of the initial snapshot that doesn't have a quantity change won't have an update in the Diff. Depth Stream. Consequently, those price levels will not be visible in the local order book even when applying all updates from the Diff. Depth Stream correctly. This can cause the local order book to have slight differences with the real order book. However, for most use cases, the depth limit of 500 is enough to understand the market and trade effectively. --- Python Example `python import websocket Open a WebSocket connection ws = websocket.create_connection(\"wss://fstream.xt.com/ws/market\") ws.send('{\"method\":\"SUBSCRIBE\",\"params\":[\"depth_update@btc_usdt\"],\"id\":1}') Response Example { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": [], \"returnCode\": 0 } `",
    "keywords": [
      "orderbook",
      "manage",
      "futures",
      "websocket(v2)",
      "orderbook manage",
      "mdx",
      "fstream",
      "ws",
      "market",
      "fapi",
      "future",
      "v1",
      "public",
      "depth",
      "Orderbook",
      "Manage",
      "How",
      "local",
      "order",
      "book",
      "correctly",
      "Open",
      "stream",
      "wss",
      "com",
      "subscribe",
      "depth_update",
      "btc_usdt",
      "Buffer",
      "the",
      "events",
      "you",
      "receive",
      "from",
      "Get",
      "snapshot",
      "https",
      "symbol",
      "level",
      "Drop",
      "any",
      "event",
      "where",
      "less",
      "than",
      "equal",
      "lastUpdateId",
      "The",
      "first",
      "processed",
      "should",
      "have",
      "AND",
      "While",
      "listening",
      "each",
      "new",
      "previous",
      "data",
      "absolute",
      "quantity",
      "for",
      "price",
      "remove",
      "Receiving",
      "that",
      "removes",
      "not",
      "your",
      "can",
      "happen",
      "and",
      "normal",
      "Note",
      "Due",
      "snapshots",
      "having",
      "limit",
      "number",
      "levels",
      "outside",
      "initial",
      "doesn",
      "change",
      "won",
      "update",
      "Diff",
      "Depth",
      "Stream",
      "Consequently",
      "those",
      "will",
      "visible",
      "even",
      "when",
      "applying",
      "all",
      "updates",
      "This",
      "cause",
      "slight",
      "differences",
      "with",
      "real",
      "However",
      "most",
      "use",
      "cases",
      "enough",
      "understand",
      "trade",
      "effectively",
      "Python",
      "Example",
      "python",
      "import",
      "websocket",
      "WebSocket",
      "connection",
      "create_connection",
      "send",
      "method",
      "SUBSCRIBE",
      "params",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/WEBSOCKET(V2)/Orderbook manage",
    "path": "futures/WEBSOCKET(V2)/Orderbook manage.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Push_message_format",
    "title": "Push message format",
    "description": "",
    "content": "Response Message Format This section outlines the response message format when interacting with WebSocket APIs. Response Format `javascript { \"id\": \"{id}\", // Call back ID \"code\": 1, // Result 0=success; 1=fail; 2=listenKey invalid \"msg\": \"\" } `",
    "keywords": [
      "push",
      "message",
      "format",
      "futures",
      "websocket(v2)",
      "push message format",
      "mdx",
      "Response",
      "Message",
      "Format",
      "This",
      "section",
      "outlines",
      "the",
      "response",
      "when",
      "interacting",
      "with",
      "WebSocket",
      "APIs",
      "javascript",
      "Call",
      "back",
      "code",
      "Result",
      "success",
      "fail",
      "listenKey",
      "invalid",
      "msg"
    ],
    "url": "/docs/futures/WEBSOCKET(V2)/Push message format",
    "path": "futures/WEBSOCKET(V2)/Push message format.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Request_message_format",
    "title": "Request message format",
    "description": "",
    "content": "Request Message Format Below is the format for subscribing and unsubscribing to WebSocket messages. --- Subscribe Message `javascript { \"method\": \"subscribe\", \"params\": [ \"{topic}@{arg},{arg}\", \"{topic}@{arg}\" ], \"id\": \"{id}\" // Call back ID } Unsubscribe Message { \"method\": \"unsubscribe\", \"params\": [ \"{topic}@{arg},{arg}\" ], \"id\": \"{id}\" // Call back ID } Response { \"error\": { \"code\": \"\", \"msg\": \"\" }, \"msgInfo\": \"\", \"result\": {}, \"returnCode\": 0 } `",
    "keywords": [
      "request",
      "message",
      "format",
      "futures",
      "websocket(v2)",
      "request message format",
      "mdx",
      "Request",
      "Message",
      "Format",
      "Below",
      "the",
      "for",
      "subscribing",
      "and",
      "unsubscribing",
      "WebSocket",
      "messages",
      "Subscribe",
      "javascript",
      "method",
      "subscribe",
      "params",
      "topic",
      "arg",
      "Call",
      "back",
      "Unsubscribe",
      "unsubscribe",
      "Response",
      "error",
      "code",
      "msg",
      "msgInfo",
      "result",
      "returnCode"
    ],
    "url": "/docs/futures/WEBSOCKET(V2)/General_WSS_information",
    "path": "futures/WEBSOCKET(V2)/Request message format.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Response_message_format",
    "title": "Response message format",
    "description": "",
    "content": "Response Message Format This section outlines the response message format when interacting with WebSocket APIs. Response Format `javascript { \"id\": \"{id}\", // Call back ID \"code\": 1, // Result 0=success; 1=fail; 2=listenKey invalid \"msg\": \"\" } Response Example (Success) { \"id\": \"123\", \"code\": 0, \"msg\": \"success\" } `",
    "keywords": [
      "response",
      "message",
      "format",
      "futures",
      "websocket(v2)",
      "response message format",
      "mdx",
      "Response",
      "Message",
      "Format",
      "This",
      "section",
      "outlines",
      "the",
      "when",
      "interacting",
      "with",
      "WebSocket",
      "APIs",
      "javascript",
      "Call",
      "back",
      "code",
      "Result",
      "success",
      "fail",
      "listenKey",
      "invalid",
      "msg",
      "Example",
      "Success"
    ],
    "url": "/docs/futures/WEBSOCKET(V2)/Response message format",
    "path": "futures/WEBSOCKET(V2)/Response message format.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "Trade_record",
    "title": "Trade record",
    "description": "",
    "content": "Trade Record Request Format: trade@{symbol} Example: trade@btc_usdt Rate: real --- Python Example `python import websocket Open a WebSocket connection ws = websocket.create_connection(\"wss://fstream.xt.com/ws/market\") ws.send('{\"method\":\"SUBSCRIBE\",\"params\":[\"trade@btc_usdt\"],\"id\":1}') { \"topic\": \"trade\", \"event\": \"trade@btc_usdt\", \"data\": { \"s\": \"btc_index\", // Trading pair \"p\": \"50000\", // Price \"a\": \"0.1\", // Quantity \"m\": \"BID\", // Deal side: BID (Buy) or ASK (Sell) \"t\": 123124124 // Timestamp } } `",
    "keywords": [
      "trade",
      "record",
      "futures",
      "websocket(v2)",
      "trade record",
      "mdx",
      "fstream",
      "ws",
      "market",
      "Trade",
      "Record",
      "Request",
      "Format",
      "symbol",
      "Example",
      "btc_usdt",
      "Rate",
      "real",
      "Python",
      "python",
      "import",
      "websocket",
      "Open",
      "WebSocket",
      "connection",
      "create_connection",
      "wss",
      "com",
      "send",
      "method",
      "SUBSCRIBE",
      "params",
      "topic",
      "event",
      "data",
      "btc_index",
      "Trading",
      "pair",
      "Price",
      "Quantity",
      "BID",
      "Deal",
      "side",
      "Buy",
      "ASK",
      "Sell",
      "Timestamp"
    ],
    "url": "/docs/futures/WEBSOCKET(V2)/Trade record",
    "path": "futures/WEBSOCKET(V2)/Trade record.mdx",
    "type": "futures",
    "category": "futures"
  },
  {
    "id": "index",
    "title": "合约跟单 API",
    "description": "XT 合约跟单 API 文档",
    "content": "合约跟单 API 欢迎使用 XT 合约跟单 API！本 API 专门为合约市场提供跟单交易功能，支持跟随优秀合约交易者的策略，实现自动化合约交易。 主要功能 合约跟单: 专门针对合约市场的跟单功能 杠杆管理: 智能杠杆控制和风险分配 合约选择: 支持多种合约合约跟单 风险控制: 合约特有的风险管理系统 快速开始 安装和配置 选择合约跟单对象 设置跟单参数 监控跟单状态 API 特点 合约专用: 专为合约市场优化 高杠杆支持: 支持高杠杆跟单 合约灵活: 多种合约类型支持 风险可控: 完善的风险控制机制 跟单模式 全仓跟单: 按比例复制所有合约交易 部分跟单: 选择性复制部分合约交易 智能跟单: AI 优化合约跟单策略 定时跟单: 按时间计划跟单 支持的合约类型 永续合约 交割合约 期权合约 混合合约 相关链接 现货交易 API 合约交易 API 保证金现货 API 跟单交易 API",
    "keywords": [
      "合约跟单",
      "api",
      "xt",
      "文档",
      "futures",
      "copy",
      "index",
      "mdx",
      "API"
    ],
    "url": "/docs/futures-copy/index",
    "path": "futures-copy/index.mdx",
    "type": "futures",
    "category": "futures-copy"
  },
  {
    "id": "installation",
    "title": "安装和配置",
    "description": "合约跟单 API 的安装和配置指南",
    "content": "安装和配置 环境要求 Node.js 16.0 或更高版本 npm 8.0 或 yarn 1.22 或更高版本 支持 ES6+ 的现代浏览器 稳定的网络连接 合约交易权限 安装步骤 安装 SDK `bash npm install @xt/futures-copy-api ` 或者使用 yarn： `bash yarn add @xt/futures-copy-api ` 导入模块 `javascript import {FuturesCopyAPI} from '@xt/futures-copy-api'; ` 初始化配置 `javascript const futuresCopyAPI = new FuturesCopyAPI({ apiKey: 'your-api-key', secretKey: 'your-secret-key', passphrase: 'your-passphrase', sandbox: false, baseURL: 'https://api.xt.com', }); ` 配置参数 | 参数 | 类型 | 必填 | 说明 | | ---------- | ------- | ---- | -------------------- | | apiKey | string | 是 | API 访问密钥 | | secretKey | string | 是 | API 签名密钥 | | passphrase | string | 是 | API 密码短语 | | sandbox | boolean | 否 | 是否使用沙盒环境 | | baseURL | string | 否 | API 基础地址 | | timeout | number | 否 | 请求超时时间（毫秒） | 合约跟单设置 选择合约跟单对象 `javascript try { const futuresLeaders = await futuresCopyAPI.getFuturesLeaders({ market: 'futures', // 合约市场 contractType: 'perpetual', // 合约类型 minProfit: 0.15, // 最小收益率 maxRisk: 0.08, // 最大风险 }); console.log('合约跟单对象:', futuresLeaders); } catch (error) { console.error('获取失败:', error.message); } ` 设置合约跟单参数 `javascript try { const result = await futuresCopyAPI.setFuturesCopyParameters({ leaderId: 'futures_leader123', copyRatio: 0.6, // 跟单比例 maxAmount: 5000, // 最大跟单金额 leverage: 10, // 杠杆倍数 stopLoss: 0.15, // 止损比例 takeProfit: 0.25, // 止盈比例 }); console.log('合约跟单参数设置成功:', result); } catch (error) { console.error('设置失败:', error.message); } ` 错误处理 `javascript try { const result = await futuresCopyAPI.startFuturesCopyTrading( 'futures_leader123', ); console.log('合约跟单开始成功:', result); } catch (error) { if (error.code === 'INSUFFICIENT_MARGIN') { console.error('保证金不足，请充值'); } else if (error.code === 'LEVERAGE_TOO_HIGH') { console.error('杠杆倍数过高，请调整'); } else if (error.code === 'CONTRACT_NOT_AVAILABLE') { console.error('合约不可用'); } else { console.error('请求失败:', error.message); } } ` 下一步 配置完成后，你可以： 选择合约跟单对象 设置合约跟单策略 监控合约跟单状态 管理合约跟单记录",
    "keywords": [
      "安装和配置",
      "合约跟单",
      "api",
      "的安装和配置指南",
      "futures",
      "copy",
      "installation",
      "mdx",
      "futures-copy-api",
      "Node",
      "npm",
      "yarn",
      "ES6",
      "SDK",
      "bash",
      "install",
      "add",
      "javascript",
      "import",
      "FuturesCopyAPI",
      "from",
      "const",
      "futuresCopyAPI",
      "new",
      "apiKey",
      "your",
      "key",
      "secretKey",
      "secret",
      "passphrase",
      "sandbox",
      "false",
      "baseURL",
      "https",
      "com",
      "string",
      "API",
      "boolean",
      "timeout",
      "number",
      "try",
      "futuresLeaders",
      "await",
      "getFuturesLeaders",
      "market",
      "contractType",
      "perpetual",
      "minProfit",
      "maxRisk",
      "console",
      "log",
      "catch",
      "error",
      "message",
      "result",
      "leaderId",
      "futures_leader123",
      "copyRatio",
      "maxAmount",
      "leverage",
      "stopLoss",
      "takeProfit",
      "code",
      "INSUFFICIENT_MARGIN",
      "else",
      "LEVERAGE_TOO_HIGH"
    ],
    "url": "/docs/futures-copy/installation",
    "path": "futures-copy/installation.mdx",
    "type": "futures",
    "category": "futures-copy"
  },
  {
    "id": "creating-pages",
    "title": "Creating Pages",
    "description": "",
    "content": "Creating Pages In this section, we will learn about creating pages in Docusaurus. The @docusaurus/plugin-content-pages plugin empowers you to create one-off standalone pages like a showcase page, playground page, or support page. You can use React components, or Markdown. :::note Pages do not have sidebars, only docs do. ::: :::info Check the Pages Plugin API Reference documentation for an exhaustive list of options. ::: Add a React page {#add-a-react-page} React is used as the UI library to create pages. Every page component should export a React component, and you can leverage the expressiveness of React to build rich and interactive content. Create a file /src/pages/helloReact.js: `jsx title=\"/src/pages/helloReact.js\" import React from 'react'; import Layout from '@theme/Layout'; export default function Hello() { return ( <Layout title=\"Hello\" description=\"Hello React Page\"> <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh', fontSize: '20px', }}> <p> Edit <code>pages/helloReact.js</code> and save to reload. </p> </div> </Layout> ); } ` Once you save the file, the development server will automatically reload the changes. Now open http://localhost:3000/helloReact and you will see the new page you just created. Each page doesn't come with any styling. You will need to import the Layout component from @theme/Layout and wrap your contents within that component if you want the navbar and/or footer to appear. :::tip You can also create TypeScript pages with the .tsx extension (helloReact.tsx). ::: Add a Markdown page {#add-a-markdown-page} Create a file /src/pages/helloMarkdown.md: `md title=\"/src/pages/helloMarkdown.md\" --- title: my hello page title description: my hello page description hide_table_of_contents: true --- Hello How are you? ` In the same way, a page will be created at http://localhost:3000/helloMarkdown. Markdown pages are less flexible than React pages because it always uses the theme layout. Here's an example Markdown page. :::tip You can use the full power of React in Markdown pages too, refer to the MDX documentation. ::: Routing {#routing} If you are familiar with other static site generators like Jekyll and Next, this routing approach will feel familiar to you. Any JavaScript file you create under /src/pages/ directory will be automatically converted to a website page, following the /src/pages/ directory hierarchy. For example: /src/pages/index.js → [baseUrl] /src/pages/foo.js → [baseUrl]/foo /src/pages/foo/test.js → [baseUrl]/foo/test /src/pages/foo/index.js → [baseUrl]/foo/ In this component-based development era, it is encouraged to co-locate your styling, markup, and behavior together into components. Each page is a component, and if you need to customize your page design with your own styles, we recommend co-locating your styles with the page component in its own directory. For example, to create a \"Support\" page, you could do one of the following: Add a /src/pages/support.js file Create a /src/pages/support/ directory and a /src/pages/support/index.js file. The latter is preferred as it has the benefits of letting you put files related to the page within that directory. For example, a CSS module file (styles.module.css) with styles meant to only be used on the \"Support\" page. :::note This is merely a recommended directory structure, and you will still need to manually import the CSS module file within your component module (support/index.js). ::: By default, any Markdown or JavaScript file starting with _ will be ignored and no routes will be created for that file (see the exclude option). `bash my-website ├── src │ └── pages │ ├── styles.module.css │ ├── index.js │ ├── _ignored.js │ ├── _ignored-folder │ │ ├── Component1.js │ │ └── Component2.js │ └── support │ ├── index.js │ └── styles.module.css . ` :::warning All JavaScript/TypeScript files within the src/pages/ directory will have corresponding website paths generated for them. If you want to create reusable components into that directory, use the exclude option (by default, files prefixed with _, test files(.test.js), and files in __tests__ directory are not turned into pages). ::: Duplicate Routes {#duplicate-routes} You may accidentally create multiple pages that are meant to be accessed on the same route. When this happens, Docusaurus will warn you about duplicate routes when you run yarn start or yarn build (behavior configurable through the onDuplicateRoutes config), but the site will still be built successfully. The page that was created last will be accessible, but it will override other conflicting pages. To resolve this issue, you should modify or remove any conflicting routes.",
    "keywords": [
      "creating",
      "pages",
      "guides",
      "mdx",
      "plugin-content-pages",
      "src",
      "helloReact",
      "Layout",
      "code",
      "div",
      "localhost",
      "or",
      "helloMarkdown",
      "index",
      "foo",
      "test",
      "support",
      "TypeScript",
      "Creating",
      "Pages",
      "this",
      "section",
      "will",
      "learn",
      "about",
      "Docusaurus",
      "The",
      "docusaurus",
      "plugin",
      "content",
      "empowers",
      "you",
      "create",
      "one",
      "off",
      "standalone",
      "like",
      "showcase",
      "page",
      "playground",
      "You",
      "can",
      "use",
      "React",
      "components",
      "Markdown",
      "note",
      "not",
      "have",
      "sidebars",
      "only",
      "docs",
      "info",
      "Check",
      "the",
      "Plugin",
      "API",
      "Reference",
      "documentation",
      "for",
      "exhaustive",
      "list",
      "options",
      "Add",
      "add",
      "react",
      "used",
      "library",
      "Every",
      "component",
      "should",
      "export",
      "and",
      "leverage",
      "expressiveness",
      "build",
      "rich",
      "interactive",
      "Create",
      "file",
      "jsx",
      "title",
      "import",
      "from",
      "theme",
      "default",
      "function",
      "Hello",
      "return",
      "description",
      "Page",
      "style",
      "display",
      "flex",
      "justifyContent",
      "center",
      "alignItems",
      "height",
      "fontSize",
      "Edit",
      "save",
      "reload",
      "Once",
      "development",
      "server",
      "automatically",
      "changes",
      "Now",
      "open",
      "http",
      "see",
      "new",
      "just",
      "created",
      "Each",
      "doesn",
      "come",
      "with",
      "any",
      "styling",
      "need",
      "wrap",
      "your",
      "contents",
      "within",
      "that",
      "want",
      "navbar",
      "footer",
      "appear",
      "tip",
      "also",
      "tsx",
      "extension",
      "markdown",
      "hello",
      "true",
      "How",
      "are",
      "same",
      "way",
      "less",
      "flexible",
      "than",
      "because",
      "always",
      "uses",
      "layout",
      "Here",
      "example",
      "full",
      "power",
      "too",
      "refer",
      "MDX",
      "Routing",
      "routing",
      "familiar",
      "other",
      "static",
      "site",
      "generators",
      "Jekyll",
      "Next",
      "approach",
      "feel",
      "Any",
      "JavaScript",
      "under",
      "directory",
      "converted",
      "website",
      "following",
      "hierarchy",
      "For",
      "baseUrl",
      "based",
      "era",
      "encouraged",
      "locate",
      "markup",
      "behavior",
      "together",
      "into",
      "customize",
      "design",
      "own",
      "styles",
      "recommend",
      "locating",
      "its",
      "Support",
      "could",
      "latter",
      "preferred",
      "has",
      "benefits",
      "letting",
      "put",
      "files",
      "related",
      "CSS",
      "module",
      "css",
      "meant",
      "This",
      "merely",
      "recommended",
      "structure",
      "still",
      "manually",
      "starting",
      "ignored",
      "routes",
      "exclude",
      "option",
      "bash",
      "_ignored",
      "folder",
      "Component1",
      "Component2",
      "warning",
      "All",
      "corresponding",
      "paths",
      "generated",
      "them",
      "reusable",
      "prefixed",
      "__tests__",
      "turned",
      "Duplicate",
      "Routes",
      "duplicate",
      "may",
      "accidentally",
      "multiple",
      "accessed",
      "route",
      "When",
      "happens",
      "warn",
      "when",
      "run",
      "yarn",
      "start",
      "configurable",
      "through",
      "onDuplicateRoutes",
      "config",
      "but",
      "built",
      "successfully",
      "was",
      "last",
      "accessible",
      "override",
      "conflicting",
      "resolve",
      "issue",
      "modify",
      "remove"
    ],
    "url": "/docs/guides/creating-pages",
    "path": "guides/creating-pages.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "create-doc",
    "title": "Create a doc",
    "description": "Create a Markdown Document",
    "content": "Create a doc Create a Markdown file, greeting.md, and place it under the docs directory. `bash website root directory of your site ├── docs │ └── greeting.md ├── src │ └── pages ├── docusaurus.config.js ├── ... ` `md --- description: Create a doc page with rich content. --- Hello from Docusaurus Are you ready to create the documentation site for your open source project? Headers will show up on the table of contents on the upper right So that your users will know what this page is all about without scrolling down or even without reading too much. Only h2 and h3 will be in the TOC by default. You can configure the TOC heading levels either per-document or in the theme configuration. The headers are well-spaced so that the hierarchy is clear. lists will help you present the key points that you want your users to remember and you may nest them multiple times ` :::note All files prefixed with an underscore (_) under the docs directory are treated as \"partial\" pages and will be ignored by default. Read more about importing partial pages. ::: Doc front matter {#doc-front-matter} The front matter is used to provide additional metadata for your doc page. Front matter is optional—Docusaurus will be able to infer all necessary metadata without the front matter. For example, the doc tags feature introduced below requires using front matter. For all possible fields, see the API documentation. Doc tags {#doc-tags} Tags are declared in the front matter and introduce another dimension of categorization in addition to the docs sidebar. It is possible to define tags inline, or to reference predefined tags declared in a tags file (optional, usually docs/tags.yml). In the following example: docusaurus references a predefined tag key declared in docs/tags.yml Releases is an inline tag, because it does not exist in docs/tags.yml `md title=\"docs/my-doc.md\" --- tags: Releases docusaurus --- Title Content ` `yml title=\"docs/tags.yml\" docusaurus: label: 'Docusaurus' permalink: '/docusaurus' description: 'Docs related to the Docusaurus framework' ` :::tip Tags can also be declared with tags: [Demo, Getting started]. Read more about all the possible Yaml array syntaxes. ::: Organizing folder structure {#organizing-folder-structure} How the Markdown files are arranged under the docs folder can have multiple impacts on Docusaurus content generation. However, most of them can be decoupled from the file structure. Document ID {#document-id} Every document has a unique id. By default, a document id is the name of the document (without the extension) relative to the root docs directory. For example, the ID of greeting.md is greeting, and the ID of guide/hello.md is guide/hello. `bash website Root directory of your site └── docs ├── greeting.md └── guide └── hello.md ` However, the last part of the id can be defined by the user in the front matter. For example, if guide/hello.md's content is defined as below, its final id is guide/part1. `md --- id: part1 --- Lorem ipsum ` The ID is used to refer to a document when hand-writing sidebars, or when using docs-related layout components or hooks. Doc URLs {#doc-urls} By default, the document's URL location is derived from the document id, which in turn is based on the document's file path. If a file is named one of the following, the file name won't be included in the URL: Named as index (case-insensitive): docs/Guides/index.md Named as README (case-insensitive): docs/Guides/README.mdx Same name as parent folder: docs/Guides/Guides.md In all cases, the default slug would only be /Guides, without the /index, /README, or duplicate /Guides segment. :::note This convention is exactly the same as the category index convention. However, the isCategoryIndex configuration does _not_ affect the document URL. ::: Use the slug front matter to provide an explicit document URL and override the default one. For example, suppose your site structure looks like this: `bash website Root directory of your site └── docs └── guide └── hello.md ` By default, hello.md will be available at /docs/guide/hello. You can change its URL location to /docs/bonjour: `md --- slug: /bonjour --- Lorem ipsum ` slug will be appended to the doc plugin's routeBasePath, which is /docs by default. See Docs-only mode for how to remove the /docs part from the URL. :::note It is possible to use: absolute slugs: slug: /mySlug, slug: /... relative slugs: slug: mySlug, slug: ./../mySlug... ::: :::tip Changing a document's filename or id, will change its default URL. To prevent breaking permalinks when renaming files, we recommend setting an explicit slug to keep your URLs stable. ::: Making a document available at the root If you want a document to be available at the root, and have a path like https://docusaurus.io/docs/, you can use the slug front matter: `md --- id: my-home-doc slug: / --- Lorem ipsum ` Sidebars {#sidebars} When using autogenerated sidebars, the file structure will determine the sidebar structure. Our recommendation for file system organization is: make your file system mirror the sidebar structure (so you don't need to handwrite your sidebars.js file), and use the slug front matter to customize URLs of each document.",
    "keywords": [
      "create",
      "doc",
      "markdown",
      "document",
      "guides",
      "docs",
      "mdx",
      "tags",
      "my-doc",
      "docusaurus",
      "hello",
      "part1",
      "Guides",
      "index",
      "README",
      "guide",
      "bonjour",
      "mySlug",
      "Create",
      "Markdown",
      "file",
      "greeting",
      "and",
      "place",
      "under",
      "the",
      "directory",
      "bash",
      "website",
      "root",
      "your",
      "site",
      "src",
      "pages",
      "config",
      "description",
      "page",
      "with",
      "rich",
      "content",
      "Hello",
      "from",
      "Docusaurus",
      "Are",
      "you",
      "ready",
      "documentation",
      "for",
      "open",
      "source",
      "project",
      "Headers",
      "will",
      "show",
      "table",
      "contents",
      "upper",
      "right",
      "that",
      "users",
      "know",
      "what",
      "this",
      "all",
      "about",
      "without",
      "scrolling",
      "down",
      "even",
      "reading",
      "too",
      "much",
      "Only",
      "TOC",
      "default",
      "You",
      "can",
      "configure",
      "heading",
      "levels",
      "either",
      "per",
      "theme",
      "configuration",
      "The",
      "headers",
      "are",
      "well",
      "spaced",
      "hierarchy",
      "clear",
      "lists",
      "help",
      "present",
      "key",
      "points",
      "want",
      "remember",
      "may",
      "nest",
      "them",
      "multiple",
      "times",
      "note",
      "All",
      "files",
      "prefixed",
      "underscore",
      "treated",
      "partial",
      "ignored",
      "Read",
      "more",
      "importing",
      "Doc",
      "front",
      "matter",
      "used",
      "provide",
      "additional",
      "metadata",
      "Front",
      "optional",
      "able",
      "infer",
      "necessary",
      "For",
      "example",
      "feature",
      "introduced",
      "below",
      "requires",
      "using",
      "possible",
      "fields",
      "see",
      "API",
      "Tags",
      "declared",
      "introduce",
      "another",
      "dimension",
      "categorization",
      "addition",
      "sidebar",
      "define",
      "inline",
      "reference",
      "predefined",
      "usually",
      "yml",
      "following",
      "references",
      "tag",
      "Releases",
      "because",
      "does",
      "not",
      "exist",
      "title",
      "Title",
      "Content",
      "label",
      "permalink",
      "Docs",
      "related",
      "framework",
      "tip",
      "also",
      "Demo",
      "Getting",
      "started",
      "Yaml",
      "array",
      "syntaxes",
      "Organizing",
      "folder",
      "structure",
      "organizing",
      "How",
      "arranged",
      "have",
      "impacts",
      "generation",
      "However",
      "most",
      "decoupled",
      "Document",
      "Every",
      "has",
      "unique",
      "name",
      "extension",
      "relative",
      "Root",
      "last",
      "part",
      "defined",
      "user",
      "its",
      "final",
      "Lorem",
      "ipsum",
      "refer",
      "when",
      "hand",
      "writing",
      "sidebars",
      "layout",
      "components",
      "hooks",
      "URLs",
      "urls",
      "URL",
      "location",
      "derived",
      "which",
      "turn",
      "based",
      "path",
      "named",
      "one",
      "won",
      "included",
      "Named",
      "case",
      "insensitive",
      "Same",
      "parent",
      "cases",
      "slug",
      "would",
      "only",
      "duplicate",
      "segment",
      "This",
      "convention",
      "exactly",
      "same",
      "category",
      "isCategoryIndex",
      "_not_",
      "affect",
      "Use",
      "explicit",
      "override",
      "suppose",
      "looks",
      "like",
      "available",
      "change",
      "appended",
      "plugin",
      "routeBasePath",
      "See",
      "mode",
      "how",
      "remove",
      "use",
      "absolute",
      "slugs",
      "Changing",
      "filename",
      "prevent",
      "breaking",
      "permalinks",
      "renaming",
      "recommend",
      "setting",
      "keep",
      "stable",
      "Making",
      "https",
      "home",
      "Sidebars",
      "When",
      "autogenerated",
      "determine",
      "Our",
      "recommendation",
      "system",
      "organization",
      "make",
      "mirror",
      "don",
      "need",
      "handwrite",
      "customize",
      "each"
    ],
    "url": "/docs/guides/docs/docs-create-doc",
    "path": "guides/docs/docs-create-doc.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "introduction",
    "title": "Docs Introduction",
    "description": "",
    "content": "Docs Introduction The docs feature provides users with a way to organize Markdown files in a hierarchical format. :::info Check the Docs Plugin API Reference documentation for an exhaustive list of options. ::: Your site's documentation is organized by four levels, from lowest to highest: Individual pages. Sidebars. Versions. Plugin instances. The guide will introduce them in that order: starting from how individual pages can be configured, to how to create a sidebar or multiple ones, to how to create and manage versions, to how to use multiple docs plugin instances. Docs-only mode {#docs-only-mode} A freshly initialized Docusaurus site has the following structure: ` example.com/ -> generated from src/pages/index.js example.com/docs/intro -> generated from docs/intro.md example.com/docs/tutorial-basics/... -> generated from docs/tutorial-basics/... ... example.com/blog/2021/08/26/welcome -> generated from blog/2021-08-26-welcome/index.md example.com/blog/2021/08/01/mdx-blog-post -> generated from blog/2021-08-01-mdx-blog-post.mdx ... ` All docs will be served under the subroute docs/. But what if your site only has docs, or you want to prioritize your docs by putting them at the root? Assume that you have the following in your configuration: `js title=\"docusaurus.config.js\" export default { // ... presets: [ [ '@docusaurus/preset-classic', { docs: { / docs plugin options / }, blog: { / blog plugin options / }, // ... }, ], ], }; ` To enter docs-only mode, change it to like this: `js title=\"docusaurus.config.js\" export default { // ... presets: [ [ '@docusaurus/preset-classic', { docs: { // highlight-next-line routeBasePath: '/', // Serve the docs at the site's root / other docs plugin options / }, // highlight-next-line blog: false, // Optional: disable the blog plugin // ... }, ], ], }; ` Note that you don't necessarily have to give up on using the blog or other plugins; all that routeBasePath: '/' does is that instead of serving the docs through https://example.com/docs/some-doc, they are now at the site root: https://example.com/some-doc. The blog, if enabled, can still be accessed through the blog/ subroute. Don't forget to put some page at the root (https://example.com/) through adding the front matter: `md title=\"docs/intro.md\" --- highlight-next-line slug: / --- This page will be the home page when users visit https://example.com/. ` :::warning If you added slug: / to a doc to make it the homepage, you should delete the existing homepage at ./src/pages/index.js, or else there will be two files mapping to the same route! ::: Now, the site's structure will be like the following: ` example.com/ -> generated from docs/intro.md example.com/tutorial-basics/... -> generated from docs/tutorial-basics/... ... ` :::tip There's also a \"blog-only mode\" for those who only want to use the blog feature of Docusaurus. You can use the same method detailed above. Follow the setup instructions on Blog-only mode. :::",
    "keywords": [
      "docs",
      "introduction",
      "guides",
      "mdx",
      "pages",
      "index",
      "intro",
      "tutorial-basics",
      "blog",
      "2021",
      "08",
      "26",
      "welcome",
      "2021-08-26-welcome",
      "01",
      "mdx-blog-post",
      "2021-08-01-mdx-blog-post",
      "preset-classic",
      "example",
      "some-doc",
      "src",
      "Docs",
      "Introduction",
      "The",
      "feature",
      "provides",
      "users",
      "with",
      "way",
      "organize",
      "Markdown",
      "files",
      "hierarchical",
      "format",
      "info",
      "Check",
      "the",
      "Plugin",
      "API",
      "Reference",
      "documentation",
      "for",
      "exhaustive",
      "list",
      "options",
      "Your",
      "site",
      "organized",
      "four",
      "levels",
      "from",
      "lowest",
      "highest",
      "Individual",
      "Sidebars",
      "Versions",
      "instances",
      "guide",
      "will",
      "introduce",
      "them",
      "that",
      "order",
      "starting",
      "how",
      "individual",
      "can",
      "configured",
      "create",
      "sidebar",
      "multiple",
      "ones",
      "and",
      "manage",
      "versions",
      "use",
      "plugin",
      "only",
      "mode",
      "freshly",
      "initialized",
      "Docusaurus",
      "has",
      "following",
      "structure",
      "com",
      "generated",
      "tutorial",
      "basics",
      "post",
      "All",
      "served",
      "under",
      "subroute",
      "But",
      "what",
      "your",
      "you",
      "want",
      "prioritize",
      "putting",
      "root",
      "Assume",
      "have",
      "configuration",
      "title",
      "docusaurus",
      "config",
      "export",
      "default",
      "presets",
      "preset",
      "classic",
      "enter",
      "change",
      "like",
      "this",
      "highlight",
      "next",
      "line",
      "routeBasePath",
      "Serve",
      "other",
      "false",
      "Optional",
      "disable",
      "Note",
      "don",
      "necessarily",
      "give",
      "using",
      "plugins",
      "all",
      "does",
      "instead",
      "serving",
      "through",
      "https",
      "some",
      "doc",
      "they",
      "are",
      "now",
      "enabled",
      "still",
      "accessed",
      "Don",
      "forget",
      "put",
      "page",
      "adding",
      "front",
      "matter",
      "slug",
      "This",
      "home",
      "when",
      "visit",
      "warning",
      "added",
      "make",
      "homepage",
      "should",
      "delete",
      "existing",
      "else",
      "there",
      "two",
      "mapping",
      "same",
      "route",
      "Now",
      "tip",
      "There",
      "also",
      "those",
      "who",
      "You",
      "method",
      "detailed",
      "above",
      "Follow",
      "setup",
      "instructions",
      "Blog"
    ],
    "url": "/docs/guides/docs/docs-introduction",
    "path": "guides/docs/docs-introduction.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "multi-instance",
    "title": "Docs Multi-instance",
    "description": "Use multiple docs plugin instances on a single Docusaurus site.",
    "content": "Docs Multi-instance The @docusaurus/plugin-content-docs plugin can support multi-instance. :::note This feature is only useful for versioned documentation. It is recommended to be familiar with docs versioning before reading this page. If you just want multiple sidebars, you can do so within one plugin. ::: Use-cases {#use-cases} Sometimes you want a Docusaurus site to host 2 distinct sets of documentation (or more). These documentations may even have different versioning/release lifecycles. Mobile SDKs documentation {#mobile-sdks-documentation} If you build a cross-platform mobile SDK, you may have 2 documentations: Android SDK documentation (v1.0, v1.1) iOS SDK documentation (v1.0, v2.0) In this case, you can use a distinct docs plugin instance per mobile SDK documentation. :::warning If each documentation instance is very large, you should rather create 2 distinct Docusaurus sites. If someone edits the iOS documentation, is it really useful to rebuild everything, including the whole Android documentation that did not change? ::: Versioned and unversioned doc {#versioned-and-unversioned-doc} Sometimes, you want some documents to be versioned, while other documents are more \"global\", and it feels useless to version them. We use this pattern on the Docusaurus website itself: The /docs/\\* section is versioned The /community/\\* section is unversioned Setup {#setup} Suppose you have 2 documentations: Product: some versioned doc about your product Community: some unversioned doc about the community around your product In this case, you should use the same plugin twice in your site configuration. :::warning @docusaurus/preset-classic already includes a docs plugin instance for you! ::: When using the preset: `js title=\"docusaurus.config.js\" export default { presets: [ [ '@docusaurus/preset-classic', { docs: { // highlight-start // id: 'product', // omitted => default instance // highlight-end path: 'product', routeBasePath: 'product', sidebarPath: './sidebarsProduct.js', // ... other options }, }, ], ], plugins: [ [ '@docusaurus/plugin-content-docs', { // highlight-start id: 'community', // highlight-end path: 'community', routeBasePath: 'community', sidebarPath: './sidebarsCommunity.js', // ... other options }, ], ], }; ` When not using the preset: `js title=\"docusaurus.config.js\" export default { plugins: [ [ '@docusaurus/plugin-content-docs', { // highlight-start // id: 'product', // omitted => default instance // highlight-end path: 'product', routeBasePath: 'product', sidebarPath: './sidebarsProduct.js', // ... other options }, ], [ '@docusaurus/plugin-content-docs', { // highlight-start id: 'community', // highlight-end path: 'community', routeBasePath: 'community', sidebarPath: './sidebarsCommunity.js', // ... other options }, ], ], }; ` Don't forget to assign a unique id attribute to plugin instances. :::note We consider that the product instance is the most important one, and make it the \"default\" instance by not assigning any ID. ::: Versioned paths {#versioned-paths} Each plugin instance will store versioned docs in a distinct folder. The default plugin instance will use these paths: website/versions.json website/versioned_docs website/versioned_sidebars The other plugin instances (with an id attribute) will use these paths: website/[pluginId]_versions.json website/[pluginId]_versioned_docs website/[pluginId]_versioned_sidebars :::tip You can omit the id attribute (defaults to default) for one of the docs plugin instances. The instance paths will be simpler, and retro-compatible with a single-instance setup. ::: Tagging new versions {#tagging-new-versions} Each plugin instance will have its own CLI command to tag a new version. They will be displayed if you run: `bash npm2yarn npm run docusaurus -- --help ` To version the product/default docs plugin instance: `bash npm2yarn npm run docusaurus docs:version 1.0.0 ` To version the non-default/community docs plugin instance: `bash npm2yarn npm run docusaurus docs:version:community 1.0.0 ` Docs navbar items {#docs-navbar-items} Each docs-related theme navbar items take an optional docsPluginId attribute. For example, if you want to have one version dropdown for each mobile SDK (iOS and Android), you could do: `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { items: [ { type: 'docsVersionDropdown', // highlight-start docsPluginId: 'ios', // highlight-end }, { type: 'docsVersionDropdown', // highlight-start docsPluginId: 'android', // highlight-end }, ], }, }, }; `",
    "keywords": [
      "docs",
      "multi-instance",
      "use",
      "multiple",
      "plugin",
      "instances",
      "on",
      "single",
      "docusaurus",
      "site.",
      "guides",
      "multi",
      "instance",
      "mdx",
      "plugin-content-docs",
      "release",
      "community",
      "preset-classic",
      "sidebarsProduct",
      "sidebarsCommunity",
      "versions",
      "versioned_docs",
      "versioned_sidebars",
      "default",
      "Docs",
      "Multi",
      "The",
      "content",
      "can",
      "support",
      "note",
      "This",
      "feature",
      "only",
      "useful",
      "for",
      "versioned",
      "documentation",
      "recommended",
      "familiar",
      "with",
      "versioning",
      "before",
      "reading",
      "this",
      "page",
      "you",
      "just",
      "want",
      "sidebars",
      "within",
      "one",
      "Use",
      "cases",
      "Sometimes",
      "Docusaurus",
      "site",
      "host",
      "distinct",
      "sets",
      "more",
      "These",
      "documentations",
      "may",
      "even",
      "have",
      "different",
      "lifecycles",
      "Mobile",
      "SDKs",
      "mobile",
      "sdks",
      "build",
      "cross",
      "platform",
      "SDK",
      "Android",
      "iOS",
      "case",
      "per",
      "warning",
      "each",
      "very",
      "large",
      "should",
      "rather",
      "create",
      "sites",
      "someone",
      "edits",
      "the",
      "really",
      "rebuild",
      "everything",
      "including",
      "whole",
      "that",
      "did",
      "not",
      "change",
      "Versioned",
      "and",
      "unversioned",
      "doc",
      "some",
      "documents",
      "while",
      "other",
      "are",
      "global",
      "feels",
      "useless",
      "version",
      "them",
      "pattern",
      "website",
      "itself",
      "section",
      "Setup",
      "setup",
      "Suppose",
      "Product",
      "about",
      "your",
      "product",
      "Community",
      "around",
      "same",
      "twice",
      "configuration",
      "preset",
      "classic",
      "already",
      "includes",
      "When",
      "using",
      "title",
      "config",
      "export",
      "presets",
      "highlight",
      "start",
      "omitted",
      "end",
      "path",
      "routeBasePath",
      "sidebarPath",
      "options",
      "plugins",
      "Don",
      "forget",
      "assign",
      "unique",
      "attribute",
      "consider",
      "most",
      "important",
      "make",
      "assigning",
      "any",
      "paths",
      "Each",
      "will",
      "store",
      "folder",
      "these",
      "json",
      "pluginId",
      "_versions",
      "_versioned_docs",
      "_versioned_sidebars",
      "tip",
      "You",
      "omit",
      "defaults",
      "simpler",
      "retro",
      "compatible",
      "Tagging",
      "new",
      "tagging",
      "its",
      "own",
      "CLI",
      "command",
      "tag",
      "They",
      "displayed",
      "run",
      "bash",
      "npm2yarn",
      "npm",
      "help",
      "non",
      "navbar",
      "items",
      "related",
      "theme",
      "take",
      "optional",
      "docsPluginId",
      "For",
      "example",
      "dropdown",
      "could",
      "themeConfig",
      "type",
      "docsVersionDropdown",
      "ios",
      "android"
    ],
    "url": "/docs/guides/docs/docs-multi-instance",
    "path": "guides/docs/docs-multi-instance.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "autogenerated",
    "title": "Autogenerated",
    "description": "",
    "content": "Autogenerated `mdx-code-block import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; ` Docusaurus can create a sidebar automatically from your filesystem structure: each folder creates a sidebar category, and each file creates a doc link. `ts type SidebarItemAutogenerated = { type: 'autogenerated'; dirName: string; // Source folder to generate the sidebar slice from (relative to docs) }; ` Docusaurus can generate a full sidebar from your docs folder: `js title=\"sidebars.js\" export default { myAutogeneratedSidebar: [ // highlight-start { type: 'autogenerated', dirName: '.', // '.' means the current docs folder }, // highlight-end ], }; ` An autogenerated item is converted by Docusaurus to a sidebar slice (also discussed in category shorthands): a list of items of type doc or category, so you can splice multiple autogenerated items from multiple directories, interleaving them with regular sidebar items, in one sidebar level. <details> <summary>A real-world example</summary> Consider this file structure: `bash docs ├── api │ ├── product1-api │ │ └── api.md │ └── product2-api │ ├── basic-api.md │ └── pro-api.md ├── intro.md └── tutorials ├── advanced │ ├── advanced1.md │ ├── advanced2.md │ └── read-more │ ├── resource1.md │ └── resource2.md ├── easy │ ├── easy1.md │ └── easy2.md ├── tutorial-end.md ├── tutorial-intro.md └── tutorial-medium.md ` And assume every doc's ID is just its file name. If you define an autogenerated sidebar like this: `js title=\"sidebars.js\" export default { mySidebar: [ 'intro', { type: 'category', label: 'Tutorials', items: [ 'tutorial-intro', // highlight-start { type: 'autogenerated', dirName: 'tutorials/easy', // Generate sidebar slice from docs/tutorials/easy }, // highlight-end 'tutorial-medium', // highlight-start { type: 'autogenerated', dirName: 'tutorials/advanced', // Generate sidebar slice from docs/tutorials/advanced }, // highlight-end 'tutorial-end', ], }, // highlight-start { type: 'autogenerated', dirName: 'api', // Generate sidebar slice from docs/api }, // highlight-end { type: 'category', label: 'Community', items: ['team', 'chat'], }, ], }; ` It would be resolved as: `js title=\"sidebars.js\" export default { mySidebar: [ 'intro', { type: 'category', label: 'Tutorials', items: [ 'tutorial-intro', // highlight-start // Two files in docs/tutorials/easy 'easy1', 'easy2', // highlight-end 'tutorial-medium', // highlight-start // Two files and a folder in docs/tutorials/advanced 'advanced1', 'advanced2', { type: 'category', label: 'read-more', items: ['resource1', 'resource2'], }, // highlight-end 'tutorial-end', ], }, // highlight-start // Two folders in docs/api { type: 'category', label: 'product1-api', items: ['api'], }, { type: 'category', label: 'product2-api', items: ['basic-api', 'pro-api'], }, // highlight-end { type: 'category', label: 'Community', items: ['team', 'chat'], }, ], }; ` Note how the autogenerate source directories themselves don't become categories: only the items they contain do. This is what we mean by \"sidebar slice\". </details> Category index convention {#category-index-convention} Docusaurus can automatically link a category to its index document. A category index document is a document following one of those filename conventions: Named as index (case-insensitive): docs/Guides/index.md Named as README (case-insensitive): docs/Guides/README.mdx Same name as parent folder: docs/Guides/Guides.md This is equivalent to using a category with a doc link: `js title=\"sidebars.js\" export default { docs: [ // highlight-start { type: 'category', label: 'Guides', link: {type: 'doc', id: 'Guides/index'}, items: [], }, // highlight-end ], }; ` :::tip Naming your introductory document README.md makes it show up when browsing the folder using the GitHub interface, while using index.md makes the behavior more in line with how HTML files are served. ::: :::tip If a folder only has one index page, it will be turned into a link instead of a category. This is useful for asset collocation: ` some-doc ├── index.md ├── img1.png └── img2.png ` ::: <details> <summary>Customizing category index matching</summary> It is possible to opt out any of the category index conventions, or define even more conventions. You can inject your own isCategoryIndex matcher through the sidebarItemsGenerator callback. For example, you can also pick intro as another file name eligible for automatically becoming the category index. `js title=\"docusaurus.config.js\" export default { plugins: [ [ '@docusaurus/plugin-content-docs', { async sidebarItemsGenerator({ ...args, isCategoryIndex: defaultCategoryIndexMatcher, // The default matcher implementation, given below defaultSidebarItemsGenerator, }) { return defaultSidebarItemsGenerator({ ...args, // highlight-start isCategoryIndex(doc) { return ( // Also pick intro.md in addition to the default ones doc.fileName.toLowerCase() === 'intro' || defaultCategoryIndexMatcher(doc) ); }, // highlight-end }); }, }, ], ], }; ` Or choose to not have any category index convention. `js title=\"docusaurus.config.js\" export default { plugins: [ [ '@docusaurus/plugin-content-docs', { async sidebarItemsGenerator({ ...args, isCategoryIndex: defaultCategoryIndexMatcher, // The default matcher implementation, given below defaultSidebarItemsGenerator, }) { return defaultSidebarItemsGenerator({ ...args, // highlight-start isCategoryIndex() { // No doc will be automatically picked as category index return false; }, // highlight-end }); }, }, ], ], }; ` The isCategoryIndex matcher will be provided with three fields: fileName, the file's name without extension and with casing preserved directories, the list of directory names _from the lowest level to the highest level_, relative to the docs root directory extension, the file's extension, with a leading dot. For example, for a doc file at guides/sidebar/autogenerated.md, the props the matcher receives are `js const props = { fileName: 'autogenerated', directories: ['sidebar', 'guides'], extension: '.md', }; ` The default implementation is: `js function isCategoryIndex({fileName, directories}) { const eligibleDocIndexNames = [ 'index', 'readme', directories[0].toLowerCase(), ]; return eligibleDocIndexNames.includes(fileName.toLowerCase()); } ` </details> Autogenerated sidebar metadata {#autogenerated-sidebar-metadata} For handwritten sidebar definitions, you would provide metadata to sidebar items through sidebars.js; for autogenerated, Docusaurus would read them from the item's respective file. In addition, you may want to adjust the relative position of each item because, by default, items within a sidebar slice will be generated in alphabetical order (using file and folder names). Doc item metadata {#doc-item-metadata} The label, className, and customProps attributes are declared in front matter as sidebar_label, sidebar_class_name, and sidebar_custom_props, respectively. Position can be specified in the same way, via sidebar_position front matter. `md title=\"docs/tutorials/tutorial-easy.md\" --- highlight-start sidebar_position: 2 sidebar_label: Easy sidebar_class_name: green highlight-end --- Easy Tutorial This is the easy tutorial! ` Category item metadata {#category-item-metadata} Add a _category_.json or _category_.yml file in the respective folder. You can specify any category metadata and also the position metadata. label, className, position, and customProps will default to the respective values of the category's linked doc, if there is one. <Tabs> <TabItem value=\"JSON\"> `json title=\"docs/tutorials/_category_.json\" { \"position\": 2.5, \"label\": \"Tutorial\", \"collapsible\": true, \"collapsed\": false, \"className\": \"red\", \"link\": { \"type\": \"generated-index\", \"title\": \"Tutorial overview\" }, \"customProps\": { \"description\": \"This description can be used in the swizzled DocCard\" } } ` </TabItem> <TabItem value=\"YAML\"> `yml title=\"docs/tutorials/_category_.yml\" position: 2.5 float position is supported label: 'Tutorial' collapsible: true make the category collapsible collapsed: false keep the category open by default className: red link: type: generated-index title: Tutorial overview customProps: description: This description can be used in the swizzled DocCard ` </TabItem> </Tabs> :::info If the link is explicitly specified, Docusaurus will not apply any default conventions. The doc links can be specified relatively, e.g. if the category is generated with the guides directory, \"link\": {\"type\": \"doc\", \"id\": \"intro\"} will be resolved to the ID guides/intro, only falling back to intro if a doc with the former ID doesn't exist. You can also use link: null to opt out of default conventions and not generate any category index page. ::: :::info The position metadata is only used within a sidebar slice: Docusaurus does not re-order other items of your sidebar. ::: Using number prefixes {#using-number-prefixes} A simple way to order an autogenerated sidebar is to prefix docs and folders by number prefixes, which also makes them appear in the file system in the same order when sorted by file name: `bash docs ├── 01-Intro.md ├── 02-Tutorial Easy │ ├── 01-First Part.md │ ├── 02-Second Part.md │ └── 03-End.md ├── 03-Tutorial Advanced │ ├── 01-First Part.md │ ├── 02-Second Part.md │ ├── 03-Third Part.md │ └── 04-End.md └── 04-End.md ` To make it easier to adopt, Docusaurus supports multiple number prefix patterns. By default, Docusaurus will remove the number prefix from the doc id, title, label, and URL paths. :::warning Prefer using additional metadata. Updating a number prefix can be annoying, as it can require updating multiple existing Markdown links: `diff title=\"docs/02-Tutorial Easy/01-First Part.md\" Check the Tutorial End; Check the Tutorial End; ` ::: Customize the sidebar items generator {#customize-the-sidebar-items-generator} You can provide a custom sidebarItemsGenerator function in the docs plugin (or preset) config: `js title=\"docusaurus.config.js\" export default { plugins: [ [ '@docusaurus/plugin-content-docs', { // highlight-start async sidebarItemsGenerator({ defaultSidebarItemsGenerator, numberPrefixParser, item, version, docs, categoriesMetadata, isCategoryIndex, }) { // Example: return an hardcoded list of static sidebar items return [ {type: 'doc', id: 'doc1'}, {type: 'doc', id: 'doc2'}, ]; }, // highlight-end }, ], ], }; ` :::tip Re-use and enhance the default generator instead of writing a generator from scratch: the default generator we provide is 250 lines long. Add, update, filter, re-order the sidebar items according to your use case: `js title=\"docusaurus.config.js\" // highlight-start // Reverse the sidebar items ordering (including nested category items) function reverseSidebarItems(items) { // Reverse items in categories const result = items.map((item) => { if (item.type === 'category') { return {...item, items: reverseSidebarItems(item.items)}; } return item; }); // Reverse items at current level result.reverse(); return result; } // highlight-end export default { plugins: [ [ '@docusaurus/plugin-content-docs', { // highlight-start async sidebarItemsGenerator({defaultSidebarItemsGenerator, ...args}) { const sidebarItems = await defaultSidebarItemsGenerator(args); return reverseSidebarItems(sidebarItems); }, // highlight-end }, ], ], }; ` :::",
    "keywords": [
      "autogenerated",
      "guides",
      "docs",
      "sidebar",
      "mdx",
      "Tabs",
      "TabItem",
      "summary",
      "easy",
      "tutorials",
      "advanced",
      "api",
      "details",
      "Guides",
      "index",
      "README",
      "plugin-content-docs",
      "tutorial-easy",
      "_category_",
      "intro",
      "02-Tutorial",
      "01-First",
      "Autogenerated",
      "code",
      "block",
      "import",
      "from",
      "theme",
      "Docusaurus",
      "can",
      "create",
      "automatically",
      "your",
      "filesystem",
      "structure",
      "each",
      "folder",
      "creates",
      "category",
      "and",
      "file",
      "doc",
      "link",
      "type",
      "dirName",
      "string",
      "Source",
      "generate",
      "the",
      "slice",
      "relative",
      "full",
      "title",
      "sidebars",
      "export",
      "default",
      "highlight",
      "start",
      "means",
      "current",
      "end",
      "item",
      "converted",
      "also",
      "discussed",
      "shorthands",
      "list",
      "items",
      "you",
      "splice",
      "multiple",
      "directories",
      "interleaving",
      "them",
      "with",
      "regular",
      "one",
      "level",
      "real",
      "world",
      "example",
      "Consider",
      "this",
      "bash",
      "product1",
      "product2",
      "basic",
      "pro",
      "advanced1",
      "advanced2",
      "read",
      "more",
      "resource1",
      "resource2",
      "easy1",
      "easy2",
      "tutorial",
      "medium",
      "And",
      "assume",
      "every",
      "just",
      "its",
      "name",
      "define",
      "like",
      "mySidebar",
      "label",
      "Tutorials",
      "Generate",
      "Community",
      "team",
      "chat",
      "would",
      "resolved",
      "Two",
      "files",
      "folders",
      "Note",
      "how",
      "autogenerate",
      "source",
      "themselves",
      "don",
      "become",
      "categories",
      "only",
      "they",
      "contain",
      "This",
      "what",
      "mean",
      "Category",
      "convention",
      "document",
      "following",
      "those",
      "filename",
      "conventions",
      "Named",
      "case",
      "insensitive",
      "Same",
      "parent",
      "equivalent",
      "using",
      "tip",
      "Naming",
      "introductory",
      "makes",
      "show",
      "when",
      "browsing",
      "GitHub",
      "interface",
      "while",
      "behavior",
      "line",
      "HTML",
      "are",
      "served",
      "has",
      "page",
      "will",
      "turned",
      "into",
      "instead",
      "useful",
      "for",
      "asset",
      "collocation",
      "some",
      "img1",
      "png",
      "img2",
      "Customizing",
      "matching",
      "possible",
      "opt",
      "out",
      "any",
      "even",
      "You",
      "inject",
      "own",
      "isCategoryIndex",
      "matcher",
      "through",
      "callback",
      "For",
      "pick",
      "another",
      "eligible",
      "becoming",
      "docusaurus",
      "config",
      "plugins",
      "plugin",
      "content",
      "async",
      "args",
      "The",
      "implementation",
      "given",
      "below",
      "return",
      "Also",
      "addition",
      "ones",
      "fileName",
      "toLowerCase",
      "choose",
      "not",
      "have",
      "picked",
      "false",
      "provided",
      "three",
      "fields",
      "without",
      "extension",
      "casing",
      "preserved",
      "directory",
      "names",
      "_from",
      "lowest",
      "highest",
      "level_",
      "root",
      "leading",
      "dot",
      "props",
      "receives",
      "const",
      "function",
      "readme",
      "includes",
      "metadata",
      "handwritten",
      "definitions",
      "provide",
      "respective",
      "may",
      "want",
      "adjust",
      "position",
      "because",
      "within",
      "generated",
      "alphabetical",
      "order",
      "Doc",
      "className",
      "customProps",
      "attributes",
      "declared",
      "front",
      "matter",
      "sidebar_label",
      "sidebar_class_name",
      "sidebar_custom_props",
      "respectively",
      "Position",
      "specified",
      "same",
      "way",
      "via",
      "sidebar_position",
      "Easy",
      "green",
      "Tutorial",
      "Add",
      "json",
      "yml",
      "specify",
      "values",
      "linked",
      "there",
      "value",
      "JSON",
      "collapsible",
      "true",
      "collapsed",
      "red",
      "overview",
      "description",
      "used",
      "swizzled",
      "DocCard",
      "YAML",
      "float",
      "supported",
      "make",
      "keep",
      "open",
      "info",
      "explicitly",
      "apply",
      "links",
      "relatively",
      "falling",
      "back",
      "former",
      "doesn",
      "exist",
      "use",
      "null",
      "does",
      "other",
      "Using",
      "number",
      "prefixes",
      "simple",
      "prefix",
      "which",
      "appear",
      "system",
      "sorted",
      "Intro",
      "First",
      "Part",
      "Second",
      "End",
      "Advanced",
      "Third",
      "easier",
      "adopt",
      "supports",
      "patterns",
      "remove",
      "URL",
      "paths",
      "warning",
      "Prefer",
      "additional",
      "Updating",
      "annoying",
      "require",
      "updating",
      "existing",
      "Markdown",
      "diff",
      "Check",
      "Customize",
      "generator",
      "customize",
      "custom",
      "preset",
      "numberPrefixParser",
      "version",
      "categoriesMetadata",
      "Example",
      "hardcoded",
      "static",
      "doc1",
      "doc2",
      "enhance",
      "writing",
      "scratch",
      "lines",
      "long",
      "update",
      "filter",
      "according",
      "Reverse",
      "ordering",
      "including",
      "nested",
      "reverseSidebarItems",
      "result",
      "map",
      "reverse",
      "sidebarItems",
      "await"
    ],
    "url": "/docs/guides/docs/sidebar/autogenerated",
    "path": "guides/docs/sidebar/autogenerated.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "index",
    "title": "Sidebar",
    "description": "",
    "content": "Sidebar Creating a sidebar is useful to: Group multiple related documents into an ordered tree Display a common sidebar on each of those documents Provide paginated navigation, with next/previous button To use sidebars on your Docusaurus site: Define a sidebars file that exports a dictionary of sidebar objects. Pass its path to the @docusaurus/plugin-docs plugin directly or via @docusaurus/preset-classic. `js title=\"docusaurus.config.js\" export default { presets: [ [ '@docusaurus/preset-classic', { docs: { // highlight-next-line sidebarPath: './sidebars.js', }, }, ], ], }; ` :::important Node.js runtime The sidebars file is run with Node.js. You can't use or import browsers APIs, React or JSX in it. ::: This section serves as an overview of miscellaneous features of the doc sidebar. In the following sections, we will more systematically introduce the following concepts: `mdx-code-block import DocCardList from '@theme/DocCardList'; <DocCardList /> ` Default sidebar {#default-sidebar} If the sidebarPath is unspecified, Docusaurus automatically generates a sidebar for you, by using the filesystem structure of the docs folder: `js title=\"sidebars.js\" export default { mySidebar: [ { type: 'autogenerated', dirName: '.', // generate sidebar from the docs folder (or versioned_docs/<version>) }, ], }; ` You can also define your sidebars explicitly. Sidebar object {#sidebar-object} A sidebar is a hierarchy of categories, doc links, and other hyperlinks. `ts type Sidebar = // Normal syntax | SidebarItem[] // Shorthand syntax | {[categoryLabel: string]: SidebarItem[]}; ` For example: `js title=\"sidebars.js\" export default { mySidebar: [ { type: 'category', label: 'Getting Started', items: [ { type: 'doc', id: 'doc1', }, ], }, { type: 'category', label: 'Docusaurus', items: [ { type: 'doc', id: 'doc2', }, { type: 'doc', id: 'doc3', }, ], }, { type: 'link', label: 'Learn more', href: 'https://example.com', }, ], }; ` This is a sidebars file that exports one sidebar, called mySidebar. It has three top-level items: two categories and one external link. Within each category, there are a few doc links. A sidebars file can contain multiple sidebar objects, identified by their object keys. `ts type SidebarsFile = { [sidebarID: string]: Sidebar; }; ` Theme configuration {#theme-configuration} Hideable sidebar {#hideable-sidebar} By enabling the themeConfig.docs.sidebar.hideable option, you can make the entire sidebar hideable, allowing users to better focus on the content. This is especially useful when content is consumed on medium-sized screens (e.g. tablets). `js title=\"docusaurus.config.js\" export default { themeConfig: { // highlight-start docs: { sidebar: { hideable: true, }, }, // highlight-end }, }; ` Auto-collapse sidebar categories {#auto-collapse-sidebar-categories} The themeConfig.docs.sidebar.autoCollapseCategories option would collapse all sibling categories when expanding one category. This saves the user from having too many categories open and helps them focus on the selected section. `js title=\"docusaurus.config.js\" export default { themeConfig: { // highlight-start docs: { sidebar: { autoCollapseCategories: true, }, }, // highlight-end }, }; ` Passing CSS classes {#passing-css-classes} To pass CSS classes to a sidebar item, add the optional className attribute to any of the items. This is useful to apply visual customizations to specific sidebar items. `js { type: 'doc', id: 'doc1', // highlight-start className: 'sidebar-item--highlighted', // highlight-end }; ` Passing custom props {#passing-custom-props} To pass in custom props to a sidebar item, add the optional customProps object to any of the items. This is useful to apply site customizations by swizzling React components rendering sidebar items. `js { type: 'doc', id: 'doc1', // highlight-start customProps: { badges: ['new', 'green'], featured: true, }, // highlight-end }; ` Passing a unique key {#passing-unique-key} Passing a unique key attribute can help uniquely identify a sidebar item. Sometimes other attributes (such as label) are not enough to distinguish two sidebar items from each other. `js { type: 'category', // highlight-start label: 'API', // You may have multiple categories with this widespread label key: 'api-for-feature-1', // and now, they can be uniquely identified // highlight-end }; ` :::info How is this useful? Docusaurus only uses the key attribute to generate unique i18n translation keys. When a translation key conflict happens (issue), Docusaurus will tell you to apply a key to distinguish sidebar items. Alternatively, you may have your own reasons for using the key attribute that will be passed to the respective sidebar item React components. ::: Sidebar Breadcrumbs {#sidebar-breadcrumbs} By default, breadcrumbs are rendered at the top, using the \"sidebar path\" of the current page. This behavior can be disabled with plugin options: `js title=\"docusaurus.config.js\" export default { presets: [ [ '@docusaurus/preset-classic', { docs: { // highlight-next-line breadcrumbs: false, }, }, ], ], }; ` Complex sidebars example {#complex-sidebars-example} A real-world example from the Docusaurus site: `mdx-code-block import CodeBlock from '@theme/CodeBlock'; <CodeBlock language=\"js\" title=\"sidebars.js\"> {require('!!raw-loader!@site/sidebars.ts') .default .split('\\n') // remove comments .map((line) => !['//','/',''].some(commentPattern => line.trim().startsWith(commentPattern)) && line) .filter(Boolean) .join('\\n')} </CodeBlock> `",
    "keywords": [
      "sidebar",
      "guides",
      "docs",
      "index",
      "mdx",
      "previous",
      "plugin-docs",
      "preset-classic",
      "sidebars",
      "DocCardList",
      "example",
      "CodeBlock",
      "Sidebar",
      "Creating",
      "useful",
      "Group",
      "multiple",
      "related",
      "documents",
      "into",
      "ordered",
      "tree",
      "Display",
      "common",
      "each",
      "those",
      "Provide",
      "paginated",
      "navigation",
      "with",
      "next",
      "button",
      "use",
      "your",
      "Docusaurus",
      "site",
      "Define",
      "file",
      "that",
      "exports",
      "dictionary",
      "objects",
      "Pass",
      "its",
      "path",
      "the",
      "docusaurus",
      "plugin",
      "directly",
      "via",
      "preset",
      "classic",
      "title",
      "config",
      "export",
      "default",
      "presets",
      "highlight",
      "line",
      "sidebarPath",
      "important",
      "Node",
      "runtime",
      "The",
      "run",
      "You",
      "can",
      "import",
      "browsers",
      "APIs",
      "React",
      "JSX",
      "This",
      "section",
      "serves",
      "overview",
      "miscellaneous",
      "features",
      "doc",
      "following",
      "sections",
      "will",
      "more",
      "systematically",
      "introduce",
      "concepts",
      "code",
      "block",
      "from",
      "theme",
      "Default",
      "unspecified",
      "automatically",
      "generates",
      "for",
      "you",
      "using",
      "filesystem",
      "structure",
      "folder",
      "mySidebar",
      "type",
      "autogenerated",
      "dirName",
      "generate",
      "versioned_docs",
      "version",
      "also",
      "define",
      "explicitly",
      "object",
      "hierarchy",
      "categories",
      "links",
      "and",
      "other",
      "hyperlinks",
      "Normal",
      "syntax",
      "SidebarItem",
      "Shorthand",
      "categoryLabel",
      "string",
      "For",
      "category",
      "label",
      "Getting",
      "Started",
      "items",
      "doc1",
      "doc2",
      "doc3",
      "link",
      "Learn",
      "href",
      "https",
      "com",
      "one",
      "called",
      "has",
      "three",
      "top",
      "level",
      "two",
      "external",
      "Within",
      "there",
      "are",
      "few",
      "contain",
      "identified",
      "their",
      "keys",
      "SidebarsFile",
      "sidebarID",
      "Theme",
      "configuration",
      "Hideable",
      "hideable",
      "enabling",
      "themeConfig",
      "option",
      "make",
      "entire",
      "allowing",
      "users",
      "better",
      "focus",
      "content",
      "especially",
      "when",
      "consumed",
      "medium",
      "sized",
      "screens",
      "tablets",
      "start",
      "true",
      "end",
      "Auto",
      "collapse",
      "auto",
      "would",
      "all",
      "sibling",
      "expanding",
      "saves",
      "user",
      "having",
      "too",
      "many",
      "open",
      "helps",
      "them",
      "selected",
      "Passing",
      "CSS",
      "classes",
      "passing",
      "css",
      "pass",
      "item",
      "add",
      "optional",
      "className",
      "attribute",
      "any",
      "apply",
      "visual",
      "customizations",
      "specific",
      "highlighted",
      "custom",
      "props",
      "customProps",
      "swizzling",
      "components",
      "rendering",
      "badges",
      "new",
      "green",
      "featured",
      "unique",
      "key",
      "help",
      "uniquely",
      "identify",
      "Sometimes",
      "attributes",
      "such",
      "not",
      "enough",
      "distinguish",
      "API",
      "may",
      "have",
      "this",
      "widespread",
      "api",
      "feature",
      "now",
      "they",
      "info",
      "How",
      "only",
      "uses",
      "i18n",
      "translation",
      "When",
      "conflict",
      "happens",
      "issue",
      "tell",
      "Alternatively",
      "own",
      "reasons",
      "passed",
      "respective",
      "Breadcrumbs",
      "breadcrumbs",
      "rendered",
      "current",
      "page",
      "behavior",
      "disabled",
      "options",
      "false",
      "Complex",
      "complex",
      "real",
      "world",
      "language",
      "require",
      "raw",
      "loader",
      "split",
      "remove",
      "comments",
      "map",
      "some",
      "commentPattern",
      "trim",
      "startsWith",
      "filter",
      "Boolean",
      "join"
    ],
    "url": "/docs/guides/docs/sidebar/index",
    "path": "guides/docs/sidebar/index.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "items",
    "title": "Sidebar items",
    "description": "",
    "content": "Sidebar items `mdx-code-block import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import BrowserWindow from '@site/src/components/BrowserWindow'; ` The sidebar supports various item types: Doc: link to a doc page, associating it with the sidebar Link: link to any internal or external page Category: creates a dropdown of sidebar items Autogenerated: generate a sidebar slice automatically HTML: renders pure HTML in the item's position Ref: link to a doc page, without making the item take part in navigation generation Doc: link to a doc {#sidebar-item-doc} Use the doc type to link to a doc page and assign that doc to a sidebar: `ts type SidebarItemDoc = // Normal syntax | { type: 'doc'; id: string; label: string; // Sidebar label text key?: string; // Sidebar key to uniquely identify the item className?: string; // Class name for sidebar label customProps?: Record<string, unknown>; // Custom props } // Shorthand syntax | string; // docId shortcut ` Example: `js title=\"sidebars.js\" export default { mySidebar: [ // Normal syntax: // highlight-start { type: 'doc', id: 'doc1', // document ID label: 'Getting started', // sidebar label }, // highlight-end // Shorthand syntax: // highlight-start 'doc2', // document ID // highlight-end ], }; ` If you use the doc shorthand or autogenerated sidebar, you would lose the ability to customize the sidebar label through item definition. You can, however, use the sidebar_label Markdown front matter within that doc, which has higher precedence over the label key in the sidebar item. Similarly, you can use sidebar_custom_props to declare custom metadata for a doc page. :::note A doc item sets an implicit sidebar association. Don't assign the same doc to multiple sidebars: change the type to ref instead. ::: :::tip Sidebar custom props is a useful way to propagate arbitrary doc metadata to the client side, so you can get additional information when using any doc-related hook that fetches a doc object. ::: Link: link to any page {#sidebar-item-link} Use the link type to link to any page (internal or external) that is not a doc. `ts type SidebarItemLink = { type: 'link'; label: string; href: string; description?: string; key?: string; className?: string; customProps?: Record<string, unknown>; }; ` Example: `js title=\"sidebars.js\" export default { myLinksSidebar: [ // highlight-start // External link { type: 'link', label: 'Facebook', // The link label href: 'https://facebook.com', // The external URL }, // highlight-end // highlight-start // Internal link { type: 'link', label: 'Home', // The link label href: '/', // The internal path }, // highlight-end ], }; ` HTML: render custom markup {#sidebar-item-html} Use the html type to render custom HTML within the item's <li> tag. This can be useful for inserting custom items such as dividers, section titles, ads, and images. `ts type SidebarItemHtml = { type: 'html'; value: string; defaultStyle?: boolean; // Use default menu item styles key?: string; className?: string; customProps?: Record<string, unknown>; }; ` Example: `js title=\"sidebars.js\" export default { myHtmlSidebar: [ // highlight-start { type: 'html', value: '<img src=\"sponsor.png\" alt=\"Sponsor\" />', // The HTML to be rendered defaultStyle: true, // Use the default menu item styling }, // highlight-end ], }; ` :::tip The menu item is already wrapped in an <li> tag, so if your custom item is simple, such as a title, just supply a string as the value and use the className property to style it: `js title=\"sidebars.js\" export default { myHtmlSidebar: [ { type: 'html', value: 'Core concepts', className: 'sidebar-title', }, ], }; ` ::: Category: create a hierarchy {#sidebar-item-category} Use the category type to create a hierarchy of sidebar items. `ts type SidebarItemCategory = { type: 'category'; label: string; // Sidebar label text. items: SidebarItem[]; // Array of sidebar items. description?: string; key?: string; className?: string; customProps?: Record<string, unknown>; // Category options: collapsible: boolean; // Set the category to be collapsible collapsed: boolean; // Set the category to be initially collapsed or open by default link: SidebarItemCategoryLinkDoc | SidebarItemCategoryLinkGeneratedIndex; }; ` Example: `js title=\"sidebars.js\" export default { docs: [ { type: 'category', label: 'Guides', collapsible: true, collapsed: false, items: [ 'creating-pages', { type: 'category', label: 'Docs', items: ['introduction', 'sidebar', 'markdown-features', 'versioning'], }, ], }, ], }; ` :::tip Use the shorthand syntax when you don't need customizations: `js title=\"sidebars.js\" export default { docs: { Guides: [ 'creating-pages', { Docs: ['introduction', 'sidebar', 'markdown-features', 'versioning'], }, ], }, }; ` ::: Category links {#category-link} With category links, clicking on a category can navigate you to another page. :::tip Use category links to introduce a category of documents. Autogenerated categories can use the _category_.yml file to declare the link. ::: Generated index page {#generated-index-page} You can auto-generate an index page that displays all the direct children of this category. The slug allows you to customize the generated page's route, which defaults to /category/[categoryName]. `js title=\"sidebars.js\" export default { docs: [ { type: 'category', label: 'Guides', // highlight-start link: { type: 'generated-index', title: 'Docusaurus Guides', description: 'Learn about the most important Docusaurus concepts!', slug: '/category/docusaurus-guides', keywords: ['guides'], image: '/img/docusaurus.png', }, // highlight-end items: ['pages', 'docs', 'blog', 'search'], }, ], }; ` See it in action on the Docusaurus Guides page. :::tip Use generated-index links as a quick way to get an introductory document. ::: Doc link {#category-doc-link} A category can link to an existing document. `js title=\"sidebars.js\" export default { docs: [ { type: 'category', label: 'Guides', // highlight-start link: {type: 'doc', id: 'introduction'}, // highlight-end items: ['pages', 'docs', 'blog', 'search'], }, ], }; ` See it in action on the i18n introduction page. Embedding generated index in doc page {#embedding-generated-index-in-doc-page} You can embed the generated cards list in a normal doc page as well with the DocCardList component. It will display all the sidebar items of the parent category of the current document. `md title=\"docs/sidebar/index.md\" import DocCardList from '@theme/DocCardList'; <DocCardList /> ` `mdx-code-block <BrowserWindow> import DocCardList from '@theme/DocCardList'; <DocCardList /> </BrowserWindow> ` Collapsible categories {#collapsible-categories} We support the option to expand/collapse categories. Categories are collapsible by default, but you can disable collapsing with collapsible: false. `js title=\"sidebars.js\" export default { docs: [ { type: 'category', label: 'Guides', items: [ 'creating-pages', { type: 'category', // highlight-next-line collapsible: false, label: 'Docs', items: ['introduction', 'sidebar', 'markdown-features', 'versioning'], }, ], }, ], }; ` To make all categories non-collapsible by default, set the sidebarCollapsible option in plugin-content-docs to false: `js title=\"docusaurus.config.js\" export default { presets: [ [ '@docusaurus/preset-classic', { docs: { // highlight-next-line sidebarCollapsible: false, }, }, ], ], }; ` :::note The option in sidebars.js takes precedence over plugin configuration, so it is possible to make certain categories collapsible when sidebarCollapsible is set to false globally. ::: Expanded categories by default {#expanded-categories-by-default} Collapsible categories are collapsed by default. If you want them to be expanded on the first render, you can set collapsed to false: `js title=\"sidebars.js\" export default { docs: { Guides: [ 'creating-pages', { type: 'category', label: 'Docs', // highlight-next-line collapsed: false, items: ['markdown-features', 'sidebar', 'versioning'], }, ], }, }; ` Similar to collapsible, you can also set the global configuration options.sidebarCollapsed to false. Individual collapsed options in sidebars.js will still take precedence over this configuration. `js title=\"docusaurus.config.js\" export default { presets: [ [ '@docusaurus/preset-classic', { docs: { // highlight-next-line sidebarCollapsed: false, }, }, ], ], }; ` :::warning When a category has collapsed: true but collapsible: false (either through sidebars.js or through plugin configuration), the latter takes precedence and the category is still rendered as expanded. ::: Using shorthands {#using-shorthands} You can express typical sidebar items without much customization more concisely with shorthand syntaxes. There are two parts to this: doc shorthand and category shorthand. Doc shorthand {#doc-shorthand} An item with type doc can be simply a string representing its ID: `mdx-code-block <Tabs> <TabItem value=\"Longhand\"> ` `js title=\"sidebars.js\" export default { sidebar: [ // highlight-start { type: 'doc', id: 'myDoc', }, // highlight-end ], }; ` `mdx-code-block </TabItem> <TabItem value=\"Shorthand\"> ` `js title=\"sidebars.js\" export default { sidebar: [ // highlight-start 'myDoc', // highlight-end ], }; ` `mdx-code-block </TabItem> </Tabs> ` So it's possible to simplify the example above to: `js title=\"sidebars.js\" export default { mySidebar: [ { type: 'category', label: 'Getting Started', items: [ // highlight-next-line 'doc1', ], }, { type: 'category', label: 'Docusaurus', items: [ // highlight-start 'doc2', 'doc3', // highlight-end ], }, { type: 'link', label: 'Learn more', href: 'https://example.com', }, ], }; ` Category shorthand {#category-shorthand} A category item can be represented by an object whose key is its label, and the value is an array of subitems. `mdx-code-block <Tabs> <TabItem value=\"Longhand\"> ` `js title=\"sidebars.js\" export default { sidebar: [ // highlight-start { type: 'category', label: 'Getting started', items: ['doc1', 'doc2'], }, // highlight-end ], }; ` `mdx-code-block </TabItem> <TabItem value=\"Shorthand\"> ` `js title=\"sidebars.js\" export default { sidebar: [ // highlight-start { 'Getting started': ['doc1', 'doc2'], }, // highlight-end ], }; ` `mdx-code-block </TabItem> </Tabs> ` This permits us to simplify that example to: `js title=\"sidebars.js\" export default { mySidebar: [ // highlight-start { 'Getting started': ['doc1'], }, { Docusaurus: ['doc2', 'doc3'], }, // highlight-end { type: 'link', label: 'Learn more', href: 'https://example.com', }, ], }; ` Each shorthand object after this transformation will contain exactly one entry. Now consider the further simplified example below: `js title=\"sidebars.js\" export default { mySidebar: [ // highlight-start { 'Getting started': ['doc1'], Docusaurus: ['doc2', 'doc3'], }, // highlight-end { type: 'link', label: 'Learn more', href: 'https://example.com', }, ], }; ` Note how the two consecutive category shorthands are compressed into one object with two entries. This syntax generates a sidebar slice: you shouldn't see that object as one bulk item—this object is unwrapped, with each entry becoming a separate item, and they spliced together with the rest of the items (in this case, the \"Learn more\" link) to form the final sidebar level. Sidebar slices are also important when discussing autogenerated sidebars. Wherever you have an array of items that is reduced to one category shorthand, you can omit that enclosing array as well. `mdx-code-block <Tabs> <TabItem value=\"Before\"> ` `js title=\"sidebars.js\" export default { sidebar: [ { 'Getting started': ['doc1'], Docusaurus: [ { 'Basic guides': ['doc2', 'doc3'], 'Advanced guides': ['doc4', 'doc5'], }, ], }, ], }; ` `mdx-code-block </TabItem> <TabItem value=\"After\"> ` `js title=\"sidebars.js\" export default { sidebar: { 'Getting started': ['doc1'], Docusaurus: { 'Basic guides': ['doc2', 'doc3'], 'Advanced guides': ['doc4', 'doc5'], }, }, }; ` `mdx-code-block </TabItem> </Tabs> `",
    "keywords": [
      "sidebar",
      "items",
      "guides",
      "docs",
      "mdx",
      "Tabs",
      "TabItem",
      "src",
      "components",
      "BrowserWindow",
      "facebook",
      "category",
      "docusaurus-guides",
      "img",
      "docusaurus",
      "index",
      "DocCardList",
      "collapse",
      "preset-classic",
      "example",
      "Sidebar",
      "code",
      "block",
      "import",
      "from",
      "theme",
      "site",
      "The",
      "supports",
      "various",
      "item",
      "types",
      "Doc",
      "link",
      "doc",
      "page",
      "associating",
      "with",
      "the",
      "Link",
      "any",
      "internal",
      "external",
      "Category",
      "creates",
      "dropdown",
      "Autogenerated",
      "generate",
      "slice",
      "automatically",
      "HTML",
      "renders",
      "pure",
      "position",
      "Ref",
      "without",
      "making",
      "take",
      "part",
      "navigation",
      "generation",
      "Use",
      "type",
      "and",
      "assign",
      "that",
      "SidebarItemDoc",
      "Normal",
      "syntax",
      "string",
      "label",
      "text",
      "key",
      "uniquely",
      "identify",
      "className",
      "Class",
      "name",
      "for",
      "customProps",
      "Record",
      "unknown",
      "Custom",
      "props",
      "Shorthand",
      "docId",
      "shortcut",
      "Example",
      "title",
      "sidebars",
      "export",
      "default",
      "mySidebar",
      "highlight",
      "start",
      "doc1",
      "document",
      "Getting",
      "started",
      "end",
      "doc2",
      "you",
      "use",
      "shorthand",
      "autogenerated",
      "would",
      "lose",
      "ability",
      "customize",
      "through",
      "definition",
      "You",
      "can",
      "however",
      "sidebar_label",
      "Markdown",
      "front",
      "matter",
      "within",
      "which",
      "has",
      "higher",
      "precedence",
      "over",
      "Similarly",
      "sidebar_custom_props",
      "declare",
      "custom",
      "metadata",
      "note",
      "sets",
      "implicit",
      "association",
      "Don",
      "same",
      "multiple",
      "change",
      "ref",
      "instead",
      "tip",
      "useful",
      "way",
      "propagate",
      "arbitrary",
      "client",
      "side",
      "get",
      "additional",
      "information",
      "when",
      "using",
      "related",
      "hook",
      "fetches",
      "object",
      "not",
      "SidebarItemLink",
      "href",
      "description",
      "myLinksSidebar",
      "External",
      "Facebook",
      "https",
      "com",
      "URL",
      "Internal",
      "Home",
      "path",
      "render",
      "markup",
      "html",
      "tag",
      "This",
      "inserting",
      "such",
      "dividers",
      "section",
      "titles",
      "ads",
      "images",
      "SidebarItemHtml",
      "value",
      "defaultStyle",
      "boolean",
      "menu",
      "styles",
      "myHtmlSidebar",
      "sponsor",
      "png",
      "alt",
      "Sponsor",
      "rendered",
      "true",
      "styling",
      "already",
      "wrapped",
      "your",
      "simple",
      "just",
      "supply",
      "property",
      "style",
      "Core",
      "concepts",
      "create",
      "hierarchy",
      "SidebarItemCategory",
      "SidebarItem",
      "Array",
      "options",
      "collapsible",
      "Set",
      "collapsed",
      "initially",
      "open",
      "Guides",
      "false",
      "creating",
      "pages",
      "Docs",
      "introduction",
      "markdown",
      "features",
      "versioning",
      "don",
      "need",
      "customizations",
      "links",
      "With",
      "clicking",
      "navigate",
      "another",
      "introduce",
      "documents",
      "categories",
      "_category_",
      "yml",
      "file",
      "Generated",
      "generated",
      "auto",
      "displays",
      "all",
      "direct",
      "children",
      "this",
      "slug",
      "allows",
      "route",
      "defaults",
      "categoryName",
      "Docusaurus",
      "Learn",
      "about",
      "most",
      "important",
      "keywords",
      "image",
      "blog",
      "search",
      "See",
      "action",
      "quick",
      "introductory",
      "existing",
      "i18n",
      "Embedding",
      "embedding",
      "embed",
      "cards",
      "list",
      "normal",
      "well",
      "component",
      "will",
      "display",
      "parent",
      "current",
      "Collapsible",
      "support",
      "option",
      "expand",
      "Categories",
      "are",
      "but",
      "disable",
      "collapsing",
      "next",
      "line",
      "make",
      "non",
      "set",
      "sidebarCollapsible",
      "plugin",
      "content",
      "config",
      "presets",
      "preset",
      "classic",
      "takes",
      "configuration",
      "possible",
      "certain",
      "globally",
      "Expanded",
      "expanded",
      "want",
      "them",
      "first",
      "Similar",
      "also",
      "global",
      "sidebarCollapsed",
      "Individual",
      "still",
      "warning",
      "When",
      "either",
      "latter",
      "Using",
      "shorthands",
      "express",
      "typical",
      "much",
      "customization",
      "more",
      "concisely",
      "syntaxes",
      "There",
      "two",
      "parts",
      "simply",
      "representing",
      "its",
      "Longhand",
      "myDoc",
      "simplify",
      "above",
      "Started",
      "doc3",
      "represented",
      "whose",
      "array",
      "subitems",
      "permits",
      "Each",
      "after",
      "transformation",
      "contain",
      "exactly",
      "one",
      "entry",
      "Now",
      "consider",
      "further",
      "simplified",
      "below",
      "Note",
      "how",
      "consecutive",
      "compressed",
      "into",
      "entries",
      "generates",
      "shouldn",
      "see",
      "bulk",
      "unwrapped",
      "each",
      "becoming",
      "separate",
      "they",
      "spliced",
      "together",
      "rest",
      "case",
      "form",
      "final",
      "level",
      "slices",
      "discussing",
      "Wherever",
      "have",
      "reduced",
      "omit",
      "enclosing",
      "Before",
      "Basic",
      "Advanced",
      "doc4",
      "doc5",
      "After"
    ],
    "url": "/docs/guides/docs/sidebar/items",
    "path": "guides/docs/sidebar/items.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "multiple-sidebars",
    "title": "Using multiple sidebars",
    "description": "",
    "content": "Using multiple sidebars You can create a sidebar for each set of Markdown files that you want to group together. :::tip The Docusaurus site is a good example of using multiple sidebars: Docs API ::: Consider this example: `js title=\"sidebars.js\" export default { tutorialSidebar: { 'Category A': ['doc1', 'doc2'], }, apiSidebar: ['doc3', 'doc4'], }; ` When browsing doc1 or doc2, the tutorialSidebar will be displayed; when browsing doc3 or doc4, the apiSidebar will be displayed. Understanding sidebar association {#sidebar-association} Following the example above, if a commonDoc is included in both sidebars: `js title=\"sidebars.js\" export default { tutorialSidebar: { 'Category A': ['doc1', 'doc2', 'commonDoc'], }, apiSidebar: ['doc3', 'doc4', 'commonDoc'], }; ` How does Docusaurus know which sidebar to display when browsing commonDoc? Answer: it doesn't, and we don't guarantee which sidebar it will pick. When you add doc Y to sidebar X, it creates a two-way binding: sidebar X contains a link to doc Y, and when browsing doc Y, sidebar X will be displayed. But sometimes, we want to break either implicit binding: _How do I generate a link to doc Y in sidebar X without making sidebar X displayed on Y?_ For example, when I include doc Y in multiple sidebars as in the example above, and I want to explicitly tell Docusaurus to display one sidebar? _How do I make sidebar X displayed when browsing doc Y, but sidebar X shouldn't contain the link to Y?_ For example, when Y is a \"doc home page\" and the sidebar is purely used for navigation? Front matter option displayed_sidebar will forcibly set the sidebar association. For the same example, you can still use doc shorthands without any special configuration: `js title=\"sidebars.js\" export default { tutorialSidebar: { 'Category A': ['doc1', 'doc2'], }, apiSidebar: ['doc3', 'doc4'], }; ` And then add a front matter: `md title=\"commonDoc.md\" --- displayed_sidebar: apiSidebar --- ` Which explicitly tells Docusaurus to display apiSidebar when browsing commonDoc. Using the same method, you can make sidebar X which doesn't contain doc Y appear on doc Y: `md title=\"home.md\" --- displayed_sidebar: tutorialSidebar --- ` Even when tutorialSidebar doesn't contain a link to home, it will still be displayed when viewing home. If you set displayed_sidebar: null, no sidebar will be displayed whatsoever on this page, and subsequently, no pagination either. Generating pagination {#generating-pagination} Docusaurus uses the sidebar to generate the \"next\" and \"previous\" pagination links at the bottom of each doc page. It strictly uses the sidebar that is displayed: if no sidebar is associated, it doesn't generate pagination either. However, the docs linked as \"next\" and \"previous\" are not guaranteed to display the same sidebar: they are included in this sidebar, but in their front matter, they may have a different displayed_sidebar. If a sidebar is displayed by setting displayed_sidebar front matter, and this sidebar doesn't contain the doc itself, no pagination is displayed. You can customize pagination with front matter pagination_next and pagination_prev. Consider this sidebar: `js title=\"sidebars.js\" export default { tutorial: [ 'introduction', { installation: ['windows', 'linux', 'macos'], }, 'getting-started', ], }; ` The pagination next link on \"windows\" points to \"linux\", but that doesn't make sense: you would want readers to proceed to \"getting started\" after installation. In this case, you can set the pagination manually: `md title=\"windows.md\" --- highlight-next-line pagination_next: getting-started --- Installation on Windows ` You can also disable displaying a pagination link with pagination_next: null or pagination_prev: null. The pagination label by default is the sidebar label. You can use the front matter pagination_label to customize how this doc appears in the pagination. The ref item {#sidebar-item-ref} The ref type is identical to the doc type in every way, except that it doesn't participate in generating navigation metadata. It only registers itself as a link. When generating pagination and displaying sidebar, ref items are completely ignored. It is particularly useful where you wish to link to the same document from multiple sidebars. The document only belongs to one sidebar (the one where it's registered as type: 'doc' or from an autogenerated directory), but its link will appear in all sidebars that it's registered in. Consider this example: `js title=\"sidebars.js\" export default { tutorialSidebar: { 'Category A': [ 'doc1', 'doc2', // highlight-next-line {type: 'ref', id: 'commonDoc'}, 'doc5', ], }, apiSidebar: ['doc3', 'doc4', 'commonDoc'], }; ` You can think of the ref type as the equivalent to doing the following: Setting displayed_sidebar: tutorialSidebar for commonDoc (ref is ignored in sidebar association) Setting pagination_next: doc5 for doc2 and setting pagination_prev: doc2 for doc5 (ref is ignored in pagination generation)",
    "keywords": [
      "using",
      "multiple",
      "sidebars",
      "guides",
      "docs",
      "sidebar",
      "mdx",
      "Using",
      "You",
      "can",
      "create",
      "for",
      "each",
      "set",
      "Markdown",
      "files",
      "that",
      "you",
      "want",
      "group",
      "together",
      "tip",
      "The",
      "Docusaurus",
      "site",
      "good",
      "example",
      "Docs",
      "API",
      "Consider",
      "this",
      "title",
      "export",
      "default",
      "tutorialSidebar",
      "Category",
      "doc1",
      "doc2",
      "apiSidebar",
      "doc3",
      "doc4",
      "When",
      "browsing",
      "the",
      "will",
      "displayed",
      "when",
      "Understanding",
      "association",
      "Following",
      "above",
      "commonDoc",
      "included",
      "both",
      "How",
      "does",
      "know",
      "which",
      "display",
      "Answer",
      "doesn",
      "and",
      "don",
      "guarantee",
      "pick",
      "add",
      "doc",
      "creates",
      "two",
      "way",
      "binding",
      "contains",
      "link",
      "But",
      "sometimes",
      "break",
      "either",
      "implicit",
      "_How",
      "generate",
      "without",
      "making",
      "For",
      "include",
      "explicitly",
      "tell",
      "one",
      "make",
      "but",
      "shouldn",
      "contain",
      "home",
      "page",
      "purely",
      "used",
      "navigation",
      "Front",
      "matter",
      "option",
      "displayed_sidebar",
      "forcibly",
      "same",
      "still",
      "use",
      "shorthands",
      "any",
      "special",
      "configuration",
      "And",
      "then",
      "front",
      "Which",
      "tells",
      "method",
      "appear",
      "Even",
      "viewing",
      "null",
      "whatsoever",
      "subsequently",
      "pagination",
      "Generating",
      "generating",
      "uses",
      "next",
      "previous",
      "links",
      "bottom",
      "strictly",
      "associated",
      "However",
      "linked",
      "are",
      "not",
      "guaranteed",
      "they",
      "their",
      "may",
      "have",
      "different",
      "setting",
      "itself",
      "customize",
      "with",
      "pagination_next",
      "pagination_prev",
      "tutorial",
      "introduction",
      "installation",
      "windows",
      "linux",
      "macos",
      "getting",
      "started",
      "points",
      "sense",
      "would",
      "readers",
      "proceed",
      "after",
      "case",
      "manually",
      "highlight",
      "line",
      "Installation",
      "Windows",
      "also",
      "disable",
      "displaying",
      "label",
      "pagination_label",
      "how",
      "appears",
      "ref",
      "item",
      "type",
      "identical",
      "every",
      "except",
      "participate",
      "metadata",
      "only",
      "registers",
      "items",
      "completely",
      "ignored",
      "particularly",
      "useful",
      "where",
      "wish",
      "document",
      "from",
      "belongs",
      "registered",
      "autogenerated",
      "directory",
      "its",
      "all",
      "doc5",
      "think",
      "equivalent",
      "doing",
      "following",
      "Setting",
      "generation"
    ],
    "url": "/docs/guides/docs/sidebar/multiple-sidebars",
    "path": "guides/docs/sidebar/multiple-sidebars.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "versioning",
    "title": "Versioning",
    "description": "",
    "content": "Versioning You can use the versioning CLI to create a new documentation version based on the latest content in the docs directory. That specific set of documentation will then be preserved and accessible even as the documentation in the docs directory continues to evolve. `mdx-code-block import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; ` :::warning Think about it before starting to version your documentation - it can become difficult for contributors to help improve it! ::: Most of the time, you don't need versioning as it will just increase your build time, and introduce complexity to your codebase. Versioning is best suited for websites with high-traffic and rapid changes to documentation between versions. If your documentation rarely changes, don't add versioning to your documentation. To better understand how versioning works and see if it suits your needs, you can read on below. Overview {#overview} A typical versioned doc site looks like below: `bash website ├── sidebars.json sidebar for the current docs version ├── docs docs directory for the current docs version │ ├── foo │ │ └── bar.md https://mysite.com/docs/next/foo/bar │ └── hello.md https://mysite.com/docs/next/hello ├── versions.json file to indicate what versions are available ├── versioned_docs │ ├── version-1.1.0 │ │ ├── foo │ │ │ └── bar.md https://mysite.com/docs/foo/bar │ │ └── hello.md │ └── version-1.0.0 │ ├── foo │ │ └── bar.md https://mysite.com/docs/1.0.0/foo/bar │ └── hello.md ├── versioned_sidebars │ ├── version-1.1.0-sidebars.json │ └── version-1.0.0-sidebars.json ├── docusaurus.config.js └── package.json ` The versions.json file is a list of version names, ordered from newest to oldest. The table below explains how a versioned file maps to its version and the generated URL. | Path | Version | URL | | --------------------------------------- | -------------- | ----------------- | | versioned_docs/version-1.0.0/hello.md | 1.0.0 | /docs/1.0.0/hello | | versioned_docs/version-1.1.0/hello.md | 1.1.0 (latest) | /docs/hello | | docs/hello.md | current | /docs/next/hello | :::tip The files in the docs directory belong to the current docs version. By default, the current docs version is labeled as Next and hosted under /docs/next/*, but it is entirely configurable to fit your project's release lifecycle. ::: Terminology {#terminology} Note the terminology we use here. <dl> <dt> <b>Current version</b> </dt> <dd> {'The version placed in the '} <code>./docs</code> {' folder.'} </dd> <dt> <b>Latest version / last version</b> </dt> <dd> {'The version served by default for docs navbar items. Usually has path '} <code>/docs</code> {'.'} </dd> </dl> Current version is defined by the file system location, while latest version is defined by the the navigation behavior. They may or may not be the same version! (And the default configuration, as shown in the table above, would treat them as different: current version at /docs/next and latest at /docs.) Tutorials {#tutorials} Tagging a new version {#tagging-a-new-version} First, make sure the current docs version (the ./docs directory) is ready to be frozen. Enter a new version number. `bash npm2yarn npm run docusaurus docs:version 1.1.0 ` When tagging a new version, the document versioning mechanism will: Copy the full docs/ folder contents into a new versioned_docs/version-[versionName]/ folder. Create a versioned sidebars file based from your current sidebar configuration (if it exists) - saved as versioned_sidebars/version-[versionName]-sidebars.json. Append the new version number to versions.json. Creating new docs {#creating-new-docs} Place the new file into the corresponding version folder. Include the reference to the new file in the corresponding sidebar file according to the version number. `mdx-code-block <Tabs> <TabItem value=\"Current version structure\"> ` `bash The new file. docs/new.md Edit the corresponding sidebar file. sidebars.js ` `mdx-code-block </TabItem> <TabItem value=\"Older version structure\"> ` `bash The new file. versioned_docs/version-1.0.0/new.md Edit the corresponding sidebar file. versioned_sidebars/version-1.0.0-sidebars.json ` `mdx-code-block </TabItem> </Tabs> ` :::tip Versioned sidebar files are, like standard sidebar files, relative to the content root for the given version — so for the example above, your versioned sidebar file may look like: `json { \"sidebar\": [ { \"type\": \"autogenerated\", \"dirName\": \".\" } ] } ` or for a manual sidebar: `json { \"sidebar\": [ { \"type\": \"doc\", \"id\": \"new\", \"label\": \"New\" } ] } ` ::: Updating an existing version {#updating-an-existing-version} You can update multiple docs versions at the same time because each directory in versioned_docs/ represents specific routes when published. Edit any file. Commit and push changes. It will be published to the version. Example: When you change any file in versioned_docs/version-2.6/, it will only affect the docs for version 2.6. Deleting an existing version {#deleting-an-existing-version} You can delete/remove versions as well. Remove the version from versions.json. Example: `diff [ \"2.0.0\", \"1.9.0\", // highlight-next-line \"1.8.0\" ] ` Delete the versioned docs directory. Example: versioned_docs/version-1.8.0. Delete the versioned sidebars file. Example: versioned_sidebars/version-1.8.0-sidebars.json. Configuring versioning behavior {#configuring-versioning-behavior} The \"current\" version is the version name for the ./docs folder. There are different ways to manage versioning, but two very common patterns are: You release v1, and start immediately working on v2 (including its docs). In this case, the current version is v2, which is in the ./docs source folder, and can be browsed at example.com/docs/next. The latest version is v1, which is in the ./versioned_docs/version-1 source folder, and is browsed by most of your users at example.com/docs. You release v1, and will maintain it for some time before thinking about v2. In this case, the current version and latest version will both be point to v1, since the v2 docs doesn't even exist yet! Docusaurus defaults work great for the first use case. We will label the current version as \"next\" and you can even choose not to publish it. For the 2nd use case: if you release v1 and don't plan to work on v2 anytime soon, instead of versioning v1 and having to maintain the docs in 2 folders (./docs + ./versioned_docs/version-1.0.0), you may consider \"pretending\" that the current version is a cut version by giving it a path and a label: `js title=\"docusaurus.config.js\" export default { presets: [ '@docusaurus/preset-classic', docs: { // highlight-start lastVersion: 'current', versions: { current: { label: '1.0.0', path: '1.0.0', }, }, // highlight-end }, ], }; ` The docs in ./docs will be served at /docs/1.0.0 instead of /docs/next, and 1.0.0 will become the default version we link to in the navbar dropdown, and you will only need to maintain a single ./docs folder. We offer these plugin options to customize versioning behavior: disableVersioning: Explicitly disable versioning even with versions. This will make the site only include the current version. includeCurrentVersion: Include the current version (the ./docs folder) of your docs. Tip: turn it off if the current version is a work-in-progress, not ready to be published. lastVersion: Sets which version \"latest version\" (the /docs route) refers to. Tip: lastVersion: 'current' makes sense if your current version refers to a major version that's constantly patched and released. The actual route base path and label of the latest version are configurable. onlyIncludeVersions: Defines a subset of versions from versions.json to be deployed. Tip: limit to 2 or 3 versions in dev and deploy previews to improve startup and build time. versions: A dictionary of version metadata. For each version, you can customize the following: label: the label displayed in the versions dropdown and banner. path: the route base path of this version. By default, latest version has / and current version has /next. banner: one of 'none', 'unreleased', and 'unmaintained'. Determines what's displayed at the top of every doc page. Any version above the latest version would be \"unreleased\", and any version below would be \"unmaintained\". badge: show a badge with the version name at the top of a doc of that version. className: add a custom className to the <html> element of doc pages of that version. See docs plugin configuration for more details. Navbar items {#navbar-items} We offer several docs navbar items to help you quickly set up navigation without worrying about versioned routes. doc: a link to a doc. docSidebar: a link to the first item in a sidebar. docsVersion: a link to the main doc of the currently viewed version. docsVersionDropdown: a dropdown containing all the versions available. These links would all look for an appropriate version to link to, in the following order: Active version: the version that the user is currently browsing, if she is on a page provided by this doc plugin. If she's not on a doc page, fall back to... Preferred version: the version that the user last viewed. If there's no history, fall back to... Latest version: the default version that we navigate to, configured by the lastVersion option. docsVersionDropdown {#docsVersionDropdown} By default, the docsVersionDropdown displays a dropdown with all the available docs versions. The versions attribute allows you to display a subset of the available docs versions in a given order: `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { items: [ { type: 'docsVersionDropdown', // highlight-start versions: ['current', '3.0', '2.0'], // highlight-end }, ], }, }, }; ` Passing a versions object, lets you override the display label of each version: `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { items: [ { type: 'docsVersionDropdown', // highlight-start versions: { current: {label: 'Version 4.0'}, '3.0': {label: 'Version 3.0'}, '2.0': {label: 'Version 2.0'}, }, // highlight-end }, ], }, }, }; ` Recommended practices {#recommended-practices} Version your documentation only when needed {#version-your-documentation-only-when-needed} For example, you are building documentation for your npm package foo and you are currently in version 1.0.0. You then release a patch version for a minor bug fix and it's now 1.0.1. Should you cut a new documentation version 1.0.1? You probably shouldn't. 1.0.1 and 1.0.0 docs shouldn't differ according to semver because there are no new features!. Cutting a new version for it will only just create unnecessary duplicated files. Keep the number of versions small {#keep-the-number-of-versions-small} As a good rule of thumb, try to keep the number of your versions below 10. You will very likely to have a lot of obsolete versioned documentation that nobody even reads anymore. For example, Jest is currently in version 27.4, and only maintains several latest documentation versions with the lowest being 25.X. Keep it small 😊 :::tip archive older versions If you deploy your site on a Jamstack provider (e.g. Netlify), the provider will save each production build as a snapshot under an immutable URL. You can include archived versions that will never be rebuilt as external links to these immutable URLs. The Jest website and the Docusaurus website both use such pattern to keep the number of actively built versions low. ::: Use absolute import within the docs {#use-absolute-import-within-the-docs} Don't use relative paths import within the docs. Because when we cut a version the paths no longer work (the nesting level is different, among other reasons). You can utilize the @site alias provided by Docusaurus that points to the website directory. Example: `diff import Foo from '../src/components/Foo'; import Foo from '@site/src/components/Foo'; ` Link docs by file paths {#link-docs-by-file-paths} Refer to other docs by relative file paths with the .md extension, so that Docusaurus can rewrite them to actual URL paths during building. Files will be linked to the correct corresponding version. `md The @hello document is great! See the Tutorial for more info. ` Global or versioned collocated assets {#global-or-versioned-collocated-assets} You should decide if assets like images and files are per-version or shared between versions. If your assets should be versioned, put them in the docs version, and use relative paths: `md !img alt download this file ` If your assets are global, put them in /static and use absolute paths: `md !img alt download this file `",
    "keywords": [
      "versioning",
      "guides",
      "docs",
      "mdx",
      "Tabs",
      "TabItem",
      "mysite",
      "next",
      "foo",
      "bar",
      "hello",
      "version-1",
      "dt",
      "code",
      "dd",
      "dl",
      "version-",
      "new",
      "version-2",
      "remove",
      "versioned_docs",
      "preset-classic",
      "src",
      "components",
      "Foo",
      "static",
      "Versioning",
      "You",
      "can",
      "use",
      "the",
      "CLI",
      "create",
      "documentation",
      "version",
      "based",
      "latest",
      "content",
      "directory",
      "That",
      "specific",
      "set",
      "will",
      "then",
      "preserved",
      "and",
      "accessible",
      "even",
      "continues",
      "evolve",
      "block",
      "import",
      "from",
      "theme",
      "warning",
      "Think",
      "about",
      "before",
      "starting",
      "your",
      "become",
      "difficult",
      "for",
      "contributors",
      "help",
      "improve",
      "Most",
      "time",
      "you",
      "don",
      "need",
      "just",
      "increase",
      "build",
      "introduce",
      "complexity",
      "codebase",
      "best",
      "suited",
      "websites",
      "with",
      "high",
      "traffic",
      "rapid",
      "changes",
      "between",
      "versions",
      "rarely",
      "add",
      "better",
      "understand",
      "how",
      "works",
      "see",
      "suits",
      "needs",
      "read",
      "below",
      "Overview",
      "overview",
      "typical",
      "versioned",
      "doc",
      "site",
      "looks",
      "like",
      "bash",
      "website",
      "sidebars",
      "json",
      "sidebar",
      "current",
      "https",
      "com",
      "file",
      "indicate",
      "what",
      "are",
      "available",
      "versioned_sidebars",
      "docusaurus",
      "config",
      "package",
      "The",
      "list",
      "names",
      "ordered",
      "newest",
      "oldest",
      "table",
      "explains",
      "maps",
      "its",
      "generated",
      "URL",
      "Path",
      "Version",
      "tip",
      "files",
      "belong",
      "default",
      "labeled",
      "Next",
      "hosted",
      "under",
      "but",
      "entirely",
      "configurable",
      "fit",
      "project",
      "release",
      "lifecycle",
      "Terminology",
      "terminology",
      "Note",
      "here",
      "Current",
      "placed",
      "folder",
      "Latest",
      "last",
      "served",
      "navbar",
      "items",
      "Usually",
      "has",
      "path",
      "defined",
      "system",
      "location",
      "while",
      "navigation",
      "behavior",
      "They",
      "may",
      "not",
      "same",
      "And",
      "configuration",
      "shown",
      "above",
      "would",
      "treat",
      "them",
      "different",
      "Tutorials",
      "tutorials",
      "Tagging",
      "tagging",
      "First",
      "make",
      "sure",
      "ready",
      "frozen",
      "Enter",
      "number",
      "npm2yarn",
      "npm",
      "run",
      "When",
      "document",
      "mechanism",
      "Copy",
      "full",
      "contents",
      "into",
      "versionName",
      "Create",
      "exists",
      "saved",
      "Append",
      "Creating",
      "creating",
      "Place",
      "corresponding",
      "Include",
      "reference",
      "according",
      "value",
      "structure",
      "Edit",
      "Older",
      "Versioned",
      "standard",
      "relative",
      "root",
      "given",
      "example",
      "look",
      "type",
      "autogenerated",
      "dirName",
      "manual",
      "label",
      "New",
      "Updating",
      "existing",
      "updating",
      "update",
      "multiple",
      "because",
      "each",
      "represents",
      "routes",
      "when",
      "published",
      "any",
      "Commit",
      "push",
      "Example",
      "change",
      "only",
      "affect",
      "Deleting",
      "deleting",
      "delete",
      "well",
      "Remove",
      "diff",
      "highlight",
      "line",
      "Delete",
      "Configuring",
      "configuring",
      "name",
      "There",
      "ways",
      "manage",
      "two",
      "very",
      "common",
      "patterns",
      "start",
      "immediately",
      "working",
      "including",
      "this",
      "case",
      "which",
      "source",
      "browsed",
      "most",
      "users",
      "maintain",
      "some",
      "thinking",
      "both",
      "point",
      "since",
      "doesn",
      "exist",
      "yet",
      "Docusaurus",
      "defaults",
      "work",
      "great",
      "first",
      "choose",
      "publish",
      "For",
      "plan",
      "anytime",
      "soon",
      "instead",
      "having",
      "folders",
      "consider",
      "pretending",
      "that",
      "cut",
      "giving",
      "title",
      "export",
      "presets",
      "preset",
      "classic",
      "lastVersion",
      "end",
      "link",
      "dropdown",
      "single",
      "offer",
      "these",
      "plugin",
      "options",
      "customize",
      "disableVersioning",
      "Explicitly",
      "disable",
      "This",
      "include",
      "Tip",
      "turn",
      "off",
      "progress",
      "Sets",
      "route",
      "refers",
      "makes",
      "sense",
      "major",
      "constantly",
      "patched",
      "released",
      "actual",
      "base",
      "onlyIncludeVersions",
      "Defines",
      "subset",
      "deployed",
      "limit",
      "dev",
      "deploy",
      "previews",
      "startup",
      "dictionary",
      "metadata",
      "following",
      "displayed",
      "banner",
      "one",
      "none",
      "unreleased",
      "unmaintained",
      "Determines",
      "top",
      "every",
      "page",
      "Any",
      "badge",
      "show",
      "className",
      "custom",
      "html",
      "element",
      "pages",
      "See",
      "more",
      "details",
      "Navbar",
      "several",
      "quickly",
      "without",
      "worrying",
      "docSidebar",
      "item",
      "docsVersion",
      "main",
      "currently",
      "viewed",
      "docsVersionDropdown",
      "containing",
      "all",
      "These",
      "links",
      "appropriate",
      "order",
      "Active",
      "user",
      "browsing",
      "she",
      "provided",
      "fall",
      "back",
      "Preferred",
      "there",
      "history",
      "navigate",
      "configured",
      "option",
      "displays",
      "attribute",
      "allows",
      "display",
      "themeConfig",
      "Passing",
      "object",
      "lets",
      "override",
      "Recommended",
      "practices",
      "recommended",
      "needed",
      "building",
      "patch",
      "minor",
      "bug",
      "fix",
      "now",
      "Should",
      "probably",
      "shouldn",
      "differ",
      "semver",
      "features",
      "Cutting",
      "unnecessary",
      "duplicated",
      "Keep",
      "small",
      "keep",
      "good",
      "rule",
      "thumb",
      "try",
      "likely",
      "have",
      "lot",
      "obsolete",
      "nobody",
      "reads",
      "anymore",
      "Jest",
      "maintains",
      "lowest",
      "being",
      "archive",
      "older",
      "Jamstack",
      "provider",
      "Netlify",
      "save",
      "production",
      "snapshot",
      "immutable",
      "archived",
      "never",
      "rebuilt",
      "external",
      "URLs",
      "such",
      "pattern",
      "actively",
      "built",
      "low",
      "Use",
      "absolute",
      "within",
      "Don",
      "paths",
      "Because",
      "longer",
      "nesting",
      "level",
      "among",
      "other",
      "reasons",
      "utilize",
      "alias",
      "points",
      "Link",
      "Refer",
      "extension",
      "rewrite",
      "during",
      "Files",
      "linked",
      "correct",
      "Tutorial",
      "info",
      "Global",
      "collocated",
      "assets",
      "global",
      "should",
      "decide",
      "images",
      "per",
      "shared",
      "put",
      "img",
      "alt",
      "download"
    ],
    "url": "/docs/guides/docs/versioning",
    "path": "guides/docs/versioning.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "_markdown-partial-example",
    "title": "Untitled",
    "description": "",
    "content": "<span>Hello {props.name}</span> This is text some content from _markdown-partial-example.md.",
    "keywords": [
      "untitled",
      "guides",
      "markdown",
      "features",
      "partial",
      "example",
      "mdx",
      "span",
      "Hello",
      "props",
      "name",
      "This",
      "text",
      "some",
      "content",
      "from",
      "_markdown"
    ],
    "url": "/docs/guides/markdown-features/_markdown-partial-example",
    "path": "guides/markdown-features/_markdown-partial-example.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "admonitions",
    "title": "Admonitions",
    "description": "Handling admonitions/callouts in Docusaurus Markdown",
    "content": "Admonitions import BrowserWindow from '@site/src/components/BrowserWindow'; import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import Admonition from '@theme/Admonition'; In addition to the basic Markdown syntax, we have a special admonitions syntax by wrapping text with a set of 3 colons, followed by a label denoting its type. Example: `md :::note Some content with _Markdown_ syntax. Check this api. ::: :::tip Some content with _Markdown_ syntax. Check this api. ::: :::info Some content with _Markdown_ syntax. Check this api. ::: :::warning Some content with _Markdown_ syntax. Check this api. ::: :::danger Some content with _Markdown_ syntax. Check this api. ::: ` `mdx-code-block <BrowserWindow> :::note Some content with _Markdown_ syntax. Check this api. ::: :::tip Some content with _Markdown_ syntax. Check this api. ::: :::info Some content with _Markdown_ syntax. Check this api. ::: :::warning Some content with _Markdown_ syntax. Check this api. ::: :::danger Some content with _Markdown_ syntax. Check this api. ::: </BrowserWindow> ` Usage with Prettier {#usage-with-prettier} If you use Prettier to format your Markdown files, Prettier might auto-format your code to invalid admonition syntax. To avoid this problem, add empty lines around the starting and ending directives. This is also why the examples we show here all have empty lines around the content. {/ prettier-ignore /} `md <!-- Prettier doesn't change this --> :::note Hello world ::: <!-- Prettier changes this --> :::note Hello world ::: <!-- to this --> ::: note Hello world::: ` Specifying title {#specifying-title} You may also specify an optional title. `md :::note[Your Title with some _Markdown_ syntax!] Some content with some _Markdown_ syntax. ::: ` `mdx-code-block <BrowserWindow> :::note[Your Title with some _Markdown_ syntax!] Some content with some _Markdown_ syntax. ::: </BrowserWindow> ` Nested admonitions {#nested-admonitions} Admonitions can be nested. Use more colons : for each parent admonition level. `md :::::info Parent Parent content ::::danger Child Child content :::tip Deep Child Deep child content ::: :::: ::::: ` `mdx-code-block <BrowserWindow> :::::info Parent Parent content ::::danger Child Child content :::tip Deep Child Deep child content ::: :::: ::::: </BrowserWindow> ` Admonitions with MDX {#admonitions-with-mdx} You can use MDX inside admonitions too! `jsx import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; :::tip[Use tabs in admonitions] <Tabs> <TabItem value=\"apple\" label=\"Apple\">This is an apple 🍎</TabItem> <TabItem value=\"orange\" label=\"Orange\">This is an orange 🍊</TabItem> <TabItem value=\"banana\" label=\"Banana\">This is a banana 🍌</TabItem> </Tabs> ::: ` `mdx-code-block <BrowserWindow> :::tip[Use tabs in admonitions] <Tabs> <TabItem value=\"apple\" label=\"Apple\">This is an apple 🍎</TabItem> <TabItem value=\"orange\" label=\"Orange\">This is an orange 🍊</TabItem> <TabItem value=\"banana\" label=\"Banana\">This is a banana 🍌</TabItem> </Tabs> ::: </BrowserWindow> ` Usage in JSX {#usage-in-jsx} Outside of Markdown, you can use the @theme/Admonition component to get the same output. `jsx title=\"MyReactPage.jsx\" import Admonition from '@theme/Admonition'; export default function MyReactPage() { return ( <div> <Admonition type=\"info\"> <p>Some information</p> </Admonition> </div> ); } ` The types that are accepted are the same as above: note, tip, danger, info, warning. Optionally, you can specify an icon by passing a JSX element or a string, or a title: `jsx title=\"MyReactPage.jsx\" <Admonition type=\"tip\" icon=\"💡\" title=\"Did you know...\"> Use plugins to introduce shorter syntax for the most commonly used JSX elements in your project. </Admonition> ` `mdx-code-block <BrowserWindow> <Admonition type=\"tip\" icon=\"💡\" title=\"Did you know...\"> Use plugins to introduce shorter syntax for the most commonly used JSX elements in your project. </Admonition> </BrowserWindow> ` Customizing admonitions {#customizing-admonitions} There are two kinds of customizations possible with admonitions: parsing and rendering. Customizing rendering behavior {#customizing-rendering-behavior} You can customize how each individual admonition type is rendered through swizzling. You can often achieve your goal through a simple wrapper. For example, in the follow example, we swap out the icon for info admonitions only. `jsx title=\"src/theme/Admonition.js\" import React from 'react'; import Admonition from '@theme-original/Admonition'; import MyCustomNoteIcon from '@site/static/img/info.svg'; export default function AdmonitionWrapper(props) { if (props.type !== 'info') { return <Admonition title=\"My Custom Admonition Title\" {...props} />; } return <Admonition icon={<MyCustomNoteIcon />} {...props} />; } ` Customizing parsing behavior {#customizing-parsing-behavior} Admonitions are implemented with a Remark plugin. The plugin is designed to be configurable. To customize the Remark plugin for a specific content plugin (docs, blog, pages), pass the options through the admonitions key. `js title=\"docusaurus.config.js\" export default { presets: [ [ '@docusaurus/preset-classic', { docs: { admonitions: { keywords: ['note', 'tip', 'info', 'warning', 'danger'], extendDefaults: true, }, }, }, ], ], }; ` The plugin accepts the following options: keywords: An array of keywords that can be used as the type for the admonition. extendDefaults: Should the provided options (such as keywords) be merged into the existing defaults. Defaults to true. The keyword will be passed as the type prop of the Admonition component. Custom admonition type components {#custom-admonition-type-components} By default, the theme doesn't know what do to with custom admonition keywords such as :::my-custom-admonition. It is your responsibility to map each admonition keyword to a React component so that the theme knows how to render them. If you registered a new admonition type my-custom-admonition via the following config: `js title=\"docusaurus.config.js\" export default { // ... presets: [ [ 'classic', { // ... docs: { admonitions: { keywords: ['my-custom-admonition'], extendDefaults: true, }, }, }, ], ], }; ` You can provide the corresponding React component for :::my-custom-admonition by creating the following file (unfortunately, since it's not a React component file, it's not swizzlable): `js title=\"src/theme/Admonition/Types.js\" import React from 'react'; import DefaultAdmonitionTypes from '@theme-original/Admonition/Types'; function MyCustomAdmonition(props) { return ( <div style={{border: 'solid red', padding: 10}}> <h5 style={{color: 'blue', fontSize: 30}}>{props.title}</h5> <div>{props.children}</div> </div> ); } const AdmonitionTypes = { ...DefaultAdmonitionTypes, // Add all your custom admonition types here... // You can also override the default ones if you want 'my-custom-admonition': MyCustomAdmonition, }; export default AdmonitionTypes; ` Now you can use your new admonition keyword in a Markdown file, and it will be parsed and rendered with your custom logic: `md :::my-custom-admonition[My Title] It works! ::: ` <BrowserWindow> :::my-custom-admonition[My Title] It works! ::: </BrowserWindow>",
    "keywords": [
      "admonitions",
      "handling",
      "admonitions/callouts",
      "in",
      "docusaurus",
      "markdown",
      "guides",
      "features",
      "mdx",
      "src",
      "components",
      "BrowserWindow",
      "Tabs",
      "TabItem",
      "Admonition",
      "div",
      "theme",
      "static",
      "img",
      "info",
      "preset-classic",
      "Types",
      "h5",
      "Admonitions",
      "import",
      "from",
      "site",
      "addition",
      "the",
      "basic",
      "Markdown",
      "syntax",
      "have",
      "special",
      "wrapping",
      "text",
      "with",
      "set",
      "colons",
      "followed",
      "label",
      "denoting",
      "its",
      "type",
      "Example",
      "note",
      "Some",
      "content",
      "_Markdown_",
      "Check",
      "this",
      "api",
      "tip",
      "warning",
      "danger",
      "code",
      "block",
      "Usage",
      "Prettier",
      "usage",
      "prettier",
      "you",
      "use",
      "format",
      "your",
      "files",
      "might",
      "auto",
      "invalid",
      "admonition",
      "avoid",
      "problem",
      "add",
      "empty",
      "lines",
      "around",
      "starting",
      "and",
      "ending",
      "directives",
      "This",
      "also",
      "why",
      "examples",
      "show",
      "here",
      "all",
      "ignore",
      "doesn",
      "change",
      "Hello",
      "world",
      "changes",
      "Specifying",
      "title",
      "specifying",
      "You",
      "may",
      "specify",
      "optional",
      "Your",
      "Title",
      "some",
      "Nested",
      "nested",
      "can",
      "Use",
      "more",
      "for",
      "each",
      "parent",
      "level",
      "Parent",
      "Child",
      "Deep",
      "child",
      "MDX",
      "inside",
      "too",
      "jsx",
      "tabs",
      "value",
      "apple",
      "Apple",
      "orange",
      "Orange",
      "banana",
      "Banana",
      "JSX",
      "Outside",
      "component",
      "get",
      "same",
      "output",
      "MyReactPage",
      "export",
      "default",
      "function",
      "return",
      "information",
      "The",
      "types",
      "that",
      "are",
      "accepted",
      "above",
      "Optionally",
      "icon",
      "passing",
      "element",
      "string",
      "Did",
      "know",
      "plugins",
      "introduce",
      "shorter",
      "most",
      "commonly",
      "used",
      "elements",
      "project",
      "Customizing",
      "customizing",
      "There",
      "two",
      "kinds",
      "customizations",
      "possible",
      "parsing",
      "rendering",
      "behavior",
      "customize",
      "how",
      "individual",
      "rendered",
      "through",
      "swizzling",
      "often",
      "achieve",
      "goal",
      "simple",
      "wrapper",
      "For",
      "example",
      "follow",
      "swap",
      "out",
      "only",
      "React",
      "react",
      "original",
      "MyCustomNoteIcon",
      "svg",
      "AdmonitionWrapper",
      "props",
      "Custom",
      "implemented",
      "Remark",
      "plugin",
      "designed",
      "configurable",
      "specific",
      "docs",
      "blog",
      "pages",
      "pass",
      "options",
      "key",
      "config",
      "presets",
      "preset",
      "classic",
      "keywords",
      "extendDefaults",
      "true",
      "accepts",
      "following",
      "array",
      "Should",
      "provided",
      "such",
      "merged",
      "into",
      "existing",
      "defaults",
      "Defaults",
      "keyword",
      "will",
      "passed",
      "prop",
      "custom",
      "what",
      "responsibility",
      "map",
      "knows",
      "render",
      "them",
      "registered",
      "new",
      "via",
      "provide",
      "corresponding",
      "creating",
      "file",
      "unfortunately",
      "since",
      "not",
      "swizzlable",
      "MyCustomAdmonition",
      "style",
      "border",
      "solid",
      "red",
      "padding",
      "color",
      "blue",
      "fontSize",
      "children",
      "const",
      "AdmonitionTypes",
      "Add",
      "override",
      "ones",
      "want",
      "Now",
      "parsed",
      "logic",
      "works"
    ],
    "url": "/docs/guides/markdown-features/markdown-features-admonitions",
    "path": "guides/markdown-features/markdown-features-admonitions.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "assets",
    "title": "Assets",
    "description": "Handling assets in Docusaurus Markdown",
    "content": "Assets import BrowserWindow from '@site/src/components/BrowserWindow'; import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; Sometimes you want to link to assets (e.g. docx files, images...) directly from Markdown files, and it is convenient to co-locate the asset next to the Markdown file using it. Let's imagine the following file structure: ` Your doc /website/docs/myFeature.mdx Some assets you want to use /website/docs/assets/docusaurus-asset-example-banner.png /website/docs/assets/docusaurus-asset-example.docx ` Images {#images} You can display images in three different ways: Markdown syntax, CJS require, or ES imports syntax. `mdx-code-block <Tabs> <TabItem value=\"Markdown syntax\"> ` Display images using simple Markdown syntax: `md !Example banner ` `mdx-code-block </TabItem> <TabItem value=\"CommonJS require\"> ` Display images using inline CommonJS require in JSX image tag: `jsx <img src={require('./assets/docusaurus-asset-example-banner.png').default} alt=\"Example banner\" /> ` `mdx-code-block </TabItem> <TabItem value=\"Import statement\"> ` Display images using ES import syntax and JSX image tag: `jsx import myImageUrl from './assets/docusaurus-asset-example-banner.png'; <img src={myImageUrl} alt=\"Example banner\" />; ` `mdx-code-block </TabItem> </Tabs> ` All of the above result in displaying the image: <BrowserWindow> !My image alternative text </BrowserWindow> :::note If you are using @docusaurus/plugin-ideal-image, you need to use the dedicated image component, as documented. ::: Files {#files} In the same way, you can link to existing assets by require'ing them and using the returned URL in videos, a anchor links, etc. `md My Markdown page <a target=\"\\_blank\" href={require('./assets/docusaurus-asset-example.docx').default}> Download this docx </a> or Download this docx using Markdown ` <BrowserWindow> <a target=\"_blank\" href={require('../../assets/docusaurus-asset-example.docx').default}> {'Download this docx'} </a> Download this docx using Markdown </BrowserWindow> :::info Markdown links are always file paths If you use the Markdown image or link syntax, all asset paths will be resolved as file paths by Docusaurus and automatically converted to require() calls. You don't need to use require() in Markdown unless you use the JSX syntax, which you do have to handle yourself. ::: Inline SVGs {#inline-svgs} Docusaurus supports inlining SVGs out of the box. `jsx import DocusaurusSvg from './docusaurus.svg'; <DocusaurusSvg />; ` <BrowserWindow> import DocusaurusSvg from '@site/static/img/docusaurus.svg'; <DocusaurusSvg /> </BrowserWindow> This can be useful if you want to alter the part of the SVG image via CSS. For example, you can change one of the SVG colors based on the current theme. `jsx import DocusaurusSvg from './docusaurus.svg'; <DocusaurusSvg className=\"themedDocusaurus\" />; ` `css [data-theme='light'] .themedDocusaurus [fill='#FFFF50'] { fill: greenyellow; } [data-theme='dark'] .themedDocusaurus [fill='#FFFF50'] { fill: seagreen; } ` <BrowserWindow> <DocusaurusSvg className=\"themedDocusaurus\" /> </BrowserWindow> Themed Images {#themed-images} Docusaurus supports themed images: the ThemedImage component (included in the themes) allows you to switch the image source based on the current theme. `jsx import useBaseUrl from '@docusaurus/useBaseUrl'; import ThemedImage from '@theme/ThemedImage'; <ThemedImage alt=\"Docusaurus themed image\" // highlight-start sources={{ light: useBaseUrl('/img/docusaurus_light.svg'), dark: useBaseUrl('/img/docusaurus_dark.svg'), }} // highlight-end />; ` `mdx-code-block import useBaseUrl from '@docusaurus/useBaseUrl'; import ThemedImage from '@theme/ThemedImage'; <BrowserWindow> <ThemedImage alt=\"Docusaurus themed image\" sources={{ light: useBaseUrl('/img/docusaurus_keytar.svg'), dark: useBaseUrl('/img/docusaurus_speed.svg'), }} /> </BrowserWindow> ` GitHub-style themed images {#github-style-themed-images} GitHub uses its own image theming approach with path fragments, which you can easily implement yourself. To toggle the visibility of an image using the path fragment (for GitHub, it's #gh-dark-mode-only and #gh-light-mode-only), add the following to your custom CSS (you can also use your own suffix if you don't want to be coupled to GitHub): `css title=\"src/css/custom.css\" [data-theme='light'] img[src$='#gh-dark-mode-only'], [data-theme='dark'] img[src$='#gh-light-mode-only'] { display: none; } ` `md !Docusaurus themed image!Docusaurus themed image ` <BrowserWindow> !Docusaurus themed image!Docusaurus themed image </BrowserWindow> Static assets {#static-assets} If a Markdown link or image has an absolute path, the path will be seen as a file path and will be resolved from the static directories. For example, if you have configured static directories to be ['public', 'static'], then for the following image: `md title=\"my-doc.md\" !An image from the static ` Docusaurus will try to look for it in both static/img/docusaurus.png and public/img/docusaurus.png. The link will then be converted to a require() call instead of staying as a URL. This is desirable in two regards: You don't have to worry about the base URL, which Docusaurus will take care of when serving the asset; The image enters Webpack's build pipeline and its name will be appended by a hash, which enables browsers to aggressively cache the image and improves your site's performance. If you intend to write URLs, you can use the pathname:// protocol to disable automatic asset linking. `md !banner ` This link will be generated as <img src=\"/img/docusaurus-asset-example-banner.png\" alt=\"banner\" />, without any processing or file existence checking.",
    "keywords": [
      "assets",
      "handling",
      "in",
      "docusaurus",
      "markdown",
      "guides",
      "features",
      "mdx",
      "src",
      "components",
      "BrowserWindow",
      "Tabs",
      "TabItem",
      "website",
      "docs",
      "myFeature",
      "docusaurus-asset-example-banner",
      "docusaurus-asset-example",
      "plugin-ideal-image",
      "static",
      "img",
      "useBaseUrl",
      "ThemedImage",
      "docusaurus_light",
      "docusaurus_dark",
      "docusaurus_keytar",
      "docusaurus_speed",
      "css",
      "custom",
      "Assets",
      "import",
      "from",
      "site",
      "theme",
      "Sometimes",
      "you",
      "want",
      "link",
      "docx",
      "files",
      "images",
      "directly",
      "Markdown",
      "and",
      "convenient",
      "locate",
      "the",
      "asset",
      "next",
      "file",
      "using",
      "Let",
      "imagine",
      "following",
      "structure",
      "Your",
      "doc",
      "Some",
      "use",
      "example",
      "banner",
      "png",
      "Images",
      "You",
      "can",
      "display",
      "three",
      "different",
      "ways",
      "syntax",
      "CJS",
      "require",
      "imports",
      "code",
      "block",
      "value",
      "Display",
      "simple",
      "Example",
      "CommonJS",
      "inline",
      "JSX",
      "image",
      "tag",
      "jsx",
      "default",
      "alt",
      "Import",
      "statement",
      "myImageUrl",
      "All",
      "above",
      "result",
      "displaying",
      "alternative",
      "text",
      "note",
      "are",
      "plugin",
      "ideal",
      "need",
      "dedicated",
      "component",
      "documented",
      "Files",
      "same",
      "way",
      "existing",
      "ing",
      "them",
      "returned",
      "URL",
      "videos",
      "anchor",
      "links",
      "etc",
      "page",
      "target",
      "_blank",
      "href",
      "Download",
      "this",
      "info",
      "always",
      "paths",
      "all",
      "will",
      "resolved",
      "Docusaurus",
      "automatically",
      "converted",
      "calls",
      "don",
      "unless",
      "which",
      "have",
      "handle",
      "yourself",
      "Inline",
      "SVGs",
      "svgs",
      "supports",
      "inlining",
      "out",
      "box",
      "DocusaurusSvg",
      "svg",
      "This",
      "useful",
      "alter",
      "part",
      "SVG",
      "via",
      "CSS",
      "For",
      "change",
      "one",
      "colors",
      "based",
      "current",
      "className",
      "themedDocusaurus",
      "data",
      "light",
      "fill",
      "FFFF50",
      "greenyellow",
      "dark",
      "seagreen",
      "Themed",
      "themed",
      "included",
      "themes",
      "allows",
      "switch",
      "source",
      "highlight",
      "start",
      "sources",
      "end",
      "GitHub",
      "style",
      "github",
      "uses",
      "its",
      "own",
      "theming",
      "approach",
      "with",
      "path",
      "fragments",
      "easily",
      "implement",
      "toggle",
      "visibility",
      "fragment",
      "for",
      "mode",
      "only",
      "add",
      "your",
      "also",
      "suffix",
      "coupled",
      "title",
      "none",
      "Static",
      "has",
      "absolute",
      "seen",
      "directories",
      "configured",
      "public",
      "then",
      "try",
      "look",
      "both",
      "The",
      "call",
      "instead",
      "staying",
      "desirable",
      "two",
      "regards",
      "worry",
      "about",
      "base",
      "take",
      "care",
      "when",
      "serving",
      "enters",
      "Webpack",
      "build",
      "pipeline",
      "name",
      "appended",
      "hash",
      "enables",
      "browsers",
      "aggressively",
      "cache",
      "improves",
      "performance",
      "intend",
      "write",
      "URLs",
      "pathname",
      "protocol",
      "disable",
      "automatic",
      "linking",
      "generated",
      "without",
      "any",
      "processing",
      "existence",
      "checking"
    ],
    "url": "/docs/guides/markdown-features/markdown-features-assets",
    "path": "guides/markdown-features/markdown-features-assets.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "code-blocks",
    "title": "Code blocks",
    "description": "Handling code blocks in Docusaurus Markdown",
    "content": "Code blocks import BrowserWindow from '@site/src/components/BrowserWindow'; import CodeBlock from '@theme/CodeBlock'; Code blocks within documentation are super-powered 💪. Code title {#code-title} You can add a title to the code block by adding a title key after the language (leave a space between them). md `jsx title=\"/src/components/HelloCodeTitle.js\" function HelloCodeTitle(props) { return <h1>Hello, {props.name}</h1>; } ` `mdx-code-block <BrowserWindow> ` `jsx title=\"/src/components/HelloCodeTitle.js\" function HelloCodeTitle(props) { return <h1>Hello, {props.name}</h1>; } ` `mdx-code-block </BrowserWindow> ` Syntax highlighting {#syntax-highlighting} Code blocks are text blocks wrapped around by strings of 3 backticks. You may check out this reference for the specifications of MDX. md `js console.log('Every repo must come with a mascot.'); ` Use the matching language meta string for your code block, and Docusaurus will pick up syntax highlighting automatically, powered by Prism React Renderer. <BrowserWindow> `js console.log('Every repo must come with a mascot.'); ` </BrowserWindow> Theming {#theming} By default, the Prism syntax highlighting theme we use is Palenight. You can change this to another theme by passing theme field in prism as themeConfig in your docusaurus.config.js. For example, if you prefer to use the dracula highlighting theme: `js title=\"docusaurus.config.js\" import {themes as prismThemes} from 'prism-react-renderer'; export default { themeConfig: { prism: { // highlight-next-line theme: prismThemes.dracula, }, }, }; ` Because a Prism theme is just a JS object, you can also write your own theme if you are not satisfied with the default. Docusaurus enhances the github and vsDark themes to provide richer highlight, and you can check our implementations for the light and dark code block themes. Supported Languages {#supported-languages} By default, Docusaurus comes with a subset of commonly used languages. :::warning Some popular languages like Java, C#, or PHP are not enabled by default. ::: To add syntax highlighting for any of the other Prism-supported languages, define it in an array of additional languages. :::note Each additional language has to be a valid Prism component name. For example, Prism would map the _language_ cs to csharp, but only prism-csharp.js exists as a _component_, so you need to use additionalLanguages: ['csharp']. You can look into node_modules/prismjs/components to find all components (languages) available. ::: For example, if you want to add highlighting for the PowerShell language: `js title=\"docusaurus.config.js\" export default { // ... themeConfig: { prism: { // highlight-next-line additionalLanguages: ['powershell'], }, // ... }, }; ` After adding additionalLanguages, restart Docusaurus. If you want to add highlighting for languages not yet supported by Prism, you can swizzle prism-include-languages: `bash npm2yarn npm run swizzle @docusaurus/theme-classic prism-include-languages ` It will produce prism-include-languages.js in your src/theme folder. You can add highlighting support for custom languages by editing prism-include-languages.js: `js title=\"src/theme/prism-include-languages.js\" const prismIncludeLanguages = (Prism) => { // ... additionalLanguages.forEach((lang) => { require(prismjs/components/prism-${lang}); }); // highlight-next-line require('/path/to/your/prism-language-definition'); // ... }; ` You can refer to Prism's official language definitions when you are writing your own language definitions. When adding a custom language definition, you do not need to add the language to the additionalLanguages config array, since Docusaurus only looks up the additionalLanguages strings in languages that Prism provides. Adding the language import in prism-include-languages.js is sufficient. Line highlighting {#line-highlighting} Highlighting with comments {#highlighting-with-comments} You can use comments with highlight-next-line, highlight-start, and highlight-end to select which lines are highlighted. md `js function HighlightSomeText(highlight) { if (highlight) { // highlight-next-line return 'This text is highlighted!'; } return 'Nothing highlighted'; } function HighlightMoreText(highlight) { // highlight-start if (highlight) { return 'This range is highlighted!'; } // highlight-end return 'Nothing highlighted'; } ` `mdx-code-block <BrowserWindow> ` `js function HighlightSomeText(highlight) { if (highlight) { // highlight-next-line return 'This text is highlighted!'; } return 'Nothing highlighted'; } function HighlightMoreText(highlight) { // highlight-start if (highlight) { return 'This range is highlighted!'; } // highlight-end return 'Nothing highlighted'; } ` `mdx-code-block </BrowserWindow> ` Supported commenting syntax: | Style | Syntax | | ---------- | ------------------------ | | C-style | / ... / and // ... | | JSX-style | {/ ... /} | | Bash-style | ... | | HTML-style | <!-- ... --> | We will do our best to infer which set of comment styles to use based on the language, and default to allowing _all_ comment styles. If there's a comment style that is not currently supported, we are open to adding them! Pull requests welcome. Note that different comment styles have no semantic difference, only their content does. You can set your own background color for highlighted code line in your src/css/custom.css which will better fit to your selected syntax highlighting theme. The color given below works for the default highlighting theme (Palenight), so if you are using another theme, you will have to tweak the color accordingly. `css title=\"/src/css/custom.css\" :root { --docusaurus-highlighted-code-line-bg: rgb(72, 77, 91); } / If you have a different syntax highlighting theme for dark mode. / [data-theme='dark'] { / Color which works with dark mode syntax highlighting theme / --docusaurus-highlighted-code-line-bg: rgb(100, 100, 100); } ` If you also need to style the highlighted code line in some other way, you can target on theme-code-block-highlighted-line CSS class. Highlighting with metadata string {#highlighting-with-metadata-string} You can also specify highlighted line ranges within the language meta string (leave a space after the language). To highlight multiple lines, separate the line numbers by commas or use the range syntax to select a chunk of lines. This feature uses the parse-number-range library and you can find more syntax on their project details. md `jsx {1,4-6,11} import React from 'react'; function MyComponent(props) { if (props.isBar) { return <div>Bar</div>; } return <div>Foo</div>; } export default MyComponent; ` `mdx-code-block <BrowserWindow> ` `jsx {1,4-6,11} import React from 'react'; function MyComponent(props) { if (props.isBar) { return <div>Bar</div>; } return <div>Foo</div>; } export default MyComponent; ` `mdx-code-block </BrowserWindow> ` :::tip prefer comments Prefer highlighting with comments where you can. By inlining highlight in the code, you don't have to manually count the lines if your code block becomes long. If you add/remove lines, you also don't have to offset your line ranges. diff `jsx {3} `jsx {4} function HighlightSomeText(highlight) { if (highlight) { console.log('Highlighted text found'); return 'This text is highlighted!'; } return 'Nothing highlighted'; } ` Below, we will introduce how the magic comment system can be extended to define custom directives and their functionalities. The magic comments would only be parsed if a highlight metastring is not present. ::: Custom magic comments {#custom-magic-comments} // highlight-next-line and // highlight-start etc. are called \"magic comments\", because they will be parsed and removed, and their purposes are to add metadata to the next line, or the section that the pair of start- and end-comments enclose. You can declare custom magic comments through theme config. For example, you can register another magic comment that adds a code-block-error-line class name: `mdx-code-block <Tabs> <TabItem value=\"docusaurus.config.js\"> ` `js export default { themeConfig: { prism: { magicComments: [ // Remember to extend the default highlight class name as well! { className: 'theme-code-block-highlighted-line', line: 'highlight-next-line', block: {start: 'highlight-start', end: 'highlight-end'}, }, // highlight-start { className: 'code-block-error-line', line: 'This will error', }, // highlight-end ], }, }, }; ` `mdx-code-block </TabItem> <TabItem value=\"src/css/custom.css\"> ` `css .code-block-error-line { background-color: #ff000020; display: block; margin: 0 calc(-1 * var(--ifm-pre-padding)); padding: 0 var(--ifm-pre-padding); border-left: 3px solid #ff000080; } ` `mdx-code-block </TabItem> <TabItem value=\"myDoc.md\"> ` md In JavaScript, trying to access properties on null will error. `js const name = null; // This will error console.log(name.toUpperCase()); // Uncaught TypeError: Cannot read properties of null (reading 'toUpperCase') ` `mdx-code-block </TabItem> </Tabs> ` `mdx-code-block <BrowserWindow> ` In JavaScript, trying to access properties on null will error. `js const name = null; // This will error console.log(name.toUpperCase()); // Uncaught TypeError: Cannot read properties of null (reading 'toUpperCase') ` `mdx-code-block </BrowserWindow> ` If you use number ranges in metastring (the {1,3-4} syntax), Docusaurus will apply the first magicComments entry's class name. This, by default, is theme-code-block-highlighted-line, but if you change the magicComments config and use a different entry as the first one, the meaning of the metastring range will change as well. You can disable the default line highlighting comments with magicComments: []. If there's no magic comment config, but Docusaurus encounters a code block containing a metastring range, it will error because there will be no class name to apply—the highlighting class name, after all, is just a magic comment entry. Every magic comment entry will contain three keys: className (required), line, which applies to the directly next line, or block (containing start and end), which applies to the entire block enclosed by the two comments. Using CSS to target the class can already do a lot, but you can unlock the full potential of this feature through swizzling. `bash npm2yarn npm run swizzle @docusaurus/theme-classic CodeBlock/Line ` The Line component will receive the list of class names, based on which you can conditionally render different markup. Line numbering {#line-numbering} You can enable line numbering for your code block by using showLineNumbers key within the language meta string (don't forget to add space directly before the key). md `jsx showLineNumbers import React from 'react'; export default function MyComponent(props) { return <div>Foo</div>; } ` `mdx-code-block <BrowserWindow> ` `jsx showLineNumbers import React from 'react'; export default function MyComponent(props) { return <div>Foo</div>; } ` `mdx-code-block </BrowserWindow> ` By default, the counter starts at line number 1. It's possible to pass a custom counter start value to split large code blocks for readability: md `jsx showLineNumbers=3 export default function MyComponent(props) { return <div>Foo</div>; } ` `mdx-code-block <BrowserWindow> ` `jsx showLineNumbers=3 export default function MyComponent(props) { return <div>Foo</div>; } ` `mdx-code-block </BrowserWindow> ` Interactive code editor {#interactive-code-editor} (Powered by React Live) You can create an interactive coding editor with the @docusaurus/theme-live-codeblock plugin. First, add the plugin to your package. `bash npm2yarn npm install --save @docusaurus/theme-live-codeblock ` You will also need to add the plugin to your docusaurus.config.js. `js {3} export default { // ... themes: ['@docusaurus/theme-live-codeblock'], // ... }; ` To use the plugin, create a code block with live attached to the language meta string. md `jsx live function Clock(props) { const [date, setDate] = useState(new Date()); useEffect(() => { const timerID = setInterval(() => tick(), 1000); return function cleanup() { clearInterval(timerID); }; }); function tick() { setDate(new Date()); } return ( <div> <h2>It is {date.toLocaleTimeString()}.</h2> </div> ); } ` The code block will be rendered as an interactive editor. Changes to the code will reflect on the result panel live. `mdx-code-block <BrowserWindow> ` `jsx live function Clock(props) { const [date, setDate] = useState(new Date()); useEffect(() => { const timerID = setInterval(() => tick(), 1000); return function cleanup() { clearInterval(timerID); }; }); function tick() { setDate(new Date()); } return ( <div> <h2>It is {date.toLocaleTimeString()}.</h2> </div> ); } ` `mdx-code-block </BrowserWindow> ` Imports {#imports} :::warning react-live and imports It is not possible to import components directly from the react-live code editor, you have to define available imports upfront. ::: By default, all React imports are available. If you need more imports available, swizzle the react-live scope: `bash npm2yarn npm run swizzle @docusaurus/theme-live-codeblock ReactLiveScope -- --eject ` `jsx title=\"src/theme/ReactLiveScope/index.js\" import React from 'react'; // highlight-start const ButtonExample = (props) => ( <button {...props} style={{ backgroundColor: 'white', color: 'black', border: 'solid red', borderRadius: 20, padding: 10, cursor: 'pointer', ...props.style, }} /> ); // highlight-end // Add react-live imports you need here const ReactLiveScope = { React, ...React, // highlight-next-line ButtonExample, }; export default ReactLiveScope; ` The ButtonExample component is now available to use: `mdx-code-block <BrowserWindow> ` `jsx live function MyPlayground(props) { return ( <div> <ButtonExample onClick={() => alert('hey!')}>Click me</ButtonExample> </div> ); } ` `mdx-code-block </BrowserWindow> ` Imperative Rendering (noInline) The noInline option should be used to avoid errors when your code spans multiple components or variables. md `jsx live noInline const project = 'Docusaurus'; const Greeting = () => <p>Hello {project}!</p>; render(<Greeting />); ` Unlike an ordinary interactive code block, when using noInline React Live won't wrap your code in an inline function to render it. You will need to explicitly call render() at the end of your code to display the output. mdx-code-block <BrowserWindow> `jsx live noInline const project = \"Docusaurus\"; const Greeting = () => ( <p>Hello {project}!</p> ); render( <Greeting /> ); ` </BrowserWindow> Using JSX markup in code blocks {#using-jsx-markup} Code block in Markdown always preserves its content as plain text, meaning you can't do something like: `ts type EditUrlFunction = (params: { // This doesn't turn into a link (for good reason!) version: <a href=\"/docs/versioning\">Version</a>; versionDocsDirPath: string; docPath: string; permalink: string; locale: string; }) => string | undefined; ` If you want to embed HTML markup such as anchor links or bold type, you can use the <pre> tag, <code> tag, or <CodeBlock> component. `jsx <pre> <b>Input: </b>1 2 3 4{'\\n'} <b>Output: </b>\"366300745\"{'\\n'} </pre> ` <BrowserWindow> <pre> <b>{'Input: '}</b> {'1 2 3 4\\n'} <b>{'Output: '}</b> {'\"366300745\"\\n'} </pre> </BrowserWindow> :::warning MDX is whitespace insensitive MDX is in line with JSX behavior: line break characters, even when inside <pre>, are turned into spaces. You have to explicitly write the new line character for it to be printed out. ::: :::warning Syntax highlighting only works on plain strings. Docusaurus will not attempt to parse code block content containing JSX children. ::: Multi-language support code blocks {#multi-language-support-code-blocks} With MDX, you can easily create interactive components within your documentation, for example, to display code in multiple programming languages and switch between them using a tabs component. Instead of implementing a dedicated component for multi-language support code blocks, we've implemented a general-purpose <Tabs> component in the classic theme so that you can use it for other non-code scenarios as well. The following example is how you can have multi-language code tabs in your docs. Note that the empty lines above and below each language block are intentional. This is a current limitation of MDX: you have to leave empty lines around Markdown syntax for the MDX parser to know that it's Markdown syntax and not JSX. jsx import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; <Tabs> <TabItem value=\"js\" label=\"JavaScript\"> `js function helloWorld() { console.log('Hello, world!'); } ` </TabItem> <TabItem value=\"py\" label=\"Python\"> `py def hello_world(): print(\"Hello, world!\") ` </TabItem> <TabItem value=\"java\" label=\"Java\"> `java class HelloWorld { public static void main(String args[]) { System.out.println(\"Hello, World\"); } } ` </TabItem> </Tabs> And you will get the following: `mdx-code-block <BrowserWindow> <Tabs> <TabItem value=\"js\" label=\"JavaScript\"> ` `js function helloWorld() { console.log('Hello, world!'); } ` `mdx-code-block </TabItem> <TabItem value=\"py\" label=\"Python\"> ` `py def hello_world(): print(\"Hello, world!\") ` `mdx-code-block </TabItem> <TabItem value=\"java\" label=\"Java\"> ` `java class HelloWorld { public static void main(String args[]) { System.out.println(\"Hello, World\"); } } ` `mdx-code-block </TabItem> </Tabs> </BrowserWindow> ` If you have multiple of these multi-language code tabs, and you want to sync the selection across the tab instances, refer to the Syncing tab choices section. Docusaurus npm2yarn remark plugin {#npm2yarn-remark-plugin} Displaying CLI commands in both npm and Yarn is a very common need, for example: `bash npm2yarn npm install @docusaurus/remark-plugin-npm2yarn ` Docusaurus provides such a utility out of the box, freeing you from using the Tabs component every time. To enable this feature, first install the @docusaurus/remark-plugin-npm2yarn package as above, and then in docusaurus.config.js, for the plugins where you need this feature (doc, blog, pages, etc.), register it in the remarkPlugins option. (See Docs configuration for more details on configuration format) `js title=\"docusaurus.config.js\" export default { // ... presets: [ [ '@docusaurus/preset-classic', { docs: { // highlight-start remarkPlugins: [ [require('@docusaurus/remark-plugin-npm2yarn'), {sync: true}], ], // highlight-end }, pages: { // highlight-next-line remarkPlugins: [require('@docusaurus/remark-plugin-npm2yarn')], }, blog: { // highlight-start remarkPlugins: [ [ require('@docusaurus/remark-plugin-npm2yarn'), {converters: ['pnpm']}, ], ], // highlight-end // ... }, }, ], ], }; ` And then use it by adding the npm2yarn key to the code block: md `bash npm2yarn npm install @docusaurus/remark-plugin-npm2yarn ` Configuration {#npm2yarn-remark-plugin-configuration} | Option | Type | Default | Description | | --- | --- | --- | --- | | sync | boolean | false | Whether to sync the selected converter across all code blocks. | | converters | array | 'yarn', 'pnpm' | The list of converters to use. The order of the converters is important, as the first converter will be used as the default choice. | Usage in JSX {#usage-in-jsx} Outside of Markdown, you can use the @theme/CodeBlock component to get the same output. `jsx import CodeBlock from '@theme/CodeBlock'; export default function MyReactPage() { return ( <div> {/ highlight-start /} <CodeBlock language=\"jsx\" title=\"/src/components/HelloCodeTitle.js\" showLineNumbers> {`function HelloCodeTitle(props) { return <h1>Hello, {props.name}</h1>; }`} </CodeBlock> {/ highlight-end /} </div> ); } ` `mdx-code-block <BrowserWindow> <CodeBlock language=\"jsx\" title=\"/src/components/HelloCodeTitle.js\" showLineNumbers> {`function HelloCodeTitle(props) { return <h1>Hello, {props.name}</h1>; }`} </CodeBlock> </BrowserWindow> ` The props accepted are language, title and showLineNumbers, in the same way as you write Markdown code blocks. Although discouraged, you can also pass in a metastring prop like metastring='{1-2} title=\"/src/components/HelloCodeTitle.js\" showLineNumbers', which is how Markdown code blocks are handled under the hood. However, we recommend you use comments for highlighting lines. As previously stated, syntax highlighting is only applied when the children is a simple string.",
    "keywords": [
      "code",
      "blocks",
      "handling",
      "in",
      "docusaurus",
      "markdown",
      "guides",
      "features",
      "mdx",
      "src",
      "components",
      "BrowserWindow",
      "CodeBlock",
      "HelloCodeTitle",
      "h1",
      "prismjs",
      "theme-classic",
      "theme",
      "prism-include-languages",
      "prism-",
      "path",
      "to",
      "your",
      "prism-language-definition",
      "css",
      "custom",
      "div",
      "remove",
      "TabItem",
      "Tabs",
      "Line",
      "theme-live-codeblock",
      "h2",
      "ReactLiveScope",
      "index",
      "ButtonExample",
      "docs",
      "versioning",
      "pre",
      "remark-plugin-npm2yarn",
      "preset-classic",
      "Code",
      "import",
      "from",
      "site",
      "within",
      "documentation",
      "are",
      "super",
      "powered",
      "title",
      "You",
      "can",
      "add",
      "the",
      "block",
      "adding",
      "key",
      "after",
      "language",
      "leave",
      "space",
      "between",
      "them",
      "jsx",
      "function",
      "props",
      "return",
      "Hello",
      "name",
      "Syntax",
      "highlighting",
      "syntax",
      "text",
      "wrapped",
      "around",
      "strings",
      "backticks",
      "may",
      "check",
      "out",
      "this",
      "reference",
      "for",
      "specifications",
      "MDX",
      "console",
      "log",
      "Every",
      "repo",
      "must",
      "come",
      "with",
      "mascot",
      "Use",
      "matching",
      "meta",
      "string",
      "and",
      "Docusaurus",
      "will",
      "pick",
      "automatically",
      "Prism",
      "React",
      "Renderer",
      "Theming",
      "theming",
      "default",
      "use",
      "Palenight",
      "change",
      "another",
      "passing",
      "field",
      "prism",
      "themeConfig",
      "config",
      "For",
      "example",
      "you",
      "prefer",
      "dracula",
      "themes",
      "prismThemes",
      "react",
      "renderer",
      "export",
      "highlight",
      "next",
      "line",
      "Because",
      "just",
      "object",
      "also",
      "write",
      "own",
      "not",
      "satisfied",
      "enhances",
      "github",
      "vsDark",
      "provide",
      "richer",
      "our",
      "implementations",
      "light",
      "dark",
      "Supported",
      "Languages",
      "supported",
      "languages",
      "comes",
      "subset",
      "commonly",
      "used",
      "warning",
      "Some",
      "popular",
      "like",
      "Java",
      "PHP",
      "enabled",
      "any",
      "other",
      "define",
      "array",
      "additional",
      "note",
      "Each",
      "has",
      "valid",
      "component",
      "would",
      "map",
      "_language_",
      "csharp",
      "but",
      "only",
      "exists",
      "_component_",
      "need",
      "additionalLanguages",
      "look",
      "into",
      "node_modules",
      "find",
      "all",
      "available",
      "want",
      "PowerShell",
      "powershell",
      "After",
      "restart",
      "yet",
      "swizzle",
      "include",
      "bash",
      "npm2yarn",
      "npm",
      "run",
      "classic",
      "produce",
      "folder",
      "support",
      "editing",
      "const",
      "forEach",
      "lang",
      "require",
      "definition",
      "refer",
      "official",
      "definitions",
      "when",
      "writing",
      "When",
      "since",
      "looks",
      "that",
      "provides",
      "Adding",
      "sufficient",
      "Highlighting",
      "comments",
      "start",
      "end",
      "select",
      "which",
      "lines",
      "highlighted",
      "HighlightSomeText",
      "This",
      "Nothing",
      "HighlightMoreText",
      "range",
      "commenting",
      "Style",
      "style",
      "JSX",
      "Bash",
      "HTML",
      "best",
      "infer",
      "set",
      "comment",
      "styles",
      "based",
      "allowing",
      "_all_",
      "there",
      "currently",
      "open",
      "Pull",
      "requests",
      "welcome",
      "Note",
      "different",
      "have",
      "semantic",
      "difference",
      "their",
      "content",
      "does",
      "background",
      "color",
      "better",
      "fit",
      "selected",
      "The",
      "given",
      "below",
      "works",
      "using",
      "tweak",
      "accordingly",
      "root",
      "rgb",
      "mode",
      "data",
      "Color",
      "some",
      "way",
      "target",
      "CSS",
      "class",
      "metadata",
      "specify",
      "ranges",
      "multiple",
      "separate",
      "numbers",
      "commas",
      "chunk",
      "feature",
      "uses",
      "parse",
      "number",
      "library",
      "more",
      "project",
      "details",
      "MyComponent",
      "isBar",
      "Bar",
      "Foo",
      "tip",
      "Prefer",
      "where",
      "inlining",
      "don",
      "manually",
      "count",
      "becomes",
      "long",
      "offset",
      "diff",
      "Highlighted",
      "found",
      "Below",
      "introduce",
      "how",
      "magic",
      "system",
      "extended",
      "directives",
      "functionalities",
      "parsed",
      "metastring",
      "present",
      "Custom",
      "etc",
      "called",
      "because",
      "they",
      "removed",
      "purposes",
      "section",
      "pair",
      "enclose",
      "declare",
      "through",
      "register",
      "adds",
      "error",
      "value",
      "magicComments",
      "Remember",
      "extend",
      "well",
      "className",
      "ff000020",
      "display",
      "margin",
      "calc",
      "var",
      "ifm",
      "padding",
      "border",
      "left",
      "solid",
      "ff000080",
      "myDoc",
      "JavaScript",
      "trying",
      "access",
      "properties",
      "null",
      "toUpperCase",
      "Uncaught",
      "TypeError",
      "Cannot",
      "read",
      "reading",
      "apply",
      "first",
      "entry",
      "one",
      "meaning",
      "disable",
      "encounters",
      "containing",
      "contain",
      "three",
      "keys",
      "required",
      "applies",
      "directly",
      "entire",
      "enclosed",
      "two",
      "Using",
      "already",
      "lot",
      "unlock",
      "full",
      "potential",
      "swizzling",
      "receive",
      "list",
      "names",
      "conditionally",
      "render",
      "markup",
      "numbering",
      "enable",
      "showLineNumbers",
      "forget",
      "before",
      "counter",
      "starts",
      "possible",
      "pass",
      "split",
      "large",
      "readability",
      "Interactive",
      "editor",
      "interactive",
      "Powered",
      "Live",
      "create",
      "coding",
      "live",
      "codeblock",
      "plugin",
      "First",
      "package",
      "install",
      "save",
      "attached",
      "Clock",
      "date",
      "setDate",
      "useState",
      "new",
      "Date",
      "useEffect",
      "timerID",
      "setInterval",
      "tick",
      "cleanup",
      "clearInterval",
      "toLocaleTimeString",
      "rendered",
      "Changes",
      "reflect",
      "result",
      "panel",
      "Imports",
      "imports",
      "upfront",
      "scope",
      "eject",
      "button",
      "backgroundColor",
      "white",
      "black",
      "red",
      "borderRadius",
      "cursor",
      "pointer",
      "Add",
      "here",
      "now",
      "MyPlayground",
      "onClick",
      "alert",
      "hey",
      "Click",
      "Imperative",
      "Rendering",
      "noInline",
      "option",
      "should",
      "avoid",
      "errors",
      "spans",
      "variables",
      "Greeting",
      "Unlike",
      "ordinary",
      "won",
      "wrap",
      "inline",
      "explicitly",
      "call",
      "output",
      "Markdown",
      "always",
      "preserves",
      "its",
      "plain",
      "something",
      "type",
      "EditUrlFunction",
      "params",
      "doesn",
      "turn",
      "link",
      "good",
      "reason",
      "version",
      "href",
      "Version",
      "versionDocsDirPath",
      "docPath",
      "permalink",
      "locale",
      "undefined",
      "embed",
      "such",
      "anchor",
      "links",
      "bold",
      "tag",
      "Input",
      "Output",
      "whitespace",
      "insensitive",
      "behavior",
      "break",
      "characters",
      "even",
      "inside",
      "turned",
      "spaces",
      "character",
      "printed",
      "attempt",
      "children",
      "Multi",
      "multi",
      "With",
      "easily",
      "programming",
      "switch",
      "tabs",
      "Instead",
      "implementing",
      "dedicated",
      "implemented",
      "general",
      "purpose",
      "non",
      "scenarios",
      "following",
      "empty",
      "above",
      "each",
      "intentional",
      "current",
      "limitation",
      "parser",
      "know",
      "label",
      "helloWorld",
      "world",
      "Python",
      "def",
      "hello_world",
      "print",
      "java",
      "HelloWorld",
      "public",
      "static",
      "void",
      "main",
      "String",
      "args",
      "System",
      "println",
      "World",
      "And",
      "get",
      "these",
      "sync",
      "selection",
      "across",
      "tab",
      "instances",
      "Syncing",
      "choices",
      "remark",
      "Displaying",
      "CLI",
      "commands",
      "both",
      "Yarn",
      "very",
      "common",
      "utility",
      "box",
      "freeing",
      "every",
      "time",
      "then",
      "plugins",
      "doc",
      "blog",
      "pages",
      "remarkPlugins",
      "See",
      "Docs",
      "configuration",
      "format",
      "presets",
      "preset",
      "true",
      "converters",
      "pnpm",
      "Configuration",
      "Option",
      "Type",
      "Default",
      "Description",
      "boolean",
      "false",
      "Whether",
      "converter",
      "yarn",
      "order",
      "important",
      "choice",
      "Usage",
      "usage",
      "Outside",
      "same",
      "MyReactPage",
      "accepted",
      "Although",
      "discouraged",
      "prop",
      "handled",
      "under",
      "hood",
      "However",
      "recommend",
      "previously",
      "stated",
      "applied",
      "simple"
    ],
    "url": "/docs/guides/markdown-features/markdown-features-code-blocks",
    "path": "guides/markdown-features/markdown-features-code-blocks.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "diagrams",
    "title": "Diagrams",
    "description": "Writing diagrams with Mermaid",
    "content": "Diagrams Diagrams can be rendered using Mermaid in a code block. Installation {#installation} `bash npm2yarn npm install --save @docusaurus/theme-mermaid ` Enable Mermaid functionality by adding plugin @docusaurus/theme-mermaid and setting markdown.mermaid to true in your docusaurus.config.js. `js title=\"docusaurus.config.js\" export default { markdown: { mermaid: true, }, themes: ['@docusaurus/theme-mermaid'], }; ` Usage {#usage} Add a code block with language mermaid: md title=\"Example Mermaid diagram\" `mermaid graph TD; A-->B; A-->C; B-->D; C-->D; ` `mermaid graph TD; A-->B; A-->C; B-->D; C-->D; ` See the Mermaid syntax documentation for more information on the Mermaid syntax. Theming {#theming} The diagram dark and light themes can be changed by setting mermaid.theme values in the themeConfig in your docusaurus.config.js. You can set themes for both light and dark mode. `js title=\"docusaurus.config.js\" export default { themeConfig: { mermaid: { theme: {light: 'neutral', dark: 'forest'}, }, }, }; ` See the Mermaid theme documentation for more information on theming Mermaid diagrams. Mermaid Config {#configuration} Options in mermaid.options will be passed directly to mermaid.initialize: `js title=\"docusaurus.config.js\" export default { themeConfig: { mermaid: { options: { maxTextSize: 50, }, }, }, }; ` See the Mermaid config documentation and the Mermaid config types for the available config options. Dynamic Mermaid Component {#component} To generate dynamic diagrams, you can use the Mermaid component: `mdx title=\"Example of dynamic Mermaid component\" import Mermaid from '@theme/Mermaid'; <Mermaid value={`graph TD; A-->B; A-->C; B-->D; C-->D;`} /> `",
    "keywords": [
      "diagrams",
      "writing",
      "with",
      "mermaid",
      "guides",
      "markdown",
      "features",
      "mdx",
      "theme-mermaid",
      "Mermaid",
      "Diagrams",
      "can",
      "rendered",
      "using",
      "code",
      "block",
      "Installation",
      "installation",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "docusaurus",
      "theme",
      "Enable",
      "functionality",
      "adding",
      "plugin",
      "and",
      "setting",
      "true",
      "your",
      "config",
      "title",
      "export",
      "default",
      "themes",
      "Usage",
      "usage",
      "Add",
      "language",
      "Example",
      "diagram",
      "graph",
      "See",
      "the",
      "syntax",
      "documentation",
      "for",
      "more",
      "information",
      "Theming",
      "theming",
      "The",
      "dark",
      "light",
      "changed",
      "values",
      "themeConfig",
      "You",
      "set",
      "both",
      "mode",
      "neutral",
      "forest",
      "Config",
      "configuration",
      "Options",
      "options",
      "will",
      "passed",
      "directly",
      "initialize",
      "maxTextSize",
      "types",
      "available",
      "Dynamic",
      "Component",
      "component",
      "generate",
      "dynamic",
      "you",
      "use",
      "import",
      "from",
      "value"
    ],
    "url": "/docs/guides/markdown-features/markdown-features-diagrams",
    "path": "guides/markdown-features/markdown-features-diagrams.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "head-metadata",
    "title": "Head metadata",
    "description": "Declaring page-specific head metadata through MDX",
    "content": "Head metadata Customizing head metadata {#customizing-head-metadata} Docusaurus automatically sets useful page metadata in <html>, <head> and <body> for you. It is possible to add extra metadata (or override existing ones) with the <head> tag in Markdown files: `md title=\"markdown-features-head-metadata.mdx\" --- id: head-metadata title: Head Metadata --- <!-- highlight-start --> <head> <html className=\"some-extra-html-class\" /> <body className=\"other-extra-body-class\" /> <title>Head Metadata customized title!</title> <meta charSet=\"utf-8\" /> <meta name=\"twitter:card\" content=\"summary\" /> <link rel=\"canonical\" href=\"https://docusaurus.io/docs/markdown-features/head-metadata\" /> </head> <!-- highlight-end --> Head Metadata My text ` `mdx-code-block <head> <html className=\"some-extra-html-class\" /> <body className=\"other-extra-body-class\" /> <title>Head Metadata customized title!</title> <meta charSet=\"utf-8\" /> <meta name=\"twitter:card\" content=\"summary\" /> <link rel=\"canonical\" href=\"https://docusaurus.io/docs/markdown-features/head-metadata\" /> </head> ` This <head> declaration has been added to the current Markdown doc as a demo. Open your browser DevTools and check how this page's metadata has been affected. :::note This feature is built on top of the Docusaurus <Head> component. Refer to react-helmet for exhaustive documentation. ::: :::tip You don't need this for regular SEO Content plugins (e.g. docs and blog) provide front matter options like description, keywords, and image, which will be automatically applied to both description and og:description, while you would have to manually declare two metadata tags when using the <head> tag. ::: Markdown page description {#markdown-page-description} The Markdown pages' description metadata may be used in more places than the head metadata. For example, the docs plugin's generated category index uses the description metadata for the doc cards. By default, the description is the first content-ful line, with some efforts to convert it to plain text. For example, the following file... `md Title Main content... May contain some links or emphasis. ` ...will have the default description \"Main content... May contain some links or emphasis\". However, it's not designed to be fully functional. Where it fails to produce reasonable descriptions, you can explicitly provide one through front matter: `md --- description: This description will override the default. --- Title Main content... May contain some links or emphasis. `",
    "keywords": [
      "head",
      "metadata",
      "declaring",
      "page-specific",
      "through",
      "mdx",
      "guides",
      "markdown",
      "features",
      "title",
      "docusaurus",
      "docs",
      "markdown-features",
      "head-metadata",
      "Head",
      "Customizing",
      "customizing",
      "Docusaurus",
      "automatically",
      "sets",
      "useful",
      "page",
      "html",
      "and",
      "body",
      "for",
      "you",
      "possible",
      "add",
      "extra",
      "override",
      "existing",
      "ones",
      "with",
      "the",
      "tag",
      "Markdown",
      "files",
      "Metadata",
      "highlight",
      "start",
      "className",
      "some",
      "class",
      "other",
      "customized",
      "meta",
      "charSet",
      "utf",
      "name",
      "twitter",
      "card",
      "content",
      "summary",
      "link",
      "rel",
      "canonical",
      "href",
      "https",
      "end",
      "text",
      "code",
      "block",
      "This",
      "declaration",
      "has",
      "been",
      "added",
      "current",
      "doc",
      "demo",
      "Open",
      "your",
      "browser",
      "DevTools",
      "check",
      "how",
      "this",
      "affected",
      "note",
      "feature",
      "built",
      "top",
      "component",
      "Refer",
      "react",
      "helmet",
      "exhaustive",
      "documentation",
      "tip",
      "You",
      "don",
      "need",
      "regular",
      "SEO",
      "Content",
      "plugins",
      "blog",
      "provide",
      "front",
      "matter",
      "options",
      "like",
      "description",
      "keywords",
      "image",
      "which",
      "will",
      "applied",
      "both",
      "while",
      "would",
      "have",
      "manually",
      "declare",
      "two",
      "tags",
      "when",
      "using",
      "The",
      "pages",
      "may",
      "used",
      "more",
      "places",
      "than",
      "For",
      "example",
      "plugin",
      "generated",
      "category",
      "index",
      "uses",
      "cards",
      "default",
      "first",
      "ful",
      "line",
      "efforts",
      "convert",
      "plain",
      "following",
      "file",
      "Title",
      "Main",
      "May",
      "contain",
      "links",
      "emphasis",
      "However",
      "not",
      "designed",
      "fully",
      "functional",
      "Where",
      "fails",
      "produce",
      "reasonable",
      "descriptions",
      "can",
      "explicitly",
      "one"
    ],
    "url": "/docs/guides/markdown-features/markdown-features-head-metadata",
    "path": "guides/markdown-features/markdown-features-head-metadata.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "introduction",
    "title": "Markdown Features",
    "description": "Docusaurus uses MDX. Find out more about Docusaurus-specific features when writing Markdown.",
    "content": "Markdown Features import BrowserWindow from '@site/src/components/BrowserWindow'; Docusaurus uses Markdown as its main content authoring format. :::tip Learn Markdown You can learn Markdown in 10 minutes. ::: Docusaurus uses modern tooling to help you create interactive documentation. The MDX compiler transforms Markdown files to React components, and allows you to use JSX in your Markdown content. This enables you to easily interleave React components within your content, and create delightful learning experiences. :::tip Use the MDX Playground The MDX playground is your new best friend! It is a very helpful debugging tool that shows how the MDX compiler transforms Markdown to React. Options: select the right format (MDX or CommonMark) and the following plugins Docusaurus uses: remark-gfm, remark-directive, rehype-raw. ::: MDX vs. CommonMark {#mdx-vs-commonmark} Docusaurus compiles both .md and .mdx files to React components using the MDX compiler, but the syntax can be interpreted differently depending on your settings. The MDX compiler supports 2 formats: The MDX format: a powerful parser allowing the usage of JSX The CommonMark format: a standard-compliant Markdown parser that does not allow the usage of JSX By default, Docusaurus v3 uses the MDX format for all files (including .md files) for historical reasons. It is possible to opt-in for CommonMark using the siteConfig.markdown.format setting or the mdx.format: md front matter. :::tip how to use CommonMark If you plan to use CommonMark, we recommend the siteConfig.markdown.format: 'detect' setting. The appropriate format will be selected automatically, based on file extensions: .md files will use the CommonMark format .mdx files will use the MDX format ::: :::danger Experimental CommonMark support The CommonMark support is experimental and currently has a few limitations. ::: Standard features {#standard-features} Markdown is a syntax that enables you to write formatted content in a readable syntax. `md My Doc Section Hello world message with some bold text, some _italic_ text, and a link !img alt ` `mdx-code-block <BrowserWindow> <h3>My Doc Section</h3> Hello world message with some bold text, some _italic_ text and a link !img alt </BrowserWindow> ` <details> <summary>Markdown is declarative</summary> Some may assume a 1-1 correlation between Markdown and HTML, e.g., !Preview will always become <img src=\"/img/docusaurus.png\" alt=\"Preview\" />, as-is. However, _that is not the case_. The Markdown syntax !message only declaratively tells Docusaurus that an image needs to be inserted here, but we may do other things like transforming a file path to URL path, so the generated markup may differ from the output of other Markdown renderers, or a naïve hand-transcription to the equivalent JSX/HTML code. In general, you should only assume the _semantics_ of the markup ( fences become code blocks; >` becomes quotes, etc.), but not the actual compiled output. </details> Front matter {#front-matter} Front matter is used to add metadata to your Markdown file. All content plugins have their own front matter schema, and use the front matter to enrich the default metadata inferred from the content or other configuration. Front matter is provided at the very top of the file, enclosed by three dashes ---. The content is parsed as YAML. `md --- title: My Doc Title more_data: Can be provided as: objects or: arrays --- ` :::info The API documentation of each official plugin lists the supported attributes: Docs front matter Blog front matter Pages front matter ::: :::tip enhance your front matter Use the Markdown config parseFrontMatter function to provide your own front matter parser, or to enhance the default parser. It is possible to reuse the default parser to wrap it with your own custom proprietary logic. This makes it possible to implement convenient front matter transformations, shortcuts, or to integrate with external systems using front matter that Docusaurus plugins do not support. `js title=\"docusaurus.config.js\" export default { markdown: { // highlight-start parseFrontMatter: async (params) => { // Reuse the default parser const result = await params.defaultParseFrontMatter(params); // Process front matter description placeholders result.frontMatter.description = result.frontMatter.description?.replaceAll('{{MY_VAR}}', 'MY_VALUE'); // Create your own front matter shortcut if (result.frontMatter.i_do_not_want_docs_pagination) { result.frontMatter.pagination_prev = null; result.frontMatter.pagination_next = null; } // Rename an unsupported front matter coming from another system if (result.frontMatter.cms_seo_summary) { result.frontMatter.description = result.frontMatter.cms_seo_summary; delete result.frontMatter.cms_seo_summary; } return result; }, // highlight-end }, }; ` ::: Quotes {#quotes} Markdown quotes are beautifully styled: `md > Easy to maintain open source documentation websites. > > — Docusaurus ` <BrowserWindow> > Easy to maintain open source documentation websites. > > — Docusaurus </BrowserWindow> Details {#details} Markdown can embed HTML elements, and details HTML elements are beautifully styled: {/ prettier-ignore /} md Details element example <details> <summary>Toggle me!</summary> This is the detailed content `js console.log(\"Markdown features including the code block are available\"); ` You can use Markdown here including bold and _italic_ text, and inline link <details> <summary>Nested toggle! Some surprise inside...</summary> 😲😲😲😲😲 </details> </details> mdx-code-block <BrowserWindow> <h3>Details element example</h3> <details> <summary>Toggle me!</summary> This is the detailed content `js console.log(\"Markdown features including the code block are available\"); ` You can use Markdown here including bold and _italic_ text, and inline link <details> <summary>Nested toggle! Some surprise inside...</summary> 😲😲😲😲😲 </details> </details> </BrowserWindow> :::info You may want to keep your <summary> on a single line. Keep in mind that MDX creates extra HTML <p> paragraphs for line breaks.. When in doubt, use the MDX playground to troubleshoot <details> rendering problems. :::",
    "keywords": [
      "markdown",
      "features",
      "docusaurus",
      "uses",
      "mdx.",
      "find",
      "out",
      "more",
      "about",
      "docusaurus-specific",
      "when",
      "writing",
      "markdown.",
      "guides",
      "intro",
      "mdx",
      "src",
      "components",
      "BrowserWindow",
      "h3",
      "summary",
      "img",
      "HTML",
      "details",
      "Markdown",
      "Features",
      "import",
      "from",
      "site",
      "Docusaurus",
      "its",
      "main",
      "content",
      "authoring",
      "format",
      "tip",
      "Learn",
      "You",
      "can",
      "learn",
      "minutes",
      "modern",
      "tooling",
      "help",
      "you",
      "create",
      "interactive",
      "documentation",
      "The",
      "MDX",
      "compiler",
      "transforms",
      "files",
      "React",
      "and",
      "allows",
      "use",
      "JSX",
      "your",
      "This",
      "enables",
      "easily",
      "interleave",
      "within",
      "delightful",
      "learning",
      "experiences",
      "Use",
      "the",
      "Playground",
      "playground",
      "new",
      "best",
      "friend",
      "very",
      "helpful",
      "debugging",
      "tool",
      "that",
      "shows",
      "how",
      "Options",
      "select",
      "right",
      "CommonMark",
      "following",
      "plugins",
      "remark",
      "gfm",
      "directive",
      "rehype",
      "raw",
      "commonmark",
      "compiles",
      "both",
      "using",
      "but",
      "syntax",
      "interpreted",
      "differently",
      "depending",
      "settings",
      "supports",
      "formats",
      "powerful",
      "parser",
      "allowing",
      "usage",
      "standard",
      "compliant",
      "does",
      "not",
      "allow",
      "default",
      "for",
      "all",
      "including",
      "historical",
      "reasons",
      "possible",
      "opt",
      "siteConfig",
      "setting",
      "front",
      "matter",
      "plan",
      "recommend",
      "detect",
      "appropriate",
      "will",
      "selected",
      "automatically",
      "based",
      "file",
      "extensions",
      "danger",
      "Experimental",
      "support",
      "experimental",
      "currently",
      "has",
      "few",
      "limitations",
      "Standard",
      "write",
      "formatted",
      "readable",
      "Doc",
      "Section",
      "Hello",
      "world",
      "message",
      "with",
      "some",
      "bold",
      "text",
      "_italic_",
      "link",
      "alt",
      "code",
      "block",
      "declarative",
      "Some",
      "may",
      "assume",
      "correlation",
      "between",
      "Preview",
      "always",
      "become",
      "png",
      "However",
      "_that",
      "case_",
      "only",
      "declaratively",
      "tells",
      "image",
      "needs",
      "inserted",
      "here",
      "other",
      "things",
      "like",
      "transforming",
      "path",
      "URL",
      "generated",
      "markup",
      "differ",
      "output",
      "renderers",
      "hand",
      "transcription",
      "equivalent",
      "general",
      "should",
      "_semantics_",
      "fences",
      "blocks",
      "becomes",
      "quotes",
      "etc",
      "actual",
      "compiled",
      "Front",
      "used",
      "add",
      "metadata",
      "All",
      "have",
      "their",
      "own",
      "schema",
      "enrich",
      "inferred",
      "configuration",
      "provided",
      "top",
      "enclosed",
      "three",
      "dashes",
      "parsed",
      "YAML",
      "title",
      "Title",
      "more_data",
      "Can",
      "objects",
      "arrays",
      "info",
      "API",
      "each",
      "official",
      "plugin",
      "lists",
      "supported",
      "attributes",
      "Docs",
      "Blog",
      "Pages",
      "enhance",
      "config",
      "parseFrontMatter",
      "function",
      "provide",
      "reuse",
      "wrap",
      "custom",
      "proprietary",
      "logic",
      "makes",
      "implement",
      "convenient",
      "transformations",
      "shortcuts",
      "integrate",
      "external",
      "systems",
      "export",
      "highlight",
      "start",
      "async",
      "params",
      "Reuse",
      "const",
      "result",
      "await",
      "Process",
      "description",
      "placeholders",
      "frontMatter",
      "replaceAll",
      "MY_VAR",
      "MY_VALUE",
      "Create",
      "shortcut",
      "pagination_prev",
      "null",
      "pagination_next",
      "Rename",
      "unsupported",
      "coming",
      "another",
      "system",
      "cms_seo_summary",
      "delete",
      "return",
      "end",
      "Quotes",
      "are",
      "beautifully",
      "styled",
      "Easy",
      "maintain",
      "open",
      "source",
      "websites",
      "Details",
      "embed",
      "elements",
      "prettier",
      "ignore",
      "element",
      "example",
      "Toggle",
      "detailed",
      "console",
      "log",
      "available",
      "inline",
      "Nested",
      "toggle",
      "surprise",
      "inside",
      "want",
      "keep",
      "single",
      "line",
      "Keep",
      "mind",
      "creates",
      "extra",
      "paragraphs",
      "breaks",
      "When",
      "doubt",
      "troubleshoot",
      "rendering",
      "problems"
    ],
    "url": "/docs/guides/markdown-features/markdown-features-intro",
    "path": "guides/markdown-features/markdown-features-intro.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "links",
    "title": "Markdown links",
    "description": "Links to other pages in Markdown",
    "content": "Markdown links There are two ways of adding a link to another page: through a URL path and a file path. `md URL path to another document file path to another document ` URL paths are unprocessed by Docusaurus, and you can see them as directly rendering to <a href=\"./installation\">, i.e. it will be resolved according to the page's URL location, rather than its file-system location. If you want to reference another Markdown file included by the same plugin, you could use the relative path of the document you want to link to. Docusaurus' Markdown loader will convert the file path to the target file's URL path (and hence remove the .md extension). For example, if you are in docs/folder/doc1.md and you want to reference docs/folder/doc2.md, docs/folder/subfolder/doc3.md and docs/otherFolder/doc4.md: `md title=\"docs/folder/doc1.md\" I am referencing a document. Reference to another document in a subfolder. Relative document referencing works as well. ` Relative file paths are resolved against the current file's directory. Absolute file paths, on the other hand, are resolved relative to the content root, usually docs/, blog/, or localized ones like i18n/zh-Hans/plugin-content-docs/current. Absolute file paths can also be relative to the site directory. However, beware that links that begin with /docs/ or /blog/ are not portable as you would need to manually update them if you create new doc versions or localize them. `md You can write links relative to the content root (/docs/). You can also write links relative to the site directory, but it's not recommended. ` Using relative _file_ paths (with .md extensions) instead of relative _URL_ links provides the following benefits: Links will keep working on the GitHub interface and many Markdown editors You can customize the files' slugs without having to update all the links Moving files around the folders can be tracked by your editor, and some editors may automatically update file links A versioned doc will link to another doc of the exact same version Relative URL links are very likely to break if you update the trailingSlash config :::warning Markdown file references only work when the source and target files are processed by the same plugin instance. This is a technical limitation of our Markdown processing architecture and will be fixed in the future. If you are linking files between plugins (e.g. linking to a doc page from a blog post), you have to use URL links. :::",
    "keywords": [
      "markdown",
      "links",
      "to",
      "other",
      "pages",
      "in",
      "guides",
      "features",
      "mdx",
      "installation",
      "folder",
      "doc1",
      "doc2",
      "subfolder",
      "doc3",
      "otherFolder",
      "doc4",
      "zh-Hans",
      "plugin-content-docs",
      "current",
      "docs",
      "blog",
      "Markdown",
      "There",
      "are",
      "two",
      "ways",
      "adding",
      "link",
      "another",
      "page",
      "through",
      "URL",
      "path",
      "and",
      "file",
      "document",
      "paths",
      "unprocessed",
      "Docusaurus",
      "you",
      "can",
      "see",
      "them",
      "directly",
      "rendering",
      "href",
      "will",
      "resolved",
      "according",
      "the",
      "location",
      "rather",
      "than",
      "its",
      "system",
      "want",
      "reference",
      "included",
      "same",
      "plugin",
      "could",
      "use",
      "relative",
      "loader",
      "convert",
      "target",
      "hence",
      "remove",
      "extension",
      "For",
      "example",
      "title",
      "referencing",
      "Reference",
      "Relative",
      "works",
      "well",
      "against",
      "directory",
      "Absolute",
      "hand",
      "content",
      "root",
      "usually",
      "localized",
      "ones",
      "like",
      "i18n",
      "Hans",
      "also",
      "site",
      "However",
      "beware",
      "that",
      "begin",
      "with",
      "not",
      "portable",
      "would",
      "need",
      "manually",
      "update",
      "create",
      "new",
      "doc",
      "versions",
      "localize",
      "You",
      "write",
      "but",
      "recommended",
      "Using",
      "_file_",
      "extensions",
      "instead",
      "_URL_",
      "provides",
      "following",
      "benefits",
      "Links",
      "keep",
      "working",
      "GitHub",
      "interface",
      "many",
      "editors",
      "customize",
      "files",
      "slugs",
      "without",
      "having",
      "all",
      "Moving",
      "around",
      "folders",
      "tracked",
      "your",
      "editor",
      "some",
      "may",
      "automatically",
      "versioned",
      "exact",
      "version",
      "very",
      "likely",
      "break",
      "trailingSlash",
      "config",
      "warning",
      "references",
      "only",
      "work",
      "when",
      "source",
      "processed",
      "instance",
      "This",
      "technical",
      "limitation",
      "our",
      "processing",
      "architecture",
      "fixed",
      "future",
      "linking",
      "between",
      "plugins",
      "from",
      "post",
      "have"
    ],
    "url": "/docs/guides/markdown-features/markdown-features-links",
    "path": "guides/markdown-features/markdown-features-links.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "math-equations",
    "title": "Math Equations",
    "description": "Writing LaTeX Math Equations",
    "content": "Math Equations import BrowserWindow from '@site/src/components/BrowserWindow'; Mathematical equations can be rendered using KaTeX. See below how to activate them. Usage {#usage} Please read the KaTeX documentation for more details. Inline {#inline} Write inline math equations by wrapping LaTeX equations between $: `latex Let $f\\colon[a,b]\\to\\R$ be Riemann integrable. Let $F\\colon[a,b]\\to\\R$ be $F(x)=\\int_{a}^{x} f(t)\\,dt$. Then $F$ is continuous, and at all $x$ such that $f$ is continuous at $x$, $F$ is differentiable at $x$ with $F'(x)=f(x)$. ` <BrowserWindow> Let $f\\colon[a,b] \\to \\R$ be Riemann integrable. Let $F\\colon[a,b]\\to\\R$ be $F(x)= \\int_{a}^{x} f(t)\\,dt$. Then $F$ is continuous, and at all $x$ such that $f$ is continuous at $x$, $F$ is differentiable at $x$ with $F'(x)=f(x)$. </BrowserWindow> Blocks {#blocks} For equation block or display mode, use line breaks and $$: `latex $$ I = \\int_0^{2\\pi} \\sin(x)\\,dx $$ ` <BrowserWindow> $$ I = \\int_0^{2\\pi} \\sin(x)\\,dx $$ </BrowserWindow> Enabling math equations {#configuration} Enable KaTeX: Install the remark-math and rehype-katex plugins: `bash npm2yarn npm install --save remark-math@6 rehype-katex@7 ` :::warning Make sure to use remark-math 6 and rehype-katex 7 for Docusaurus v3 (using MDX v3). We can't guarantee other versions will work. ::: These 2 plugins are only available as ES Modules. We recommended to use an ES Modules config file: `js title=\"ES module docusaurus.config.js\" // highlight-start import remarkMath from 'remark-math'; import rehypeKatex from 'rehype-katex'; // highlight-end // highlight-start export default { presets: [ [ '@docusaurus/preset-classic', { docs: { path: 'docs', // highlight-start remarkPlugins: [remarkMath], rehypePlugins: [rehypeKatex], // highlight-end }, }, ], ], }; ` <details> <summary> Using a CommonJS config file? </summary> If you decide to use a CommonJS config file, it is possible to load those ES module plugins thanks to dynamic imports and an async config creator function: `js title=\"CommonJS module docusaurus.config.js\" // highlight-start module.exports = async function createConfigAsync() { // highlight-end return { presets: [ [ '@docusaurus/preset-classic', { docs: { path: 'docs', // highlight-start remarkPlugins: [(await import('remark-math')).default], rehypePlugins: [(await import('rehype-katex')).default], // highlight-end }, }, ], ], }; }; ` </details> Include the KaTeX CSS in your config under stylesheets: `js export default { //... stylesheets: [ { href: 'https://cdn.jsdelivr.net/npm/katex@0.13.24/dist/katex.min.css', type: 'text/css', integrity: 'sha384-odtC+0UGzzFL/6PNoE8rX/SPcQDXBJ+uRepguP4QkPCm2LBxH3FA3y+fKSiJ+AmM', crossorigin: 'anonymous', }, ], }; ` <details> <summary>See a config file example</summary> `js title=\"docusaurus.config.js\" // highlight-start import remarkMath from 'remark-math'; import rehypeKatex from 'rehype-katex'; // highlight-end export default { title: 'Docusaurus', tagline: 'Build optimized websites quickly, focus on your content', presets: [ [ '@docusaurus/preset-classic', { docs: { path: 'docs', // highlight-start remarkPlugins: [remarkMath], rehypePlugins: [rehypeKatex], // highlight-end }, }, ], ], // highlight-start stylesheets: [ { href: 'https://cdn.jsdelivr.net/npm/katex@0.13.24/dist/katex.min.css', type: 'text/css', integrity: 'sha384-odtC+0UGzzFL/6PNoE8rX/SPcQDXBJ+uRepguP4QkPCm2LBxH3FA3y+fKSiJ+AmM', crossorigin: 'anonymous', }, ], // highlight-end }; ` </details> Self-hosting KaTeX assets {#self-hosting-katex-assets} Loading stylesheets, fonts, and JavaScript libraries from CDN sources is a good practice for popular libraries and assets, since it reduces the amount of assets you have to host. In case you prefer to self-host the katex.min.css (along with required KaTeX fonts), you can download the latest version from KaTeX GitHub releases, extract and copy katex.min.css and fonts directory (only .woff2 font types should be enough) to your site's static directory, and in docusaurus.config.js, replace the stylesheet's href from the CDN URL to your local path (say, /katex/katex.min.css). `js title=\"docusaurus.config.js\" export default { stylesheets: [ { href: '/katex/katex.min.css', type: 'text/css', }, ], }; `",
    "keywords": [
      "math",
      "equations",
      "writing",
      "latex",
      "guides",
      "markdown",
      "features",
      "mdx",
      "src",
      "components",
      "BrowserWindow",
      "preset-classic",
      "summary",
      "details",
      "cdn",
      "npm",
      "katex",
      "dist",
      "css",
      "6PNoE8rX",
      "SPcQDXBJ",
      "Math",
      "Equations",
      "import",
      "from",
      "site",
      "Mathematical",
      "can",
      "rendered",
      "using",
      "KaTeX",
      "See",
      "below",
      "how",
      "activate",
      "them",
      "Usage",
      "usage",
      "Please",
      "read",
      "the",
      "documentation",
      "for",
      "more",
      "Inline",
      "inline",
      "Write",
      "wrapping",
      "LaTeX",
      "between",
      "Let",
      "colon",
      "Riemann",
      "integrable",
      "int_",
      "Then",
      "continuous",
      "and",
      "all",
      "such",
      "that",
      "differentiable",
      "with",
      "Blocks",
      "blocks",
      "For",
      "equation",
      "block",
      "display",
      "mode",
      "use",
      "line",
      "breaks",
      "int_0",
      "sin",
      "Enabling",
      "configuration",
      "Enable",
      "Install",
      "remark",
      "rehype",
      "plugins",
      "bash",
      "npm2yarn",
      "install",
      "save",
      "warning",
      "Make",
      "sure",
      "Docusaurus",
      "MDX",
      "guarantee",
      "other",
      "versions",
      "will",
      "work",
      "These",
      "are",
      "only",
      "available",
      "Modules",
      "recommended",
      "config",
      "file",
      "title",
      "module",
      "docusaurus",
      "highlight",
      "start",
      "remarkMath",
      "rehypeKatex",
      "end",
      "export",
      "default",
      "presets",
      "preset",
      "classic",
      "docs",
      "path",
      "remarkPlugins",
      "rehypePlugins",
      "Using",
      "CommonJS",
      "you",
      "decide",
      "possible",
      "load",
      "those",
      "thanks",
      "dynamic",
      "imports",
      "async",
      "creator",
      "function",
      "exports",
      "createConfigAsync",
      "return",
      "await",
      "Include",
      "CSS",
      "your",
      "under",
      "stylesheets",
      "href",
      "https",
      "jsdelivr",
      "net",
      "min",
      "type",
      "text",
      "integrity",
      "sha384",
      "odtC",
      "fKSiJ",
      "AmM",
      "crossorigin",
      "anonymous",
      "example",
      "tagline",
      "Build",
      "optimized",
      "websites",
      "quickly",
      "focus",
      "content",
      "Self",
      "hosting",
      "assets",
      "self",
      "Loading",
      "fonts",
      "JavaScript",
      "libraries",
      "CDN",
      "sources",
      "good",
      "practice",
      "popular",
      "since",
      "reduces",
      "amount",
      "have",
      "host",
      "case",
      "prefer",
      "along",
      "required",
      "download",
      "latest",
      "version",
      "GitHub",
      "releases",
      "extract",
      "copy",
      "directory",
      "woff2",
      "font",
      "types",
      "should",
      "enough",
      "static",
      "replace",
      "stylesheet",
      "URL",
      "local",
      "say"
    ],
    "url": "/docs/guides/markdown-features/markdown-features-math-equations",
    "path": "guides/markdown-features/markdown-features-math-equations.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "plugins",
    "title": "MDX Plugins",
    "description": "Using MDX plugins to expand Docusaurus Markdown functionalities",
    "content": "MDX Plugins Sometimes, you may want to extend or tweak your Markdown syntax. For example: How do I embed youtube videos using the image syntax ()? How do I style links that are on their own lines differently, e.g., as a social card? How do I make every page start with a copyright notice? And the answer is: create an MDX plugin! MDX has a built-in plugin system that can be used to customize how the Markdown files will be parsed and transformed to JSX. There are three typical use-cases of MDX plugins: Using existing remark plugins or rehype plugins; Creating remark/rehype plugins to transform the elements generated by existing MDX syntax; Creating remark/rehype plugins to introduce new syntaxes to MDX. If you play with the MDX playground, you would notice that the MDX transpilation has two intermediate steps: Markdown AST (MDAST), and Hypertext AST (HAST), before arriving at the final JSX output. MDX plugins also come in two forms: Remark: processes the Markdown AST. Rehype: processes the Hypertext AST. :::tip Use plugins to introduce shorter syntax for the most commonly used JSX elements in your project. The admonition syntax that we offer is also generated by a Remark plugin, and you could do the same for your own use case. ::: Default plugins {#default-plugins} Docusaurus injects some default Remark plugins during Markdown processing. These plugins would: Generate the table of contents; Add anchor links to each heading; Transform images and links to require() calls. … These are all typical use-cases of Remark plugins, which can also be a source of inspiration if you want to implement your own plugin. Installing plugins {#installing-plugins} An MDX plugin is usually an npm package, so you install them like other npm packages using npm. Take the math plugins as an example. `bash npm2yarn npm install --save remark-math@5 rehype-katex@6 ` <details> <summary>How are <code>remark-math</code> and <code>rehype-katex</code> different?</summary> In case you are wondering how Remark and Rehype are different, here is a good example. remark-math operates on the Markdown AST, where it sees text like $...$, and all it does is transform that to the JSX <span class=\"math math-inline\">...</span> without doing too much with the content. This decouples the extraction of math formulae from their rendering, which means you can swap $\\KaTeX$ out with other math renderers, like MathJax (with rehype-mathjax), just by replacing the Rehype plugin. Next, the rehype-katex operates on the Hypertext AST where everything has been converted to HTML-like tags already. It traverses all the elements with math class and uses $\\KaTeX$ to parse and render the content to actual HTML. </details> :::warning Many official Remark/Rehype plugins are ES Modules only, a JavaScript module system, which Docusaurus supports. We recommend using an ES Modules config file to make it easier to import such packages. ::: Next, import your plugins and add them to the plugin options through plugin or preset config in docusaurus.config.js: `js title=\"docusaurus.config.js\" // highlight-start import remarkMath from 'remark-math'; import rehypeKatex from 'rehype-katex'; // highlight-end // highlight-start export default { presets: [ [ '@docusaurus/preset-classic', { docs: { path: 'docs', // highlight-start remarkPlugins: [remarkMath], rehypePlugins: [rehypeKatex], // highlight-end }, }, ], ], }; ` <details> <summary>Using a CommonJS config file?</summary> If you decide to use a CommonJS config file, it is possible to load those ES module plugins thanks to dynamic imports and an async config creator function: `js title=\"docusaurus.config.js\" // highlight-start module.exports = async function createConfigAsync() { // highlight-end return { presets: [ [ '@docusaurus/preset-classic', { docs: { path: 'docs', // highlight-start remarkPlugins: [(await import('remark-math')).default], rehypePlugins: [(await import('rehype-katex')).default], // highlight-end }, }, ], ], }; }; ` </details> Configuring plugins {#configuring-plugins} Some plugins can be configured and accept their own options. In that case, use the [plugin, pluginOptions] syntax, like this: `js title=\"docusaurus.config.js\" import rehypeKatex from 'rehype-katex'; export default { presets: [ [ '@docusaurus/preset-classic', { docs: { rehypePlugins: [ // highlight-start [rehypeKatex, {strict: false}], // highlight-end ], }, }, ], ], }; ` You should check your plugin's documentation for the options it supports. Creating new rehype/remark plugins {#creating-new-rehyperemark-plugins} If there isn't an existing package that satisfies your customization need, you can create your own MDX plugin. :::note The writeup below is not meant to be a comprehensive guide to creating a plugin, but just an illustration of how to make it work with Docusaurus. Visit the Remark or Rehype documentation for a more in-depth explanation of how they work. ::: For example, let's make a plugin that visits every h2 heading and adds a Section X. prefix. First, create your plugin source file anywhere—you can even publish it as a separate npm package and install it like explained above. We would put ours at src/remark/section-prefix.js. A remark/rehype plugin is just a function that receives the options and returns a transformer that operates on the AST. `js \"src/remark/section-prefix.js\" import {visit} from 'unist-util-visit'; const plugin = (options) => { const transformer = async (ast) => { let number = 1; visit(ast, 'heading', (node) => { if (node.depth === 2 && node.children.length > 0) { node.children.unshift({ type: 'text', value: Section ${number}. , }); number++; } }); }; return transformer; }; export default plugin; ` You can now import your plugin in docusaurus.config.js and use it just like an installed plugin! `js title=\"docusaurus.config.js\" // highlight-next-line import sectionPrefix from './src/remark/section-prefix'; export default { presets: [ [ '@docusaurus/preset-classic', { docs: { // highlight-next-line remarkPlugins: [sectionPrefix], }, }, ], ], }; ` :::tip The transformer has a second parameter vfile which is useful if you need to access the current Markdown file's path. `js const plugin = (options) => { const transformer = async (ast, vfile) => { ast.children.unshift({ type: 'text', value: The current file path is ${vfile.path}, }); }; return transformer; }; ` Our transformImage plugin uses this parameter, for example, to transform relative image references to require() calls. ::: :::note The default plugins of Docusaurus would operate before the custom remark plugins, and that means the images or links have been converted to JSX with require() calls already. For example, in the example above, the table of contents generated is still the same even when all h2 headings are now prefixed by Section X., because the TOC-generating plugin is called before our custom plugin. If you need to process the MDAST before the default plugins do, use the beforeDefaultRemarkPlugins and beforeDefaultRehypePlugins. `js title=\"docusaurus.config.js\" export default { presets: [ [ '@docusaurus/preset-classic', { docs: { // highlight-next-line beforeDefaultRemarkPlugins: [sectionPrefix], }, }, ], ], }; ` This would make the table of contents generated contain the Section X. prefix as well. :::",
    "keywords": [
      "mdx",
      "plugins",
      "using",
      "to",
      "expand",
      "docusaurus",
      "markdown",
      "functionalities",
      "guides",
      "features",
      "rehype",
      "code",
      "summary",
      "span",
      "details",
      "Rehype",
      "preset-classic",
      "remark",
      "section-prefix",
      "src",
      "MDX",
      "Plugins",
      "Sometimes",
      "you",
      "may",
      "want",
      "extend",
      "tweak",
      "your",
      "Markdown",
      "syntax",
      "For",
      "example",
      "How",
      "embed",
      "youtube",
      "videos",
      "the",
      "image",
      "style",
      "links",
      "that",
      "are",
      "their",
      "own",
      "lines",
      "differently",
      "social",
      "card",
      "make",
      "every",
      "page",
      "start",
      "with",
      "copyright",
      "notice",
      "And",
      "answer",
      "create",
      "plugin",
      "has",
      "built",
      "system",
      "can",
      "used",
      "customize",
      "how",
      "files",
      "will",
      "parsed",
      "and",
      "transformed",
      "JSX",
      "There",
      "three",
      "typical",
      "use",
      "cases",
      "Using",
      "existing",
      "Creating",
      "transform",
      "elements",
      "generated",
      "introduce",
      "new",
      "syntaxes",
      "play",
      "playground",
      "would",
      "transpilation",
      "two",
      "intermediate",
      "steps",
      "AST",
      "MDAST",
      "Hypertext",
      "HAST",
      "before",
      "arriving",
      "final",
      "output",
      "also",
      "come",
      "forms",
      "Remark",
      "processes",
      "tip",
      "Use",
      "shorter",
      "for",
      "most",
      "commonly",
      "project",
      "The",
      "admonition",
      "offer",
      "could",
      "same",
      "case",
      "Default",
      "default",
      "Docusaurus",
      "injects",
      "some",
      "during",
      "processing",
      "These",
      "Generate",
      "table",
      "contents",
      "Add",
      "anchor",
      "each",
      "heading",
      "Transform",
      "images",
      "require",
      "calls",
      "all",
      "which",
      "source",
      "inspiration",
      "implement",
      "Installing",
      "installing",
      "usually",
      "npm",
      "package",
      "install",
      "them",
      "like",
      "other",
      "packages",
      "Take",
      "math",
      "bash",
      "npm2yarn",
      "save",
      "katex",
      "different",
      "wondering",
      "here",
      "good",
      "operates",
      "where",
      "sees",
      "text",
      "does",
      "class",
      "inline",
      "without",
      "doing",
      "too",
      "much",
      "content",
      "This",
      "decouples",
      "extraction",
      "formulae",
      "from",
      "rendering",
      "means",
      "swap",
      "KaTeX",
      "out",
      "renderers",
      "MathJax",
      "mathjax",
      "just",
      "replacing",
      "Next",
      "everything",
      "been",
      "converted",
      "HTML",
      "tags",
      "already",
      "traverses",
      "uses",
      "parse",
      "render",
      "actual",
      "warning",
      "Many",
      "official",
      "Modules",
      "only",
      "JavaScript",
      "module",
      "supports",
      "recommend",
      "config",
      "file",
      "easier",
      "import",
      "such",
      "add",
      "options",
      "through",
      "preset",
      "title",
      "highlight",
      "remarkMath",
      "rehypeKatex",
      "end",
      "export",
      "presets",
      "classic",
      "docs",
      "path",
      "remarkPlugins",
      "rehypePlugins",
      "CommonJS",
      "decide",
      "possible",
      "load",
      "those",
      "thanks",
      "dynamic",
      "imports",
      "async",
      "creator",
      "function",
      "exports",
      "createConfigAsync",
      "return",
      "await",
      "Configuring",
      "configuring",
      "Some",
      "configured",
      "accept",
      "pluginOptions",
      "this",
      "strict",
      "false",
      "You",
      "should",
      "check",
      "documentation",
      "creating",
      "rehyperemark",
      "there",
      "isn",
      "satisfies",
      "customization",
      "need",
      "note",
      "writeup",
      "below",
      "not",
      "meant",
      "comprehensive",
      "guide",
      "but",
      "illustration",
      "work",
      "Visit",
      "more",
      "depth",
      "explanation",
      "they",
      "let",
      "visits",
      "adds",
      "Section",
      "prefix",
      "First",
      "anywhere",
      "even",
      "publish",
      "separate",
      "explained",
      "above",
      "put",
      "ours",
      "section",
      "receives",
      "returns",
      "transformer",
      "visit",
      "unist",
      "util",
      "const",
      "ast",
      "number",
      "node",
      "children",
      "length",
      "unshift",
      "type",
      "value",
      "now",
      "installed",
      "next",
      "line",
      "sectionPrefix",
      "second",
      "parameter",
      "vfile",
      "useful",
      "access",
      "current",
      "Our",
      "transformImage",
      "relative",
      "references",
      "operate",
      "custom",
      "have",
      "still",
      "when",
      "headings",
      "prefixed",
      "because",
      "TOC",
      "generating",
      "called",
      "our",
      "process",
      "contain",
      "well"
    ],
    "url": "/docs/guides/markdown-features/markdown-features-plugins",
    "path": "guides/markdown-features/markdown-features-plugins.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "react",
    "title": "MDX and React",
    "description": "Using the power of React in Docusaurus Markdown documents, thanks to MDX",
    "content": "MDX and React `mdx-code-block import BrowserWindow from '@site/src/components/BrowserWindow'; import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import styles from './markdown-features-react.module.css'; ` Docusaurus has built-in support for MDX, which allows you to write JSX within your Markdown files and render them as React components. Check out the MDX docs to see what fancy stuff you can do with MDX. :::tip Debugging MDX The MDX format is quite strict, and you may get compilation errors. Use the MDX playground to debug them and make sure your syntax is valid. ::: :::info Prettier, the most popular formatter, supports only the legacy MDX v1. If you get an unintentional formatting result, you may want to add {/ prettier-ignore /} before the problematic area, or add *.mdx to your .prettierignore, until Prettier has proper support for MDX v3. One of the main authors of MDX recommends remark-cli with remark-mdx. ::: Exporting components {#exporting-components} To define any custom component within an MDX file, you have to export it: only paragraphs that start with export will be parsed as components instead of prose. `jsx export const Highlight = ({children, color}) => ( <span style={{ backgroundColor: color, borderRadius: '2px', color: '#fff', padding: '0.2rem', }}> {children} </span> ); <Highlight color=\"#25c2a0\">Docusaurus green</Highlight> and <Highlight color=\"#1877F2\">Facebook blue</Highlight> are my favorite colors. I can write Markdown alongside my _JSX_! ` Notice how it renders both the markup from your React component and the Markdown syntax: `mdx-code-block export const Highlight = ({children, color}) => ( <span style={{ backgroundColor: color, borderRadius: '2px', color: '#fff', padding: '0.2rem', }}> {children} </span> ); <BrowserWindow minHeight={240}> <><Highlight color=\"#25c2a0\">Docusaurus green</Highlight> { }and <Highlight color=\"#1877F2\">Facebook blue</Highlight> are my favorite colors.</> I can write Markdown alongside my _JSX_! </BrowserWindow> ` :::warning MDX is JSX Since all doc files are parsed using MDX, anything that looks like HTML is actually JSX. Therefore, if you need to inline-style a component, follow JSX flavor and provide style objects. {/ prettier-ignore /} `jsx / Instead of this: / <span style=\"background-color: red\">Foo</span> / Use this: / <span style={{backgroundColor: 'red'}}>Foo</span> ` ::: Importing components {#importing-components} You can also import your own components defined in other files or third-party components installed via npm. {/ prettier-ignore /} `md <!-- Docusaurus theme component --> import TOCInline from '@theme/TOCInline'; <!-- External component --> import Button from '@mui/material/Button'; <!-- Custom component --> import BrowserWindow from '@site/src/components/BrowserWindow'; ` :::tip The @site alias points to your website's directory, usually where the docusaurus.config.js file is. Using an alias instead of relative paths ('../../src/components/BrowserWindow') saves you from updating import paths when moving files around, or when versioning docs and translating. ::: While declaring components within Markdown is very convenient for simple cases, it becomes hard to maintain because of limited editor support, risks of parsing errors, and low reusability. Use a separate .js file when your component involves complex JS logic: `jsx title=\"src/components/Highlight.js\" import React from 'react'; export default function Highlight({children, color}) { return ( <span style={{ backgroundColor: color, borderRadius: '2px', color: '#fff', padding: '0.2rem', }}> {children} </span> ); } ` `md title=\"markdown-file.mdx\" import Highlight from '@site/src/components/Highlight'; <Highlight color=\"#25c2a0\">Docusaurus green</Highlight> ` :::tip If you use the same component across a lot of files, you don't need to import it everywhere—consider adding it to the global scope. See below ::: MDX component scope {#mdx-component-scope} Apart from importing a component and exporting a component, a third way to use a component in MDX is to register it to the global scope, which will make it automatically available in every MDX file, without any import statements. For example, given this MDX file: `md a list! And some <Highlight>custom markup</Highlight>... ` It will be compiled to a React component containing ul, li, p, and Highlight elements. Highlight is not a native html element: you need to provide your own React component implementation for it. In Docusaurus, the MDX component scope is provided by the @theme/MDXComponents file. It's not a React component, _per se_, unlike most other exports under the @theme/ alias: it is a record from tag names like Highlight to their React component implementations. If you swizzle this component, you will find all tags that have been implemented, and you can further customize our implementation by swizzling the respective sub-component, like @theme/MDXComponents/Code (which is used to render Markdown code blocks). If you want to register extra tag names (like the <Highlight> tag above), you should consider wrapping @theme/MDXComponents, so you don't have to maintain all the existing mappings. Since the swizzle CLI doesn't allow wrapping non-component files yet, you should manually create the wrapper: `js title=\"src/theme/MDXComponents.js\" import React from 'react'; // Import the original mapper import MDXComponents from '@theme-original/MDXComponents'; // highlight-next-line import Highlight from '@site/src/components/Highlight'; export default { // Re-use the default mapping ...MDXComponents, // Map the \"<Highlight>\" tag to our Highlight component // Highlight will receive all props that were passed to <Highlight> in MDX // highlight-next-line Highlight, }; ` And now, you can freely use <Highlight> in every page, without writing the import statement: `md I can conveniently use <Highlight color=\"#25c2a0\">Docusaurus green</Highlight> everywhere! ` `mdx-code-block <BrowserWindow> I can conveniently use <Highlight color=\"#25c2a0\">Docusaurus green</Highlight> everywhere! </BrowserWindow> ` :::warning We use upper-case tag names like Highlight on purpose. From MDX v3+ onward (Docusaurus v3+), lower-case tag names are always rendered as native html elements, and will not use any component mapping you provide. ::: :::warning This feature is powered by an MDXProvider. If you are importing Markdown in a React page, you have to supply this provider yourself through the MDXContent theme component. `jsx title=\"src/pages/index.js\" import React from 'react'; import FeatureDisplay from './_featureDisplay.mdx'; // highlight-next-line import MDXContent from '@theme/MDXContent'; export default function LandingPage() { return ( <div> {/ highlight-start /} <MDXContent> <FeatureDisplay /> </MDXContent> {/ highlight-end /} </div> ); } ` If you don't wrap your imported MDX with MDXContent, the global scope will not be available. ::: Markdown and JSX interoperability {#markdown-and-jsx-interoperability} Docusaurus v3 is using MDX v3. The MDX syntax is mostly compatible with CommonMark, but is much stricter because your .mdx files can use JSX and are compiled into real React components (check the playground). Some valid CommonMark features won't work with MDX (more info), notably: Indented code blocks: use triple backticks instead Autolinks (<http://localhost:3000>): use regular link syntax instead (http://localhost:3000) HTML syntax (<p style=\"color: red;\">): use JSX instead (<p style={{color: 'red'}}>) Unescaped { and <: escape them with \\ instead (\\{ and \\<) :::danger Experimental CommonMark support Docusaurus v3 makes it possible to opt-in for a less strict, standard CommonMark support with the following options: The mdx.format: md front matter The .md file extension combined with the siteConfig.markdown.format: \"detect\" configuration This feature is experimental and currently has a few limitations. ::: Importing code snippets {#importing-code-snippets} You can not only import a file containing a component definition, but also import any code file as raw text, and then insert it in a code block, thanks to Webpack raw-loader. In order to use raw-loader, you first need to install it in your project: `bash npm2yarn npm install --save raw-loader ` Now you can import code snippets from another file as it is: {/ prettier-ignore /} `jsx title=\"myMarkdownFile.mdx\" import CodeBlock from '@theme/CodeBlock'; import MyComponentSource from '!!raw-loader!./myComponent'; <CodeBlock language=\"jsx\">{MyComponentSource}</CodeBlock> ` `mdx-code-block import CodeBlock from '@theme/CodeBlock'; import MyComponentSource from '!!raw-loader!@site/src/pages/examples/_myComponent'; <BrowserWindow> <CodeBlock language=\"jsx\">{MyComponentSource}</CodeBlock> </BrowserWindow> ` See using code blocks in JSX for more details of the <CodeBlock> component. :::note You have to use <CodeBlock> rather than the Markdown triple-backtick `, because the latter will ship out any of its content as-is, but you want to interpolate the imported text here. ::: :::warning This feature is experimental and might be subject to breaking API changes in the future. ::: Importing Markdown {#importing-markdown} You can use Markdown files as components and import them elsewhere, either in Markdown files or in React pages. Each MDX file default-exports its page content as a React component. In the import statement, you can default-import this component with any name, but it must be capitalized following React's naming rules. By convention, using the _ filename prefix will not create any doc page and means the Markdown file is a \"partial\", to be imported by other files. `md title=\"_markdown-partial-example.mdx\" <span>Hello {props.name}</span> This is text some content from _markdown-partial-example.mdx. ` {/ prettier-ignore /} `jsx title=\"someOtherDoc.mdx\" import PartialExample from './_markdown-partial-example.mdx'; <PartialExample name=\"Sebastien\" /> ` `mdx-code-block import PartialExample from './_markdown-partial-example.mdx'; <BrowserWindow> <PartialExample name=\"Sebastien\" /> </BrowserWindow> ` This way, you can reuse content among multiple pages and avoid duplicating materials. Available exports {#available-exports} Within the MDX page, the following variables are available as globals: frontMatter: the front matter as a record of string keys and values; toc: the table of contents, as a tree of headings. See also Inline TOC for a more concrete use-case. contentTitle: the Markdown title, which is the first h1 heading in the Markdown text. It's undefined if there isn't one (e.g. title specified in the front matter). `jsx import TOCInline from '@theme/TOCInline'; import CodeBlock from '@theme/CodeBlock'; The table of contents for this page, serialized: <CodeBlock className=\"language-json\">{JSON.stringify(toc, null, 2)}</CodeBlock> The front matter of this page: <ul> {Object.entries(frontMatter).map(([key, value]) => <li key={key}><b>{key}</b>: {value}</li>)} </ul> <p>The title of this page is: <b>{contentTitle}</b></p> ` `mdx-code-block import TOCInline from '@theme/TOCInline'; <BrowserWindow> The table of contents for this page, serialized: <CodeBlock className=\"language-json\">{JSON.stringify(toc, null, 2)}</CodeBlock> The front matter of this page: <ul> {Object.entries(frontMatter).map(([key, value]) => <li key={key}><b>{key}</b>: {value}</li>)} </ul> <p>The title of this page is: <b>{contentTitle}</b></p> </BrowserWindow> `",
    "keywords": [
      "mdx",
      "and",
      "react",
      "using",
      "the",
      "power",
      "of",
      "in",
      "docusaurus",
      "markdown",
      "documents,",
      "thanks",
      "to",
      "guides",
      "features",
      "src",
      "components",
      "BrowserWindow",
      "Tabs",
      "TabItem",
      "markdown-features-react",
      "span",
      "Highlight",
      "TOCInline",
      "material",
      "Button",
      "MDXComponents",
      "Code",
      "theme",
      "pages",
      "index",
      "_featureDisplay",
      "MDXContent",
      "div",
      "localhost",
      "CodeBlock",
      "myComponent",
      "examples",
      "_myComponent",
      "_markdown-partial-example",
      "li",
      "ul",
      "MDX",
      "React",
      "code",
      "block",
      "import",
      "from",
      "site",
      "styles",
      "module",
      "css",
      "Docusaurus",
      "has",
      "built",
      "support",
      "for",
      "which",
      "allows",
      "you",
      "write",
      "JSX",
      "within",
      "your",
      "Markdown",
      "files",
      "render",
      "them",
      "Check",
      "out",
      "docs",
      "see",
      "what",
      "fancy",
      "stuff",
      "can",
      "with",
      "tip",
      "Debugging",
      "The",
      "format",
      "quite",
      "strict",
      "may",
      "get",
      "compilation",
      "errors",
      "Use",
      "playground",
      "debug",
      "make",
      "sure",
      "syntax",
      "valid",
      "info",
      "Prettier",
      "most",
      "popular",
      "formatter",
      "supports",
      "only",
      "legacy",
      "unintentional",
      "formatting",
      "result",
      "want",
      "add",
      "prettier",
      "ignore",
      "before",
      "problematic",
      "area",
      "prettierignore",
      "until",
      "proper",
      "One",
      "main",
      "authors",
      "recommends",
      "remark",
      "cli",
      "Exporting",
      "exporting",
      "define",
      "any",
      "custom",
      "component",
      "file",
      "have",
      "export",
      "paragraphs",
      "that",
      "start",
      "will",
      "parsed",
      "instead",
      "prose",
      "jsx",
      "const",
      "children",
      "color",
      "style",
      "backgroundColor",
      "borderRadius",
      "fff",
      "padding",
      "green",
      "Facebook",
      "blue",
      "are",
      "favorite",
      "colors",
      "alongside",
      "_JSX_",
      "Notice",
      "how",
      "renders",
      "both",
      "markup",
      "minHeight",
      "warning",
      "Since",
      "all",
      "doc",
      "anything",
      "looks",
      "like",
      "HTML",
      "actually",
      "Therefore",
      "need",
      "inline",
      "follow",
      "flavor",
      "provide",
      "objects",
      "Instead",
      "this",
      "background",
      "red",
      "Foo",
      "Importing",
      "importing",
      "You",
      "also",
      "own",
      "defined",
      "other",
      "third",
      "party",
      "installed",
      "via",
      "npm",
      "External",
      "mui",
      "Custom",
      "alias",
      "points",
      "website",
      "directory",
      "usually",
      "where",
      "config",
      "Using",
      "relative",
      "paths",
      "saves",
      "updating",
      "when",
      "moving",
      "around",
      "versioning",
      "translating",
      "While",
      "declaring",
      "very",
      "convenient",
      "simple",
      "cases",
      "becomes",
      "hard",
      "maintain",
      "because",
      "limited",
      "editor",
      "risks",
      "parsing",
      "low",
      "reusability",
      "separate",
      "involves",
      "complex",
      "logic",
      "title",
      "default",
      "function",
      "return",
      "use",
      "same",
      "across",
      "lot",
      "don",
      "everywhere",
      "consider",
      "adding",
      "global",
      "scope",
      "See",
      "below",
      "Apart",
      "way",
      "register",
      "automatically",
      "available",
      "every",
      "without",
      "statements",
      "For",
      "example",
      "given",
      "list",
      "And",
      "some",
      "compiled",
      "containing",
      "elements",
      "not",
      "native",
      "html",
      "element",
      "implementation",
      "provided",
      "_per",
      "se_",
      "unlike",
      "exports",
      "under",
      "record",
      "tag",
      "names",
      "their",
      "implementations",
      "swizzle",
      "find",
      "tags",
      "been",
      "implemented",
      "further",
      "customize",
      "our",
      "swizzling",
      "respective",
      "sub",
      "used",
      "blocks",
      "extra",
      "above",
      "should",
      "wrapping",
      "existing",
      "mappings",
      "CLI",
      "doesn",
      "allow",
      "non",
      "yet",
      "manually",
      "create",
      "wrapper",
      "Import",
      "original",
      "mapper",
      "highlight",
      "next",
      "line",
      "mapping",
      "Map",
      "receive",
      "props",
      "were",
      "passed",
      "now",
      "freely",
      "page",
      "writing",
      "statement",
      "conveniently",
      "upper",
      "case",
      "purpose",
      "From",
      "onward",
      "lower",
      "always",
      "rendered",
      "This",
      "feature",
      "powered",
      "MDXProvider",
      "supply",
      "provider",
      "yourself",
      "through",
      "FeatureDisplay",
      "LandingPage",
      "end",
      "wrap",
      "imported",
      "interoperability",
      "mostly",
      "compatible",
      "CommonMark",
      "but",
      "much",
      "stricter",
      "into",
      "real",
      "check",
      "Some",
      "won",
      "work",
      "more",
      "notably",
      "Indented",
      "triple",
      "backticks",
      "Autolinks",
      "http",
      "regular",
      "link",
      "Unescaped",
      "escape",
      "danger",
      "Experimental",
      "makes",
      "possible",
      "opt",
      "less",
      "standard",
      "following",
      "options",
      "front",
      "matter",
      "extension",
      "combined",
      "siteConfig",
      "detect",
      "configuration",
      "experimental",
      "currently",
      "few",
      "limitations",
      "snippets",
      "definition",
      "raw",
      "text",
      "then",
      "insert",
      "Webpack",
      "loader",
      "order",
      "first",
      "install",
      "project",
      "bash",
      "npm2yarn",
      "save",
      "Now",
      "another",
      "myMarkdownFile",
      "MyComponentSource",
      "language",
      "details",
      "note",
      "rather",
      "than",
      "backtick",
      "latter",
      "ship",
      "its",
      "content",
      "interpolate",
      "here",
      "might",
      "subject",
      "breaking",
      "API",
      "changes",
      "future",
      "elsewhere",
      "either",
      "Each",
      "name",
      "must",
      "capitalized",
      "naming",
      "rules",
      "convention",
      "filename",
      "prefix",
      "means",
      "partial",
      "_markdown",
      "Hello",
      "someOtherDoc",
      "PartialExample",
      "Sebastien",
      "reuse",
      "among",
      "multiple",
      "avoid",
      "duplicating",
      "materials",
      "Available",
      "Within",
      "variables",
      "globals",
      "frontMatter",
      "string",
      "keys",
      "values",
      "toc",
      "table",
      "contents",
      "tree",
      "headings",
      "Inline",
      "TOC",
      "concrete",
      "contentTitle",
      "heading",
      "undefined",
      "there",
      "isn",
      "one",
      "specified",
      "serialized",
      "className",
      "json",
      "JSON",
      "stringify",
      "null",
      "Object",
      "entries",
      "map",
      "key",
      "value"
    ],
    "url": "/docs/guides/markdown-features/markdown-features-react",
    "path": "guides/markdown-features/markdown-features-react.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "tabs",
    "title": "Tabs",
    "description": "Using tabs inside Docusaurus Markdown",
    "content": "Tabs `mdx-code-block import BrowserWindow from '@site/src/components/BrowserWindow'; import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import styles from './markdown-features-tabs-styles.module.css'; ` Docusaurus provides the <Tabs> component that you can use in Markdown thanks to MDX: {/ prettier-ignore /} `jsx import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; <Tabs> <TabItem value=\"apple\" label=\"Apple\" default> This is an apple 🍎 </TabItem> <TabItem value=\"orange\" label=\"Orange\"> This is an orange 🍊 </TabItem> <TabItem value=\"banana\" label=\"Banana\"> This is a banana 🍌 </TabItem> </Tabs> ` `mdx-code-block <BrowserWindow> <Tabs> <TabItem value=\"apple\" label=\"Apple\">This is an apple 🍎</TabItem> <TabItem value=\"orange\" label=\"Orange\">This is an orange 🍊</TabItem> <TabItem value=\"banana\" label=\"Banana\">This is a banana 🍌</TabItem> </Tabs> </BrowserWindow> ` --- It is also possible to provide values and defaultValue props to Tabs: `jsx <Tabs defaultValue=\"apple\" values={[ {label: 'Apple', value: 'apple'}, {label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}, ]}> <TabItem value=\"apple\">This is an apple 🍎</TabItem> <TabItem value=\"orange\">This is an orange 🍊</TabItem> <TabItem value=\"banana\">This is a banana 🍌</TabItem> </Tabs> ` `mdx-code-block <BrowserWindow> <Tabs defaultValue=\"apple\" values={[ {label: 'Apple', value: 'apple'}, {label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}, ]}> <TabItem value=\"apple\">This is an apple 🍎</TabItem> <TabItem value=\"orange\">This is an orange 🍊</TabItem> <TabItem value=\"banana\">This is a banana 🍌</TabItem> </Tabs> </BrowserWindow> ` <details> <summary><code>Tabs</code> props take precedence over the <code>TabItem</code> props:</summary> `jsx <Tabs defaultValue=\"apple\" values={[ {label: 'Apple 1', value: 'apple'}, {label: 'Orange 1', value: 'orange'}, {label: 'Banana 1', value: 'banana'}, ]}> <TabItem value=\"apple\" label=\"Apple 2\"> This is an apple 🍎 </TabItem> <TabItem value=\"orange\" label=\"Orange 2\"> This is an orange 🍊 </TabItem> <TabItem value=\"banana\" label=\"Banana 2\" default> This is a banana 🍌 </TabItem> </Tabs> ` `mdx-code-block <BrowserWindow> <Tabs defaultValue=\"apple\" values={[ {label: 'Apple 1', value: 'apple'}, {label: 'Orange 1', value: 'orange'}, {label: 'Banana 1', value: 'banana'}, ]}> <TabItem value=\"apple\" label=\"Apple 2\">This is an apple 🍎</TabItem> <TabItem value=\"orange\" label=\"Orange 2\">This is an orange 🍊</TabItem> <TabItem value=\"banana\" label=\"Banana 2\" default>This is a banana 🍌</TabItem> </Tabs> </BrowserWindow> ` </details> :::tip By default, all tabs are rendered eagerly during the build process, and search engines can index hidden tabs. It is possible to only render the default tab with <Tabs lazy />. ::: Displaying a default tab {#displaying-a-default-tab} The first tab is displayed by default, and to override this behavior, you can specify a default tab by adding default to one of the tab items. You can also set the defaultValue prop of the Tabs component to the label value of your choice. For example, in the example above, either setting default for the value=\"apple\" tab or setting defaultValue=\"apple\" for the tabs forces the \"Apple\" tab to be open by default. Docusaurus will throw an error if a defaultValue is provided for the Tabs but it refers to a non-existing value. If you want none of the tabs to be shown by default, use defaultValue={null}. Syncing tab choices {#syncing-tab-choices} You may want choices of the same kind of tabs to sync with each other. For example, you might want to provide different instructions for users on Windows vs users on macOS, and you want to change all OS-specific instructions tabs in one click. To achieve that, you can give all related tabs the same groupId prop. Note that doing this will persist the choice in localStorage and all <Tab> instances with the same groupId will update automatically when the value of one of them is changed. Note that group IDs are globally namespaced. `jsx // highlight-next-line <Tabs groupId=\"operating-systems\"> <TabItem value=\"win\" label=\"Windows\">Use Ctrl + C to copy.</TabItem> <TabItem value=\"mac\" label=\"macOS\">Use Command + C to copy.</TabItem> </Tabs> // highlight-next-line <Tabs groupId=\"operating-systems\"> <TabItem value=\"win\" label=\"Windows\">Use Ctrl + V to paste.</TabItem> <TabItem value=\"mac\" label=\"macOS\">Use Command + V to paste.</TabItem> </Tabs> ` `mdx-code-block <BrowserWindow> <Tabs groupId=\"operating-systems\"> <TabItem value=\"win\" label=\"Windows\">Use Ctrl + C to copy.</TabItem> <TabItem value=\"mac\" label=\"macOS\">Use Command + C to copy.</TabItem> </Tabs> <Tabs groupId=\"operating-systems\"> <TabItem value=\"win\" label=\"Windows\">Use Ctrl + V to paste.</TabItem> <TabItem value=\"mac\" label=\"macOS\">Use Command + V to paste.</TabItem> </Tabs> </BrowserWindow> ` For all tab groups that have the same groupId, the possible values do not need to be the same. If one tab group is chosen a value that does not exist in another tab group with the same groupId, the tab group with the missing value won't change its tab. You can see that from the following example. Try to select Linux, and the above tab groups don't change. `jsx <Tabs groupId=\"operating-systems\"> <TabItem value=\"win\" label=\"Windows\"> I am Windows. </TabItem> <TabItem value=\"mac\" label=\"macOS\"> I am macOS. </TabItem> <TabItem value=\"linux\" label=\"Linux\"> I am Linux. </TabItem> </Tabs> ` `mdx-code-block <BrowserWindow> <Tabs groupId=\"operating-systems\"> <TabItem value=\"win\" label=\"Windows\">I am Windows.</TabItem> <TabItem value=\"mac\" label=\"macOS\">I am macOS.</TabItem> <TabItem value=\"linux\" label=\"Linux\">I am Linux.</TabItem> </Tabs> </BrowserWindow> ` --- Tab choices with different group IDs will not interfere with each other: `jsx // highlight-next-line <Tabs groupId=\"operating-systems\"> <TabItem value=\"win\" label=\"Windows\">Windows in windows.</TabItem> <TabItem value=\"mac\" label=\"macOS\">macOS is macOS.</TabItem> </Tabs> // highlight-next-line <Tabs groupId=\"non-mac-operating-systems\"> <TabItem value=\"win\" label=\"Windows\">Windows is windows.</TabItem> <TabItem value=\"unix\" label=\"Unix\">Unix is unix.</TabItem> </Tabs> ` `mdx-code-block <BrowserWindow> <Tabs groupId=\"operating-systems\"> <TabItem value=\"win\" label=\"Windows\">Windows in windows.</TabItem> <TabItem value=\"mac\" label=\"macOS\">macOS is macOS.</TabItem> </Tabs> <Tabs groupId=\"non-mac-operating-systems\"> <TabItem value=\"win\" label=\"Windows\">Windows is windows.</TabItem> <TabItem value=\"unix\" label=\"Unix\">Unix is unix.</TabItem> </Tabs> </BrowserWindow> ` Customizing tabs {#customizing-tabs} You might want to customize the appearance of a certain set of tabs. You can pass the string in className prop, and the specified CSS class will be added to the Tabs component: `jsx // highlight-next-line <Tabs className=\"unique-tabs\"> <TabItem value=\"Apple\">This is an apple 🍎</TabItem> <TabItem value=\"Orange\">This is an orange 🍊</TabItem> <TabItem value=\"Banana\">This is a banana 🍌</TabItem> </Tabs> ` `mdx-code-block <BrowserWindow> <Tabs className=\"unique-tabs\"> <TabItem value=\"Apple\">This is an apple 🍎</TabItem> <TabItem value=\"Orange\">This is an orange 🍊</TabItem> <TabItem value=\"Banana\">This is a banana 🍌</TabItem> </Tabs> </BrowserWindow> ` Customizing tab headings {#customizing-tab-headings} You can also customize each tab heading independently by using the attributes field. The extra props can be passed to the headings either through the values prop in Tabs, or props of each TabItem—in the same way as you declare label. {/ prettier-ignore /} `jsx title=\"some-doc.mdx\" import styles from './styles.module.css'; <Tabs> <TabItem value=\"apple\" label=\"Apple\" attributes={{className: styles.red}}> This is an apple 🍎 </TabItem> <TabItem value=\"orange\" label=\"Orange\" attributes={{className: styles.orange}}> This is an orange 🍊 </TabItem> <TabItem value=\"banana\" label=\"Banana\" attributes={{className: styles.yellow}}> This is a banana 🍌 </TabItem> </Tabs> ` `css title=\"styles.module.css\" .red { color: red; } .red[aria-selected='true'] { border-bottom-color: red; } .orange { color: orange; } .orange[aria-selected='true'] { border-bottom-color: orange; } .yellow { color: yellow; } .yellow[aria-selected='true'] { border-bottom-color: yellow; } ` `mdx-code-block <BrowserWindow> <Tabs> <TabItem value=\"apple\" label=\"Apple\" attributes={{className: styles.red}}> This is an apple 🍎 </TabItem> <TabItem value=\"orange\" label=\"Orange\" attributes={{className: styles.orange}}> This is an orange 🍊 </TabItem> <TabItem value=\"banana\" label=\"Banana\" attributes={{className: styles.yellow}}> This is a banana 🍌 </TabItem> </Tabs> </BrowserWindow> ` :::tip className would be merged with other default class names. You may also use a custom data-value field ({'data-value': 'apple'}) paired with CSS attribute selectors: `css title=\"styles.module.css\" li[role='tab'][data-value='apple'] { color: red; } ` ::: Query string {#query-string} It is possible to persist the selected tab into the url search parameters. This enables you to share a link to a page which pre-selects the tab - linking from your Android app to documentation with the Android tabs pre-selected. This feature does not provide an anchor link - the browser will not scroll to the tab. Use the queryString prop to enable this feature and define the search param name to use. `tsx // highlight-next-line <Tabs queryString=\"current-os\"> <TabItem value=\"android\" label=\"Android\"> Android </TabItem> <TabItem value=\"ios\" label=\"iOS\"> iOS </TabItem> </Tabs> ` `mdx-code-block <BrowserWindow> <Tabs queryString='current-os'> <TabItem value=\"android\" label=\"Android\">Android</TabItem> <TabItem value=\"ios\" label=\"iOS\">iOS</TabItem> </Tabs> </BrowserWindow> ` As soon as a tab is clicked, a search parameter is added at the end of the url: ?current-os=android or ?current-os=ios. :::tip queryString can be used together with groupId. For convenience, when the queryString prop is true, the groupId value will be used as a fallback. `tsx // highlight-next-line <Tabs groupId=\"current-os\" queryString> <TabItem value=\"android\" label=\"Android\"> Android </TabItem> <TabItem value=\"ios\" label=\"iOS\"> iOS </TabItem> </Tabs> ` `mdx-code-block <BrowserWindow> <Tabs queryString groupId=\"current-os\"> <TabItem value=\"android\" label=\"Android\">Android</TabItem> <TabItem value=\"ios\" label=\"iOS\">iOS</TabItem> </Tabs> </BrowserWindow> ` When the page loads, the tab query string choice will be restored in priority over the groupId choice (using localStorage). :::",
    "keywords": [
      "tabs",
      "using",
      "inside",
      "docusaurus",
      "markdown",
      "guides",
      "features",
      "mdx",
      "src",
      "components",
      "BrowserWindow",
      "Tabs",
      "TabItem",
      "markdown-features-tabs-styles",
      "code",
      "summary",
      "details",
      "styles",
      "block",
      "import",
      "from",
      "site",
      "theme",
      "module",
      "css",
      "Docusaurus",
      "provides",
      "the",
      "component",
      "that",
      "you",
      "can",
      "use",
      "Markdown",
      "thanks",
      "MDX",
      "prettier",
      "ignore",
      "jsx",
      "value",
      "apple",
      "label",
      "Apple",
      "default",
      "This",
      "orange",
      "Orange",
      "banana",
      "Banana",
      "also",
      "possible",
      "provide",
      "values",
      "and",
      "defaultValue",
      "props",
      "take",
      "precedence",
      "over",
      "tip",
      "all",
      "are",
      "rendered",
      "eagerly",
      "during",
      "build",
      "process",
      "search",
      "engines",
      "index",
      "hidden",
      "only",
      "render",
      "tab",
      "with",
      "lazy",
      "Displaying",
      "displaying",
      "The",
      "first",
      "displayed",
      "override",
      "this",
      "behavior",
      "specify",
      "adding",
      "one",
      "items",
      "You",
      "set",
      "prop",
      "your",
      "choice",
      "For",
      "example",
      "above",
      "either",
      "setting",
      "for",
      "forces",
      "open",
      "will",
      "throw",
      "error",
      "provided",
      "but",
      "refers",
      "non",
      "existing",
      "want",
      "none",
      "shown",
      "null",
      "Syncing",
      "choices",
      "syncing",
      "may",
      "same",
      "kind",
      "sync",
      "each",
      "other",
      "might",
      "different",
      "instructions",
      "users",
      "Windows",
      "macOS",
      "change",
      "specific",
      "click",
      "achieve",
      "give",
      "related",
      "groupId",
      "Note",
      "doing",
      "persist",
      "localStorage",
      "Tab",
      "instances",
      "update",
      "automatically",
      "when",
      "them",
      "changed",
      "group",
      "IDs",
      "globally",
      "namespaced",
      "highlight",
      "next",
      "line",
      "operating",
      "systems",
      "win",
      "Use",
      "Ctrl",
      "copy",
      "mac",
      "Command",
      "paste",
      "groups",
      "have",
      "not",
      "need",
      "chosen",
      "does",
      "exist",
      "another",
      "missing",
      "won",
      "its",
      "see",
      "following",
      "Try",
      "select",
      "Linux",
      "don",
      "linux",
      "interfere",
      "windows",
      "unix",
      "Unix",
      "Customizing",
      "customizing",
      "customize",
      "appearance",
      "certain",
      "pass",
      "string",
      "className",
      "specified",
      "CSS",
      "class",
      "added",
      "unique",
      "headings",
      "heading",
      "independently",
      "attributes",
      "field",
      "extra",
      "passed",
      "through",
      "way",
      "declare",
      "title",
      "some",
      "doc",
      "red",
      "yellow",
      "color",
      "aria",
      "selected",
      "true",
      "border",
      "bottom",
      "would",
      "merged",
      "names",
      "custom",
      "data",
      "paired",
      "attribute",
      "selectors",
      "role",
      "Query",
      "query",
      "into",
      "url",
      "parameters",
      "enables",
      "share",
      "link",
      "page",
      "which",
      "pre",
      "selects",
      "linking",
      "Android",
      "app",
      "documentation",
      "feature",
      "anchor",
      "browser",
      "scroll",
      "queryString",
      "enable",
      "define",
      "param",
      "name",
      "tsx",
      "current",
      "android",
      "ios",
      "iOS",
      "soon",
      "clicked",
      "parameter",
      "end",
      "used",
      "together",
      "convenience",
      "fallback",
      "When",
      "loads",
      "restored",
      "priority"
    ],
    "url": "/docs/guides/markdown-features/markdown-features-tabs",
    "path": "guides/markdown-features/markdown-features-tabs.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "toc",
    "title": "Headings and Table of contents",
    "description": "Customizing headings and table-of-contents in Markdown",
    "content": "import BrowserWindow from '@site/src/components/BrowserWindow'; Headings and Table of contents Markdown headings {#markdown-headings} You can use regular Markdown headings. `md Level 2 title Level 3 title Level 4 title ` Each Markdown heading will appear as a table of contents entry. Heading IDs {#heading-ids} Each heading has an ID that can be automatically generated or explicitly specified. Heading IDs allow you to link to a specific document heading in Markdown or JSX: `md link ` `jsx <Link to=\"#heading-id\">link</Link> ` By default, Docusaurus will generate heading IDs for you, based on the heading text. For example, Hello World will have ID hello-world. Generated IDs have some limitations: The ID might not look good You might want to change or translate the text without updating the existing ID A special Markdown syntax lets you set an explicit heading id: `mdx-code-block <Code language=\"md\">{'Hello World \\u007B#my-explicit-id}\\n'}</Code> ` :::tip Use the write-heading-ids CLI command to add explicit IDs to all your Markdown documents. ::: :::warning Avoid colliding IDs Generated heading IDs will be guaranteed to be unique on each page, but if you use custom IDs, make sure each one appears exactly once on each page, or there will be two DOM elements with the same ID, which is invalid HTML semantics, and will lead to one heading being unlinkable. ::: Table of contents heading level {#table-of-contents-heading-level} Each Markdown document displays a table of contents on the top-right corner. By default, this table only shows h2 and h3 headings, which should be sufficient for an overview of the page structure. In case you need to change the range of headings displayed, you can customize the minimum and maximum heading level — either per page or globally. To set the heading level for a particular page, use the toc_min_heading_level and toc_max_heading_level front matter. `md title=\"myDoc.md\" --- Display h2 to h5 headings toc_min_heading_level: 2 toc_max_heading_level: 5 --- ` To set the heading level for _all_ pages, use the themeConfig.tableOfContents option. `js title=\"docusaurus.config.js\" export default { themeConfig: { tableOfContents: { // highlight-start minHeadingLevel: 2, maxHeadingLevel: 5, // highlight-end }, }, }; ` If you've set the options globally, you can still override them locally via front matter. :::note The themeConfig option would apply to all TOC on the site, including inline TOC, but front matter options only affect the top-right TOC. You need to use the minHeadingLevel and maxHeadingLevel props to customize each <TOCInline /> component. ::: Inline table of contents {#inline-table-of-contents} It is also possible to display an inline table of contents directly inside a Markdown document, thanks to MDX. The toc variable is available in any MDX document and contains all the headings of an MDX document. By default, only h2 and h3 headings are displayed in the TOC. You can change which heading levels are visible by setting minHeadingLevel or maxHeadingLevel for individual TOCInline components. {/ prettier-ignore /} `jsx import TOCInline from '@theme/TOCInline'; <TOCInline toc={toc} /> ` `mdx-code-block import TOCInline from '@theme/TOCInline'; <BrowserWindow> <TOCInline toc={toc} /> </BrowserWindow> ` The toc global is just a list of heading items: `ts declare const toc: { value: string; id: string; level: number; }[]; ` Note that the toc global is a flat array, so you can easily cut out unwanted nodes or insert extra nodes, and create a new TOC tree. {/ prettier-ignore /} `jsx import TOCInline from '@theme/TOCInline'; <TOCInline // Only show h2 and h4 headings toc={toc.filter((node) => node.level === 2 || node.level === 4)} minHeadingLevel={2} // Show h4 headings in addition to the default h2 and h3 headings maxHeadingLevel={4} /> ` `mdx-code-block <BrowserWindow> <TOCInline toc={toc.filter((node) => node.level === 2 || node.level === 4)} minHeadingLevel={2} maxHeadingLevel={4} /> </BrowserWindow> ` Customizing table of contents generation {#customizing-table-of-contents-generation} The table-of-contents is generated by parsing the Markdown source with a Remark plugin. There are known edge-cases where it generates false-positives and false-negatives. Markdown headings within hideable areas will still show up in the TOC. For example, headings within Tabs and details will not be excluded. Non-Markdown headings will not show up in the TOC. This can be used to your advantage to tackle the aforementioned issue. `md <details> <summary>Some details containing headings</summary> <h2 id=\"#heading-id\">I'm a heading that will not show up in the TOC</h2> Some content... </details> ` The ability to ergonomically insert extra headings or ignore certain headings is a work-in-progress. If this feature is important to you, please report your use-case in this issue. --- :::warning Below is just some dummy content to have more table of contents items available on the current page. ::: Example Section 1 {#example-section-1} Lorem ipsum Example Subsection 1 a {#example-subsection-1-a} Lorem ipsum Example subsubsection 1 a I Example subsubsection 1 a II Example subsubsection 1 a III Example Subsection 1 b {#example-subsection-1-b} Lorem ipsum Example subsubsection 1 b I Example subsubsection 1 b II Example subsubsection 1 b III Example Subsection 1 c {#example-subsection-1-c} Lorem ipsum Example subsubsection 1 c I Example subsubsection 1 c II Example subsubsection 1 c III Example Section 2 {#example-section-2} Lorem ipsum Example Subsection 2 a {#example-subsection-2-a} Lorem ipsum Example subsubsection 2 a I Example subsubsection 2 a II Example subsubsection 2 a III Example Subsection 2 b {#example-subsection-2-b} Lorem ipsum Example subsubsection 2 b I Example subsubsection 2 b II Example subsubsection 2 b III Example Subsection 2 c {#example-subsection-2-c} Lorem ipsum Example subsubsection 2 c I Example subsubsection 2 c II Example subsubsection 2 c III Example Section 3 {#example-section-3} Lorem ipsum Example Subsection 3 a {#example-subsection-3-a} Lorem ipsum Example subsubsection 3 a I Example subsubsection 3 a II Example subsubsection 3 a III Example Subsection 3 b {#example-subsection-3-b} Lorem ipsum Example subsubsection 3 b I Example subsubsection 3 b II Example subsubsection 3 b III Example Subsection 3 c {#example-subsection-3-c} Lorem ipsum Example subsubsection 3 c I Example subsubsection 3 c II Example subsubsection 3 c III",
    "keywords": [
      "headings",
      "and",
      "table",
      "of",
      "contents",
      "customizing",
      "table-of-contents",
      "in",
      "markdown",
      "guides",
      "features",
      "toc",
      "mdx",
      "src",
      "components",
      "BrowserWindow",
      "Link",
      "Code",
      "TOCInline",
      "summary",
      "h2",
      "details",
      "import",
      "from",
      "site",
      "Headings",
      "Table",
      "Markdown",
      "You",
      "can",
      "use",
      "regular",
      "Level",
      "title",
      "Each",
      "heading",
      "will",
      "appear",
      "entry",
      "Heading",
      "IDs",
      "ids",
      "has",
      "that",
      "automatically",
      "generated",
      "explicitly",
      "specified",
      "allow",
      "you",
      "link",
      "specific",
      "document",
      "JSX",
      "jsx",
      "default",
      "Docusaurus",
      "generate",
      "for",
      "based",
      "the",
      "text",
      "For",
      "example",
      "Hello",
      "World",
      "have",
      "hello",
      "world",
      "Generated",
      "some",
      "limitations",
      "The",
      "might",
      "not",
      "look",
      "good",
      "want",
      "change",
      "translate",
      "without",
      "updating",
      "existing",
      "special",
      "syntax",
      "lets",
      "set",
      "explicit",
      "code",
      "block",
      "language",
      "u007B",
      "tip",
      "Use",
      "write",
      "CLI",
      "command",
      "add",
      "all",
      "your",
      "documents",
      "warning",
      "Avoid",
      "colliding",
      "guaranteed",
      "unique",
      "each",
      "page",
      "but",
      "custom",
      "make",
      "sure",
      "one",
      "appears",
      "exactly",
      "once",
      "there",
      "two",
      "DOM",
      "elements",
      "with",
      "same",
      "which",
      "invalid",
      "HTML",
      "semantics",
      "lead",
      "being",
      "unlinkable",
      "level",
      "displays",
      "top",
      "right",
      "corner",
      "this",
      "only",
      "shows",
      "should",
      "sufficient",
      "overview",
      "structure",
      "case",
      "need",
      "range",
      "displayed",
      "customize",
      "minimum",
      "maximum",
      "either",
      "per",
      "globally",
      "particular",
      "front",
      "matter",
      "myDoc",
      "Display",
      "_all_",
      "pages",
      "themeConfig",
      "tableOfContents",
      "option",
      "docusaurus",
      "config",
      "export",
      "highlight",
      "start",
      "minHeadingLevel",
      "maxHeadingLevel",
      "end",
      "options",
      "still",
      "override",
      "them",
      "locally",
      "via",
      "note",
      "would",
      "apply",
      "TOC",
      "including",
      "inline",
      "affect",
      "props",
      "component",
      "Inline",
      "also",
      "possible",
      "display",
      "directly",
      "inside",
      "thanks",
      "MDX",
      "variable",
      "available",
      "any",
      "contains",
      "are",
      "levels",
      "visible",
      "setting",
      "individual",
      "prettier",
      "ignore",
      "theme",
      "global",
      "just",
      "list",
      "items",
      "declare",
      "const",
      "value",
      "string",
      "number",
      "Note",
      "flat",
      "array",
      "easily",
      "cut",
      "out",
      "unwanted",
      "nodes",
      "insert",
      "extra",
      "create",
      "new",
      "tree",
      "Only",
      "show",
      "filter",
      "node",
      "Show",
      "addition",
      "Customizing",
      "generation",
      "parsing",
      "source",
      "Remark",
      "plugin",
      "There",
      "known",
      "edge",
      "cases",
      "where",
      "generates",
      "false",
      "positives",
      "negatives",
      "within",
      "hideable",
      "areas",
      "Tabs",
      "excluded",
      "Non",
      "This",
      "used",
      "advantage",
      "tackle",
      "aforementioned",
      "issue",
      "Some",
      "containing",
      "content",
      "ability",
      "ergonomically",
      "certain",
      "work",
      "progress",
      "feature",
      "important",
      "please",
      "report",
      "Below",
      "dummy",
      "more",
      "current",
      "Example",
      "Section",
      "section",
      "Lorem",
      "ipsum",
      "Subsection",
      "subsection",
      "subsubsection",
      "III"
    ],
    "url": "/docs/guides/markdown-features/markdown-features-toc",
    "path": "guides/markdown-features/markdown-features-toc.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "whats-next",
    "title": "What's next?",
    "description": "",
    "content": "What's next? Congratulations! You have understood most core features of Docusaurus now. You have: Used the pages plugin to create a standalone React / Markdown page Used the docs plugin to create documentation pages. This includes configuring the sidebar, and even versioning Used the blog plugin to create a fully featured blog Tried your hands on a range of Markdown features, which are useful for all content plugins Used stylesheets or swizzling to customize your site's appearance Included images and other assets in your pages Added search to your site Understood how browser support and SEO are done through standard Docusaurus APIs Learned about how individual plugins are installed and configured Deployed your site to a content host Internationalized your site to include multiple languages At this point, you probably have a big docusaurus.config.js already😄 However, you haven't written much code yet! Most of the features are implemented through calling encapsulated Docusaurus APIs. As you continue your journey, you can take three paths: Learn more advanced Docusaurus concepts. This will help you gain a deeper understand of what the APIs do. Read about all existing APIs. Many of them have not been covered in the Guides! Learn to develop a plugin to extend the functionality of your site.",
    "keywords": [
      "what's",
      "next?",
      "guides",
      "whats",
      "next",
      "mdx",
      "What",
      "Congratulations",
      "You",
      "have",
      "understood",
      "most",
      "core",
      "features",
      "Docusaurus",
      "now",
      "Used",
      "the",
      "pages",
      "plugin",
      "create",
      "standalone",
      "React",
      "Markdown",
      "page",
      "docs",
      "documentation",
      "This",
      "includes",
      "configuring",
      "sidebar",
      "and",
      "even",
      "versioning",
      "blog",
      "fully",
      "featured",
      "Tried",
      "your",
      "hands",
      "range",
      "which",
      "are",
      "useful",
      "for",
      "all",
      "content",
      "plugins",
      "stylesheets",
      "swizzling",
      "customize",
      "site",
      "appearance",
      "Included",
      "images",
      "other",
      "assets",
      "Added",
      "search",
      "Understood",
      "how",
      "browser",
      "support",
      "SEO",
      "done",
      "through",
      "standard",
      "APIs",
      "Learned",
      "about",
      "individual",
      "installed",
      "configured",
      "Deployed",
      "host",
      "Internationalized",
      "include",
      "multiple",
      "languages",
      "this",
      "point",
      "you",
      "probably",
      "big",
      "docusaurus",
      "config",
      "already",
      "However",
      "haven",
      "written",
      "much",
      "code",
      "yet",
      "Most",
      "implemented",
      "calling",
      "encapsulated",
      "continue",
      "journey",
      "can",
      "take",
      "three",
      "paths",
      "Learn",
      "more",
      "advanced",
      "concepts",
      "will",
      "help",
      "gain",
      "deeper",
      "understand",
      "what",
      "Read",
      "existing",
      "Many",
      "them",
      "not",
      "been",
      "covered",
      "Guides",
      "develop",
      "extend",
      "functionality"
    ],
    "url": "/docs/guides/whats-next",
    "path": "guides/whats-next.mdx",
    "type": "general",
    "category": "guides"
  },
  {
    "id": "crowdin",
    "title": "i18n - Using Crowdin",
    "description": "",
    "content": "i18n - Using Crowdin The i18n system of Docusaurus is decoupled from any translation software. You can integrate Docusaurus with the tools and SaaS of your choice, as long as you put the translation files at the correct location. We document the usage of Crowdin, as one possible integration example. :::warning This is not an endorsement of Crowdin as the unique choice to translate a Docusaurus site, but it is successfully used by Facebook to translate documentation projects such as Jest, Docusaurus, and ReasonML. Refer to the Crowdin documentation and Crowdin support for help. ::: :::tip Use this community-driven GitHub discussion to discuss anything related to Docusaurus + Crowdin. ::: Crowdin overview {#crowdin-overview} Crowdin is a translation SaaS, offering a free plan for open-source projects. We recommend the following translation workflow: Upload sources to Crowdin (untranslated files) Use Crowdin to translate the content Download translations from Crowdin (localized translation files) Crowdin provides a CLI to upload sources and download translations, allowing you to automate the translation process. The crowdin.yml configuration file is convenient for Docusaurus, and permits to download the localized translation files at the expected location (in i18n/[locale]/..). Read the official documentation to know more about advanced features and different translation workflows. Crowdin tutorial {#crowdin-tutorial} This is a walk-through of using Crowdin to translate a newly initialized English Docusaurus website into French, and assume you already followed the i18n tutorial. The end result can be seen at docusaurus-crowdin-example.netlify.app (repository). Prepare the Docusaurus site {#prepare-the-docusaurus-site} Initialize a new Docusaurus site: `bash npx create-docusaurus@latest website classic ` Add the site configuration for the French language: `js title=\"docusaurus.config.js\" export default { i18n: { defaultLocale: 'en', locales: ['en', 'fr'], }, themeConfig: { navbar: { items: [ // ... { type: 'localeDropdown', position: 'left', }, // ... ], }, }, // ... }; ` Translate the homepage: `jsx title=\"src/pages/index.js\" import React from 'react'; import Translate from '@docusaurus/Translate'; import Layout from '@theme/Layout'; export default function Home() { return ( <Layout> <h1 style={{margin: 20}}> <Translate description=\"The homepage main heading\"> Welcome to my Docusaurus translated site! </Translate> </h1> </Layout> ); } ` Create a Crowdin project {#create-a-crowdin-project} Sign up on Crowdin, and create a project. Use English as the source language, and French as the target language. !Create a Crowdin project with english as source language, and french as target language Your project is created, but it is empty for now. We will upload the files to translate in the next steps. Create the Crowdin configuration {#create-the-crowdin-configuration} This configuration (doc) provides a mapping for the Crowdin CLI to understand: Where to find the source files to upload (JSON and Markdown) Where to download the files after translation (in i18n/[locale]) Create crowdin.yml in website: `yml title=\"crowdin.yml\" project_id: '123456' api_token_env: CROWDIN_PERSONAL_TOKEN preserve_hierarchy: true files: JSON translation files source: /i18n/en//* translation: /i18n/%two_letters_code%//%original_file_name% Docs Markdown files source: /docs//* translation: /i18n/%two_letters_code%/docusaurus-plugin-content-docs/current//%original_file_name% Blog Markdown files source: /blog//* translation: /i18n/%two_letters_code%/docusaurus-plugin-content-blog//%original_file_name% ` Crowdin has its own syntax for declaring source/translation paths: /*: everything in a subfolder %two_letters_code%: the 2-letters variant of Crowdin target languages (fr in our case) /%original_file_name%: the translations will preserve the original folder/file hierarchy :::info The Crowdin CLI warnings are not always easy to understand. We advise to: change one thing at a time re-upload sources after any configuration change use paths starting with / (./ does not work) avoid fancy globbing patterns like /docs//*.(md|mdx) (does not work) ::: Access token {#access-token} The api_token_env attribute defines the env variable name read by the Crowdin CLI. You can obtain a Personal Access Token on your personal profile page. :::tip You can keep the default value CROWDIN_PERSONAL_TOKEN, and set this environment variable and on your computer and on the CI server to the generated access token. ::: :::warning A Personal Access Tokens grant read-write access to all your Crowdin projects. You should not commit it, and it may be a good idea to create a dedicated Crowdin profile for your company instead of using a personal account. ::: Other configuration fields {#other-configuration-fields} project_id: can be hardcoded, and is found on https://crowdin.com/project/<MY_PROJECT_NAME>/settings#api preserve_hierarchy: preserve the folder's hierarchy of your docs on Crowdin UI instead of flattening everything Install the Crowdin CLI {#install-the-crowdin-cli} This tutorial uses the CLI version 3.5.2, but we expect 3.x releases to keep working. Install the Crowdin CLI as an npm package to your Docusaurus site: `bash npm2yarn npm install @crowdin/cli@3 ` Add a crowdin script: `json title=\"package.json\" { \"scripts\": { // ... \"write-translations\": \"docusaurus write-translations\", \"crowdin\": \"crowdin\" } } ` Test that you can run the Crowdin CLI: `bash npm2yarn npm run crowdin -- --version ` Set the CROWDIN_PERSONAL_TOKEN env variable on your computer, to allow the CLI to authenticate with the Crowdin API. :::tip Temporarily, you can hardcode your personal token in crowdin.yml with api_token: 'MY-TOKEN'. ::: Upload the sources {#upload-the-sources} Generate the JSON translation files for the default language in website/i18n/en: `bash npm2yarn npm run write-translations ` Upload all the JSON and Markdown translation files: `bash npm2yarn npm run crowdin upload ` !Crowdin CLI uploading Docusaurus source files Your source files are now visible on the Crowdin interface: https://crowdin.com/project/<MY_PROJECT_NAME>/settings#files !Crowdin UI showing Docusaurus source files Translate the sources {#translate-the-sources} On https://crowdin.com/project/<MY_PROJECT_NAME>, click on the French target language. !Crowdin UI showing French translation files Translate some Markdown files. !Crowdin UI to translate a Markdown file :::tip Use Hide String to make sure translators don't translate things that should not be: Front matter: id, slug, tags ... Admonitions: :::, :::note, :::tip ... !Crowdin UI hide string ::: Translate some JSON files. !Crowdin UI to translate a JSON file :::info The description attribute of JSON translation files is visible on Crowdin to help translate the strings. ::: :::tip Pre-translate your site, and fix pre-translation mistakes manually (enable the Global Translation Memory in settings first). Use the Hide String feature first, as Crowdin is pre-translating things too optimistically. ::: Download the translations {#download-the-translations} Use the Crowdin CLI to download the translated JSON and Markdown files. `bash npm2yarn npm run crowdin download ` The translated content should be downloaded in i18n/fr. Start your site on the French locale: `bash npm2yarn npm run start -- --locale fr ` Make sure that your website is now translated in French at http://localhost:3000/fr/. Automate with CI {#automate-with-ci} We will configure the CI to download the Crowdin translations at build time and keep them outside of Git. Add website/i18n to .gitignore. Set the CROWDIN_PERSONAL_TOKEN env variable on your CI. Create an npm script to sync Crowdin (extract sources, upload sources, download translations): `json title=\"package.json\" { \"scripts\": { \"crowdin:sync\": \"docusaurus write-translations && crowdin upload && crowdin download\" } } ` Call the npm run crowdin:sync script in your CI, just before building the Docusaurus site. :::tip Keep your deploy-previews fast: don't download translations, and use npm run build -- --locale en for feature branches. ::: :::warning Crowdin does not support well multiple concurrent uploads/downloads: it is preferable to only include translations to your production deployment, and keep deploy previews untranslated. ::: Advanced Crowdin topics {#advanced-crowdin-topics} MDX {#mdx} :::warning Pay special attention to the JSX fragments in MDX documents! ::: Crowdin does not support officially MDX, but they added support for the .mdx extension, and interpret such files as Markdown (instead of plain text). MDX problems {#mdx-problems} Crowdin thinks that the JSX syntax is embedded HTML and can mess up with the JSX markup when you download the translations, leading to a site that fails to build due to invalid JSX. Simple JSX fragments using simple string props like <Username name=\"Sebastien\"/> will work fine; more complex JSX fragments using object/array props like <User person={{name: \"Sebastien\"}}/> are more likely to fail due to a syntax that does not look like HTML. MDX solutions {#mdx-solutions} We recommend extracting the complex embedded JSX code as separate standalone components. We also added an mdx-code-block escape hatch syntax: `text How to deploy Docusaurus To deploy Docusaurus, run the following command: mdx-code-block import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; <Tabs> <TabItem value=\"bash\" label=\"Bash\"> `bash GIT_USER=<GITHUB_USERNAME> yarn deploy ` </TabItem> <TabItem value=\"windows\" label=\"Windows\"> `batch cmd /C \"set \"GIT_USER=<GITHUB_USERNAME>\" && yarn deploy\" ` </TabItem> </Tabs> ` This will: be interpreted by Crowdin as code blocks (and not mess-up with the markup on download) be interpreted by Docusaurus as regular JSX (as if it was not wrapped by any code block) unfortunately opt-out of MDX tooling (IDE syntax highlighting, Prettier...) Docs versioning {#docs-versioning} Configure translation files for the website/versioned_docs folder. When creating a new version, the source strings will generally be quite similar to the current version (website/docs), and you don't want to translate the new version docs again and again. Crowdin provides a Duplicate Strings setting. !Crowdin Duplicate Strings option setting We recommend using Hide, but the ideal setting depends on how much your versions are different. :::warning Not using Hide leads to a much larger amount of source strings in quotas, and will affect the pricing. ::: Multi-instance plugins {#multi-instance-plugins} You need to configure translation files for each plugin instance. If you have a docs plugin instance with id=ios, you will need to configure those source files as well website/ios website/ios_versioned_docs (if versioned) Maintaining your site {#maintaining-your-site} Sometimes, you will remove or rename a source file on Git, and Crowdin will display CLI warnings: !Crowdin CLI: download translation warning When your sources are refactored, you should use the Crowdin UI to update your Crowdin files manually: !Crowdin UI: renaming a file VCS (Git) integrations {#vcs-git-integrations} Crowdin has multiple VCS integrations for GitHub, GitLab, Bitbucket. :::warning TL;DR We recommend avoiding them. ::: It could have been helpful to be able to edit the translations in both Git and Crowdin, and have a bi-directional sync between the 2 systems. In practice, it didn't work very reliably for a few reasons: The Crowdin -> Git sync works fine (with a pull request) The Git -> Crowdin sync is manual (you have to press a button) The heuristics used by Crowdin to match existing Markdown translations to existing Markdown sources are not 100% reliable, and you have to verify the result on Crowdin UI after any sync from Git 2 users concurrently editing on Git and Crowdin can lead to a translation loss It requires the crowdin.yml file to be at the root of the repository In-Context localization {#in-context-localization} Crowdin has an In-Context localization feature. :::warning Unfortunately, it does not work yet for technical reasons, but we have good hope it can be solved. Crowdin replaces Markdown strings with technical IDs such as crowdin:id12345, but it does so too aggressively, including hidden strings, and messes up with front matter, admonitions, JSX... ::: Localize edit URLs {#localize-edit-urls} When the user is browsing a page at /fr/doc1, the edit button will link by default to the unlocalized doc at website/docs/doc1.md. You may prefer the edit button to link to the Crowdin interface instead by using the editUrl function to customize the edit URLs on a per-locale basis. `js title=\"docusaurus.config.js\" const DefaultLocale = 'en'; export default { presets: [ [ '@docusaurus/preset-classic', { docs: { // highlight-start editUrl: ({locale, versionDocsDirPath, docPath}) => { // Link to Crowdin for French docs if (locale !== DefaultLocale) { return https://crowdin.com/project/docusaurus-v2/${locale}; } // Link to GitHub for English docs return https://github.com/facebook/docusaurus/edit/main/website/${versionDocsDirPath}/${docPath}; }, // highlight-end }, blog: { // highlight-start editUrl: ({locale, blogDirPath, blogPath}) => { if (locale !== DefaultLocale) { return https://crowdin.com/project/docusaurus-v2/${locale}; } return https://github.com/facebook/docusaurus/edit/main/website/${blogDirPath}/${blogPath}; }, // highlight-start }, }, ], ], }; ` :::note It is currently not possible to link to a specific file in Crowdin. ::: Example configuration {#example-configuration} The Docusaurus configuration file is a good example of using versioning and multi-instance: `mdx-code-block import CrowdinConfigV2 from '!!raw-loader!@site/../crowdin-v2.yaml'; import CodeBlock from '@theme/CodeBlock'; <CodeBlock className=\"language-yaml\" title=\"crowdin.yml\"> {CrowdinConfigV2.split('\\n') // remove comments .map((line) => !line.startsWith('#') && line) .filter(Boolean) .join('\\n')} </CodeBlock> ` Machine Translation (MT) issue: links/image handling Crowdin recently rolled out some major changes to the markdown file format and now the links are treated differently than they were before. Before they were considered as tags, but now they appear as plain text. Because of these changes the plain text links are passed to the MT engine which attempts to translate the target, thus breaking the translation (for instance: this string Allez voir ma merveilleuse page is translated Check out my wonderful page, and this breaks docusaurus i18n workflow as the page name should not be translated). As of 2023 Dec.7, they are not planning to change the logic of how links are treated, so you should have this in mind if you plan to use Crowdin with MT.",
    "keywords": [
      "i18n",
      "using",
      "crowdin",
      "mdx",
      "pages",
      "index",
      "Translate",
      "Layout",
      "h1",
      "en",
      "docs",
      "docusaurus-plugin-content-docs",
      "current",
      "blog",
      "docusaurus-plugin-content-blog",
      "translation",
      "file",
      "project",
      "settings",
      "cli",
      "fr",
      "localhost",
      "downloads",
      "array",
      "Tabs",
      "TabItem",
      "versioned_docs",
      "ios",
      "ios_versioned_docs",
      "doc1",
      "preset-classic",
      "docusaurus-v2",
      "github",
      "facebook",
      "docusaurus",
      "edit",
      "main",
      "website",
      "crowdin-v2",
      "CodeBlock",
      "image",
      "Using",
      "Crowdin",
      "The",
      "system",
      "Docusaurus",
      "decoupled",
      "from",
      "any",
      "software",
      "You",
      "can",
      "integrate",
      "with",
      "the",
      "tools",
      "and",
      "SaaS",
      "your",
      "choice",
      "long",
      "you",
      "put",
      "files",
      "correct",
      "location",
      "document",
      "usage",
      "one",
      "possible",
      "integration",
      "example",
      "warning",
      "This",
      "not",
      "endorsement",
      "unique",
      "translate",
      "site",
      "but",
      "successfully",
      "used",
      "Facebook",
      "documentation",
      "projects",
      "such",
      "Jest",
      "ReasonML",
      "Refer",
      "support",
      "for",
      "help",
      "tip",
      "Use",
      "this",
      "community",
      "driven",
      "GitHub",
      "discussion",
      "discuss",
      "anything",
      "related",
      "overview",
      "offering",
      "free",
      "plan",
      "open",
      "source",
      "recommend",
      "following",
      "workflow",
      "Upload",
      "sources",
      "untranslated",
      "content",
      "Download",
      "translations",
      "localized",
      "provides",
      "CLI",
      "upload",
      "download",
      "allowing",
      "automate",
      "process",
      "yml",
      "configuration",
      "convenient",
      "permits",
      "expected",
      "locale",
      "Read",
      "official",
      "know",
      "more",
      "about",
      "advanced",
      "features",
      "different",
      "workflows",
      "tutorial",
      "walk",
      "through",
      "newly",
      "initialized",
      "English",
      "into",
      "French",
      "assume",
      "already",
      "followed",
      "end",
      "result",
      "seen",
      "netlify",
      "app",
      "repository",
      "Prepare",
      "prepare",
      "Initialize",
      "new",
      "bash",
      "npx",
      "create",
      "latest",
      "classic",
      "Add",
      "language",
      "title",
      "config",
      "export",
      "default",
      "defaultLocale",
      "locales",
      "themeConfig",
      "navbar",
      "items",
      "type",
      "localeDropdown",
      "position",
      "left",
      "homepage",
      "jsx",
      "src",
      "import",
      "React",
      "react",
      "theme",
      "function",
      "Home",
      "return",
      "style",
      "margin",
      "description",
      "heading",
      "Welcome",
      "translated",
      "Create",
      "Sign",
      "target",
      "english",
      "french",
      "Your",
      "created",
      "empty",
      "now",
      "will",
      "next",
      "steps",
      "doc",
      "mapping",
      "understand",
      "Where",
      "find",
      "JSON",
      "Markdown",
      "after",
      "project_id",
      "api_token_env",
      "preserve_hierarchy",
      "true",
      "two_letters_code",
      "original_file_name",
      "Docs",
      "plugin",
      "Blog",
      "has",
      "its",
      "own",
      "syntax",
      "declaring",
      "paths",
      "everything",
      "subfolder",
      "letters",
      "variant",
      "languages",
      "our",
      "case",
      "preserve",
      "original",
      "folder",
      "hierarchy",
      "info",
      "warnings",
      "are",
      "always",
      "easy",
      "advise",
      "change",
      "thing",
      "time",
      "use",
      "starting",
      "does",
      "work",
      "avoid",
      "fancy",
      "globbing",
      "patterns",
      "like",
      "Access",
      "token",
      "access",
      "attribute",
      "defines",
      "env",
      "variable",
      "name",
      "read",
      "obtain",
      "Personal",
      "Token",
      "personal",
      "profile",
      "page",
      "keep",
      "value",
      "set",
      "environment",
      "computer",
      "server",
      "generated",
      "Tokens",
      "grant",
      "write",
      "all",
      "should",
      "commit",
      "may",
      "good",
      "idea",
      "dedicated",
      "company",
      "instead",
      "account",
      "Other",
      "fields",
      "other",
      "hardcoded",
      "found",
      "https",
      "com",
      "MY_PROJECT_NAME",
      "api",
      "flattening",
      "Install",
      "install",
      "uses",
      "version",
      "expect",
      "releases",
      "working",
      "npm",
      "package",
      "npm2yarn",
      "script",
      "json",
      "scripts",
      "Test",
      "that",
      "run",
      "Set",
      "allow",
      "authenticate",
      "API",
      "Temporarily",
      "hardcode",
      "api_token",
      "TOKEN",
      "Generate",
      "uploading",
      "visible",
      "interface",
      "showing",
      "click",
      "some",
      "Hide",
      "String",
      "make",
      "sure",
      "translators",
      "don",
      "things",
      "Front",
      "matter",
      "slug",
      "tags",
      "Admonitions",
      "note",
      "hide",
      "string",
      "strings",
      "Pre",
      "fix",
      "pre",
      "mistakes",
      "manually",
      "enable",
      "Global",
      "Translation",
      "Memory",
      "first",
      "feature",
      "translating",
      "too",
      "optimistically",
      "downloaded",
      "Start",
      "start",
      "Make",
      "http",
      "Automate",
      "configure",
      "build",
      "them",
      "outside",
      "Git",
      "gitignore",
      "sync",
      "extract",
      "Call",
      "just",
      "before",
      "building",
      "Keep",
      "deploy",
      "previews",
      "fast",
      "branches",
      "well",
      "multiple",
      "concurrent",
      "uploads",
      "preferable",
      "only",
      "include",
      "production",
      "deployment",
      "Advanced",
      "topics",
      "MDX",
      "Pay",
      "special",
      "attention",
      "JSX",
      "fragments",
      "documents",
      "officially",
      "they",
      "added",
      "extension",
      "interpret",
      "plain",
      "text",
      "problems",
      "thinks",
      "embedded",
      "HTML",
      "mess",
      "markup",
      "when",
      "leading",
      "fails",
      "due",
      "invalid",
      "Simple",
      "simple",
      "props",
      "Username",
      "Sebastien",
      "fine",
      "complex",
      "object",
      "User",
      "person",
      "likely",
      "fail",
      "look",
      "solutions",
      "extracting",
      "code",
      "separate",
      "standalone",
      "components",
      "also",
      "block",
      "escape",
      "hatch",
      "How",
      "command",
      "label",
      "Bash",
      "GIT_USER",
      "GITHUB_USERNAME",
      "yarn",
      "windows",
      "Windows",
      "batch",
      "cmd",
      "interpreted",
      "blocks",
      "regular",
      "was",
      "wrapped",
      "unfortunately",
      "opt",
      "out",
      "tooling",
      "IDE",
      "highlighting",
      "Prettier",
      "versioning",
      "Configure",
      "When",
      "creating",
      "generally",
      "quite",
      "similar",
      "want",
      "again",
      "Duplicate",
      "Strings",
      "setting",
      "option",
      "ideal",
      "depends",
      "how",
      "much",
      "versions",
      "Not",
      "leads",
      "larger",
      "amount",
      "quotas",
      "affect",
      "pricing",
      "Multi",
      "instance",
      "plugins",
      "multi",
      "need",
      "each",
      "have",
      "those",
      "versioned",
      "Maintaining",
      "maintaining",
      "Sometimes",
      "remove",
      "rename",
      "display",
      "refactored",
      "update",
      "renaming",
      "VCS",
      "integrations",
      "vcs",
      "git",
      "GitLab",
      "Bitbucket",
      "avoiding",
      "could",
      "been",
      "helpful",
      "able",
      "both",
      "directional",
      "between",
      "systems",
      "practice",
      "didn",
      "very",
      "reliably",
      "few",
      "reasons",
      "works",
      "pull",
      "request",
      "manual",
      "press",
      "button",
      "heuristics",
      "match",
      "existing",
      "reliable",
      "verify",
      "users",
      "concurrently",
      "editing",
      "lead",
      "loss",
      "requires",
      "root",
      "Context",
      "localization",
      "context",
      "Unfortunately",
      "yet",
      "technical",
      "hope",
      "solved",
      "replaces",
      "IDs",
      "id12345",
      "aggressively",
      "including",
      "hidden",
      "messes",
      "front",
      "admonitions",
      "Localize",
      "URLs",
      "localize",
      "urls",
      "user",
      "browsing",
      "link",
      "unlocalized",
      "prefer",
      "editUrl",
      "customize",
      "per",
      "basis",
      "const",
      "DefaultLocale",
      "presets",
      "preset",
      "highlight",
      "versionDocsDirPath",
      "docPath",
      "Link",
      "blogDirPath",
      "blogPath",
      "currently",
      "specific",
      "Example",
      "CrowdinConfigV2",
      "raw",
      "loader",
      "yaml",
      "className",
      "split",
      "comments",
      "map",
      "line",
      "startsWith",
      "filter",
      "Boolean",
      "join",
      "Machine",
      "issue",
      "links",
      "handling",
      "recently",
      "rolled",
      "major",
      "changes",
      "markdown",
      "format",
      "treated",
      "differently",
      "than",
      "were",
      "Before",
      "considered",
      "appear",
      "Because",
      "these",
      "passed",
      "engine",
      "which",
      "attempts",
      "thus",
      "breaking",
      "Allez",
      "voir",
      "merveilleuse",
      "Check",
      "wonderful",
      "breaks",
      "Dec",
      "planning",
      "logic",
      "mind"
    ],
    "url": "/docs/i18n/i18n-crowdin",
    "path": "i18n/i18n-crowdin.mdx",
    "type": "general",
    "category": "i18n"
  },
  {
    "id": "git",
    "title": "i18n - Using git",
    "description": "",
    "content": "i18n - Using git A possible translation strategy is to version control the translation files with Git (or any other VCS). Tradeoffs {#tradeoffs} This strategy has advantages: Easy to get started: just commit the i18n folder to Git Easy for developers: Git, GitHub and pull requests are mainstream developer tools Free (or without any additional cost, assuming you already use Git) Low friction: does not require signing up to an external tool Rewarding: contributors are happy to have a nice contribution history Using Git also present some shortcomings: Hard for non-developers: they do not master Git and pull-requests Hard for professional translators: they are used to SaaS translation software and advanced features Hard to maintain: you have to keep the translated files in sync with the untranslated files :::note Some large-scale technical projects (React, Vue.js, MDN, TypeScript, Nuxt.js, etc.) use Git for translations. Refer to the Docusaurus i18n RFC for our notes and links studying these systems. ::: Initialization {#initialization} This is a walk-through of using Git to translate a newly initialized English Docusaurus website into French, and assume you already followed the i18n tutorial. Prepare the Docusaurus site {#prepare-the-docusaurus-site} Initialize a new Docusaurus site: `bash npx create-docusaurus@latest website classic ` Add the site configuration for the French language: `js title=\"docusaurus.config.js\" export default { i18n: { defaultLocale: 'en', locales: ['en', 'fr'], }, themeConfig: { navbar: { items: [ // ... { type: 'localeDropdown', position: 'left', }, // ... ], }, }, // ... }; ` Translate the homepage: `jsx title=\"src/pages/index.js\" import React from 'react'; import Translate from '@docusaurus/Translate'; import Layout from '@theme/Layout'; export default function Home() { return ( <Layout> <h1 style={{margin: 20}}> <Translate description=\"The homepage main heading\"> Welcome to my Docusaurus translated site! </Translate> </h1> </Layout> ); } ` Initialize the i18n folder {#initialize-the-i18n-folder} Use the write-translations CLI command to initialize the JSON translation files for the French locale: `bash npm2yarn npm run write-translations -- --locale fr 1 translations written at i18n/fr/code.json 11 translations written at i18n/fr/docusaurus-theme-classic/footer.json 4 translations written at i18n/fr/docusaurus-theme-classic/navbar.json 3 translations written at i18n/fr/docusaurus-plugin-content-docs/current.json ` :::tip Use the --messagePrefix '(fr) ' option to make the untranslated strings stand out. Hello will appear as (fr) Hello and makes it clear a translation is missing. ::: Copy your untranslated Markdown files to the French folder: `bash mkdir -p i18n/fr/docusaurus-plugin-content-docs/current cp -r docs/ i18n/fr/docusaurus-plugin-content-docs/current mkdir -p i18n/fr/docusaurus-plugin-content-blog cp -r blog/ i18n/fr/docusaurus-plugin-content-blog mkdir -p i18n/fr/docusaurus-plugin-content-pages cp -r src/pages/.md i18n/fr/docusaurus-plugin-content-pages cp -r src/pages/.mdx i18n/fr/docusaurus-plugin-content-pages ` Add all these files to Git. Translate the files {#translate-the-files} Translate the Markdown and JSON files in i18n/fr and commit the translation. You should now be able to start your site in French and see the translations: `bash npm2yarn npm run start -- --locale fr ` You can also build the site locally or on your CI: `bash npm2yarn npm run build or npm run build -- --locale fr ` Repeat {#repeat} Follow the same process for each locale you need to support. Maintenance {#maintenance} Keeping translated files consistent with the originals can be challenging, in particular for Markdown documents. Markdown translations {#markdown-translations} When an untranslated Markdown document is edited, it is your responsibility to maintain the respective translated files, and we unfortunately don't have a good way to help you do so. To keep your translated sites consistent, when the website/docs/doc1.md doc is edited, you need backport these edits to i18n/fr/docusaurus-plugin-content-docs/current/doc1.md. JSON translations {#json-translations} To help you maintain the JSON translation files, it is possible to run again the write-translations CLI command: `bash npm2yarn npm run write-translations -- --locale fr ` New translations will be appended, and existing ones will not be overridden. :::tip Reset your translations with the --override option. ::: Localize edit URLs {#localize-edit-urls} When the user is browsing a page at /fr/doc1, the edit button will link by default to the unlocalized doc at website/docs/doc1.md. Your translations are on Git, and you can use the editLocalizedFiles: true option of the docs and blog plugins. The edit button will link to the localized doc at i18n/fr/docusaurus-plugin-content-docs/current/doc1.md.",
    "keywords": [
      "i18n",
      "using",
      "git",
      "mdx",
      "pages",
      "index",
      "Translate",
      "Layout",
      "h1",
      "fr",
      "code",
      "docusaurus-theme-classic",
      "footer",
      "navbar",
      "docusaurus-plugin-content-docs",
      "current",
      "docusaurus-plugin-content-blog",
      "docusaurus-plugin-content-pages",
      "docs",
      "doc1",
      "Using",
      "possible",
      "translation",
      "strategy",
      "version",
      "control",
      "the",
      "files",
      "with",
      "Git",
      "any",
      "other",
      "VCS",
      "Tradeoffs",
      "tradeoffs",
      "This",
      "has",
      "advantages",
      "Easy",
      "get",
      "started",
      "just",
      "commit",
      "folder",
      "for",
      "developers",
      "GitHub",
      "and",
      "pull",
      "requests",
      "are",
      "mainstream",
      "developer",
      "tools",
      "Free",
      "without",
      "additional",
      "cost",
      "assuming",
      "you",
      "already",
      "use",
      "Low",
      "friction",
      "does",
      "not",
      "require",
      "signing",
      "external",
      "tool",
      "Rewarding",
      "contributors",
      "happy",
      "have",
      "nice",
      "contribution",
      "history",
      "also",
      "present",
      "some",
      "shortcomings",
      "Hard",
      "non",
      "they",
      "master",
      "professional",
      "translators",
      "used",
      "SaaS",
      "software",
      "advanced",
      "features",
      "maintain",
      "keep",
      "translated",
      "sync",
      "untranslated",
      "note",
      "Some",
      "large",
      "scale",
      "technical",
      "projects",
      "React",
      "Vue",
      "MDN",
      "TypeScript",
      "Nuxt",
      "etc",
      "translations",
      "Refer",
      "Docusaurus",
      "RFC",
      "our",
      "notes",
      "links",
      "studying",
      "these",
      "systems",
      "Initialization",
      "initialization",
      "walk",
      "through",
      "translate",
      "newly",
      "initialized",
      "English",
      "website",
      "into",
      "French",
      "assume",
      "followed",
      "tutorial",
      "Prepare",
      "site",
      "prepare",
      "docusaurus",
      "Initialize",
      "new",
      "bash",
      "npx",
      "create",
      "latest",
      "classic",
      "Add",
      "configuration",
      "language",
      "title",
      "config",
      "export",
      "default",
      "defaultLocale",
      "locales",
      "themeConfig",
      "items",
      "type",
      "localeDropdown",
      "position",
      "left",
      "homepage",
      "jsx",
      "src",
      "import",
      "from",
      "react",
      "theme",
      "function",
      "Home",
      "return",
      "style",
      "margin",
      "description",
      "The",
      "main",
      "heading",
      "Welcome",
      "initialize",
      "Use",
      "write",
      "CLI",
      "command",
      "JSON",
      "locale",
      "npm2yarn",
      "npm",
      "run",
      "written",
      "json",
      "plugin",
      "content",
      "tip",
      "messagePrefix",
      "option",
      "make",
      "strings",
      "stand",
      "out",
      "Hello",
      "will",
      "appear",
      "makes",
      "clear",
      "missing",
      "Copy",
      "your",
      "Markdown",
      "mkdir",
      "blog",
      "all",
      "You",
      "should",
      "now",
      "able",
      "start",
      "see",
      "can",
      "build",
      "locally",
      "Repeat",
      "repeat",
      "Follow",
      "same",
      "process",
      "each",
      "need",
      "support",
      "Maintenance",
      "maintenance",
      "Keeping",
      "consistent",
      "originals",
      "challenging",
      "particular",
      "documents",
      "markdown",
      "When",
      "document",
      "edited",
      "responsibility",
      "respective",
      "unfortunately",
      "don",
      "good",
      "way",
      "help",
      "sites",
      "when",
      "doc",
      "backport",
      "edits",
      "again",
      "New",
      "appended",
      "existing",
      "ones",
      "overridden",
      "Reset",
      "override",
      "Localize",
      "edit",
      "URLs",
      "localize",
      "urls",
      "user",
      "browsing",
      "page",
      "button",
      "link",
      "unlocalized",
      "Your",
      "editLocalizedFiles",
      "true",
      "plugins",
      "localized"
    ],
    "url": "/docs/i18n/i18n-git",
    "path": "i18n/i18n-git.mdx",
    "type": "general",
    "category": "i18n"
  },
  {
    "id": "introduction",
    "title": "i18n - Introduction",
    "description": "",
    "content": "i18n - Introduction It is easy to translate a Docusaurus website with its internationalization (i18n) support. Goals {#goals} It is important to understand the design decisions behind the Docusaurus i18n support. For more context, you can read the initial RFC and PR. i18n goals {#i18n-goals} The goals of the Docusaurus i18n system are: Simple: just put the translated files in the correct filesystem location Flexible translation workflows: use Git (monorepo, forks, or submodules), SaaS software, FTP Flexible deployment options: single, multiple domains, or hybrid Modular: allow plugin authors to provide i18n support Low-overhead runtime: documentation is mostly static and does not require heavy JS libraries or polyfills Scalable build-times: allow building and deploying localized sites independently Localize assets: an image of your site might contain text that should be translated No coupling: not forced to use any SaaS, yet integrations are possible Easy to use with Crowdin: a lot of Docusaurus v1 sites use Crowdin and should be able to migrate to v2 Good SEO defaults: we set useful SEO headers like hreflang for you RTL support: locales reading right-to-left (Arabic, Hebrew, etc.) are supported and easy to implement Default translations: classic theme labels are translated for you in many languages i18n non-goals {#i18n-non-goals} We don't provide support for: Automatic locale detection: opinionated, and best done on the server (your hosting provider) Translation SaaS software: you are responsible to understand the external tools of your choice Translation of slugs: technically complicated, little SEO value Translation workflow {#translation-workflow} Overview {#overview} Overview of the workflow to create a translated Docusaurus website: Configure: declare the default locale and alternative locales in docusaurus.config.js Translate: put the translation files at the correct filesystem location Deploy: build and deploy your site using a single or multi-domain strategy Translation files {#translation-files} You will work with three kinds of translation files. Markdown files {#markdown-files} This is the main content of your Docusaurus website. Markdown and MDX documents are translated as a whole, to fully preserve the translation context, instead of splitting each sentence as a separate string. JSON files {#json-files} JSON is used to translate: Your React code: standalone React pages in src/pages, or other components Layout labels provided through themeConfig: navbar, footer Layout labels provided through plugin options: docs sidebar category labels, blog sidebar title... The JSON format used is called Chrome i18n: `json { \"myTranslationKey1\": { \"message\": \"Translated message 1\", \"description\": \"myTranslationKey1 is used on the homepage\" }, \"myTranslationKey2\": { \"message\": \"Translated message 2\", \"description\": \"myTranslationKey2 is used on the FAQ page\" } } ` The choice was made for 2 reasons: Description attribute: to help translators with additional context Widely supported: Chrome extensions, Crowdin, Transifex, Phrase, Applanga, etc. Data files {#data-files} Some plugins may read from external data files that are localized as a whole. For example, the blog plugin uses an authors.yml file that can be translated by creating a copy under i18n/[locale]/docusaurus-plugin-content-blog/authors.yml. Translation files location {#translation-files-location} The translation files should be created at the correct filesystem location. Each locale and plugin has its own i18n subfolder: ` website/i18n/[locale]/[pluginName]/... ` :::note For multi-instance plugins, the path is website/i18n/[locale]/[pluginName]-[pluginId]/.... ::: Translating a very simple Docusaurus site in French would lead to the following tree: `bash website/i18n └── fr ├── code.json Any text label present in the React code │ Includes text labels from the themes' code ├── docusaurus-plugin-content-blog translation data the blog plugin needs │ └── 2020-01-01-hello.md │ ├── docusaurus-plugin-content-docs translation data the docs plugin needs │ ├── current │ │ ├── doc1.md │ │ └── doc2.mdx │ └── current.json │ └── docusaurus-theme-classic translation data the classic theme needs ├── footer.json Text labels in your footer theme config └── navbar.json Text labels in your navbar theme config ` The JSON files are initialized with the docusaurus write-translations CLI command. Each plugin sources its own translated content under the corresponding folder, while the code.json file defines all text labels used in the React code. Each content plugin or theme is different, and defines its own translation files location: Docs i18n Blog i18n Pages i18n Themes i18n",
    "keywords": [
      "i18n",
      "introduction",
      "mdx",
      "pages",
      "docusaurus-plugin-content-blog",
      "authors",
      "Introduction",
      "easy",
      "translate",
      "Docusaurus",
      "website",
      "with",
      "its",
      "internationalization",
      "support",
      "Goals",
      "goals",
      "important",
      "understand",
      "the",
      "design",
      "decisions",
      "behind",
      "For",
      "more",
      "context",
      "you",
      "can",
      "read",
      "initial",
      "RFC",
      "and",
      "The",
      "system",
      "are",
      "Simple",
      "just",
      "put",
      "translated",
      "files",
      "correct",
      "filesystem",
      "location",
      "Flexible",
      "translation",
      "workflows",
      "use",
      "Git",
      "monorepo",
      "forks",
      "submodules",
      "SaaS",
      "software",
      "FTP",
      "deployment",
      "options",
      "single",
      "multiple",
      "domains",
      "hybrid",
      "Modular",
      "allow",
      "plugin",
      "provide",
      "Low",
      "overhead",
      "runtime",
      "documentation",
      "mostly",
      "static",
      "does",
      "not",
      "require",
      "heavy",
      "libraries",
      "polyfills",
      "Scalable",
      "build",
      "times",
      "building",
      "deploying",
      "localized",
      "sites",
      "independently",
      "Localize",
      "assets",
      "image",
      "your",
      "site",
      "might",
      "contain",
      "text",
      "that",
      "should",
      "coupling",
      "forced",
      "any",
      "yet",
      "integrations",
      "possible",
      "Easy",
      "Crowdin",
      "lot",
      "able",
      "migrate",
      "Good",
      "SEO",
      "defaults",
      "set",
      "useful",
      "headers",
      "like",
      "hreflang",
      "for",
      "RTL",
      "locales",
      "reading",
      "right",
      "left",
      "Arabic",
      "Hebrew",
      "etc",
      "supported",
      "implement",
      "Default",
      "translations",
      "classic",
      "theme",
      "labels",
      "many",
      "languages",
      "non",
      "don",
      "Automatic",
      "locale",
      "detection",
      "opinionated",
      "best",
      "done",
      "server",
      "hosting",
      "provider",
      "Translation",
      "responsible",
      "external",
      "tools",
      "choice",
      "slugs",
      "technically",
      "complicated",
      "little",
      "value",
      "workflow",
      "Overview",
      "overview",
      "create",
      "Configure",
      "declare",
      "default",
      "alternative",
      "docusaurus",
      "config",
      "Translate",
      "Deploy",
      "deploy",
      "using",
      "multi",
      "domain",
      "strategy",
      "You",
      "will",
      "work",
      "three",
      "kinds",
      "Markdown",
      "markdown",
      "This",
      "main",
      "content",
      "MDX",
      "documents",
      "whole",
      "fully",
      "preserve",
      "instead",
      "splitting",
      "each",
      "sentence",
      "separate",
      "string",
      "JSON",
      "json",
      "used",
      "Your",
      "React",
      "code",
      "standalone",
      "src",
      "other",
      "components",
      "Layout",
      "provided",
      "through",
      "themeConfig",
      "navbar",
      "footer",
      "docs",
      "sidebar",
      "category",
      "blog",
      "title",
      "format",
      "called",
      "Chrome",
      "myTranslationKey1",
      "message",
      "Translated",
      "description",
      "homepage",
      "myTranslationKey2",
      "FAQ",
      "page",
      "was",
      "made",
      "reasons",
      "Description",
      "attribute",
      "help",
      "translators",
      "additional",
      "Widely",
      "extensions",
      "Transifex",
      "Phrase",
      "Applanga",
      "Data",
      "data",
      "Some",
      "plugins",
      "may",
      "from",
      "example",
      "uses",
      "yml",
      "file",
      "creating",
      "copy",
      "under",
      "created",
      "Each",
      "has",
      "own",
      "subfolder",
      "pluginName",
      "note",
      "instance",
      "path",
      "pluginId",
      "Translating",
      "very",
      "simple",
      "French",
      "would",
      "lead",
      "following",
      "tree",
      "bash",
      "Any",
      "label",
      "present",
      "Includes",
      "themes",
      "needs",
      "hello",
      "current",
      "doc1",
      "doc2",
      "Text",
      "initialized",
      "write",
      "CLI",
      "command",
      "sources",
      "corresponding",
      "folder",
      "while",
      "defines",
      "all",
      "different",
      "Docs",
      "Blog",
      "Pages",
      "Themes"
    ],
    "url": "/docs/i18n/i18n-introduction",
    "path": "i18n/i18n-introduction.mdx",
    "type": "general",
    "category": "i18n"
  },
  {
    "id": "tutorial",
    "title": "i18n - Tutorial",
    "description": "This tutorial will walk you through the basics of the Docusaurus i18n system.",
    "content": "i18n - Tutorial `mdx-code-block import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; ` This tutorial will walk you through the basics of the Docusaurus i18n system. We will add French translations to a newly initialized English Docusaurus website. Initialize a new site with npx create-docusaurus@latest website classic (like this one). Configure your site {#configure-your-site} Modify docusaurus.config.js to add the i18n support for the French language. Site configuration {#site-configuration} Use the site i18n configuration to declare the i18n locales: `js title=\"docusaurus.config.js\" export default { i18n: { defaultLocale: 'en', locales: ['en', 'fr', 'fa'], localeConfigs: { en: { htmlLang: 'en-GB', }, // You can omit a locale (e.g. fr) if you don't need to override the defaults fa: { direction: 'rtl', }, }, }, }; ` The locale names are used for the translation files' locations, as well as your translated locales' base URL. When building all locales, only the default locale will have its name omitted in the base URL. Docusaurus uses the locale names to provide sensible defaults: the <html lang=\"...\"> attribute, locale label, calendar format, etc. You can customize these defaults with the localeConfigs. Theme configuration {#theme-configuration} Add a navbar item of type localeDropdown so that users can select the locale they want: `js title=\"docusaurus.config.js\" export default { themeConfig: { navbar: { items: [ // highlight-start { type: 'localeDropdown', position: 'left', }, // highlight-end ], }, }, }; ` :::tip You can pass a query parameter that will be appended to the URL when a user changes the locale using the dropdown (e.g. queryString: '?persistLocale=true'). This is useful for implementing an automatic locale detection on your server. For example, you can use this parameter to store the user's preferred locale in a cookie. ::: Start your site {#start-your-site} Start your localized site in dev mode, using the locale of your choice: `bash npm2yarn npm run start -- --locale fr ` Your site is accessible at http://localhost:3000/fr/. We haven't provided any translation yet, so the site is mostly untranslated. :::tip Docusaurus provides default translations for generic theme labels, such as \"Next\" and \"Previous\" for the pagination. Please help us complete those default translations. ::: :::warning Each locale is a distinct standalone single-page application: it is not possible to start the Docusaurus sites in all locales at the same time. ::: Translate your site {#translate-your-site} All translation data for the French locale is stored in website/i18n/fr. Each plugin sources its own translated content under the corresponding folder, while the code.json file defines all text labels used in the React code. :::note After copying files around, restart your site with npm run start -- --locale fr. Hot-reload will work better when editing existing files. ::: Translate your React code {#translate-your-react-code} For any React code you've written yourself: React pages, React components, etc., you will use the translation APIs. Locate all text labels in your React code that will be visible to your users, and mark them with the translation APIs. There are two kinds of APIs: The <Translate> component wraps a string as a JSX element; The translate() callback takes a message and returns a string. Use the one that better fits the context semantically. For example, the <Translate> can be used as React children, while for props that expect a string, the callback can be used. :::warning A JSX element is an _object_, not a string. Using it in contexts expecting strings (such as the children of <option>) would coerce it to a string, which returns \"[object Object]\". While we encourage you to use <Translate> as JSX children, only use the element form when it actually works. ::: `mdx-code-block <Tabs> <TabItem value=\"Before\"> ` `jsx title=\"src/pages/index.js\" import React from 'react'; import Layout from '@theme/Layout'; import Link from '@docusaurus/Link'; export default function Home() { return ( <Layout> {/ highlight-next-line /} <h1>Welcome to my website</h1> <main> {/ highlight-start /} You can also visit my <Link to=\"https://docusaurus.io/blog\">blog</Link> {/ highlight-end /} <img src=\"/img/home.png\" // highlight-next-line alt=\"Home icon\" /> </main> </Layout> ); } ` `mdx-code-block </TabItem> <TabItem value=\"After\"> ` `jsx title=\"src/pages/index.js\" import React from 'react'; import Layout from '@theme/Layout'; import Link from '@docusaurus/Link'; // highlight-next-line import Translate, {translate} from '@docusaurus/Translate'; export default function Home() { return ( <Layout> <h1> {/ highlight-next-line /} <Translate>Welcome to my website</Translate> </h1> <main> {/ highlight-start /} <Translate id=\"homepage.visitMyBlog\" description=\"The homepage message to ask the user to visit my blog\" values={{ blogLink: ( <Link to=\"https://docusaurus.io/blog\"> <Translate id=\"homepage.visitMyBlog.linkLabel\" description=\"The label for the link to my blog\"> blog </Translate> </Link> ), }}> {'You can also visit my {blogLink}'} </Translate> {/ highlight-end /} <img src=\"/img/home.png\" alt={ // highlight-start translate({ message: 'Home icon', description: 'The homepage icon alt message', }) // highlight-end } /> </main> </Layout> ); } ` `mdx-code-block </TabItem> </Tabs> ` :::info Docusaurus provides a very small and lightweight translation runtime on purpose, and only supports basic placeholders interpolation, using a subset of the ICU Message Format. Most documentation websites are generally static and don't need advanced i18n features (plurals, genders, etc.). Use a library like react-intl for more advanced use-cases. ::: The docusaurus write-translations command will statically analyze all React code files used in your site, extract calls to these APIs, and aggregate them in the code.json file. The translation files will be stored as maps from IDs to translation message objects (including the translated label and the description of the label). In your calls to the translation APIs (<Translate> or translate()), you need to specify either the default untranslated message or the ID, in order for Docusaurus to correctly correlate each translation entry to the API call. :::warning text labels must be static The docusaurus write-translations command only does static analysis of your code. It doesn't actually run your site. Therefore, dynamic messages can't be extracted, as the message is an _expression_, not a _string_: `jsx const items = [ {id: 1, title: 'Hello'}, {id: 2, title: 'World'}, ]; function ItemsList() { return ( <ul> {/ DON'T DO THIS: doesn't work with the write-translations command /} {items.map((item) => ( <li key={item.id}> <Translate>{item.title}</Translate> </li> ))} <ul> ); } ` This still behaves correctly at runtime. However, in the future, we may provide a \"no-runtime\" mechanism, allowing the translations to be directly inlined in the React code through Babel transformations, instead of calling the APIs at runtime. Therefore, to be future-proof, you should always prefer statically analyzable messages. For example, we can refactor the code above to: `jsx const items = [ {id: 1, title: <Translate>Hello</Translate>}, {id: 2, title: <Translate>World</Translate>}, ]; function ItemsList() { return ( <ul> {/ The titles are now already translated when rendering! /} {items.map((item) => ( <li key={item.id}>{item.title}</li> ))} <ul> ); } ` You can see the calls to the translation APIs as purely _markers_ that tell Docusaurus that \"here's a text label to be replaced with a translated message\". ::: Pluralization {#pluralization} When you run write-translations, you will notice that some labels are pluralized: `json title=\"i18n/en/code.json\" { // ... \"theme.blog.post.plurals\": \"One post|{count} posts\" // ... } ` Every language will have a list of possible plural categories. Docusaurus will arrange them in the order of [\"zero\", \"one\", \"two\", \"few\", \"many\", \"other\"]. For example, because English (en) has two plural forms (\"one\" and \"other\"), the translation message has two labels separated by a pipe (|). For Polish (pl) which has three plural forms (\"one\", \"few\", and \"many\"), you would provide three labels in that order, joined by pipes. You can pluralize your own code's messages as well: `jsx import {translate} from '@docusaurus/Translate'; import {usePluralForm} from '@docusaurus/theme-common'; function ItemsList({items}) { // usePluralForm will provide the plural selector for the current locale const {selectMessage} = usePluralForm(); // Select the appropriate pluralized label based on items.length const message = selectMessage( items.length, translate( {message: 'One item|{count} items'}, {count: items.length}, ), ); return ( <> <h2>{message}</h2> <ul>{items.map((item) => <li key={item.id}>{item.title}</li>)}<ul> </> ); } ` :::note Docusaurus uses Intl.PluralRules to resolve and select plural forms. It is important to provide the right number of plural forms in the right order for selectMessage to work. ::: Translate plugin data {#translate-plugin-data} JSON translation files are used for everything that is interspersed in your code: React code, including the translated labels you have marked above Navbar and footer labels in theme config Docs sidebar category labels in sidebars.js Blog sidebar title in plugin options ... Run the write-translations command: `bash npm2yarn npm run write-translations -- --locale fr ` It will extract and initialize the JSON translation files that you need to translate. The code.json file at the root includes all translation API calls extracted from the source code, which could either be written by you or provided by the themes, some of which may already be translated by default. `json title=\"i18n/fr/code.json\" { // No ID for the <Translate> component: the default message is used as ID \"Welcome to my website\": { \"message\": \"Welcome to my website\" }, \"home.visitMyBlog\": { \"message\": \"You can also visit my {blog}\", \"description\": \"The homepage message to ask the user to visit my blog\" }, \"homepage.visitMyBlog.linkLabel\": { \"message\": \"Blog\", \"description\": \"The label for the link to my blog\" }, \"Home icon\": { \"message\": \"Home icon\", \"description\": \"The homepage icon alt message\" } } ` Plugins and themes will also write their own JSON translation files, such as: `json title=\"i18n/fr/docusaurus-theme-classic/navbar.json\" { \"title\": { \"message\": \"My Site\", \"description\": \"The title in the navbar\" }, \"item.label.Docs\": { \"message\": \"Docs\", \"description\": \"Navbar item with label Docs\" }, \"item.label.Blog\": { \"message\": \"Blog\", \"description\": \"Navbar item with label Blog\" }, \"item.label.GitHub\": { \"message\": \"GitHub\", \"description\": \"Navbar item with label GitHub\" } } ` Translate the message attribute in the JSON files of i18n/fr, and your site layout and homepage should now be translated. Translate Markdown files {#translate-markdown-files} Official Docusaurus content plugins extensively use Markdown/MDX files and allow you to translate them. Translate the docs {#translate-the-docs} Copy your docs Markdown files from docs/ to i18n/fr/docusaurus-plugin-content-docs/current, and translate them: `bash mkdir -p i18n/fr/docusaurus-plugin-content-docs/current cp -r docs/ i18n/fr/docusaurus-plugin-content-docs/current ` :::info Notice that the docusaurus-plugin-content-docs plugin always divides its content by versions. The data in ./docs folder will be translated in the current subfolder and current.json file. See the doc versioning guide for more information about what \"current\" means. ::: Translate the blog {#translate-the-blog} Copy your blog Markdown files to i18n/fr/docusaurus-plugin-content-blog, and translate them: `bash mkdir -p i18n/fr/docusaurus-plugin-content-blog cp -r blog/ i18n/fr/docusaurus-plugin-content-blog ` Translate the pages {#translate-the-pages} Copy your pages Markdown files to i18n/fr/docusaurus-plugin-content-pages, and translate them: `bash mkdir -p i18n/fr/docusaurus-plugin-content-pages cp -r src/pages/.md i18n/fr/docusaurus-plugin-content-pages cp -r src/pages/.mdx i18n/fr/docusaurus-plugin-content-pages ` :::warning We only copy .md and .mdx files, as React pages are translated through JSON translation files already. ::: :::tip Use explicit heading IDs By default, a Markdown heading Hello World will have a generated ID hello-world. Other documents can link it with link. However, after translation, the heading becomes Bonjour le Monde, with ID bonjour-le-monde. Generated IDs are not always a good fit for localized sites, as it requires you to localize all the anchor links: `diff link. link ` For localized sites, it is recommended to use explicit heading IDs. ::: Deploy your site {#deploy-your-site} You can choose to deploy your site under a single domain or use multiple (sub)domains. :::tip About localized baseUrls Docusaurus will automatically add a /<locale>/ path segment to your site for locales except the default one. This heuristic works well for most sites but can be configured on a per-locale basis depending on your deployment requirements. Read more on the siteConfig.baseUrl docs. ::: Single-domain deployment {#single-domain-deployment} Run the following command: `bash npm2yarn npm run build ` Docusaurus will build one single-page application per locale: website/build: for the default, English language website/build/fr: for the French language You can now deploy the build folder to the static hosting solution of your choice. :::note The Docusaurus website uses this strategy: https://docusaurus.io https://docusaurus.io/fr ::: :::tip Static hosting providers generally redirect /unknown/url to /404.html by convention, always showing an English 404 page. Localize your 404 pages by configuring your host to redirect /fr/* to /fr/404.html. This is not always possible, and depends on your host: GitHub Pages can't do this, Netlify can. ::: Multi-domain deployment {#multi-domain-deployment} You can also build your site for a single locale: `bash npm2yarn npm run build -- --locale fr ` When building a single locale at a time, Docusaurus will not add the /fr/ URL prefix automatically, assuming you want to deploy each locale to a distinct domain. On your static hosting provider: create one deployment per locale configure the appropriate build command, using the --locale option configure the (sub)domain of your choice for each deployment :::tip Configuring URLs for each locale Use the [siteConfig.i18n.localeConfigs[<locale>].url](./../api/docusaurus.config.js.mdx#i18n) attribute to configure a distinct site URL for each locale: `ts title=docusaurus.config.js const config = { i18n: { localeConfigs: { // highlight-start en: { url: 'https://en.docusaurus.io', baseUrl: '/', }, fr: { url: 'https://fr.docusaurus.io', baseUrl: '/', }, // highlight-end }, }, }; ` This helps search engines like Google know about localized versions of your page thanks to <link rel=\"alternate\" hreflang=\"<locale>\"/> meta tags. This also permits Docusaurus themes to redirect users to the appropriate URL when they switch locale, usually through the Navbar locale dropdown. Read more on the siteConfig.url and siteConfig.baseUrl docs. ::: :::warning This strategy is not possible with GitHub Pages, as it is only possible to have a single deployment. ::: Hybrid {#hybrid} It is possible to have some locales using sub-paths, and others using subdomains. It is also possible to deploy each locale as a separate subdomain, assemble the subdomains in a single unified domain at the CDN level: Deploy your site as fr.docusaurus.io Configure a CDN to serve it from docusaurus.io/fr Managing translations {#managing-translations} Docusaurus doesn't care about how you manage your translations: all it needs is that all translation files (JSON, Markdown, or other data files) are available in the file system during building. However, as site creators, you would need to consider how translations are managed so your translation contributors could collaborate well. We will share two common translation collaboration strategies: using git and using Crowdin.",
    "keywords": [
      "i18n",
      "tutorial",
      "this",
      "will",
      "walk",
      "you",
      "through",
      "the",
      "basics",
      "of",
      "docusaurus",
      "system.",
      "mdx",
      "Tabs",
      "TabItem",
      "localhost",
      "fr",
      "pages",
      "index",
      "Layout",
      "Link",
      "h1",
      "blog",
      "img",
      "home",
      "main",
      "Translate",
      "li",
      "en",
      "code",
      "theme-common",
      "h2",
      "docusaurus-theme-classic",
      "navbar",
      "MDX",
      "docusaurus-plugin-content-docs",
      "current",
      "docs",
      "docusaurus-plugin-content-blog",
      "docusaurus-plugin-content-pages",
      "build",
      "unknown",
      "url",
      "404",
      "api",
      "Tutorial",
      "block",
      "import",
      "from",
      "theme",
      "This",
      "Docusaurus",
      "system",
      "add",
      "French",
      "translations",
      "newly",
      "initialized",
      "English",
      "website",
      "Initialize",
      "new",
      "site",
      "with",
      "npx",
      "create",
      "latest",
      "classic",
      "like",
      "one",
      "Configure",
      "your",
      "configure",
      "Modify",
      "config",
      "support",
      "for",
      "language",
      "Site",
      "configuration",
      "Use",
      "declare",
      "locales",
      "title",
      "export",
      "default",
      "defaultLocale",
      "localeConfigs",
      "htmlLang",
      "You",
      "can",
      "omit",
      "locale",
      "don",
      "need",
      "override",
      "defaults",
      "direction",
      "rtl",
      "The",
      "names",
      "are",
      "used",
      "translation",
      "files",
      "locations",
      "well",
      "translated",
      "base",
      "URL",
      "When",
      "building",
      "all",
      "only",
      "have",
      "its",
      "name",
      "omitted",
      "uses",
      "provide",
      "sensible",
      "html",
      "lang",
      "attribute",
      "label",
      "calendar",
      "format",
      "etc",
      "customize",
      "these",
      "Theme",
      "Add",
      "item",
      "type",
      "localeDropdown",
      "that",
      "users",
      "select",
      "they",
      "want",
      "themeConfig",
      "items",
      "highlight",
      "start",
      "position",
      "left",
      "end",
      "tip",
      "pass",
      "query",
      "parameter",
      "appended",
      "when",
      "user",
      "changes",
      "using",
      "dropdown",
      "queryString",
      "persistLocale",
      "true",
      "useful",
      "implementing",
      "automatic",
      "detection",
      "server",
      "For",
      "example",
      "use",
      "store",
      "preferred",
      "cookie",
      "Start",
      "localized",
      "dev",
      "mode",
      "choice",
      "bash",
      "npm2yarn",
      "npm",
      "run",
      "Your",
      "accessible",
      "http",
      "haven",
      "provided",
      "any",
      "yet",
      "mostly",
      "untranslated",
      "provides",
      "generic",
      "labels",
      "such",
      "Next",
      "and",
      "Previous",
      "pagination",
      "Please",
      "help",
      "complete",
      "those",
      "warning",
      "Each",
      "distinct",
      "standalone",
      "single",
      "page",
      "application",
      "not",
      "possible",
      "sites",
      "same",
      "time",
      "translate",
      "All",
      "data",
      "stored",
      "plugin",
      "sources",
      "own",
      "content",
      "under",
      "corresponding",
      "folder",
      "while",
      "json",
      "file",
      "defines",
      "text",
      "React",
      "note",
      "After",
      "copying",
      "around",
      "restart",
      "Hot",
      "reload",
      "work",
      "better",
      "editing",
      "existing",
      "react",
      "written",
      "yourself",
      "components",
      "APIs",
      "Locate",
      "visible",
      "mark",
      "them",
      "There",
      "two",
      "kinds",
      "component",
      "wraps",
      "string",
      "JSX",
      "element",
      "callback",
      "takes",
      "message",
      "returns",
      "fits",
      "context",
      "semantically",
      "children",
      "props",
      "expect",
      "_object_",
      "Using",
      "contexts",
      "expecting",
      "strings",
      "option",
      "would",
      "coerce",
      "which",
      "object",
      "Object",
      "While",
      "encourage",
      "form",
      "actually",
      "works",
      "value",
      "Before",
      "jsx",
      "src",
      "function",
      "Home",
      "return",
      "next",
      "line",
      "Welcome",
      "also",
      "visit",
      "https",
      "png",
      "alt",
      "icon",
      "homepage",
      "visitMyBlog",
      "description",
      "ask",
      "values",
      "blogLink",
      "linkLabel",
      "link",
      "info",
      "very",
      "small",
      "lightweight",
      "runtime",
      "purpose",
      "supports",
      "basic",
      "placeholders",
      "interpolation",
      "subset",
      "ICU",
      "Message",
      "Format",
      "Most",
      "documentation",
      "websites",
      "generally",
      "static",
      "advanced",
      "features",
      "plurals",
      "genders",
      "library",
      "intl",
      "more",
      "cases",
      "write",
      "command",
      "statically",
      "analyze",
      "extract",
      "calls",
      "aggregate",
      "maps",
      "IDs",
      "objects",
      "including",
      "specify",
      "either",
      "order",
      "correctly",
      "correlate",
      "each",
      "entry",
      "API",
      "call",
      "must",
      "does",
      "analysis",
      "doesn",
      "Therefore",
      "dynamic",
      "messages",
      "extracted",
      "_expression_",
      "_string_",
      "const",
      "Hello",
      "World",
      "ItemsList",
      "DON",
      "THIS",
      "map",
      "key",
      "still",
      "behaves",
      "However",
      "future",
      "may",
      "mechanism",
      "allowing",
      "directly",
      "inlined",
      "Babel",
      "transformations",
      "instead",
      "calling",
      "proof",
      "should",
      "always",
      "prefer",
      "analyzable",
      "refactor",
      "above",
      "titles",
      "now",
      "already",
      "rendering",
      "see",
      "purely",
      "_markers_",
      "tell",
      "here",
      "replaced",
      "Pluralization",
      "pluralization",
      "notice",
      "some",
      "pluralized",
      "post",
      "One",
      "count",
      "posts",
      "Every",
      "list",
      "plural",
      "categories",
      "arrange",
      "zero",
      "few",
      "many",
      "other",
      "because",
      "has",
      "forms",
      "separated",
      "pipe",
      "Polish",
      "three",
      "joined",
      "pipes",
      "pluralize",
      "usePluralForm",
      "common",
      "selector",
      "selectMessage",
      "Select",
      "appropriate",
      "based",
      "length",
      "Intl",
      "PluralRules",
      "resolve",
      "important",
      "right",
      "number",
      "JSON",
      "everything",
      "interspersed",
      "marked",
      "Navbar",
      "footer",
      "Docs",
      "sidebar",
      "category",
      "sidebars",
      "Blog",
      "options",
      "Run",
      "initialize",
      "root",
      "includes",
      "source",
      "could",
      "themes",
      "Plugins",
      "their",
      "GitHub",
      "layout",
      "Markdown",
      "markdown",
      "Official",
      "plugins",
      "extensively",
      "allow",
      "Copy",
      "mkdir",
      "Notice",
      "divides",
      "versions",
      "subfolder",
      "See",
      "doc",
      "versioning",
      "guide",
      "information",
      "about",
      "what",
      "means",
      "copy",
      "explicit",
      "heading",
      "generated",
      "hello",
      "world",
      "Other",
      "documents",
      "after",
      "becomes",
      "Bonjour",
      "Monde",
      "bonjour",
      "monde",
      "Generated",
      "good",
      "fit",
      "requires",
      "localize",
      "anchor",
      "links",
      "diff",
      "recommended",
      "Deploy",
      "deploy",
      "choose",
      "domain",
      "multiple",
      "sub",
      "domains",
      "About",
      "baseUrls",
      "automatically",
      "path",
      "segment",
      "except",
      "heuristic",
      "most",
      "but",
      "configured",
      "per",
      "basis",
      "depending",
      "deployment",
      "requirements",
      "Read",
      "siteConfig",
      "baseUrl",
      "Single",
      "following",
      "hosting",
      "solution",
      "strategy",
      "Static",
      "providers",
      "redirect",
      "convention",
      "showing",
      "Localize",
      "configuring",
      "host",
      "depends",
      "Pages",
      "Netlify",
      "Multi",
      "multi",
      "prefix",
      "assuming",
      "provider",
      "Configuring",
      "URLs",
      "helps",
      "search",
      "engines",
      "Google",
      "know",
      "thanks",
      "rel",
      "alternate",
      "hreflang",
      "meta",
      "tags",
      "permits",
      "switch",
      "usually",
      "Hybrid",
      "hybrid",
      "paths",
      "others",
      "subdomains",
      "separate",
      "subdomain",
      "assemble",
      "unified",
      "CDN",
      "level",
      "serve",
      "Managing",
      "managing",
      "care",
      "how",
      "manage",
      "needs",
      "available",
      "during",
      "creators",
      "consider",
      "managed",
      "contributors",
      "collaborate",
      "share",
      "collaboration",
      "strategies",
      "git",
      "Crowdin"
    ],
    "url": "/docs/i18n/i18n-tutorial",
    "path": "i18n/i18n-tutorial.mdx",
    "type": "general",
    "category": "i18n"
  },
  {
    "id": "overview",
    "title": "Overview",
    "description": "",
    "content": "Welcome to XT API documentation. XT provides REST and Websocket APIs to suit your trading needs.",
    "keywords": [
      "overview",
      "index",
      "mdx",
      "Welcome",
      "API",
      "documentation",
      "provides",
      "REST",
      "and",
      "Websocket",
      "APIs",
      "suit",
      "your",
      "trading",
      "needs"
    ],
    "url": "/docs/index_overview/overview",
    "path": "index_overview/overview.mdx",
    "type": "general",
    "category": "index_overview"
  },
  {
    "id": "index_overview_resource",
    "title": "API Resources and Support",
    "description": "",
    "content": "Tutorials Learn python spot trading step by step: Python Spot Trading Tutorial<br /> Learn python derivatives trading step by step: Python Derivatives Trading Tutorial Python libraries Use Python SDK for easier integration: Python SDK Java libraries A lightweight Java code library: Java SDK JavaScript SDK This JavaScript SDK provides access to various endpoints for interacting with the XT platform: JavaScript SDK Customer service Get support in our telegram group: XT API Support Group<br /> If you have any questions, please consult online customer service",
    "keywords": [
      "api",
      "resources",
      "and",
      "support",
      "index",
      "overview",
      "resource",
      "mdx",
      "Tutorials",
      "Learn",
      "python",
      "spot",
      "trading",
      "step",
      "Python",
      "Spot",
      "Trading",
      "Tutorial",
      "derivatives",
      "Derivatives",
      "libraries",
      "Use",
      "SDK",
      "for",
      "easier",
      "integration",
      "Java",
      "lightweight",
      "code",
      "library",
      "JavaScript",
      "This",
      "provides",
      "access",
      "various",
      "endpoints",
      "interacting",
      "with",
      "the",
      "platform",
      "Customer",
      "service",
      "Get",
      "our",
      "telegram",
      "group",
      "API",
      "Support",
      "Group",
      "you",
      "have",
      "any",
      "questions",
      "please",
      "consult",
      "online",
      "customer"
    ],
    "url": "/docs/index_overview/resource",
    "path": "index_overview/resource.mdx",
    "type": "general",
    "category": "index_overview"
  },
  {
    "id": "installation",
    "title": "Installation",
    "description": "How to install Docusaurus locally, and start a Docusaurus site in no time.",
    "content": "Installation `mdx-code-block import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; ` Docusaurus consists of a set of npm packages. :::tip Use the Fast Track to understand Docusaurus in 5 minutes ⏱! Use docusaurus.new to test Docusaurus immediately in your browser! ::: Requirements {#requirements} Node.js version 18.0 or above (which can be checked by running node -v). You can use nvm to manage multiple Node.js versions on a single machine. When installing Node.js, it is recommended to check all checkboxes related to dependencies. Scaffold project website {#scaffold-project-website} The easiest way to install Docusaurus is to use the create-docusaurus command line tool that helps you scaffold a skeleton Docusaurus website. You can run this command anywhere in a new empty repository or within an existing repository, it will create a new directory containing the scaffolded files. `bash npx create-docusaurus@latest my-website classic ` We recommend the classic template so that you can get started quickly, and it contains features found in Docusaurus 1. The classic template contains @docusaurus/preset-classic which includes standard documentation, a blog, custom pages, and a CSS framework (with dark mode support). You can get up and running extremely quickly with the classic template and customize things later on when you have gained more familiarity with Docusaurus. You can also use the template's TypeScript variant by passing the --typescript flag. See TypeScript support for more information. `bash npx create-docusaurus@latest my-website classic --typescript ` :::info Meta-Only If you are setting up a new Docusaurus website for a Meta open source project, run this command inside an internal repository, which comes with some useful Meta-specific defaults: `bash scarf static-docs-bootstrap ` ::: <details> <summary>Alternative installation commands</summary> You can also initialize a new project using your preferred project manager: `bash npm2yarn npm init docusaurus ` </details> Run npx create-docusaurus@latest --help, or check out its API docs for more information about all available flags. Project structure {#project-structure} Assuming you chose the classic template and named your site my-website, you will see the following files generated under a new directory my-website/: `bash my-website ├── blog │ ├── 2019-05-28-hola.md │ ├── 2019-05-29-hello-world.md │ └── 2020-05-30-welcome.md ├── docs │ ├── doc1.md │ ├── doc2.md │ ├── doc3.md │ └── mdx.md ├── src │ ├── css │ │ └── custom.css │ └── pages │ ├── styles.module.css │ └── index.js ├── static │ └── img ├── docusaurus.config.js ├── package.json ├── README.md ├── sidebars.js └── yarn.lock ` Project structure rundown {#project-structure-rundown} /blog/ - Contains the blog Markdown files. You can delete the directory if you've disabled the blog plugin, or you can change its name after setting the path option. More details can be found in the blog guide /docs/ - Contains the Markdown files for the docs. Customize the order of the docs sidebar in sidebars.js. You can delete the directory if you've disabled the docs plugin, or you can change its name after setting the path option. More details can be found in the docs guide /src/ - Non-documentation files like pages or custom React components. You don't have to strictly put your non-documentation files here, but putting them under a centralized directory makes it easier to specify in case you need to do some sort of linting/processing /src/pages - Any JSX/TSX/MDX file within this directory will be converted into a website page. More details can be found in the pages guide /static/ - Static directory. Any contents inside here will be copied into the root of the final build directory /docusaurus.config.js - A config file containing the site configuration. This is the equivalent of siteConfig.js in Docusaurus v1 /package.json - A Docusaurus website is a React app. You can install and use any npm packages you like in them /sidebars.js - Used by the documentation to specify the order of documents in the sidebar Monorepos {#monorepos} If you are using Docusaurus for documentation of an existing project, a monorepo may be the solution for you. Monorepos allow you to share dependencies between similar projects. For example, your website may use your local packages to showcase latest features instead of depending on a released version. Then, your contributors can update the docs as they implement features. An example monorepo folder structure is below: `bash my-monorepo ├── package-a Another package, your actual project │ ├── src │ └── package.json Package A's dependencies ├── website Docusaurus root │ ├── docs │ ├── src │ └── package.json Docusaurus' dependencies ├── package.json Monorepo's shared dependencies ` In this case, you should run npx create-docusaurus within the ./my-monorepo folder. If you're using a hosting provider such as Netlify or Vercel, you will need to change the Base directory of the site to where your Docusaurus root is. In this case, that would be ./website. Read more about configuring ignore commands in the deployment docs. Read more about monorepos in the Yarn documentation (Yarn is not the only way to set up a monorepo, but it's a common solution), or checkout Docusaurus and Jest for some real-world examples. Running the development server {#running-the-development-server} To preview your changes as you edit the files, you can run a local development server that will serve your website and reflect the latest changes. `bash npm2yarn cd my-website npm run start ` By default, a browser window will open at http://localhost:3000. Congratulations! You have just created your first Docusaurus site! Browse around the site to see what's available. Build {#build} Docusaurus is a modern static website generator so we need to build the website into a directory of static contents and put it on a web server so that it can be viewed. To build the website: `bash npm2yarn npm run build ` and contents will be generated within the /build directory, which can be copied to any static file hosting service like GitHub pages, Vercel or Netlify. Check out the docs on deployment for more details. Updating your Docusaurus version {#updating-your-docusaurus-version} There are many ways to update your Docusaurus version. One guaranteed way is to manually change the version number in package.json to the desired version. Note that all @docusaurus/-namespaced packages should be using the same version. import UpgradeGuide from '@site/src/components/UpgradeGuide'; <UpgradeGuide /> Then, in the directory containing package.json, run your package manager's install command: `bash npm2yarn npm install ` :::tip npm install may report several vulnerabilities and recommend running npm audit to address them. Typically, these reported vulnerabilities, such as RegExp DOS vulnerabilities, are harmless and can be safely ignored. Also read this article, which reflects our thinking: npm audit: Broken by Design. ::: To check that the update occurred successfully, run: `bash npx docusaurus --version ` You should see the correct version as output. Alternatively, if you are using Yarn, you can do: `bash yarn add @docusaurus/core @docusaurus/preset-classic ` :::tip Use new unreleased features of Docusaurus with the @canary npm dist tag ::: Problems? {#problems} Ask for help on Stack Overflow, on our GitHub repository, our Discord server, or X.",
    "keywords": [
      "installation",
      "how",
      "to",
      "install",
      "docusaurus",
      "locally,",
      "and",
      "start",
      "site",
      "in",
      "no",
      "time.",
      "mdx",
      "Tabs",
      "TabItem",
      "preset-classic",
      "summary",
      "details",
      "blog",
      "docs",
      "src",
      "processing",
      "pages",
      "TSX",
      "MDX",
      "static",
      "package",
      "sidebars",
      "my-monorepo",
      "website",
      "localhost",
      "build",
      "-namespaced",
      "components",
      "UpgradeGuide",
      "core",
      "Installation",
      "code",
      "block",
      "import",
      "from",
      "theme",
      "Docusaurus",
      "consists",
      "set",
      "npm",
      "packages",
      "tip",
      "Use",
      "the",
      "Fast",
      "Track",
      "understand",
      "minutes",
      "new",
      "test",
      "immediately",
      "your",
      "browser",
      "Requirements",
      "requirements",
      "Node",
      "version",
      "above",
      "which",
      "can",
      "checked",
      "running",
      "node",
      "You",
      "use",
      "nvm",
      "manage",
      "multiple",
      "versions",
      "single",
      "machine",
      "When",
      "installing",
      "recommended",
      "check",
      "all",
      "checkboxes",
      "related",
      "dependencies",
      "Scaffold",
      "project",
      "scaffold",
      "The",
      "easiest",
      "way",
      "create",
      "command",
      "line",
      "tool",
      "that",
      "helps",
      "you",
      "skeleton",
      "run",
      "this",
      "anywhere",
      "empty",
      "repository",
      "within",
      "existing",
      "will",
      "directory",
      "containing",
      "scaffolded",
      "files",
      "bash",
      "npx",
      "latest",
      "classic",
      "recommend",
      "template",
      "get",
      "started",
      "quickly",
      "contains",
      "features",
      "found",
      "preset",
      "includes",
      "standard",
      "documentation",
      "custom",
      "CSS",
      "framework",
      "with",
      "dark",
      "mode",
      "support",
      "extremely",
      "customize",
      "things",
      "later",
      "when",
      "have",
      "gained",
      "more",
      "familiarity",
      "also",
      "TypeScript",
      "variant",
      "passing",
      "typescript",
      "flag",
      "See",
      "for",
      "information",
      "info",
      "Meta",
      "Only",
      "are",
      "setting",
      "open",
      "source",
      "inside",
      "internal",
      "comes",
      "some",
      "useful",
      "specific",
      "defaults",
      "scarf",
      "bootstrap",
      "Alternative",
      "commands",
      "initialize",
      "using",
      "preferred",
      "manager",
      "npm2yarn",
      "init",
      "Run",
      "help",
      "out",
      "its",
      "API",
      "about",
      "available",
      "flags",
      "Project",
      "structure",
      "Assuming",
      "chose",
      "named",
      "see",
      "following",
      "generated",
      "under",
      "hola",
      "hello",
      "world",
      "welcome",
      "doc1",
      "doc2",
      "doc3",
      "css",
      "styles",
      "module",
      "index",
      "img",
      "config",
      "json",
      "README",
      "yarn",
      "lock",
      "rundown",
      "Contains",
      "Markdown",
      "delete",
      "disabled",
      "plugin",
      "change",
      "name",
      "after",
      "path",
      "option",
      "More",
      "guide",
      "Customize",
      "order",
      "sidebar",
      "Non",
      "like",
      "React",
      "don",
      "strictly",
      "put",
      "non",
      "here",
      "but",
      "putting",
      "them",
      "centralized",
      "makes",
      "easier",
      "specify",
      "case",
      "need",
      "sort",
      "linting",
      "Any",
      "JSX",
      "file",
      "converted",
      "into",
      "page",
      "Static",
      "contents",
      "copied",
      "root",
      "final",
      "configuration",
      "This",
      "equivalent",
      "siteConfig",
      "app",
      "any",
      "Used",
      "documents",
      "Monorepos",
      "monorepos",
      "monorepo",
      "may",
      "solution",
      "allow",
      "share",
      "between",
      "similar",
      "projects",
      "For",
      "example",
      "local",
      "showcase",
      "instead",
      "depending",
      "released",
      "Then",
      "contributors",
      "update",
      "they",
      "implement",
      "folder",
      "below",
      "Another",
      "actual",
      "Package",
      "Monorepo",
      "shared",
      "should",
      "hosting",
      "provider",
      "such",
      "Netlify",
      "Vercel",
      "Base",
      "where",
      "would",
      "Read",
      "configuring",
      "ignore",
      "deployment",
      "Yarn",
      "not",
      "only",
      "common",
      "checkout",
      "Jest",
      "real",
      "examples",
      "Running",
      "development",
      "server",
      "preview",
      "changes",
      "edit",
      "serve",
      "reflect",
      "default",
      "window",
      "http",
      "Congratulations",
      "just",
      "created",
      "first",
      "Browse",
      "around",
      "what",
      "Build",
      "modern",
      "generator",
      "web",
      "viewed",
      "service",
      "GitHub",
      "Check",
      "Updating",
      "updating",
      "There",
      "many",
      "ways",
      "One",
      "guaranteed",
      "manually",
      "number",
      "desired",
      "Note",
      "namespaced",
      "same",
      "report",
      "several",
      "vulnerabilities",
      "audit",
      "address",
      "Typically",
      "these",
      "reported",
      "RegExp",
      "DOS",
      "harmless",
      "safely",
      "ignored",
      "Also",
      "read",
      "article",
      "reflects",
      "our",
      "thinking",
      "Broken",
      "Design",
      "occurred",
      "successfully",
      "correct",
      "output",
      "Alternatively",
      "add",
      "unreleased",
      "canary",
      "dist",
      "tag",
      "Problems",
      "problems",
      "Ask",
      "Stack",
      "Overflow",
      "Discord"
    ],
    "url": "/docs/installation",
    "path": "installation.mdx",
    "type": "general",
    "category": "root"
  },
  {
    "id": "introduction",
    "title": "Introduction",
    "description": "Docusaurus was designed from the ground up to be easily installed and used to get your website up and running quickly.",
    "content": "Introduction ⚡️ Docusaurus will help you ship a beautiful documentation site in no time. 💸 Building a custom tech stack is expensive. Instead, focus on your content and just write Markdown files. 💥 Ready for more? Use advanced features like versioning, i18n, search and theme customizations. 💅 Check the best Docusaurus sites for inspiration. 🧐 Docusaurus is a static-site generator. It builds a single-page application with fast client-side navigation, leveraging the full power of React to make your site interactive. It provides out-of-the-box documentation features but can be used to create any kind of site (personal website, product, blog, marketing landing pages, etc). Fast Track ⏱️ {#fast-track} Understand Docusaurus in 5 minutes by playing! Create a new Docusaurus site and follow the very short embedded tutorial. Install Node.js and create a new Docusaurus site: `bash npx create-docusaurus@latest my-website classic ` Start the site: `bash cd my-website npx docusaurus start ` Open http://localhost:3000 and follow the tutorial. :::tip Use docusaurus.new to test Docusaurus immediately in your browser! Or read the 5-minute tutorial online. ::: Docusaurus: Documentation Made Easy In this presentation at Algolia Community Event, Meta Open Source team shared a brief walk-through of Docusaurus. They covered how to get started with the project, enable plugins, and set up functionalities like documentation and blogging. {/ cSpell:ignore Yhyx Sksg /} `mdx-code-block import LiteYouTubeEmbed from 'react-lite-youtube-embed'; <div className=\"video-container\"> <LiteYouTubeEmbed id=\"Yhyx7otSksg\" params=\"autoplay=1&autohide=1&showinfo=0&rel=0\" title=\"Docusaurus: Documentation Made Easy\" poster=\"maxresdefault\" webp /> </div> ` Migrating from v1 {#migrating-from-v1} Docusaurus v2+ has been a total rewrite from Docusaurus v1, taking advantage of a completely modernized toolchain. After v2's official release, we highly encourage you to use Docusaurus v2+ over Docusaurus v1, as Docusaurus v1 has been deprecated. A lot of users are already using Docusaurus v2+ (trends). Use Docusaurus v2+ if: :white_check_mark: You want a modern Jamstack documentation site :white_check_mark: You want a single-page application (SPA) with client-side routing :white_check_mark: You want the full power of React and MDX :white_check_mark: You do not need support for IE11 Use Docusaurus v1 if: :x: You don't want a single-page application (SPA) :x: You need support for IE11 (...do you? IE has already reached end-of-life and is no longer officially supported) For existing v1 users that are seeking to upgrade to v2+, you can follow our migration guides. Features {#features} Docusaurus is built with high attention to the developer and contributor experience. ⚛️ Built with 💚 and React: Extend and customize with React Gain full control of your site's browsing experience by providing your own React components 🔌 Pluggable: Bootstrap your site with a basic template, then use advanced features and plugins Open source your plugins to share with the community ✂️ Developer experience: Start writing your docs right now Universal configuration entry point to make it more maintainable by contributors Hot reloading with lightning-fast incremental build on changes Route-based code and data splitting Publish to GitHub Pages, Netlify, Vercel, and other deployment services with ease Our shared goal—to help your users quickly find what they need and understand your products better. We share our best practices to help you build your docs site right and well. 🎯 SEO friendly: HTML files are statically generated for every possible path. Page-specific SEO to help your users land on your official docs directly relating their problems at hand. 📝 Powered by MDX: Write interactive components via JSX and React embedded in Markdown. Share your code in live editors to get your users to love your products on the spot. 🔍 Search: Your full site is searchable. 💾 Document Versioning: Helps you keep documentation in sync with project releases. 🌍 Internationalization (i18n): Translate your site in multiple locales. Docusaurus v2+ is born to be compassionately accessible to all your users, and lightning-fast. ⚡️ Lightning-fast. Docusaurus v2+ follows the PRPL Pattern that makes sure your content loads blazing fast. 🦖 Accessible. Attention to accessibility, making your site equally accessible to all users. Design principles {#design-principles} Little to learn. Docusaurus should be easy to learn and use as the API is quite small. Most things will still be achievable by users, even if it takes them more code and more time to write. Not having abstractions is better than having the wrong abstractions, and we don't want users to have to hack around the wrong abstractions. Mandatory talk—Minimal API Surface Area. Intuitive. Users will not feel overwhelmed when looking at the project directory of a Docusaurus project or adding new features. It should look intuitive and easy to build on top of, using approaches they are familiar with. Layered architecture. The separations of concerns between each layer of our stack (content/theming/styling) should be clear—well-abstracted and modular. Sensible defaults. Common and popular performance optimizations and configurations will be done for users but they are given the option to override them. No vendor lock-in. Users are not required to use the default plugins or CSS, although they are highly encouraged to. Certain core infrastructures like React Loadable and React Router cannot be swapped because we do default performance optimization on them, but not higher-level ones. Choice of Markdown engines, CSS frameworks, CSS methodology, and other architectures will be entirely up to users. We believe that, as developers, knowing how a library works helps us become better at using it. Hence we're dedicating effort to explaining the architecture and various components of Docusaurus with the hope that users reading it will gain a deeper understanding of the tool and be even more proficient in using it. Comparison with other tools {#comparison-with-other-tools} Across all static site generators, Docusaurus has a unique focus on documentation sites and has many out-of-the-box features. We've also studied other main static site generators and would like to share our insights on the comparison, hopefully helping you navigate through the prismatic choices out there. Gatsby {#gatsby} Gatsby is packed with a lot of features, has a rich ecosystem of plugins, and is capable of doing everything that Docusaurus does. Naturally, that comes at a cost of a higher learning curve. Gatsby does many things well and is suitable for building many types of websites. On the other hand, Docusaurus tries to do one thing super well - be the best tool for writing and publishing content. GraphQL is also pretty core to Gatsby, although you don't necessarily need GraphQL to build a Gatsby site. In most cases when building static websites, you won't need the flexibility that GraphQL provides. Many aspects of Docusaurus v2+ were inspired by the best things about Gatsby and it's a great alternative. Docz is a Gatsby theme to build documentation websites. It is currently less featured than Docusaurus. Next.js {#nextjs} Next.js is another very popular hybrid React framework. It can help you build a good documentation website, but it is not opinionated toward the documentation use-case, and it will require a lot more work to implement what Docusaurus provides out-of-the-box. Nextra is an opinionated static site generator built on top of Next.js. It is currently less featured than Docusaurus. VitePress {#vitepress} VitePress has many similarities with Docusaurus - both focus heavily on content-centric websites and provides tailored documentation features out of the box. However, VitePress is powered by Vue, while Docusaurus is powered by React. If you want a Vue-based solution, VitePress would be a decent choice. MkDocs {#mkdocs} MkDocs is a popular Python static site generator with value propositions similar to Docusaurus. It is a good option if you don't need a single-page application and don't plan to leverage React. Material for MkDocs is a beautiful theme. Docsify {#docsify} Docsify makes it easy to create a documentation website, but is not a static-site generator and is not SEO friendly. GitBook {#gitbook} GitBook has a very clean design and has been used by many open source projects. With its focus shifting towards a commercial product rather than an open-source tool, many of its requirements no longer fit the needs of open source projects' documentation sites. As a result, many have turned to other products. You may read about Redux's switch to Docusaurus here. Currently, GitBook is only free for open-source and non-profit teams. Docusaurus is free for everyone. Jekyll {#jekyll} Jekyll is one of the most mature static site generators around and has been a great tool to use — in fact, before Docusaurus, most of Facebook's Open Source websites are/were built on Jekyll! It is extremely simple to get started. We want to bring a similar developer experience as building a static site with Jekyll. In comparison with statically generated HTML and interactivity added using <script /> tags, Docusaurus sites are React apps. Using modern JavaScript ecosystem tooling, we hope to set new standards on doc sites' performance, asset building pipeline and optimizations, and ease to set up. Rspress {#rspress} Rspress is a fast static site generator based on Rspack, a Rust-based bundler. It supports content writing with MDX (Markdown with React components), integrated text search, multilingual support (i18n), and extensibility through plugins. Designed for creating elegant documentation and static websites, Rspress produces static HTML files that are easy to deploy. Rspress and Docusaurus are quite similar. They both have their pros and cons. Rspress was created more recently and benefits from a modern infrastructure that enables faster site builds. Docusaurus stands out for its maturity, comprehensive feature set, flexibility, and strong community. It is also modernizing its infrastructure regularly to remain competitive in terms of performance. Staying informed {#staying-informed} GitHub X Blog Discord Something missing? {#something-missing} If you find issues with the documentation or have suggestions on how to improve the documentation or the project in general, please file an issue for us, or send a tweet mentioning the @docusaurus X account. For new feature requests, you can create a post on our feature requests board (Canny), which is a handy tool for road-mapping and allows for sorting by upvotes, which gives the core team a better indicator of what features are in high demand, as compared to GitHub issues which are harder to triage. Refrain from making a Pull Request for new features (especially large ones) as someone might already be working on it or will be part of our roadmap. Talk to us first!",
    "keywords": [
      "introduction",
      "docusaurus",
      "was",
      "designed",
      "from",
      "the",
      "ground",
      "up",
      "to",
      "be",
      "easily",
      "installed",
      "and",
      "used",
      "get",
      "your",
      "website",
      "running",
      "quickly.",
      "mdx",
      "localhost",
      "div",
      "theming",
      "styling",
      "were",
      "Introduction",
      "Docusaurus",
      "will",
      "help",
      "you",
      "ship",
      "beautiful",
      "documentation",
      "site",
      "time",
      "Building",
      "custom",
      "tech",
      "stack",
      "expensive",
      "Instead",
      "focus",
      "content",
      "just",
      "write",
      "Markdown",
      "files",
      "Ready",
      "for",
      "more",
      "Use",
      "advanced",
      "features",
      "like",
      "versioning",
      "i18n",
      "search",
      "theme",
      "customizations",
      "Check",
      "best",
      "sites",
      "inspiration",
      "static",
      "generator",
      "builds",
      "single",
      "page",
      "application",
      "with",
      "fast",
      "client",
      "side",
      "navigation",
      "leveraging",
      "full",
      "power",
      "React",
      "make",
      "interactive",
      "provides",
      "out",
      "box",
      "but",
      "can",
      "create",
      "any",
      "kind",
      "personal",
      "product",
      "blog",
      "marketing",
      "landing",
      "pages",
      "etc",
      "Fast",
      "Track",
      "track",
      "Understand",
      "minutes",
      "playing",
      "Create",
      "new",
      "follow",
      "very",
      "short",
      "embedded",
      "tutorial",
      "Install",
      "Node",
      "bash",
      "npx",
      "latest",
      "classic",
      "Start",
      "start",
      "Open",
      "http",
      "tip",
      "test",
      "immediately",
      "browser",
      "read",
      "minute",
      "online",
      "Documentation",
      "Made",
      "Easy",
      "this",
      "presentation",
      "Algolia",
      "Community",
      "Event",
      "Meta",
      "Source",
      "team",
      "shared",
      "brief",
      "walk",
      "through",
      "They",
      "covered",
      "how",
      "started",
      "project",
      "enable",
      "plugins",
      "set",
      "functionalities",
      "blogging",
      "cSpell",
      "ignore",
      "Yhyx",
      "Sksg",
      "code",
      "block",
      "import",
      "LiteYouTubeEmbed",
      "react",
      "lite",
      "youtube",
      "embed",
      "className",
      "video",
      "container",
      "Yhyx7otSksg",
      "params",
      "autoplay",
      "autohide",
      "showinfo",
      "rel",
      "title",
      "poster",
      "maxresdefault",
      "webp",
      "Migrating",
      "migrating",
      "has",
      "been",
      "total",
      "rewrite",
      "taking",
      "advantage",
      "completely",
      "modernized",
      "toolchain",
      "After",
      "official",
      "release",
      "highly",
      "encourage",
      "use",
      "over",
      "deprecated",
      "lot",
      "users",
      "are",
      "already",
      "using",
      "trends",
      "white_check_mark",
      "You",
      "want",
      "modern",
      "Jamstack",
      "SPA",
      "routing",
      "MDX",
      "not",
      "need",
      "support",
      "IE11",
      "don",
      "reached",
      "end",
      "life",
      "longer",
      "officially",
      "supported",
      "For",
      "existing",
      "that",
      "seeking",
      "upgrade",
      "our",
      "migration",
      "guides",
      "Features",
      "built",
      "high",
      "attention",
      "developer",
      "contributor",
      "experience",
      "Built",
      "Extend",
      "customize",
      "Gain",
      "control",
      "browsing",
      "providing",
      "own",
      "components",
      "Pluggable",
      "Bootstrap",
      "basic",
      "template",
      "then",
      "source",
      "share",
      "community",
      "Developer",
      "writing",
      "docs",
      "right",
      "now",
      "Universal",
      "configuration",
      "entry",
      "point",
      "maintainable",
      "contributors",
      "Hot",
      "reloading",
      "lightning",
      "incremental",
      "build",
      "changes",
      "Route",
      "based",
      "data",
      "splitting",
      "Publish",
      "GitHub",
      "Pages",
      "Netlify",
      "Vercel",
      "other",
      "deployment",
      "services",
      "ease",
      "Our",
      "goal",
      "quickly",
      "find",
      "what",
      "they",
      "understand",
      "products",
      "better",
      "practices",
      "well",
      "SEO",
      "friendly",
      "HTML",
      "statically",
      "generated",
      "every",
      "possible",
      "path",
      "Page",
      "specific",
      "land",
      "directly",
      "relating",
      "their",
      "problems",
      "hand",
      "Powered",
      "Write",
      "via",
      "JSX",
      "Share",
      "live",
      "editors",
      "love",
      "spot",
      "Search",
      "Your",
      "searchable",
      "Document",
      "Versioning",
      "Helps",
      "keep",
      "sync",
      "releases",
      "Internationalization",
      "Translate",
      "multiple",
      "locales",
      "born",
      "compassionately",
      "accessible",
      "all",
      "Lightning",
      "follows",
      "PRPL",
      "Pattern",
      "makes",
      "sure",
      "loads",
      "blazing",
      "Accessible",
      "Attention",
      "accessibility",
      "making",
      "equally",
      "Design",
      "principles",
      "design",
      "Little",
      "learn",
      "should",
      "easy",
      "API",
      "quite",
      "small",
      "Most",
      "things",
      "still",
      "achievable",
      "even",
      "takes",
      "them",
      "Not",
      "having",
      "abstractions",
      "than",
      "wrong",
      "have",
      "hack",
      "around",
      "Mandatory",
      "talk",
      "Minimal",
      "Surface",
      "Area",
      "Intuitive",
      "Users",
      "feel",
      "overwhelmed",
      "when",
      "looking",
      "directory",
      "adding",
      "look",
      "intuitive",
      "top",
      "approaches",
      "familiar",
      "Layered",
      "architecture",
      "The",
      "separations",
      "concerns",
      "between",
      "each",
      "layer",
      "clear",
      "abstracted",
      "modular",
      "Sensible",
      "defaults",
      "Common",
      "popular",
      "performance",
      "optimizations",
      "configurations",
      "done",
      "given",
      "option",
      "override",
      "vendor",
      "lock",
      "required",
      "default",
      "CSS",
      "although",
      "encouraged",
      "Certain",
      "core",
      "infrastructures",
      "Loadable",
      "Router",
      "cannot",
      "swapped",
      "because",
      "optimization",
      "higher",
      "level",
      "ones",
      "Choice",
      "engines",
      "frameworks",
      "methodology",
      "architectures",
      "entirely",
      "believe",
      "developers",
      "knowing",
      "library",
      "works",
      "helps",
      "become",
      "Hence",
      "dedicating",
      "effort",
      "explaining",
      "various",
      "hope",
      "reading",
      "gain",
      "deeper",
      "understanding",
      "tool",
      "proficient",
      "Comparison",
      "tools",
      "comparison",
      "Across",
      "generators",
      "unique",
      "many",
      "also",
      "studied",
      "main",
      "would",
      "insights",
      "hopefully",
      "helping",
      "navigate",
      "prismatic",
      "choices",
      "there",
      "Gatsby",
      "gatsby",
      "packed",
      "rich",
      "ecosystem",
      "capable",
      "doing",
      "everything",
      "does",
      "Naturally",
      "comes",
      "cost",
      "learning",
      "curve",
      "suitable",
      "building",
      "types",
      "websites",
      "tries",
      "one",
      "thing",
      "super",
      "publishing",
      "GraphQL",
      "pretty",
      "necessarily",
      "most",
      "cases",
      "won",
      "flexibility",
      "Many",
      "aspects",
      "inspired",
      "about",
      "great",
      "alternative",
      "Docz",
      "currently",
      "less",
      "featured",
      "Next",
      "nextjs",
      "another",
      "hybrid",
      "framework",
      "good",
      "opinionated",
      "toward",
      "case",
      "require",
      "work",
      "implement",
      "Nextra",
      "VitePress",
      "vitepress",
      "similarities",
      "both",
      "heavily",
      "centric",
      "tailored",
      "However",
      "powered",
      "Vue",
      "while",
      "solution",
      "decent",
      "choice",
      "MkDocs",
      "mkdocs",
      "Python",
      "value",
      "propositions",
      "similar",
      "plan",
      "leverage",
      "Material",
      "Docsify",
      "docsify",
      "GitBook",
      "gitbook",
      "clean",
      "open",
      "projects",
      "With",
      "its",
      "shifting",
      "towards",
      "commercial",
      "rather",
      "requirements",
      "fit",
      "needs",
      "result",
      "turned",
      "may",
      "Redux",
      "switch",
      "here",
      "Currently",
      "only",
      "free",
      "non",
      "profit",
      "teams",
      "everyone",
      "Jekyll",
      "jekyll",
      "mature",
      "fact",
      "before",
      "Facebook",
      "extremely",
      "simple",
      "bring",
      "interactivity",
      "added",
      "script",
      "tags",
      "apps",
      "Using",
      "JavaScript",
      "tooling",
      "standards",
      "doc",
      "asset",
      "pipeline",
      "Rspress",
      "rspress",
      "Rspack",
      "Rust",
      "bundler",
      "supports",
      "integrated",
      "text",
      "multilingual",
      "extensibility",
      "Designed",
      "creating",
      "elegant",
      "produces",
      "deploy",
      "pros",
      "cons",
      "created",
      "recently",
      "benefits",
      "infrastructure",
      "enables",
      "faster",
      "stands",
      "maturity",
      "comprehensive",
      "feature",
      "strong",
      "modernizing",
      "regularly",
      "remain",
      "competitive",
      "terms",
      "Staying",
      "informed",
      "staying",
      "Blog",
      "Discord",
      "Something",
      "missing",
      "something",
      "issues",
      "suggestions",
      "improve",
      "general",
      "please",
      "file",
      "issue",
      "send",
      "tweet",
      "mentioning",
      "account",
      "requests",
      "post",
      "board",
      "Canny",
      "which",
      "handy",
      "road",
      "mapping",
      "allows",
      "sorting",
      "upvotes",
      "gives",
      "indicator",
      "demand",
      "compared",
      "harder",
      "triage",
      "Refrain",
      "Pull",
      "Request",
      "especially",
      "large",
      "someone",
      "might",
      "working",
      "part",
      "roadmap",
      "Talk",
      "first"
    ],
    "url": "/docs/introduction",
    "path": "introduction.mdx",
    "type": "general",
    "category": "root"
  },
  {
    "id": "faq",
    "title": "FAQ",
    "description": "",
    "content": "AUTH_105 Explanation Error Code: AUTH_105 The server verifies the request header parameters validate-timestamp (validTimeStamp) and validate-recvwindow (recvwindow). The following rules must be followed:",
    "keywords": [
      "faq",
      "margin",
      "spot",
      "accessdescription",
      "mdx",
      "AUTH_105",
      "Explanation",
      "Error",
      "Code",
      "The",
      "server",
      "verifies",
      "the",
      "request",
      "header",
      "parameters",
      "validate",
      "timestamp",
      "validTimeStamp",
      "and",
      "recvwindow",
      "following",
      "rules",
      "must",
      "followed"
    ],
    "url": "/docs/margin-spot/Access Description/FAQ",
    "path": "margin-spot/Access Description/FAQ.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "Basic information of the interface",
    "title": "Basic information of the interface",
    "description": "",
    "content": "Notes Due to reasons such as high latency and poor stability, it is not recommended to access the API through a proxy. GET request parameters should be placed in query params. POST request parameters should be placed in the request body. Please set the request header information to:",
    "keywords": [
      "basic",
      "information",
      "of",
      "the",
      "interface",
      "margin",
      "spot",
      "accessdescription",
      "apibasicinfo",
      "mdx",
      "get",
      "post",
      "Notes",
      "Due",
      "reasons",
      "such",
      "high",
      "latency",
      "and",
      "poor",
      "stability",
      "not",
      "recommended",
      "access",
      "API",
      "through",
      "proxy",
      "GET",
      "request",
      "parameters",
      "should",
      "placed",
      "query",
      "params",
      "POST",
      "body",
      "Please",
      "set",
      "header"
    ],
    "url": "/docs/margin-spot/Access Description/apiBasicInfo",
    "path": "margin-spot/Access Description/apiBasicInfo.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "API code library",
    "title": "API code library",
    "description": "",
    "content": "Java connector A lightweight Java codebase that provides methods that allow users to directly call the API. SDKs for each language Java Golang C# Sample request information for each interface Request Demo",
    "keywords": [
      "api",
      "code",
      "library",
      "margin",
      "spot",
      "accessdescription",
      "apidemo",
      "mdx",
      "Java",
      "connector",
      "lightweight",
      "codebase",
      "that",
      "provides",
      "methods",
      "allow",
      "users",
      "directly",
      "call",
      "the",
      "API",
      "SDKs",
      "for",
      "each",
      "language",
      "Golang",
      "Sample",
      "request",
      "information",
      "interface",
      "Request",
      "Demo"
    ],
    "url": "/docs/margin-spot/Access Description/BasicInformationOfTheInterface",
    "path": "margin-spot/Access Description/BasicInformationOfTheInterface.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "applyApi",
    "title": "API_Key_application_steps",
    "description": "",
    "content": "The interface may require the user’s API Key,How to create API-KEY please refer to <a href=\"https://xtsupport.zendesk.com/hc/zh-cn/articles/900006868163-%E5%A6%82%E4%BD%95%E7%94%B3%E8%AF%B7API%E4%BA%A4%E6%98%93-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAAPI%E5%AF%86%E9%92%A5\" target=\"_blank\">here</a> >",
    "keywords": [
      "api_key_application_steps",
      "margin",
      "spot",
      "accessdescription",
      "applyapi",
      "mdx",
      "xtsupport",
      "hc",
      "zh-cn",
      "articles",
      "900006868163-",
      "The",
      "interface",
      "may",
      "require",
      "the",
      "user",
      "API",
      "Key",
      "How",
      "create",
      "KEY",
      "please",
      "refer",
      "href",
      "https",
      "zendesk",
      "com",
      "B7API",
      "BAAPI",
      "target",
      "_blank",
      "here"
    ],
    "url": "/docs/margin-spot/Access Description/applyApi",
    "path": "margin-spot/Access Description/applyApi.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "contactUs",
    "title": "Contact us",
    "description": "",
    "content": "",
    "keywords": [
      "contact",
      "us",
      "margin",
      "spot",
      "accessdescription",
      "contactus",
      "mdx"
    ],
    "url": "/docs/margin-spot/Access Description/contactUs",
    "path": "margin-spot/Access Description/contactUs.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "errorCode",
    "title": "response code",
    "description": "",
    "content": "--- id: response-code title: Response code sidebar_label: Response code sidebar_position: 9 --- HTTP Status Codes | httpStatus | Description | | --- | --- | | 200 | The request is successful, please check the rc and mc sections further | | 404 | Interface does not exist | | 429 | The request is too frequent, please control the request rate according to the speed limit requirement | | 500 | Service exception | | 502 | Gateway exception | | 503 | Service unavailable, please try again later | --- RC (Return Code) | rc | Meaning | | --- | ---------------- | | 0 | Business success | | 1 | Business failure | --- MC (Message Code) | mc | Description | | --- | --- | | SUCCESS | success | | FAILURE | fail | | AUTH_001 | Missing request header validate-appkey | | AUTH_002 | Missing request header validate-timestamp | | AUTH_003 | Missing request header validate-recvwindow | | AUTH_004 | Bad request header validate-recvwindow | | AUTH_005 | Missing request header validate-algorithms | | AUTH_006 | Bad request header validate-algorithms | | AUTH_007 | Missing request header validate-signature | | AUTH_101 | ApiKey does not exist | | AUTH_102 | ApiKey is not activated | | AUTH_103 | Signature error | | AUTH_104 | Unbound IP request | | AUTH_105 | Outdated message | | AUTH_106 | Exceeded apikey permission | | LEVER_ORDER_099 | Already order is being processed | | LEVER_ORDER_082 | The position is currently closed and the operation is not supported for the time being | | LEVER_ORDER_081 | Currently, manual processing is not supported | | LEVER_ORDER_080 | The liquidation is currently in progress and the operation is not supported for the time being | | LEVER_ORDER_032 | There is currently no loan or manual repayments can't be made. Please try again | | LEVER_ORDER_031 | Wrong repayment amount | | LEVER_ORDER_006 | Insufficient leverage capital | | LEVER_ORDER_005 | The current maximum loanable amount in the market is insufficient | | LEVER_ORDER_004 | Insufficient loan amount | | LEVER_ORDER_003 | Wrong loan amount | | LEVER_ORDER_001 | Repeat request | | LEVER_1004 | The current sub-account does not have this transaction permission | | GATEWAY_0001 | Trigger risk control | | GATEWAY_0002 | Trigger risk control | | GATEWAY_0003 | Trigger risk control | | GATEWAY_0004 | Trigger risk control |",
    "keywords": [
      "response",
      "code",
      "margin",
      "spot",
      "accessdescription",
      "errorcode",
      "mdx",
      "title",
      "Response",
      "sidebar_label",
      "sidebar_position",
      "HTTP",
      "Status",
      "Codes",
      "httpStatus",
      "Description",
      "The",
      "request",
      "successful",
      "please",
      "check",
      "the",
      "and",
      "sections",
      "further",
      "Interface",
      "does",
      "not",
      "exist",
      "too",
      "frequent",
      "control",
      "rate",
      "according",
      "speed",
      "limit",
      "requirement",
      "Service",
      "exception",
      "Gateway",
      "unavailable",
      "try",
      "again",
      "later",
      "Return",
      "Code",
      "Meaning",
      "Business",
      "success",
      "failure",
      "Message",
      "SUCCESS",
      "FAILURE",
      "fail",
      "AUTH_001",
      "Missing",
      "header",
      "validate",
      "appkey",
      "AUTH_002",
      "timestamp",
      "AUTH_003",
      "recvwindow",
      "AUTH_004",
      "Bad",
      "AUTH_005",
      "algorithms",
      "AUTH_006",
      "AUTH_007",
      "signature",
      "AUTH_101",
      "ApiKey",
      "AUTH_102",
      "activated",
      "AUTH_103",
      "Signature",
      "error",
      "AUTH_104",
      "Unbound",
      "AUTH_105",
      "Outdated",
      "message",
      "AUTH_106",
      "Exceeded",
      "apikey",
      "permission",
      "LEVER_ORDER_099",
      "Already",
      "order",
      "being",
      "processed",
      "LEVER_ORDER_082",
      "position",
      "currently",
      "closed",
      "operation",
      "supported",
      "for",
      "time",
      "LEVER_ORDER_081",
      "Currently",
      "manual",
      "processing",
      "LEVER_ORDER_080",
      "liquidation",
      "progress",
      "LEVER_ORDER_032",
      "There",
      "loan",
      "repayments",
      "can",
      "made",
      "Please",
      "LEVER_ORDER_031",
      "Wrong",
      "repayment",
      "amount",
      "LEVER_ORDER_006",
      "Insufficient",
      "leverage",
      "capital",
      "LEVER_ORDER_005",
      "current",
      "maximum",
      "loanable",
      "market",
      "insufficient",
      "LEVER_ORDER_004",
      "LEVER_ORDER_003",
      "LEVER_ORDER_001",
      "Repeat",
      "LEVER_1004",
      "sub",
      "account",
      "have",
      "this",
      "transaction",
      "GATEWAY_0001",
      "Trigger",
      "risk",
      "GATEWAY_0002",
      "GATEWAY_0003",
      "GATEWAY_0004"
    ],
    "url": "/docs/margin-spot/Access Description/errorCode",
    "path": "margin-spot/Access Description/errorCode.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "limitRules",
    "title": "Frequency Limiting Rules",
    "description": "",
    "content": "",
    "keywords": [
      "frequency",
      "limiting",
      "rules",
      "margin",
      "spot",
      "accessdescription",
      "limitrules",
      "mdx"
    ],
    "url": "/docs/margin-spot/Access Description/limitRules",
    "path": "margin-spot/Access Description/limitRules.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "frequency-limiting-rules",
    "title": "Frequency Limiting Rules",
    "description": "",
    "content": "Overview Some interfaces will have limited flow control (the corresponding interface will have a limited flow description). The flow limit is mainly divided into gateway flow limit and WAF flow limit. If the interface request triggers the gateway flow limit, 429 will be returned, indicating that the access frequency exceeds the limit, and the IP or apiKey will be blocked. --- Gateway Flow Limiting Types IP Flow Limiting Example: 100/s/ip → The limit is 100 requests per second for each IP. apiKey Flow Limiting Example: 50/s/apiKey → The limit is 50 requests per second for each API Key. --- Notes If you exceed these limits, requests will be rejected and further access may be temporarily blocked. It is recommended to implement retry logic with backoff in your client to avoid continuous 429 errors.",
    "keywords": [
      "frequency",
      "limiting",
      "rules",
      "margin",
      "spot",
      "accessdescription",
      "publicmodule",
      "mdx",
      "ip",
      "apiKey",
      "Overview",
      "Some",
      "interfaces",
      "will",
      "have",
      "limited",
      "flow",
      "control",
      "the",
      "corresponding",
      "interface",
      "description",
      "The",
      "limit",
      "mainly",
      "divided",
      "into",
      "gateway",
      "and",
      "WAF",
      "request",
      "triggers",
      "returned",
      "indicating",
      "that",
      "access",
      "exceeds",
      "blocked",
      "Gateway",
      "Flow",
      "Limiting",
      "Types",
      "Example",
      "requests",
      "per",
      "second",
      "for",
      "each",
      "API",
      "Key",
      "Notes",
      "you",
      "exceed",
      "these",
      "limits",
      "rejected",
      "further",
      "may",
      "temporarily",
      "recommended",
      "implement",
      "retry",
      "logic",
      "with",
      "backoff",
      "your",
      "client",
      "avoid",
      "continuous",
      "errors"
    ],
    "url": "/docs/margin-spot/Access Description/publicModule",
    "path": "margin-spot/Access Description/publicModule.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "RestApi",
    "title": "Untitled",
    "description": "RestApi",
    "content": "production environment: https://sapi.xt.com",
    "keywords": [
      "untitled",
      "restapi",
      "margin",
      "spot",
      "accessdescription",
      "mdx",
      "sapi",
      "production",
      "environment",
      "https",
      "com"
    ],
    "url": "/docs/margin-spot/Access Description/BasicInformationOfTheInterface",
    "path": "margin-spot/Access Description/BasicInformationOfTheInterface.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "returnFormat",
    "title": "response format",
    "description": "",
    "content": "",
    "keywords": [
      "response",
      "format",
      "margin",
      "spot",
      "accessdescription",
      "returnformat",
      "mdx"
    ],
    "url": "/docs/margin-spot/Access Description/returnFormat",
    "path": "margin-spot/Access Description/returnFormat.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "signature-instructions",
    "title": "Signature Instructions",
    "description": "",
    "content": "Since XT provides some open interfaces for third-party platforms, data security must be considered. For example: preventing data tampering, avoiding outdated data, avoiding repeated submissions, and controlling access frequency. Among them, data tampering is the most critical issue. Steps Apply for appkey and secretkey Apply in the user center first. Each user’s appkey and secretkey are different. Add timestamp Value should be the Unix timestamp in milliseconds when the request is sent. Server verifies data freshness based on this value. Add signature Generated according to the signature algorithm rules. This ensures request integrity. Add recvwindow (valid time window) Defines request validity time. When a request is received, server checks timestamp: Must fall between 2–60 seconds. Requests older than 5000 ms are invalid. Requests ahead of server time > 1 second are also invalid. Default recommended: ≤ 5 seconds. You can adjust recvWindow for high-frequency trading to better match latency. Add algorithm (signature method/algorithm) User calculates the signature with hashing protocol. Recommended: HmacSHA256. Supported: HmacMD5, HmacSHA1, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512. --- Request Header Examples | Name | Mandatory | Example | Description | | --- | --- | --- | --- | | validate-appkey | Yes | dbefbc809e3e83c283a984c3a1459732ea7db1360ca80c5c2c8867408d28cc83 | AppKey | | validate-timestamp | Yes | 1641446237201 | Request timestamp | | validate-signature | Yes | 0a7d0b5e802eb5e52ac0cfcd6311b0faba6e2503a9a8d1e2364b38617877574d | Signature | | validate-recvwindow | Yes | 5000 (millisecond) | Request valid time | | validate-algorithms | Yes | HmacSHA256 | Default is HmacSHA256, supports multiple algorithms | | validate-signversion | No | 1.0 | Reserved field, signed version number |",
    "keywords": [
      "signature",
      "instructions",
      "margin",
      "spot",
      "accessdescription",
      "signstatement",
      "mdx",
      "algorithm",
      "Since",
      "provides",
      "some",
      "open",
      "interfaces",
      "for",
      "third",
      "party",
      "platforms",
      "data",
      "security",
      "must",
      "considered",
      "For",
      "example",
      "preventing",
      "tampering",
      "avoiding",
      "outdated",
      "repeated",
      "submissions",
      "and",
      "controlling",
      "access",
      "frequency",
      "Among",
      "them",
      "the",
      "most",
      "critical",
      "issue",
      "Steps",
      "Apply",
      "appkey",
      "secretkey",
      "user",
      "center",
      "first",
      "Each",
      "are",
      "different",
      "Add",
      "timestamp",
      "Value",
      "should",
      "Unix",
      "milliseconds",
      "when",
      "request",
      "sent",
      "Server",
      "verifies",
      "freshness",
      "based",
      "this",
      "value",
      "Generated",
      "according",
      "rules",
      "This",
      "ensures",
      "integrity",
      "recvwindow",
      "valid",
      "time",
      "window",
      "Defines",
      "validity",
      "When",
      "received",
      "server",
      "checks",
      "Must",
      "fall",
      "between",
      "seconds",
      "Requests",
      "older",
      "than",
      "invalid",
      "ahead",
      "second",
      "also",
      "Default",
      "recommended",
      "You",
      "can",
      "adjust",
      "recvWindow",
      "high",
      "trading",
      "better",
      "match",
      "latency",
      "method",
      "User",
      "calculates",
      "with",
      "hashing",
      "protocol",
      "Recommended",
      "HmacSHA256",
      "Supported",
      "HmacMD5",
      "HmacSHA1",
      "HmacSHA224",
      "HmacSHA384",
      "HmacSHA512",
      "Request",
      "Header",
      "Examples",
      "Name",
      "Mandatory",
      "Example",
      "Description",
      "validate",
      "Yes",
      "AppKey",
      "Signature",
      "millisecond",
      "algorithms",
      "supports",
      "multiple",
      "signversion",
      "Reserved",
      "field",
      "signed",
      "version",
      "number"
    ],
    "url": "/docs/margin-spot/Access Description/signStatement",
    "path": "margin-spot/Access Description/signStatement.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "signature-generation",
    "title": "Signature Generation",
    "description": "",
    "content": "Example Take https://sapi.xt.com/v4/order as an example. Below is an example appKey and secretKey (for demonstration only, using echo/openssl/curl in Linux bash): appKey: 3976eb88-76d0-4f6e-a6b2-a57980770085 secretKey: bc6630d0231fda5cd98794f52c4998659beda290 --- Header Example validate-algorithms: HmacSHA256 validate-appkey: 3976eb88-76d0-4f6e-a6b2-a57980770085 validate-recvwindow: 5000 validate-timestamp: 1641446237201 validate-signature: 2b5eb11e18796d12d88f13dc27dbbd02c2cc51ff7059765ed9821957d82bb4d9 --- Request Data Example `json { \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"side\": \"BUY\", \"symbol\": \"btc_usdt\", \"price\": \"39000\", \"quantity\": \"2\" } `",
    "keywords": [
      "signature",
      "generation",
      "margin",
      "spot",
      "accessdescription",
      "signsteps",
      "mdx",
      "sapi",
      "v4",
      "order",
      "openssl",
      "curl",
      "Example",
      "Take",
      "https",
      "com",
      "example",
      "Below",
      "appKey",
      "and",
      "secretKey",
      "for",
      "demonstration",
      "only",
      "using",
      "echo",
      "Linux",
      "bash",
      "a6b2",
      "a57980770085",
      "Header",
      "validate",
      "algorithms",
      "HmacSHA256",
      "appkey",
      "recvwindow",
      "timestamp",
      "Request",
      "Data",
      "json",
      "type",
      "LIMIT",
      "timeInForce",
      "GTC",
      "side",
      "BUY",
      "symbol",
      "btc_usdt",
      "price",
      "quantity"
    ],
    "url": "/docs/margin-spot/Access Description/signSteps",
    "path": "margin-spot/Access Description/signSteps.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "Get balance by symbol",
    "title": "Get balance by symbol",
    "description": "",
    "content": "Description /v4/lever/balance Parameters | Name | Type | Mandatory | Default | Description | Ranges | | ------ | ------ | --------- | ------- | ----------------------- | ------ | | symbol | string | Yes | – | Symbol, e.g. BTC_USDT | – | --- Response `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [{}], \"result\": { \"btcLoanAmount\": 0, // Convert BTC loan assets \"btcNetAmount\": 0, // Convert BTC net assets \"symbol\": \"string\", // Symbol \"symbolId\": 0, // Symbol ID \"usdtLoanAmount\": 0, // Convert USDT loan assets \"usdtNetAmount\": 0, // Convert USDT net assets \"base\": { \"availableAmount\": \"string\", // Available amount \"capitalAmount\": \"string\", // Capital amount \"currency\": \"string\", // Currency \"currencyId\": 0, // Currency ID \"frozenAmount\": \"string\", // Frozen amount \"interestAmount\": \"string\", // Interest amount outstanding \"loanAmount\": \"string\", // Loan amount \"totalAmount\": \"string\", // Total amount \"updatedTime\": 0 // Update time }, \"quote\": { \"availableAmount\": \"string\", // Available amount \"capitalAmount\": \"string\", // Capital amount \"currency\": \"string\", // Currency \"currencyId\": 0, // Currency ID \"frozenAmount\": \"string\", // Frozen amount \"interestAmount\": \"string\", // Interest amount outstanding \"loanAmount\": \"string\", // Loan amount \"totalAmount\": \"string\", // Total amount \"updatedTime\": 0 // Update time } } } `",
    "keywords": [
      "get",
      "balance",
      "by",
      "symbol",
      "margin",
      "spot",
      "mdx",
      "v4",
      "lever",
      "Description",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Ranges",
      "string",
      "Yes",
      "Symbol",
      "BTC_USDT",
      "Response",
      "json",
      "SUCCESS",
      "result",
      "btcLoanAmount",
      "Convert",
      "BTC",
      "loan",
      "assets",
      "btcNetAmount",
      "net",
      "symbolId",
      "usdtLoanAmount",
      "USDT",
      "usdtNetAmount",
      "base",
      "availableAmount",
      "Available",
      "amount",
      "capitalAmount",
      "Capital",
      "currency",
      "Currency",
      "currencyId",
      "frozenAmount",
      "Frozen",
      "interestAmount",
      "Interest",
      "outstanding",
      "loanAmount",
      "Loan",
      "totalAmount",
      "Total",
      "updatedTime",
      "Update",
      "time",
      "quote"
    ],
    "url": "/docs/margin-spot/Balance/balance",
    "path": "margin-spot/Balance/balance.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "Get interest list",
    "title": "Get interest list",
    "description": "",
    "content": "Description /v4/lever/interest Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | symbol | string | No | – | Trading pair symbol | – | | startTime | long | Yes | – | Start time | – | | endTime | long | Yes | – | End time | – | | fromId | long | No | – | Page starting ID | – | | direction | string | Yes | – | Page direction (NEXT / PREV) | NEXT;PREV | | limit | int | No | 20 | Page limit | – | --- Response `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [{}], \"result\": { \"hasNext\": true, // Whether has next page \"hasPrev\": true, // Whether has previous page \"items\": [ { \"id\": \"string\", // ID \"amount\": 0, // Amount \"currency\": \"string\", // Currency \"currencyId\": 0, // Currency ID \"symbol\": \"string\", // Symbol \"symbolId\": 0, // Symbol ID \"dailyInterestRate\": 0, // Daily interest rate \"source\": \"FIX_JOB\", // Source, FIX_JOB / USER \"createTime\": 0 // Create time } ] } } `",
    "keywords": [
      "get",
      "interest",
      "list",
      "margin",
      "spot",
      "balance",
      "mdx",
      "v4",
      "lever",
      "Description",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Ranges",
      "symbol",
      "string",
      "Trading",
      "pair",
      "startTime",
      "long",
      "Yes",
      "Start",
      "time",
      "endTime",
      "End",
      "fromId",
      "Page",
      "starting",
      "direction",
      "NEXT",
      "PREV",
      "limit",
      "int",
      "Response",
      "json",
      "SUCCESS",
      "result",
      "hasNext",
      "true",
      "Whether",
      "has",
      "next",
      "page",
      "hasPrev",
      "previous",
      "items",
      "amount",
      "Amount",
      "currency",
      "Currency",
      "currencyId",
      "Symbol",
      "symbolId",
      "dailyInterestRate",
      "Daily",
      "rate",
      "source",
      "FIX_JOB",
      "Source",
      "USER",
      "createTime",
      "Create"
    ],
    "url": "/docs/margin-spot/Balance/interest",
    "path": "margin-spot/Balance/interest.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "Get loan list",
    "title": "Get loan list",
    "description": "",
    "content": "Description /v4/lever/loan Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | symbol | string | Yes | – | Trading pair symbol | – | | startTime | long | Yes | – | Start time | – | | endTime | long | Yes | – | End time | – | | fromId | long | No | – | Page starting ID | – | | direction | string | Yes | – | Page direction (NEXT / PREV) | NEXT;PREV | | limit | int | No | 20 | Page limit | – | --- Response `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [{}], \"result\": { \"hasNext\": true, // Whether has next page \"hasPrev\": true, // Whether has previous page \"items\": [ { \"id\": \"string\", // ID \"amount\": 0, // Amount \"currency\": \"string\", // Currency \"currencyId\": 0, // Currency ID \"symbol\": \"string\", // Symbol \"symbolId\": 0, // Symbol ID \"createTime\": 0 // Create time } ] } } `",
    "keywords": [
      "get",
      "loan",
      "list",
      "margin",
      "spot",
      "balance",
      "mdx",
      "v4",
      "lever",
      "Description",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Ranges",
      "symbol",
      "string",
      "Yes",
      "Trading",
      "pair",
      "startTime",
      "long",
      "Start",
      "time",
      "endTime",
      "End",
      "fromId",
      "Page",
      "starting",
      "direction",
      "NEXT",
      "PREV",
      "limit",
      "int",
      "Response",
      "json",
      "SUCCESS",
      "result",
      "hasNext",
      "true",
      "Whether",
      "has",
      "next",
      "page",
      "hasPrev",
      "previous",
      "items",
      "amount",
      "Amount",
      "currency",
      "Currency",
      "currencyId",
      "Symbol",
      "symbolId",
      "createTime",
      "Create"
    ],
    "url": "/docs/margin-spot/Balance/loan",
    "path": "margin-spot/Balance/loan.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "Get repay list",
    "title": "Get repay list",
    "description": "",
    "content": "Description /v4/lever/repay Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | symbol | string | No | – | Trading pair symbol | – | | startTime | long | Yes | – | Start time | – | | endTime | long | No | – | End time | – | | fromId | long | No | – | Page starting ID | – | | direction | string | Yes | – | Page direction (NEXT / PREV) | NEXT;PREV | | limit | int | No | 20 | Page limit | – | --- Response `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [{}], \"result\": { \"hasNext\": true, // Whether has next page \"hasPrev\": true, // Whether has previous page \"items\": [ { \"id\": \"string\", // ID \"amount\": 0, // Amount \"currency\": \"string\", // Currency \"currencyId\": 0, // Currency ID \"symbol\": \"string\", // Symbol \"symbolId\": 0, // Symbol ID \"interestAmount\": 0, // Interest amount \"type\": \"MANUAL\", // Type: MANUAL / SYSTEM \"createTime\": 0 // Create time } ] } } `",
    "keywords": [
      "get",
      "repay",
      "list",
      "margin",
      "spot",
      "balance",
      "mdx",
      "v4",
      "lever",
      "Description",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Ranges",
      "symbol",
      "string",
      "Trading",
      "pair",
      "startTime",
      "long",
      "Yes",
      "Start",
      "time",
      "endTime",
      "End",
      "fromId",
      "Page",
      "starting",
      "direction",
      "NEXT",
      "PREV",
      "limit",
      "int",
      "Response",
      "json",
      "SUCCESS",
      "result",
      "hasNext",
      "true",
      "Whether",
      "has",
      "next",
      "page",
      "hasPrev",
      "previous",
      "items",
      "amount",
      "Amount",
      "currency",
      "Currency",
      "currencyId",
      "Symbol",
      "symbolId",
      "interestAmount",
      "Interest",
      "type",
      "MANUAL",
      "SYSTEM",
      "createTime",
      "Create"
    ],
    "url": "/docs/margin-spot/Balance/repay",
    "path": "margin-spot/Balance/repay.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "Create order",
    "title": "Create order",
    "description": "",
    "content": "Description /v4/lever/order --- Parameters | Name | Type | Mandatory | Default | Description | Ranges | | --- | --- | --- | --- | --- | --- | | marketName | string | Yes | – | Trading pair, e.g. BTC_USDT | – | | coinName | string | Yes | – | Coin name (lowercase), e.g. btc | – | | amount | number | Yes | – | Example: 8000 | – | | type | string | Yes | – | Order type, LOAN/REPAY | – | | media | string | No | – | Media, e.g. btok | – | | mediaChannel | string | No | – | Media channel | – | --- Limit Flow Rules",
    "keywords": [
      "create",
      "order",
      "margin",
      "spot",
      "market",
      "mdx",
      "v4",
      "lever",
      "REPAY",
      "Description",
      "Parameters",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Ranges",
      "marketName",
      "string",
      "Yes",
      "Trading",
      "pair",
      "BTC_USDT",
      "coinName",
      "Coin",
      "name",
      "lowercase",
      "btc",
      "amount",
      "number",
      "Example",
      "type",
      "Order",
      "LOAN",
      "media",
      "Media",
      "btok",
      "mediaChannel",
      "channel",
      "Limit",
      "Flow",
      "Rules"
    ],
    "url": "/docs/margin-spot/Market/order",
    "path": "margin-spot/Market/order.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "symbol",
    "title": "Untitled",
    "description": "",
    "content": "=",
    "keywords": ["untitled", "margin", "spot", "market", "symbol", "mdx"],
    "url": "/docs/margin-spot/Market/symbol",
    "path": "margin-spot/Market/symbol.mdx",
    "type": "spot",
    "category": "margin-spot"
  },
  {
    "id": "index",
    "title": "Upgrading Docusaurus",
    "description": "",
    "content": "Upgrading Docusaurus Docusaurus versioning is based on the major.minor.patch scheme and respects Semantic Versioning. Breaking changes are only released on major version upgrades, and thoroughly documented in the following upgrade guides. import DocCardList from '@theme/DocCardList'; <DocCardList /> Troubleshooting upgrades When upgrading Docusaurus you may experience issues caused by mismatching cached dependencies - there are a few troubleshooting steps you should perform to resolve these common issues before reporting a bug or seeking support. Run the clear command This CLI command is used to clear a Docusaurus site's generated assets, caches and build artifacts. `bash npm2yarn npm run clear ` Remove node_modules and your lock file(s) Remove the node_modules folder and your package manager's lock file using the following: <Tabs> <TabItem label=\"Bash\" value=\"bash\"> `bash rm -rf node_modules yarn.lock package-lock.json ` </TabItem> <TabItem label=\"PowerShell\" value=\"powershell\"> `powershell @('node_modules','yarn.lock','package-lock.json') | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue ` </TabItem> </Tabs> Then reinstall packages and regenerate the lock file using: `bash npm2yarn npm install `",
    "keywords": [
      "upgrading",
      "docusaurus",
      "migration",
      "index",
      "mdx",
      "DocCardList",
      "TabItem",
      "Tabs",
      "Upgrading",
      "Docusaurus",
      "versioning",
      "based",
      "the",
      "major",
      "minor",
      "patch",
      "scheme",
      "and",
      "respects",
      "Semantic",
      "Versioning",
      "Breaking",
      "changes",
      "are",
      "only",
      "released",
      "version",
      "upgrades",
      "thoroughly",
      "documented",
      "following",
      "upgrade",
      "guides",
      "import",
      "from",
      "theme",
      "Troubleshooting",
      "When",
      "you",
      "may",
      "experience",
      "issues",
      "caused",
      "mismatching",
      "cached",
      "dependencies",
      "there",
      "few",
      "troubleshooting",
      "steps",
      "should",
      "perform",
      "resolve",
      "these",
      "common",
      "before",
      "reporting",
      "bug",
      "seeking",
      "support",
      "Run",
      "clear",
      "command",
      "This",
      "CLI",
      "used",
      "site",
      "generated",
      "assets",
      "caches",
      "build",
      "artifacts",
      "bash",
      "npm2yarn",
      "npm",
      "run",
      "Remove",
      "node_modules",
      "your",
      "lock",
      "file",
      "folder",
      "package",
      "manager",
      "using",
      "label",
      "Bash",
      "value",
      "yarn",
      "json",
      "PowerShell",
      "powershell",
      "Item",
      "Force",
      "Recurse",
      "ErrorAction",
      "SilentlyContinue",
      "Then",
      "reinstall",
      "packages",
      "regenerate",
      "install"
    ],
    "url": "/docs/migration/index",
    "path": "migration/index.mdx",
    "type": "general",
    "category": "migration"
  },
  {
    "id": "migration-automated",
    "title": "Automated migration",
    "description": "",
    "content": "Automated migration The migration CLI automatically migrates your v1 website to a v2 website. :::info Manual work is still required after using the migration CLI, as we can't automate a full migration ::: The migration CLI migrates: Site configurations (from siteConfig.js to docusaurus.config.js) package.json sidebars.json /docs /blog /static versioned_sidebar.json and /versioned_docs if your site uses versioning To use the migration CLI, follow these steps: Before using the migration CLI, ensure that /docs, /blog, /static, sidebars.json, siteConfig.js, package.json follow the expected structure. To migrate your v1 website, run the migration CLI with the appropriate filesystem paths: `bash migration command format npx @docusaurus/migrate migrate <v1 website directory> <desired v2 website directory> example npx @docusaurus/migrate migrate ./v1-website ./v2-website ` To view your new website locally, go into your v2 website's directory and start your development server. `bash npm2yarn cd ./v2-website npm install npm start ` :::danger The migration CLI updates existing files. Be sure to have committed them first! ::: Options {#options} You can add option flags to the migration CLI to automatically migrate Markdown content and pages to v2. It is likely that you will still need to make some manual changes to achieve your desired result. | Name | Description | | -------- | ------------------------------------------------------ | | --mdx | Add this flag to convert Markdown to MDX automatically | | --page | Add this flag to migrate pages automatically | `bash example using options npx @docusaurus/migrate migrate --mdx --page ./v1-website ./v2-website ` :::danger The migration of pages and MDX is still a work in progress. We recommend you to try to run the pages without these options, commit, and then try to run the migration again with the --page and --mdx options. This way, you'd be able to easily inspect and fix the diff. :::",
    "keywords": [
      "automated",
      "migration",
      "v2",
      "mdx",
      "docs",
      "blog",
      "static",
      "versioned_docs",
      "migrate",
      "v1-website",
      "v2-website",
      "Automated",
      "The",
      "CLI",
      "automatically",
      "migrates",
      "your",
      "website",
      "info",
      "Manual",
      "work",
      "still",
      "required",
      "after",
      "using",
      "the",
      "can",
      "automate",
      "full",
      "Site",
      "configurations",
      "from",
      "siteConfig",
      "docusaurus",
      "config",
      "package",
      "json",
      "sidebars",
      "versioned_sidebar",
      "and",
      "site",
      "uses",
      "versioning",
      "use",
      "follow",
      "these",
      "steps",
      "Before",
      "ensure",
      "that",
      "expected",
      "structure",
      "run",
      "with",
      "appropriate",
      "filesystem",
      "paths",
      "bash",
      "command",
      "format",
      "npx",
      "directory",
      "desired",
      "example",
      "view",
      "new",
      "locally",
      "into",
      "start",
      "development",
      "server",
      "npm2yarn",
      "npm",
      "install",
      "danger",
      "updates",
      "existing",
      "files",
      "sure",
      "have",
      "committed",
      "them",
      "first",
      "Options",
      "options",
      "You",
      "add",
      "option",
      "flags",
      "Markdown",
      "content",
      "pages",
      "likely",
      "you",
      "will",
      "need",
      "make",
      "some",
      "manual",
      "changes",
      "achieve",
      "result",
      "Name",
      "Description",
      "Add",
      "this",
      "flag",
      "convert",
      "MDX",
      "page",
      "progress",
      "recommend",
      "try",
      "without",
      "commit",
      "then",
      "again",
      "This",
      "way",
      "able",
      "easily",
      "inspect",
      "fix",
      "diff"
    ],
    "url": "/docs/migration/v2/migration-automated",
    "path": "migration/v2/migration-automated.mdx",
    "type": "general",
    "category": "migration"
  },
  {
    "id": "migration-manual",
    "title": "Manual migration",
    "description": "",
    "content": "Manual migration This manual migration process should be run after the automated migration process, to complete the missing parts, or debug issues in the migration CLI output. Project setup {#project-setup} package.json {#packagejson} Scoped package names {#scoped-package-names} In Docusaurus 2, we use scoped package names: docusaurus → @docusaurus/core This provides a clear distinction between Docusaurus' official packages and community maintained packages. In another words, all Docusaurus' official packages are namespaced under @docusaurus/. Meanwhile, the default doc site functionalities provided by Docusaurus 1 are now provided by @docusaurus/preset-classic. Therefore, we need to add this dependency as well: `diff title=\"package.json\" { dependencies: { \"docusaurus\": \"^1.x.x\", \"@docusaurus/core\": \"^2.0.0-beta.0\", \"@docusaurus/preset-classic\": \"^2.0.0-beta.0\", } } ` :::tip Please use the most recent Docusaurus 2 version, which you can check out here (using the latest tag). ::: CLI commands {#cli-commands} Meanwhile, CLI commands are renamed to docusaurus <command> (instead of docusaurus-command). The \"scripts\" section of your package.json should be updated as follows: `json {3-6} title=\"package.json\" { \"scripts\": { \"start\": \"docusaurus start\", \"build\": \"docusaurus build\", \"swizzle\": \"docusaurus swizzle\", \"deploy\": \"docusaurus deploy\" // ... } } ` A typical Docusaurus 2 package.json may look like this: `json title=\"package.json\" { \"scripts\": { \"docusaurus\": \"docusaurus\", \"start\": \"docusaurus start\", \"build\": \"docusaurus build\", \"swizzle\": \"docusaurus swizzle\", \"deploy\": \"docusaurus deploy\", \"serve\": \"docusaurus serve\", \"clear\": \"docusaurus clear\" }, \"dependencies\": { \"@docusaurus/core\": \"^2.0.0-beta.0\", \"@docusaurus/preset-classic\": \"^2.0.0-beta.0\", \"clsx\": \"^1.1.1\", \"react\": \"^17.0.2\", \"react-dom\": \"^17.0.2\" }, \"browserslist\": { \"production\": [\">0.5%\", \"not dead\", \"not op_mini all\"], \"development\": [ \"last 1 chrome version\", \"last 1 firefox version\", \"last 1 safari version\" ] } } ` Update references to the build directory {#update-references-to-the-build-directory} In Docusaurus 1, all the build artifacts are located within website/build/<PROJECT_NAME>. In Docusaurus 2, it is now moved to just website/build. Make sure that you update your deployment configuration to read the generated files from the correct build directory. If you are deploying to GitHub pages, make sure to run yarn deploy instead of yarn publish-gh-pages script. .gitignore {#gitignore} The .gitignore in your website should contain: `bash title=\".gitignore\" dependencies /node_modules production /build generated files .docusaurus .cache-loader misc .DS_Store .env.local .env.development.local .env.test.local .env.production.local npm-debug.log* yarn-debug.log* yarn-error.log* ` README {#readme} The D1 website may have an existing README file. You can modify it to reflect the D2 changes, or copy the default Docusaurus v2 README. Site configurations {#site-configurations} docusaurus.config.js {#docusaurusconfigjs} Rename siteConfig.js to docusaurus.config.js. In Docusaurus 2, we split each functionality (blog, docs, pages) into plugins for modularity. Presets are bundles of plugins and for backward compatibility we built a @docusaurus/preset-classic preset which bundles most of the essential plugins present in Docusaurus 1. Add the following preset configuration to your docusaurus.config.js. `js title=\"docusaurus.config.js\" module.exports = { // ... presets: [ [ '@docusaurus/preset-classic', { docs: { // Docs folder path relative to website dir. path: '../docs', // Sidebars file relative to website dir. sidebarPath: require.resolve('./sidebars.json'), }, // ... }, ], ], }; ` We recommend moving the docs folder into the website folder and that is also the default directory structure in v2. Vercel supports Docusaurus project deployments out-of-the-box if the docs directory is within the website. It is also generally better for the docs to be within the website so that the docs and the rest of the website code are co-located within one website directory. If you are migrating your Docusaurus v1 website, and there are pending documentation pull requests, you can temporarily keep the /docs folder to its original place, to avoid producing conflicts. Refer to migration guide below for each field in siteConfig.js. Updated fields {#updated-fields} baseUrl, tagline, title, url, favicon, organizationName, projectName, githubHost, scripts, stylesheets {#baseurl-tagline-title-url-favicon-organizationname-projectname-githubhost-scripts-stylesheets} No actions needed, these configuration fields were not modified. colors {#colors} Deprecated. We wrote a custom CSS framework for Docusaurus 2 called Infima which uses CSS variables for theming. The docs are not quite ready yet and we will update here when it is. To overwrite Infima's CSS variables, create your own CSS file (e.g. ./src/css/custom.css) and import it globally by passing it as an option to @docusaurus/preset-classic: `js {7-9} title=\"docusaurus.config.js\" module.exports = { // ... presets: [ [ '@docusaurus/preset-classic', { theme: { customCss: [require.resolve('./src/css/custom.css')], }, }, ], ], }; ` Infima uses 7 shades of each color. `css title=\"/src/css/custom.css\" / You can override the default Infima variables here. Note: this is not a complete list of --ifm- variables. */ :root { --ifm-color-primary: #25c2a0; --ifm-color-primary-dark: rgb(33, 175, 144); --ifm-color-primary-darker: rgb(31, 165, 136); --ifm-color-primary-darkest: rgb(26, 136, 112); --ifm-color-primary-light: rgb(70, 203, 174); --ifm-color-primary-lighter: rgb(102, 212, 189); --ifm-color-primary-lightest: rgb(146, 224, 208); } ` We recommend using ColorBox to find the different shades of colors for your chosen primary color. Alternatively, use the following tool to generate the different shades for your website and copy the variables into src/css/custom.css. import ColorGenerator from '@site/src/components/ColorGenerator'; <ColorGenerator /> footerIcon, copyright, ogImage, twitterImage, docsSideNavCollapsible {#footericon-copyright-ogimage-twitterimage-docssidenavcollapsible} Site meta info such as assets, SEO, copyright info are now handled by themes. To customize them, use the themeConfig field in your docusaurus.config.js: `js title=\"docusaurus.config.js\" module.exports = { // ... themeConfig: { footer: { logo: { alt: 'Meta Open Source Logo', src: '/img/meta_oss_logo.png', href: 'https://opensource.facebook.com/', }, copyright: Copyright © ${new Date().getFullYear()} Facebook, Inc., // You can also put own HTML here. }, image: 'img/docusaurus.png', // ... }, }; ` headerIcon, headerLinks {#headericon-headerlinks} In Docusaurus 1, header icon and header links were root fields in siteConfig: `js title=\"siteConfig.js\" headerIcon: 'img/docusaurus.svg', headerLinks: [ { doc: \"doc1\", label: \"Getting Started\" }, { page: \"help\", label: \"Help\" }, { href: \"https://github.com/\", label: \"GitHub\" }, { blog: true, label: \"Blog\" }, ], ` Now, these two fields are both handled by the theme: `js {6-19} title=\"docusaurus.config.js\" module.exports = { // ... themeConfig: { navbar: { title: 'Docusaurus', logo: { alt: 'Docusaurus Logo', src: 'img/docusaurus.svg', }, items: [ {to: 'docs/doc1', label: 'Getting Started', position: 'left'}, {to: 'help', label: 'Help', position: 'left'}, { href: 'https://github.com/', label: 'GitHub', position: 'right', }, {to: 'blog', label: 'Blog', position: 'left'}, ], }, // ... }, }; ` algolia {#algolia} `js {4-8} title=\"docusaurus.config.js\" module.exports = { // ... themeConfig: { algolia: { apiKey: '47ecd3b21be71c5822571b9f59e52544', indexName: 'docusaurus-2', algoliaOptions: { //... }, }, // ... }, }; ` :::warning Your Algolia DocSearch v1 config (found here) should be updated for Docusaurus v2 (example). You can contact the DocSearch team (@shortcuts, @s-pace) for support. They can update it for you and trigger a recrawl of your site to restore the search (otherwise you will have to wait up to 24h for the next scheduled crawl) ::: blogSidebarCount {#blogsidebarcount} Deprecated. Pass it as a blog option to @docusaurus/preset-classic instead: `js {8} title=\"docusaurus.config.js\" module.exports = { // ... presets: [ [ '@docusaurus/preset-classic', { blog: { postsPerPage: 10, }, // ... }, ], ], }; ` cname {#cname} Deprecated. Create a CNAME file in your static folder instead with your custom domain. Files in the static folder will be copied into the root of the build folder during execution of the build command. customDocsPath, docsUrl, editUrl, enableUpdateBy, enableUpdateTime {#customdocspath-docsurl-editurl-enableupdateby-enableupdatetime} BREAKING: editUrl should point to (website) Docusaurus project instead of docs directory. Deprecated. Pass it as an option to @docusaurus/preset-classic docs instead: `js {8-20} title=\"docusaurus.config.js\" module.exports = { // ... presets: [ [ '@docusaurus/preset-classic', { docs: { // Equivalent to customDocsPath. path: 'docs', // Equivalent to editUrl but should point to website dir instead of website/docs. editUrl: 'https://github.com/facebook/docusaurus/edit/main/website', // Equivalent to docsUrl. routeBasePath: 'docs', // Remark and Rehype plugins passed to MDX. Replaces markdownOptions and markdownPlugins. remarkPlugins: [], rehypePlugins: [], // Equivalent to enableUpdateBy. showLastUpdateAuthor: true, // Equivalent to enableUpdateTime. showLastUpdateTime: true, }, // ... }, ], ], }; ` gaTrackingId {#gatrackingid} `js title=\"docusaurus.config.js\" module.exports = { // ... presets: [ [ '@docusaurus/preset-classic', { // ... // highlight-start googleAnalytics: { trackingID: 'UA-141789564-1', }, // highlight-end }, ], ], }; ` gaGtag {#gagtag} `js title=\"docusaurus.config.js\" module.exports = { // ... presets: [ [ '@docusaurus/preset-classic', { // ... // highlight-start gtag: { trackingID: 'UA-141789564-1', }, // highlight-end }, ], ], }; ` Removed fields {#removed-fields} The following fields are all deprecated, you may remove from your configuration file. blogSidebarTitle cleanUrl - Clean URL is used by default now. defaultVersionShown - Versioning is not ported yet. You'd be unable to migration to Docusaurus 2 if you are using versioning. Stay tuned. disableHeaderTitle disableTitleTagline docsSideNavCollapsible is available at docsPluginOptions.sidebarCollapsible, and this is turned on by default now. facebookAppId facebookComments facebookPixelId fonts highlight - We now use Prism instead of highlight.js. markdownOptions - We use MDX in v2 instead of Remarkable. Your Markdown options have to be converted to Remark/Rehype plugins. markdownPlugins - We use MDX in v2 instead of Remarkable. Your Markdown plugins have to be converted to Remark/Rehype plugins. manifest onPageNav - This is turned on by default now. separateCss - It can imported in the same manner as custom.css mentioned above. scrollToTop scrollToTopOptions translationRecruitingLink twitter twitterUsername useEnglishUrl users usePrism - We now use Prism instead of highlight.js wrapPagesHTML We intend to implement many of the deprecated config fields as plugins in future. Help will be appreciated! Urls {#urls} In v1, all pages were available with or without the .html extension. For example, these 2 pages exist: https://v1.docusaurus.io/docs/en/installation https://v1.docusaurus.io/docs/en/installation.html If cleanUrl was: true: links would target /installation false: links would target /installation.html In v2, by default, the canonical page is /installation, and not /installation.html. If you had cleanUrl: false in v1, it's possible that people published links to /installation.html. For SEO reasons, and avoiding breaking links, you should configure server-side redirect rules on your hosting provider. As an escape hatch, you could use @docusaurus/plugin-client-redirects to create client-side redirects from /installation.html to /installation. `js module.exports = { plugins: [ [ '@docusaurus/plugin-client-redirects', { fromExtensions: ['html'], }, ], ], }; ` If you want to keep the .html extension as the canonical URL of a page, docs can declare a slug: installation.html front matter. Components {#components} Sidebar {#sidebar} In previous version, nested sidebar category is not allowed and sidebar category can only contain doc ID. However, v2 allows infinite nested sidebar and we have many types of Sidebar Item other than document. You'll have to migrate your sidebar if it contains category type. Rename subcategory to category and ids to items. `diff title=\"sidebars.json\" { type: 'subcategory', type: 'category', label: 'My Example Subcategory', items: ['doc1'], ids: ['doc1'] }, ` Footer {#footer} website/core/Footer.js is no longer needed. If you want to modify the default footer provided by Docusaurus, swizzle it: `bash npm2yarn npm run swizzle @docusaurus/theme-classic Footer ` This will copy the current <Footer /> component used by the theme to a src/theme/Footer directory under the root of your site, you may then edit this component for customization. Do not swizzle the Footer just to add the logo on the left. The logo is intentionally removed in v2 and moved to the bottom. Just configure the footer in docusaurus.config.js with themeConfig.footer: `js module.exports = { themeConfig: { footer: { logo: { alt: 'Meta Open Source Logo', src: '/img/meta_oss_logo.png', href: 'https://opensource.facebook.com', }, }, }, }; ` Pages {#pages} Please refer to creating pages to learn how Docusaurus 2 pages work. After reading that, notice that you have to move pages/en files in v1 to src/pages instead. In Docusaurus v1, pages received the siteConfig object as props. In Docusaurus v2, get the siteConfig object from useDocusaurusContext instead. In v2, you have to apply the theme layout around each page. The Layout component takes metadata props. CompLibrary is deprecated in v2, so you have to write your own React component or use Infima styles (Docs will be available soon, sorry about that! In the meanwhile, inspect the V2 website or view https://infima.dev/ to see what styles are available). You can migrate CommonJS to ES6 imports/exports. Here's a typical Docusaurus v2 page: `jsx import React from 'react'; import Link from '@docusaurus/Link'; import useDocusaurusContext from '@docusaurus/useDocusaurusContext'; import Layout from '@theme/Layout'; const MyPage = () => { const {siteConfig} = useDocusaurusContext(); return ( <Layout title={siteConfig.title} description={siteConfig.tagline}> <div className=\"hero text--center\"> <div className=\"container \"> <div className=\"padding-vert--md\"> <h1 className=\"hero__title\">{siteConfig.title}</h1> <p className=\"hero__subtitle\">{siteConfig.tagline}</p> </div> <div> <Link to=\"/docs/get-started\" className=\"button button--lg button--outline button--primary\"> Get started </Link> </div> </div> </div> </Layout> ); }; export default MyPage; ` The following code could be helpful for migration of various pages: Index page - Flux (recommended), Docusaurus 2, Hermes Help/Support page - Docusaurus 2, Flux Content {#content} Replace AUTOGENERATED_TABLE_OF_CONTENTS {#replace-autogenerated_table_of_contents} This feature is replaced by inline table of content Update Markdown syntax to be MDX-compatible {#update-markdown-syntax-to-be-mdx-compatible} In Docusaurus 2, the Markdown syntax has been changed to MDX. Hence there might be some broken syntax in the existing docs which you would have to update. A common example is self-closing tags like <img> and <br> which are valid in HTML would have to be explicitly closed now ( <img/> and <br/>). All tags in MDX documents have to be valid JSX. Front matter is parsed by gray-matter. If your front matter use special characters like :, you now need to quote it: title: Part 1: my part1 title → title: \"Part 1: my part1 title\". Tips: You might want to use some online tools like HTML to JSX to make the migration easier. Language-specific code tabs {#language-specific-code-tabs} Refer to the multi-language support code blocks section. Front matter {#front-matter} The Docusaurus front matter fields for the blog have been changed from camelCase to snake_case to be consistent with the docs. The fields authorFBID and authorTwitter have been deprecated. They are only used for generating the profile image of the author which can be done via the authors field. Deployment {#deployment} The CNAME file used by GitHub Pages is not generated anymore, so be sure you have created it in /static/CNAME if you use a custom domain. The blog RSS feed is now hosted at /blog/rss.xml instead of /blog/feed.xml. You may want to configure server-side redirects so that users' subscriptions keep working. Test your site {#test-your-site} After migration, your folder structure should look like this: `bash my-project ├── docs └── website ├── blog ├── src │ ├── css │ │ └── custom.css │ └── pages │ └── index.js ├── package.json ├── sidebars.json ├── .gitignore ├── docusaurus.config.js └── static ` Start the development server and fix any errors: `bash npm2yarn cd website npm start ` You can also try to build the site for production: `bash npm2yarn npm run build `",
    "keywords": [
      "manual",
      "migration",
      "v2",
      "mdx",
      "core",
      "preset-classic",
      "build",
      "node_modules",
      "docs",
      "sidebars",
      "src",
      "css",
      "custom",
      "components",
      "ColorGenerator",
      "img",
      "meta_oss_logo",
      "opensource",
      "docusaurus",
      "github",
      "doc1",
      "facebook",
      "edit",
      "main",
      "website",
      "Rehype",
      "v1",
      "en",
      "installation",
      "plugin-client-redirects",
      "Footer",
      "theme-classic",
      "theme",
      "pages",
      "infima",
      "exports",
      "Link",
      "useDocusaurusContext",
      "Layout",
      "h1",
      "div",
      "get-started",
      "Support",
      "static",
      "CNAME",
      "blog",
      "rss",
      "feed",
      "Manual",
      "This",
      "process",
      "should",
      "run",
      "after",
      "the",
      "automated",
      "complete",
      "missing",
      "parts",
      "debug",
      "issues",
      "CLI",
      "output",
      "Project",
      "setup",
      "project",
      "package",
      "json",
      "packagejson",
      "Scoped",
      "names",
      "scoped",
      "Docusaurus",
      "use",
      "provides",
      "clear",
      "distinction",
      "between",
      "official",
      "packages",
      "and",
      "community",
      "maintained",
      "another",
      "words",
      "all",
      "are",
      "namespaced",
      "under",
      "Meanwhile",
      "default",
      "doc",
      "site",
      "functionalities",
      "provided",
      "now",
      "preset",
      "classic",
      "Therefore",
      "need",
      "add",
      "this",
      "dependency",
      "well",
      "diff",
      "title",
      "dependencies",
      "beta",
      "tip",
      "Please",
      "most",
      "recent",
      "version",
      "which",
      "you",
      "can",
      "check",
      "out",
      "here",
      "using",
      "latest",
      "tag",
      "commands",
      "cli",
      "renamed",
      "command",
      "instead",
      "The",
      "scripts",
      "section",
      "your",
      "updated",
      "follows",
      "start",
      "swizzle",
      "deploy",
      "typical",
      "may",
      "look",
      "like",
      "serve",
      "clsx",
      "react",
      "dom",
      "browserslist",
      "production",
      "not",
      "dead",
      "op_mini",
      "development",
      "last",
      "chrome",
      "firefox",
      "safari",
      "Update",
      "references",
      "directory",
      "update",
      "artifacts",
      "located",
      "within",
      "PROJECT_NAME",
      "moved",
      "just",
      "Make",
      "sure",
      "that",
      "deployment",
      "configuration",
      "read",
      "generated",
      "files",
      "from",
      "correct",
      "deploying",
      "GitHub",
      "make",
      "yarn",
      "publish",
      "script",
      "gitignore",
      "contain",
      "bash",
      "cache",
      "loader",
      "misc",
      "DS_Store",
      "env",
      "local",
      "test",
      "npm",
      "log",
      "error",
      "README",
      "readme",
      "have",
      "existing",
      "file",
      "You",
      "modify",
      "reflect",
      "changes",
      "copy",
      "Site",
      "configurations",
      "config",
      "docusaurusconfigjs",
      "Rename",
      "siteConfig",
      "split",
      "each",
      "functionality",
      "into",
      "plugins",
      "for",
      "modularity",
      "Presets",
      "bundles",
      "backward",
      "compatibility",
      "built",
      "essential",
      "present",
      "Add",
      "following",
      "module",
      "presets",
      "Docs",
      "folder",
      "path",
      "relative",
      "dir",
      "Sidebars",
      "sidebarPath",
      "require",
      "resolve",
      "recommend",
      "moving",
      "also",
      "structure",
      "Vercel",
      "supports",
      "deployments",
      "box",
      "generally",
      "better",
      "rest",
      "code",
      "one",
      "migrating",
      "there",
      "pending",
      "documentation",
      "pull",
      "requests",
      "temporarily",
      "keep",
      "its",
      "original",
      "place",
      "avoid",
      "producing",
      "conflicts",
      "Refer",
      "guide",
      "below",
      "field",
      "Updated",
      "fields",
      "baseUrl",
      "tagline",
      "url",
      "favicon",
      "organizationName",
      "projectName",
      "githubHost",
      "stylesheets",
      "baseurl",
      "organizationname",
      "projectname",
      "githubhost",
      "actions",
      "needed",
      "these",
      "were",
      "modified",
      "colors",
      "Deprecated",
      "wrote",
      "CSS",
      "framework",
      "called",
      "Infima",
      "uses",
      "variables",
      "theming",
      "quite",
      "ready",
      "yet",
      "will",
      "when",
      "overwrite",
      "create",
      "own",
      "import",
      "globally",
      "passing",
      "option",
      "customCss",
      "shades",
      "color",
      "override",
      "Note",
      "list",
      "ifm",
      "root",
      "primary",
      "dark",
      "rgb",
      "darker",
      "darkest",
      "light",
      "lighter",
      "lightest",
      "ColorBox",
      "find",
      "different",
      "chosen",
      "Alternatively",
      "tool",
      "generate",
      "footerIcon",
      "copyright",
      "ogImage",
      "twitterImage",
      "footericon",
      "ogimage",
      "twitterimage",
      "meta",
      "info",
      "such",
      "assets",
      "SEO",
      "handled",
      "themes",
      "customize",
      "them",
      "themeConfig",
      "footer",
      "logo",
      "alt",
      "Meta",
      "Open",
      "Source",
      "Logo",
      "png",
      "href",
      "https",
      "com",
      "Copyright",
      "new",
      "Date",
      "getFullYear",
      "Facebook",
      "Inc",
      "put",
      "HTML",
      "image",
      "headerIcon",
      "headerLinks",
      "headericon",
      "headerlinks",
      "header",
      "icon",
      "links",
      "svg",
      "label",
      "Getting",
      "Started",
      "page",
      "help",
      "Help",
      "true",
      "Blog",
      "Now",
      "two",
      "both",
      "navbar",
      "items",
      "position",
      "left",
      "right",
      "algolia",
      "apiKey",
      "indexName",
      "algoliaOptions",
      "warning",
      "Your",
      "Algolia",
      "DocSearch",
      "found",
      "example",
      "contact",
      "team",
      "shortcuts",
      "pace",
      "support",
      "They",
      "trigger",
      "recrawl",
      "restore",
      "search",
      "otherwise",
      "wait",
      "next",
      "scheduled",
      "crawl",
      "blogSidebarCount",
      "blogsidebarcount",
      "Pass",
      "postsPerPage",
      "cname",
      "Create",
      "with",
      "domain",
      "Files",
      "copied",
      "during",
      "execution",
      "customDocsPath",
      "docsUrl",
      "editUrl",
      "enableUpdateBy",
      "enableUpdateTime",
      "customdocspath",
      "docsurl",
      "editurl",
      "enableupdateby",
      "enableupdatetime",
      "BREAKING",
      "point",
      "Equivalent",
      "but",
      "routeBasePath",
      "Remark",
      "passed",
      "MDX",
      "Replaces",
      "markdownOptions",
      "markdownPlugins",
      "remarkPlugins",
      "rehypePlugins",
      "showLastUpdateAuthor",
      "showLastUpdateTime",
      "gaTrackingId",
      "gatrackingid",
      "highlight",
      "googleAnalytics",
      "trackingID",
      "end",
      "gaGtag",
      "gagtag",
      "gtag",
      "Removed",
      "removed",
      "deprecated",
      "remove",
      "blogSidebarTitle",
      "cleanUrl",
      "Clean",
      "URL",
      "used",
      "defaultVersionShown",
      "Versioning",
      "ported",
      "unable",
      "versioning",
      "Stay",
      "tuned",
      "disableHeaderTitle",
      "disableTitleTagline",
      "available",
      "docsPluginOptions",
      "sidebarCollapsible",
      "turned",
      "facebookAppId",
      "facebookComments",
      "facebookPixelId",
      "fonts",
      "Prism",
      "Remarkable",
      "Markdown",
      "options",
      "converted",
      "manifest",
      "onPageNav",
      "separateCss",
      "imported",
      "same",
      "manner",
      "mentioned",
      "above",
      "scrollToTop",
      "scrollToTopOptions",
      "twitter",
      "twitterUsername",
      "useEnglishUrl",
      "users",
      "usePrism",
      "wrapPagesHTML",
      "intend",
      "implement",
      "many",
      "future",
      "appreciated",
      "Urls",
      "urls",
      "without",
      "html",
      "extension",
      "For",
      "exist",
      "was",
      "would",
      "target",
      "false",
      "canonical",
      "had",
      "possible",
      "people",
      "published",
      "reasons",
      "avoiding",
      "breaking",
      "configure",
      "server",
      "side",
      "redirect",
      "rules",
      "hosting",
      "provider",
      "escape",
      "hatch",
      "could",
      "plugin",
      "client",
      "redirects",
      "fromExtensions",
      "want",
      "declare",
      "slug",
      "front",
      "matter",
      "Components",
      "Sidebar",
      "sidebar",
      "previous",
      "nested",
      "category",
      "allowed",
      "only",
      "However",
      "allows",
      "infinite",
      "types",
      "Item",
      "other",
      "than",
      "document",
      "migrate",
      "contains",
      "type",
      "subcategory",
      "ids",
      "Example",
      "Subcategory",
      "longer",
      "npm2yarn",
      "current",
      "component",
      "then",
      "customization",
      "intentionally",
      "bottom",
      "Just",
      "Pages",
      "refer",
      "creating",
      "learn",
      "how",
      "work",
      "After",
      "reading",
      "notice",
      "move",
      "received",
      "object",
      "props",
      "get",
      "apply",
      "layout",
      "around",
      "takes",
      "metadata",
      "CompLibrary",
      "write",
      "React",
      "styles",
      "soon",
      "sorry",
      "about",
      "meanwhile",
      "inspect",
      "view",
      "dev",
      "see",
      "what",
      "CommonJS",
      "ES6",
      "imports",
      "Here",
      "jsx",
      "const",
      "MyPage",
      "return",
      "description",
      "className",
      "hero",
      "text",
      "center",
      "container",
      "padding",
      "vert",
      "hero__title",
      "hero__subtitle",
      "started",
      "button",
      "outline",
      "Get",
      "export",
      "helpful",
      "various",
      "Index",
      "Flux",
      "recommended",
      "Hermes",
      "Content",
      "content",
      "Replace",
      "replace",
      "feature",
      "replaced",
      "inline",
      "table",
      "syntax",
      "compatible",
      "markdown",
      "has",
      "been",
      "changed",
      "Hence",
      "might",
      "some",
      "broken",
      "common",
      "self",
      "closing",
      "tags",
      "valid",
      "explicitly",
      "closed",
      "All",
      "documents",
      "JSX",
      "Front",
      "parsed",
      "gray",
      "special",
      "characters",
      "quote",
      "Part",
      "part1",
      "Tips",
      "online",
      "tools",
      "easier",
      "Language",
      "specific",
      "tabs",
      "language",
      "multi",
      "blocks",
      "camelCase",
      "snake_case",
      "consistent",
      "authorFBID",
      "authorTwitter",
      "generating",
      "profile",
      "author",
      "done",
      "via",
      "authors",
      "Deployment",
      "anymore",
      "created",
      "RSS",
      "hosted",
      "xml",
      "subscriptions",
      "working",
      "Test",
      "index",
      "Start",
      "fix",
      "any",
      "errors",
      "try"
    ],
    "url": "/docs/migration/v2/migration-manual",
    "path": "migration/v2/migration-manual.mdx",
    "type": "general",
    "category": "migration"
  },
  {
    "id": "migration-overview",
    "title": "Overview",
    "description": "",
    "content": "Overview This doc guides you through migrating an existing Docusaurus 1 site to Docusaurus 2. We try to make this as easy as possible, and provide a migration CLI. Main differences {#main-differences} Docusaurus 1 is a pure documentation site generator, using React as a server-side template engine, but not loading React on the browser. Docusaurus 2, rebuilt from the ground up, generates a single-page-application, using the full power of React in the browser. It allows for more customizability but preserved the best parts of Docusaurus 1 - easy to get started, versioned docs, and i18n. Beyond that, Docusaurus 2 is a performant static site generator and can be used to create common content-driven websites (e.g. Documentation, Blogs, Product Landing and Marketing Pages, etc) extremely quickly. While our main focus will still be helping you get your documentations right and well, it is possible to build any kind of website using Docusaurus 2 as it is just a React application. Docusaurus can now be used to build any website, not just documentation websites. Docusaurus 1 structure {#docusaurus-1-structure} Your Docusaurus 1 site should have the following structure: `bash ├── docs └── website ├── blog ├── core │ └── Footer.js ├── package.json ├── pages ├── sidebars.json ├── siteConfig.js └── static ` Docusaurus 2 structure {#docusaurus-2-structure} After the migration, your Docusaurus 2 site could look like: `sh ├── docs └── website ├── blog ├── src │ ├── components │ ├── css │ └── pages ├── static ├── package.json ├── sidebars.json ├── docusaurus.config.js ` :::info This migration does not change the /docs folder location, but Docusaurus v2 sites generally have the /docs folder inside /website You are free to put the /docs folder anywhere you want after having migrated to v2. ::: Migration process {#migration-process} There are multiple things to migrate to obtain a fully functional Docusaurus 2 website: packages CLI commands site configuration Markdown files sidebars file pages, components and CSS versioned docs i18n support 🚧 Automated migration process {#automated-migration-process} The migration CLI will handle many things of the migration for you. However, some parts can't easily be automated, and you will have to fallback to the manual process. :::note We recommend running the migration CLI, and complete the missing parts thanks to the manual migration process. ::: Manual migration process {#manual-migration-process} Some parts of the migration can't be automated (particularly the pages), and you will have to migrate them manually. The manual migration guide will give you all the manual steps. Support {#support} For any questions, you can ask in the #migration-v1-to-v2 Discord channel. Feel free to tag @slorber in any migration PRs if you would like us to have a look. We also have volunteers willing to help you migrate your v1 site. Example migration PRs {#example-migration-prs} You might want to refer to our migration PRs for Create React App and Flux as examples of how a migration for a basic Docusaurus v1 site can be done.",
    "keywords": [
      "overview",
      "migration",
      "v2",
      "mdx",
      "docs",
      "website",
      "Overview",
      "This",
      "doc",
      "guides",
      "you",
      "through",
      "migrating",
      "existing",
      "Docusaurus",
      "site",
      "try",
      "make",
      "this",
      "easy",
      "possible",
      "and",
      "provide",
      "CLI",
      "Main",
      "differences",
      "main",
      "pure",
      "documentation",
      "generator",
      "using",
      "React",
      "server",
      "side",
      "template",
      "engine",
      "but",
      "not",
      "loading",
      "the",
      "browser",
      "rebuilt",
      "from",
      "ground",
      "generates",
      "single",
      "page",
      "application",
      "full",
      "power",
      "allows",
      "for",
      "more",
      "customizability",
      "preserved",
      "best",
      "parts",
      "get",
      "started",
      "versioned",
      "i18n",
      "Beyond",
      "that",
      "performant",
      "static",
      "can",
      "used",
      "create",
      "common",
      "content",
      "driven",
      "websites",
      "Documentation",
      "Blogs",
      "Product",
      "Landing",
      "Marketing",
      "Pages",
      "etc",
      "extremely",
      "quickly",
      "While",
      "our",
      "focus",
      "will",
      "still",
      "helping",
      "your",
      "documentations",
      "right",
      "well",
      "build",
      "any",
      "kind",
      "just",
      "now",
      "structure",
      "docusaurus",
      "Your",
      "should",
      "have",
      "following",
      "bash",
      "blog",
      "core",
      "Footer",
      "package",
      "json",
      "pages",
      "sidebars",
      "siteConfig",
      "After",
      "could",
      "look",
      "like",
      "src",
      "components",
      "css",
      "config",
      "info",
      "does",
      "change",
      "folder",
      "location",
      "sites",
      "generally",
      "inside",
      "You",
      "are",
      "free",
      "put",
      "anywhere",
      "want",
      "after",
      "having",
      "migrated",
      "Migration",
      "process",
      "There",
      "multiple",
      "things",
      "migrate",
      "obtain",
      "fully",
      "functional",
      "packages",
      "commands",
      "configuration",
      "Markdown",
      "files",
      "file",
      "CSS",
      "support",
      "Automated",
      "automated",
      "The",
      "handle",
      "many",
      "However",
      "some",
      "easily",
      "fallback",
      "manual",
      "note",
      "recommend",
      "running",
      "complete",
      "missing",
      "thanks",
      "Manual",
      "Some",
      "particularly",
      "them",
      "manually",
      "guide",
      "give",
      "all",
      "steps",
      "Support",
      "For",
      "questions",
      "ask",
      "Discord",
      "channel",
      "Feel",
      "tag",
      "slorber",
      "PRs",
      "would",
      "also",
      "volunteers",
      "willing",
      "help",
      "Example",
      "example",
      "prs",
      "might",
      "refer",
      "Create",
      "App",
      "Flux",
      "examples",
      "how",
      "basic",
      "done"
    ],
    "url": "/docs/migration/v2/migration-overview",
    "path": "migration/v2/migration-overview.mdx",
    "type": "general",
    "category": "migration"
  },
  {
    "id": "migration-translated-sites",
    "title": "Translated sites",
    "description": "",
    "content": "Translated sites This page explains how migrate a translated Docusaurus v1 site to Docusaurus v2. i18n differences {#i18n-differences} Docusaurus v2 i18n is conceptually quite similar to Docusaurus v1 i18n with a few differences. It is not tightly coupled to Crowdin, and you can use Git or another SaaS instead. Different filesystem paths {#different-filesystem-paths} On Docusaurus v2, localized content is generally found at website/i18n/[locale]. Docusaurus v2 is modular based on a plugin system, and each plugin is responsible to manage its own translations. Each plugin has its own i18n subfolder, like: website/i18n/fr/docusaurus-plugin-content-blog Updated translation APIs {#updated-translation-apis} With Docusaurus v1, you translate your pages with <translate>: `jsx const translate = require('../../server/translate.js').translate; <h2> <translate desc=\"the header description\"> This header will be translated </translate> </h2>; ` On Docusaurus v2, you translate your pages with <Translate> `jsx import Translate from '@docusaurus/Translate'; <h2> <Translate id=\"header.translation.id\" description=\"the header description\"> This header will be translated </Translate> </h2>; ` :::note The write-translations CLI still works to extract translations from your code. The code translations are now added to i18n/[locale]/code.json using Chrome i18n JSON format. ::: Stricter Markdown parser {#stricter-markdown-parser} Docusaurus v2 is using MDX to parse Markdown files. MDX compiles Markdown files to React components, is stricter than the Docusaurus v1 parser, and will make your build fail on error instead of rendering some bad content. Also, the HTML elements must be replaced by JSX elements. This is particularly important for i18n because if your translations are not good on Crowdin and use invalid Markup, your v2 translated site might fail to build: you may need to do some translation cleanup to fix the errors. Migration strategies {#migration-strategies} This section will help you figure out how to keep your existing v1 translations after you migrate to v2. There are multiple possible strategies to migrate a Docusaurus v1 site using Crowdin, with different tradeoffs. :::warning This documentation is a best-effort to help you migrate, please help us improve it if you find a better way! ::: Before all, we recommend to: Migrate your v1 Docusaurus site to v2 without the translations Get familiar with the new i18n system of Docusaurus v2 an Make Crowdin work for your v2 site, using a new and untranslated Crowdin project and the Crowdin tutorial :::danger Don't try to migrate without understanding both Crowdin and Docusaurus v2 i18n. ::: Create a new Crowdin project {#create-a-new-crowdin-project} To avoid any risk of breaking your v1 site in production, one possible strategy is to duplicate the original v1 Crowdin project. :::info This strategy was used to upgrade the Jest website. ::: Unfortunately, Crowdin does not have any \"Duplicate/clone Project\" feature, which makes things complicated. Download the translation memory of your original project in .tmx format (https://crowdin.com/project/<ORIGINAL_PROJECT>/settings#tm > View Records) Upload the translation memory to your new project (https://crowdin.com/project/<NEW_PROJECT>/settings#tm > View Records) Reconfigure crowdin.yml for Docusaurus v2 according to the i18n docs Upload the Docusaurus v2 source files with the Crowdin CLI to the new project Mark sensitive strings like id or slug as \"hidden string\" on Crowdin On the \"Translations\" tab, click on \"Pre-Translation > via TM\" (https://crowdin.com/project/<NEW_PROJECT>/settings#translations) Try first with \"100% match\" (more content will be translated than \"Perfect\"), and pre-translate your sources Download the Crowdin translations locally Try to run/build your site and see if there are any errors You will likely have errors on your first-try: the pre-translation might try to translate things that it should not be translated (front matter, admonition, code blocks...), and the translated MD files might be invalid for the MDX parser. You will have to fix all the errors until your site builds. You can do that by modifying the translated MD files locally, and fix your site for one locale at a time using docusaurus build --locale fr. There is no ultimate guide we could write to fix these errors, but common errors are due to: Not marking enough strings as \"hidden strings\" in Crowdin, leading to pre-translation trying to translate these strings. Having bad v1 translations, leading to invalid markup in v2: bad HTML elements inside translations and unclosed tags Anything rejected by the MDX parser, like using HTML elements instead of JSX elements (use the MDX playground for debugging) You might want to repeat this pre-translation process, eventually trying the \"Perfect\" option and limiting pre-translation only some languages/files. :::tip Use mdx-code-block around problematic Markdown elements: Crowdin is less likely mess things up with code blocks. ::: :::note You will likely notice that some things were translated on your old project, but are now untranslated in your new project. The Crowdin Markdown parser is evolving other time and each Crowdin project has a different parser version, which can lead to pre-translation not being able to pre-translate all the strings. This parser version is undocumented, and you will have to ask the Crowdin support to know your project's parser version and fix one specific version. Using the same CLI version and parser version across the 2 Crowdin projects might give better results. ::: :::danger Crowdin has an \"upload translations\" feature, but in our experience it does not give very good results for Markdown ::: Use the existing Crowdin project {#use-the-existing-crowdin-project} If you don't mind modifying your existing Crowdin project and risking to mess things up, it may be possible to use the Crowdin branch system. :::warning This workflow has not been tested in practice, please report us how good it is. ::: This way, you wouldn't need to create a new Crowdin project, transfer the translation memory, apply pre-translations, and try to fix the pre-translations errors. You could create a Crowdin branch for Docusaurus v2, where you upload the v2 sources, and merge the Crowdin branch to main once ready. Use Git instead of Crowdin {#use-git-instead-of-crowdin} It is possible to migrate away of Crowdin, and add the translation files to Git instead. Use the Crowdin CLI to download the v1 translated files, and put these translated files at the correct Docusaurus v2 filesystem location.",
    "keywords": [
      "translated",
      "sites",
      "migration",
      "v2",
      "mdx",
      "i18n",
      "fr",
      "docusaurus-plugin-content-blog",
      "server",
      "translate",
      "h2",
      "Translate",
      "code",
      "clone",
      "crowdin",
      "project",
      "settings",
      "build",
      "files",
      "Translated",
      "This",
      "page",
      "explains",
      "how",
      "migrate",
      "Docusaurus",
      "site",
      "differences",
      "conceptually",
      "quite",
      "similar",
      "with",
      "few",
      "not",
      "tightly",
      "coupled",
      "Crowdin",
      "and",
      "you",
      "can",
      "use",
      "Git",
      "another",
      "SaaS",
      "instead",
      "Different",
      "filesystem",
      "paths",
      "different",
      "localized",
      "content",
      "generally",
      "found",
      "website",
      "locale",
      "modular",
      "based",
      "plugin",
      "system",
      "each",
      "responsible",
      "manage",
      "its",
      "own",
      "translations",
      "Each",
      "has",
      "subfolder",
      "like",
      "docusaurus",
      "blog",
      "Updated",
      "translation",
      "APIs",
      "updated",
      "apis",
      "With",
      "your",
      "pages",
      "jsx",
      "const",
      "require",
      "desc",
      "the",
      "header",
      "description",
      "will",
      "import",
      "from",
      "note",
      "The",
      "write",
      "CLI",
      "still",
      "works",
      "extract",
      "are",
      "now",
      "added",
      "json",
      "using",
      "Chrome",
      "JSON",
      "format",
      "Stricter",
      "Markdown",
      "parser",
      "stricter",
      "markdown",
      "MDX",
      "parse",
      "compiles",
      "React",
      "components",
      "than",
      "make",
      "fail",
      "error",
      "rendering",
      "some",
      "bad",
      "Also",
      "HTML",
      "elements",
      "must",
      "replaced",
      "JSX",
      "particularly",
      "important",
      "for",
      "because",
      "good",
      "invalid",
      "Markup",
      "might",
      "may",
      "need",
      "cleanup",
      "fix",
      "errors",
      "Migration",
      "strategies",
      "section",
      "help",
      "figure",
      "out",
      "keep",
      "existing",
      "after",
      "There",
      "multiple",
      "possible",
      "tradeoffs",
      "warning",
      "documentation",
      "best",
      "effort",
      "please",
      "improve",
      "find",
      "better",
      "way",
      "Before",
      "all",
      "recommend",
      "Migrate",
      "without",
      "Get",
      "familiar",
      "new",
      "Make",
      "work",
      "untranslated",
      "tutorial",
      "danger",
      "Don",
      "try",
      "understanding",
      "both",
      "Create",
      "create",
      "avoid",
      "any",
      "risk",
      "breaking",
      "production",
      "one",
      "strategy",
      "duplicate",
      "original",
      "info",
      "was",
      "used",
      "upgrade",
      "Jest",
      "Unfortunately",
      "does",
      "have",
      "Duplicate",
      "Project",
      "feature",
      "which",
      "makes",
      "things",
      "complicated",
      "Download",
      "memory",
      "tmx",
      "https",
      "com",
      "ORIGINAL_PROJECT",
      "View",
      "Records",
      "Upload",
      "NEW_PROJECT",
      "Reconfigure",
      "yml",
      "according",
      "docs",
      "source",
      "Mark",
      "sensitive",
      "strings",
      "slug",
      "hidden",
      "string",
      "Translations",
      "tab",
      "click",
      "Pre",
      "Translation",
      "via",
      "Try",
      "first",
      "match",
      "more",
      "Perfect",
      "pre",
      "sources",
      "locally",
      "run",
      "see",
      "there",
      "You",
      "likely",
      "that",
      "should",
      "front",
      "matter",
      "admonition",
      "blocks",
      "until",
      "builds",
      "modifying",
      "time",
      "ultimate",
      "guide",
      "could",
      "these",
      "but",
      "common",
      "due",
      "Not",
      "marking",
      "enough",
      "leading",
      "trying",
      "Having",
      "markup",
      "inside",
      "unclosed",
      "tags",
      "Anything",
      "rejected",
      "playground",
      "debugging",
      "want",
      "repeat",
      "this",
      "process",
      "eventually",
      "option",
      "limiting",
      "only",
      "languages",
      "tip",
      "Use",
      "block",
      "around",
      "problematic",
      "less",
      "mess",
      "notice",
      "were",
      "old",
      "evolving",
      "other",
      "version",
      "lead",
      "being",
      "able",
      "undocumented",
      "ask",
      "support",
      "know",
      "specific",
      "Using",
      "same",
      "across",
      "projects",
      "give",
      "results",
      "upload",
      "our",
      "experience",
      "very",
      "don",
      "mind",
      "risking",
      "branch",
      "workflow",
      "been",
      "tested",
      "practice",
      "report",
      "wouldn",
      "transfer",
      "apply",
      "where",
      "merge",
      "main",
      "once",
      "ready",
      "git",
      "away",
      "add",
      "download",
      "put",
      "correct",
      "location"
    ],
    "url": "/docs/migration/v2/migration-translated-sites",
    "path": "migration/v2/migration-translated-sites.mdx",
    "type": "general",
    "category": "migration"
  },
  {
    "id": "migration-versioned-sites",
    "title": "Versioned sites",
    "description": "",
    "content": "Versioned sites Read up https://docusaurus.io/blog/2018/09/11/Towards-Docusaurus-2#versioning first for problems in v1's approach. :::note The versioned docs should normally be migrated correctly by the migration CLI ::: Migrate your versioned_docs front matter {#migrate-your-versioned_docs-front-matter} Unlike v1, The Markdown header for each versioned doc is no longer altered by using version-${version}-${original_id} as the value for the actual ID field. See scenario below for better explanation. For example, if you have a docs/hello.md. `md --- id: hello title: Hello, World ! --- Hi, Endilie here :) ` When you cut a new version 1.0.0, in Docusaurus v1, website/versioned_docs/version-1.0.0/hello.md looks like this: `md --- id: version-1.0.0-hello title: Hello, World ! original_id: hello --- Hi, Endilie here :) ` In comparison, Docusaurus 2 website/versioned_docs/version-1.0.0/hello.md looks like this (exactly same as original) `md --- id: hello title: Hello, World ! --- Hi, Endilie here :) ` Since we're going for snapshot and allow people to move (and edit) docs easily inside version. The id front matter is no longer altered and will remain the same. Internally, it is set as version-${version}/${id}. Essentially, here are the necessary changes in each versioned_docs file: `diff {2-3,5} --- id: version-1.0.0-hello id: hello title: Hello, World ! original_id: hello --- Hi, Endilie here :) ` Migrate your versioned_sidebars {#migrate-your-versioned_sidebars} Refer to versioned_docs ID as version-${version}/${id} (v2) instead of version-${version}-${original_id} (v1). Because in v1 there is a good chance someone created a new file with front matter ID \"version-${version}-${id}\" that can conflict with versioned_docs ID. For example, Docusaurus 1 can't differentiate docs/xxx.md `md --- id: version-1.0.0-hello --- Another content ` vs website/versioned_docs/version-1.0.0/hello.md `md --- id: version-1.0.0-hello title: Hello, World ! original_id: hello --- Hi, Endilie here :) ` Since we don't allow / in v1 & v2 for front matter, conflicts are less likely to occur. So v1 users need to migrate their versioned_sidebars file Example versioned_sidebars/version-1.0.0-sidebars.json: `diff {2-3,5-6,9-10} title=\"versioned_sidebars/version-1.0.0-sidebars.json\" { \"version-1.0.0/docs\": { \"version-1.0.0-docs\": { \"Test\": [ \"version-1.0.0/foo/bar\", \"version-1.0.0-foo/bar\", ], \"Guides\": [ \"version-1.0.0/hello\", \"version-1.0.0-hello\" ] } } ` Populate your versioned_sidebars and versioned_docs {#populate-your-versioned_sidebars-and-versioned_docs} In v2, we use snapshot approach for documentation versioning. Every versioned docs does not depends on other version. It is possible to have foo.md in version-1.0.0 but it doesn't exist in version-1.2.0. This is not possible in previous version due to Docusaurus v1 fallback functionality (https://v1.docusaurus.io/docs/en/versioning#fallback-functionality). For example, if your versions.json looks like this in v1 `json title=\"versions.json\" [\"1.1.0\", \"1.0.0\"] ` Docusaurus v1 creates versioned docs if and only if the doc content is different. Your docs structure might look like this if the only doc changed from v1.0.0 to v1.1.0 is hello.md. `bash website ├── versioned_docs │ ├── version-1.1.0 │ │ └── hello.md │ └── version-1.0.0 │ ├── foo │ │ └── bar.md │ └── hello.md ├── versioned_sidebars │ └── version-1.0.0-sidebars.json ` In v2, you have to populate the missing versioned_docs and versioned_sidebars (with the right front matter and ID reference too). `bash {3-5,12} website ├── versioned_docs │ ├── version-1.1.0 │ │ ├── foo │ │ │ └── bar.md │ │ └── hello.md │ └── version-1.0.0 │ ├── foo │ │ └── bar.md │ └── hello.md ├── versioned_sidebars │ ├── version-1.1.0-sidebars.json │ └── version-1.0.0-sidebars.json ` Convert style attributes to style objects in MDX {#convert-style-attributes-to-style-objects-in-mdx} Docusaurus 2 uses JSX for doc files. If you have any style attributes in your Docusaurus 1 docs, convert them to style objects, like this: `diff --- id: demo title: Demo --- Section hello world <pre style=\"background: black\">zzz</pre> <pre style={{background: 'black'}}>zzz</pre> `",
    "keywords": [
      "versioned",
      "sites",
      "migration",
      "v2",
      "mdx",
      "docusaurus",
      "blog",
      "2018",
      "09",
      "11",
      "Towards-Docusaurus-2",
      "hello",
      "versioned_docs",
      "version-1",
      "xxx",
      "docs",
      "foo",
      "bar",
      "v1",
      "en",
      "versioning",
      "pre",
      "Versioned",
      "Read",
      "https",
      "Towards",
      "Docusaurus",
      "first",
      "for",
      "problems",
      "approach",
      "note",
      "The",
      "should",
      "normally",
      "migrated",
      "correctly",
      "the",
      "CLI",
      "Migrate",
      "your",
      "front",
      "matter",
      "migrate",
      "Unlike",
      "Markdown",
      "header",
      "each",
      "doc",
      "longer",
      "altered",
      "using",
      "version",
      "original_id",
      "value",
      "actual",
      "field",
      "See",
      "scenario",
      "below",
      "better",
      "explanation",
      "For",
      "example",
      "you",
      "have",
      "title",
      "Hello",
      "World",
      "Endilie",
      "here",
      "When",
      "cut",
      "new",
      "website",
      "looks",
      "like",
      "this",
      "comparison",
      "exactly",
      "same",
      "original",
      "Since",
      "going",
      "snapshot",
      "and",
      "allow",
      "people",
      "move",
      "edit",
      "easily",
      "inside",
      "will",
      "remain",
      "Internally",
      "set",
      "Essentially",
      "are",
      "necessary",
      "changes",
      "file",
      "diff",
      "versioned_sidebars",
      "Refer",
      "instead",
      "Because",
      "there",
      "good",
      "chance",
      "someone",
      "created",
      "with",
      "that",
      "can",
      "conflict",
      "differentiate",
      "Another",
      "content",
      "don",
      "conflicts",
      "less",
      "likely",
      "occur",
      "users",
      "need",
      "their",
      "Example",
      "sidebars",
      "json",
      "Test",
      "Guides",
      "Populate",
      "populate",
      "use",
      "documentation",
      "Every",
      "does",
      "not",
      "depends",
      "other",
      "possible",
      "but",
      "doesn",
      "exist",
      "This",
      "previous",
      "due",
      "fallback",
      "functionality",
      "versions",
      "creates",
      "only",
      "different",
      "Your",
      "structure",
      "might",
      "look",
      "changed",
      "from",
      "bash",
      "missing",
      "right",
      "reference",
      "too",
      "Convert",
      "style",
      "attributes",
      "objects",
      "MDX",
      "convert",
      "uses",
      "JSX",
      "files",
      "any",
      "them",
      "demo",
      "Demo",
      "Section",
      "world",
      "background",
      "black",
      "zzz"
    ],
    "url": "/docs/migration/v2/migration-versioned-sites",
    "path": "migration/v2/migration-versioned-sites.mdx",
    "type": "general",
    "category": "migration"
  },
  {
    "id": "v3",
    "title": "Upgrading to Docusaurus v3",
    "description": "",
    "content": "Upgrading to Docusaurus v3 This documentation will help you upgrade your site from Docusaurus v2 to Docusaurus v3. Docusaurus v3 is a new major version, including breaking changes requiring you to adjust your site accordingly. We will guide to during this process, and also mention a few optional recommendations. This is not a full rewrite, and the breaking changes are relatively easy to handle. The simplest sites will eventually upgrade by simply updating their npm dependencies. The main breaking change is the upgrade from MDX v1 to MDX v3. Read the MDX v2 and MDX v3 release notes for details. MDX will now compile your Markdown content more strictly and with subtle differences. :::tip Before upgrading Before upgrading, we recommend preparing your site for Docusaurus v3. There are changes that you can already handle incrementally, under Docusaurus v2. Doing so will help reduce the work needed to finally upgrade to Docusaurus v3. For complex sites, we also recommend to set up visual regression tests, a good way to ensure your site stays visually identical. Docusaurus v3 mainly upgrades dependencies, and is not expected to produce any visual changes. ::: :::note Check the release notes for Docusaurus v3.0.0, and browse the pull-requests for additional useful information and the motivation behind each change mentioned here. ::: Upgrading Dependencies Upgrading to Docusaurus v3 requires upgrading core Docusaurus dependencies (@docusaurus/name), but also other related packages. Docusaurus v3 now uses the following dependencies: Node.js v18.0+ React v18.0+ MDX v3.0+ TypeScript v5.1+ prism-react-renderer v2.0+ react-live v4.0+ remark-emoji v4.0+ mermaid v10.4+ :::warning Upgrading community plugins If your site uses third-party community plugins and themes, you might need to upgrade them. Make sure those plugins are compatible with Docusaurus v3 before attempting an upgrade. ::: A typical package.json dependency upgrade example: `diff title=\"package.json\" { \"dependencies\": { // upgrade to Docusaurus v3 \"@docusaurus/core\": \"2.4.3\", \"@docusaurus/preset-classic\": \"2.4.3\", \"@docusaurus/core\": \"3.0.0\", \"@docusaurus/preset-classic\": \"3.0.0\", // upgrade to MDX v3 \"@mdx-js/react\": \"^1.6.22\", \"@mdx-js/react\": \"^3.0.0\", // upgrade to prism-react-renderer v2.0+ \"prism-react-renderer\": \"^1.3.5\", \"prism-react-renderer\": \"^2.1.0\", // upgrade to React v18.0+ \"react\": \"^17.0.2\", \"react-dom\": \"^17.0.2\" \"react\": \"^18.2.0\", \"react-dom\": \"^18.2.0\" }, \"devDependencies\": { // upgrade Docusaurus dev dependencies to v3 \"@docusaurus/module-type-aliases\": \"2.4.3\", \"@docusaurus/types\": \"2.4.3\" \"@docusaurus/module-type-aliases\": \"3.0.0\", \"@docusaurus/types\": \"3.0.0\" } \"engines\": { // require Node.js 18.0+ \"node\": \">=16.14\" \"node\": \">=18.0\" } } ` For TypeScript users: `diff title=\"package.json\" { \"devDependencies\": { // swap the external TypeScript config package for the new official one \"@tsconfig/docusaurus\": \"^1.0.7\", \"@docusaurus/tsconfig\": \"3.0.0\", // upgrade React types to v18.0+ \"@types/react\": \"^17.0.69\", \"@types/react\": \"^18.2.29\", // upgrade TypeScript to v5.1+ \"typescript\": \"~4.7.4\" \"typescript\": \"~5.2.2\" } } ` Upgrading MDX MDX is a major dependency of Docusaurus responsible for compiling your .md and .mdx files to React components. The transition from MDX v1 to MDX v3 is the main challenge to the adoption of Docusaurus v3. Most breaking changes come from MDX v2, and MDX v3 is a relatively small release. Some documents that compiled successfully under Docusaurus v2 might now fail to compile under Docusaurus v3. :::tip Find problematic content ahead of time Run npx docusaurus-mdx-checker on your site to get a list of files that will now fail to compile under Docusaurus v3. This command is also a good way to estimate the amount of work to be done to make your content compatible. Remember most of this work can be executed ahead of the upgrade by preparing your content for Docusaurus v3. ::: Other documents might also render differently. :::tip Use visual regression tests For large sites where a manual review of all pages is complicated, we recommend you to setup visual regression tests. ::: Upgrading MDX comes with all the breaking changes documented on the MDX v2 and MDX v3 release blog posts. Most breaking changes come from MDX v2, and MDX v3 is a relatively small release. The MDX v2 migration guide has a section on how to update MDX files that will be particularly relevant to us. Also make sure to read the Troubleshooting MDX page that can help you interpret common MDX error messages. Make sure to also read our updated MDX and React documentation page. Using the MDX playground The MDX playground is your new best friend. It permits to understand how your content is compiled to React components, and troubleshoot compilation or rendering issues in isolation. MDX playground - current version MDX playground - v1 <details> <summary>Configuring the MDX playground options for Docusaurus</summary> To obtain a compilation behavior similar to what Docusaurus v2 uses, please turn on these options on the MDX playground: Use MDX Use remark-gfm Use remark-directive !Screenshot of the MDX playground's options panel, with only the \"Use MDX\", \"Use remark-gfm\", and \"Use remark-directive\" options checked </details> Using the two MDX playgrounds side-by-side, you will soon notice that some content is compiled differently or fails to compile in v2. :::tip Making your content future-proof The goal will be to refactor your problematic content so that it works fine with both versions of MDX. This way, when you upgrade to Docusaurus v3, this content will already work out-of-the-box. ::: Using the MDX checker CLI We provide a docusaurus-mdx-checker CLI that permits to easily spot problematic content. Run this command on your site to obtain a list of files that will fail to compile under MDX v3. `bash npx docusaurus-mdx-checker ` For each compilation issue, the CLI will log the file path and a line number to look at. !Screenshot of the terminal showing an example MDX checker CLI output, with a few error messages :::tip Use this CLI to estimate of how much work will be required to make your content compatible with MDX v3. ::: :::warning This CLI is a best effort, and will only report compilation errors. It will not report subtle compilation changes that do not produce errors but can affect how your content is displayed. To catch these problems, we recommend using visual regression tests. ::: Common MDX problems Docusaurus cannot document exhaustively all the changes coming with MDX. That's the responsibility of the MDX v2 and MDX v3 migration guides. However, by upgrading a few Docusaurus sites, we noticed that most of the issues come down to only a few cases that we have documented for you. Bad usage of { The { character is used for opening JavaScript expressions. MDX will now fail if what you put inside {expression} is not a valid expression. `md title=\"example.md\" The object shape looks like {username: string, age: number} ` :::danger Error message > Could not parse expression with acorn: Unexpected content after expression ::: :::tip How to upgrade Available options to fix this error: Use inline code: {username: string, age: number} Use the HTML code: &#123; Escape it: \\{ ::: Bad usage of < The < character is used for opening JSX tags. MDX will now fail if it thinks your JSX is invalid. `md title=\"example.md\" Use Android version <5 You can use a generic type like Array<T> Follow the template \"Road to <YOUR_MINOR_VERSION>\" ` :::danger Error messages > Unexpected character 5 (U+0035) before name, expected a character that can start a name, such as a letter, $, or _ > Expected a closing tag for <T> (1:6-1:9) before the end of paragraph end-tag-mismatch mdast-util-mdx-jsx > Expected a closing tag for <YOUR_MINOR_VERSION> (134:19-134:39) before the end of paragraph ::: :::tip How to upgrade Available options to fix this error: Use inline code: Array<T> Use the HTML code: &lt; or &#60; Escape it: \\< ::: Bad usage of GFM Autolink Docusaurus supports GitHub Flavored Markdown (GFM), but autolink using the <link> syntax is not supported anymore by MDX. `md title=\"example.md\" <sebastien@thisweekinreact.com> <http://localhost:3000> ` :::danger Error messages > Unexpected character @ (U+0040) in name, expected a name character such as letters, digits, $, or _; whitespace before attributes; or the end of the tag (note: to create a link in MDX, use text) > Unexpected character / (U+002F) before local name, expected a character that can start a name, such as a letter, $, or _ (note: to create a link in MDX, use text) ::: :::tip How to upgrade Use regular Markdown links, or remove the < and >. MDX and GFM are able to autolink literals already. {/ prettier-ignore /} `md title=\"example.md\" sebastien@thisweekinreact.com sebastien@thisweekinreact.com http://localhost:3000 http://localhost:3000 ` ::: Lower-case MDXComponent mapping For users providing a custom MDXComponentmapping, components are now \"sandboxed\": a MDXComponent mapping for h1 only gets used for hi but not for <h1>hi</h1> a lower-cased custom element name will not be substituted by its respective MDXComponent component anymore :::danger visual difference Your MDXComponent component mapping might not be applied as before, and your custom components might no longer be used. ::: :::tip How to upgrade For native Markdown elements, you can keep using lower-case: p, h1, img, a... For any other element, use upper-case names. `diff title=\"src/theme/MDXComponents.js\" import MDXComponents from '@theme-original/MDXComponents'; export default { ...MDXComponents, p: (props) => <p {...props} className=\"my-paragraph\"/> myElement: (props) => <div {...props} className=\"my-class\" />, MyElement: (props) => <div {...props} className=\"my-class\" />, }; ` ::: Unintended extra paragraphs In MDX v3, it is now possible to interleave JSX and Markdown more easily without requiring extra line breaks. Writing content on multiple lines can also produce new expected <p> tags. :::danger visual difference See how this content is rendered differently by MDX v1 and v3. `md title=\"example.md\" <div>Some Markdown content</div> <div> Some Markdown content </div> ` {/ prettier-ignore /} `html title=\"MDX v1 output\" <div>Some Markdown content</div> <div>Some Markdown content</div> ` {/ prettier-ignore /} `html title=\"MDX v3 output\" <div>Some <strong>Markdown</strong> content</div> <div><p>Some <strong>Markdown</strong> content</p></div> ` ::: :::tip How to upgrade If you don't want an extra <p> tag, refactor content on a case by case basis to use a single-line JSX tag. `diff <figure> <img src=\"/img/myImage.png\" alt=\"My alt\" /> <figcaption> My image caption </figcaption> <figcaption>My image caption</figcaption> </figure> ` You can also wrap such content with { and } to avoid extra <p> tags if you don't intend to use Markdown syntax there yet. `diff -<figure> +{<figure> <img src=\"/img/myImage.png\" alt=\"My alt\" /> <figcaption> My image caption </figcaption> -</figure> +</figure>} ` ::: Unintended usage of directives Docusaurus v3 now uses Markdown Directives (implemented with remark-directive) as a generic way to provide support for admonitions, and other upcoming Docusaurus features. `md title=\"example.md\" This is a :textDirective ::leafDirective :::containerDirective Container directive content ::: ` :::danger Visual change Directives are parsed with the purpose of being handled by other Remark plugins. Unhandled directives will be ignored, and won't be rendered back in their original form. `md title=\"example.md\" The AWS re:Invent conf is great ` Due to :Invent being parsed as a text directive, this will now be rendered as: ` The AWS re conf is great ` ::: :::tip How to upgrade Use the HTML code: &#58; Add a space after : (if it makes sense): : text Escape it: \\: ::: Unsupported indented code blocks MDX does not transform indented text as code blocks anymore. `md title=\"example.md\" console.log(\"hello\"); ` :::danger Visual change The upgrade does not generally produce new MDX compilation errors, but can lead to content being rendered in an unexpected way because there isn't a code block anymore. ::: :::tip How to upgrade Use the regular code block syntax instead of indentation: md title=\"example.md\" `js console.log('hello'); ` ::: Other Markdown incompatibilities Emphasis starting or ending with a space or a punctuation New MDX parser now strictly complies with the CommonMark spec. CommonMark spec has introduced rules for emphasis around spaces and punctuation, which are incompatible especially with languages that do not use a space to split words, since v0.14. Japanese and Chinese are most affected by this, but there are some other languages that can be affected (e.g. Thai and Khmer), for example when you try to emphasize an inline code or a link. Languages that use a space to split words are much less affected. (other than ) in the following example were parsed as intended in Docusaurus 2, but are not now in Docusaurus 3. {/ For Chinese translators: you can translate the following Japanese into Chinese. /} {/ prettier-ignore /} `md title=\"example.md\" Do not end a range of emphasis with a space. Or will not work as intended. <!-- Japanese --> 「。」の後に文を続けるとが意図した動作をしません。また、リンクやコードのすぐ外側に、そのさらに外側に句読点以外がある場合も同様です。 ` <details> <summary>See the detailed conditions and how to upgrade</summary> If or * matches either of the following conditions, it will not work as the beginning of an emphasis mark anymore: The next character is a space (e.g. word* word) The previous character is a punctuation character and the next character is a letter (not a space or punctuation character) (e.g. 文（文）) On the contrary, if or * matches either of the following conditions, it will not work as the end of an emphasis mark anymore: The previous character is a space (e.g. word *word) The next character is a punctuation character and the previous character is a letter (e.g. 文。文) “A punctuation character” includes non-ASCII ones, brackets, quotation marks and some symbols including % and @. More strictly speaking, a character whose 2-letters Unicode category starts with P is treated as a punctuation character here. :::tip How to upgrade If the offending emphasis mark is next to a space, move the space out of the range of emphasis: `md title=\"english.md\" Do not end a range of emphasis with a space. Or will not work. ` If the offending emphasis mark is surrounded by both a punctuation character and a letter, you can fix it without modifying the content by: Convert the document to MDX if it is a vanilla Markdown. replace the offending emphasis mark with a raw HTML tag (<em> or <strong>) instead: {/ prettier-ignore /} `mdx title=\"japanese.mdx\" <strong>「。」の後に文を続けるとが意図した動作をしません。</strong>また、<strong>リンク</strong>や<strong>コード</strong>のすぐ外側に、そのさらに外側に句読点以外がある場合も同様です。 ` While not an ideal solution, you can also either of the following without converting the document to MDX: Move the most outside punctuation character out of the emphasis mark. {/ prettier-ignore /} `md title=\"japanese.md\" 「。」の後に文を続けるとが意図した動作をしません。また、リンクや・・・ ` Put a space just outside of the offending or *. This solution does not force you to convert the document to MDX. {/ prettier-ignore /} `md title=\"japanese.md\" 「。」の後に文を続けるとが意図した動作をしません。 また、リンク や コード のすぐ外側に、そのさらに外側に句読点以外がある場合も同様です。 ` A unofficial remark plugin remark-cjk-friendly can fix this issue in most cases without modifying the Markdown source written in Chinese, Japanese, and Korean like the above. ::: </details> MDX plugins All the official packages (Unified, Remark, Rehype...) in the MDX ecosystem are now ES Modules only and do not support CommonJS anymore. In practice this means that you can't do require(\"remark-plugin\") anymore. :::tip How to upgrade Docusaurus v3 now supports ES Modules configuration files. We recommend that you migrate your config file to ES module, that enables you to import the Remark plugins easily: `js title=\"docusaurus.config.js\" import remarkPlugin from 'remark-plugin'; export default { title: 'Docusaurus', / site config using remark plugins here / }; ` If you want to keep using CommonJS modules, you can use dynamic imports as a workaround that enables you to import ES modules inside a CommonJS module. Fortunately, the Docusaurus config supports the usage of an async function to let you do so. `js title=\"docusaurus.config.js\" module.exports = async function () { const myPlugin = (await import('remark-plugin')).default; return { // site config... }; }; ` ::: :::info For plugin authors If you created custom Remark or Rehype plugins, you may need to refactor those, or eventually rewrite them completely, due to how the new AST is structured. We have created a dedicated support discussion to help plugin authors upgrade their code. ::: Formatters Prettier, the most common formatter, supports only the legacy MDX v1, not v3 yet as of Docusaurus v3.0.0. You can add {/ prettier-ignore /} before the incompatible parts of your code to make it work with Prettier. `mdx {/ prettier-ignore /} <SomeComponent>Some long text in the component</SomeComponent> ` If you get tired of too many {/ prettier-ignore /} insertions, you can consider disabling MDX formatting by Prettier by adding the following to your .prettierignore file, until it starts supporting MDX v3: `txt title=\".prettierignore\" *.mdx ` Other Breaking Changes Apart the MDX v3 upgrade, here is an exhaustive list of breaking changes coming with Docusaurus v3. Node.js v18.0 Node.js 16 reached End-of-Life, and Docusaurus v3 now requires Node.js >= 18.0. :::tip How to upgrade Install Node.js 18.0+ on your computer. Eventually, configure your continuous integration, CDN or host to use this new Node.js version. You can also update your site package.json to prevent usage of an older unsupported version: `diff title=\"package.json\" { \"engines\": { \"node\": \">=16.14\" \"node\": \">=18.0\" } } ` Upgrade your Docusaurus v2 site to Node.js 18 before upgrading to Docusaurus v3. ::: React v18.0+ Docusaurus v3 now requires React >= 18.0. React 18 comes with its own breaking changes that should be relatively easy to handle, depending on the amount of custom React code you created for your site. The official themes and plugins are compatible with React 18. :::info How to upgrade Read the official React v18.0 and How to Upgrade to React 18, and look at your own React code to figure out which components might be affected this upgrade. We recommend to particularly look for: Automatic batching for stateful components New React hydration errors reported to the console ::: :::danger Experimental support for React 18 features React 18 comes with new features: <Suspense> React.lazy() startTransition Their Docusaurus support is considered as experimental. We might have to adjust the integration in the future, leading to a different runtime behavior. ::: Prism-React-Renderer v2.0+ Docusaurus v3 upgrades prism-react-renderer to v2.0+. This library is used for code block syntax highlighting. :::info How to upgrade This is a new major library version containing breaking changes, and we can't guarantee a strict retro-compatibility. The prism-react-renderer v2 release notes are not super exhaustive, but there are 3 major changes to be aware of for Docusaurus users. The dependency should be upgraded: `diff title=\"package.json\" { \"dependencies\": { \"prism-react-renderer\": \"^1.3.5\", \"prism-react-renderer\": \"^2.1.0\", } ` The API to import themes in your Docusaurus config file has been updated: `diff title=\"docusaurus.config.js\" const lightTheme = require('prism-react-renderer/themes/github'); const darkTheme = require('prism-react-renderer/themes/dracula'); const {themes} = require('prism-react-renderer'); const lightTheme = themes.github; const darkTheme = themes.dracula; ` Previously, react-prism-render v1 included more languages by default. From v2.0+, less languages are included by default. You may need to add extra languages to your Docusaurus config: `js title=\"docusaurus.config.js\" const siteConfig = { themeConfig: { prism: { // highlight-next-line additionalLanguages: ['bash', 'diff', 'json'], }, }, }; ` ::: React-Live v4.0+ For users of the @docusaurus/theme-live-codeblock package, Docusaurus v3 upgrades react-live to v4.0+. :::info How to upgrade In theory, you have nothing to do, and your existing interactive code blocks should keep working as before. However, this is a new major library version containing breaking changes, and we can't guarantee a strict retro-compatibility. Read the v3 and v4 changelogs in case of problems. ::: remark-emoji v4.0+ Docusaurus v3 upgrades remark-emoji to v4.0+. This library is to support :emoji: shortcuts in Markdown. :::info How to upgrade Most Docusaurus users have nothing to do. Users of emoji shortcodes should read the changelog and double-check their emojis keep rendering as expected. > Breaking Change Update node-emoji from v1 to v2. This change introduces support for many new emojis and removes old emoji short codes which are no longer valid on GitHub. ::: Mermaid v10.4+ For users of the @docusaurus/theme-mermaid package, Docusaurus v3 upgrades mermaid to v10.4+. :::info How to upgrade In theory, you have nothing to do, and your existing diagrams should keep working as before. However, this is a new major library version containing breaking changes, and we can't guarantee a strict retro-compatibility. Read the v10 changelog in case of problem. ::: TypeScript v5.1+ Docusaurus v3 now requires TypeScript >= 5.1. :::info How to upgrade Upgrade your dependencies to use TypeScript 5+ `diff title=\"package.json\" { \"devDependencies\": { \"typescript\": \"~4.7.4\" \"typescript\": \"~5.2.2\" } } ` ::: TypeScript base config The official Docusaurus TypeScript config has been re-internalized from the external package @tsconfig/docusaurus to our new monorepo package @docusaurus/tsconfig. This new package is versioned alongside all the other Docusaurus core packages, and will be used to ensure TypeScript retro-compatibility and breaking changes on major version upgrades. :::info How to upgrade Swap the external TypeScript config package for the new official one `diff title=\"package.json\" { \"devDependencies\": { \"@tsconfig/docusaurus\": \"^1.0.7\", \"@docusaurus/tsconfig\": \"3.0.0\", } } ` Use it in your tsconfig.json file: `diff title=\"tsconfig.json\" { \"extends\": \"@tsconfig/docusaurus/tsconfig.json\", \"extends\": \"@docusaurus/tsconfig\", \"compilerOptions\": { \"baseUrl\": \".\" } } ` ::: New Config Loader Docusaurus v3 changes its internal config loading library from import-fresh to jiti. It is responsible for loading files such as docusaurus.config.js or sidebars.js, and Docusaurus plugins. :::info How to upgrade In theory, you have nothing to do, and your existing config files should keep working as before. However, this is a major dependency swap and subtle behavior changes could occur. ::: Admonition Warning For historical reasons, we support an undocumented admonition :::warning that renders with a red color. :::danger Warning This is a Docusaurus v2 :::warning admonition. ::: However, the color and icon have always been wrong. Docusaurus v3 re-introduces :::warning admonition officially, documents it, and fix the color and icon. :::warning This is a Docusaurus v3 :::warning admonition. ::: :::info How to upgrade If you previously used the undocumented :::warning admonition, make sure to verify for each usage if yellow is now an appropriate color. If you want to keep the red color, use :::danger instead. Docusaurus v3 also deprecated the :::caution admonition. Please refactor :::caution (yellow) to either :::warning (yellow) or :::danger (red). If you want to keep the title “caution”, you might want to refactor it to :::warning[caution] (yellow). ::: Versioned Sidebars This breaking change will only affect Docusaurus v2 early adopters who versioned their docs before v2.0.0-beta.10 (December 2021). When creating version v1.0.0, the sidebar file contained a prefix version-v1.0.0/ that Docusaurus v3 does not support anymore. `json title=\"versioned_sidebars/version-v1.0.0-sidebars.json\" { \"version-v1.0.0/docs\": [ \"version-v1.0.0/introduction\", \"version-v1.0.0/prerequisites\" ] } ` :::info How to upgrade Remove the useless versioned prefix from your versioned sidebars. `json title=\"versioned_sidebars/version-v1.0.0-sidebars.json\" { \"docs\": [\"introduction\", \"prerequisites\"] } ` ::: Blog Feed Limit The @docusaurus/plugin-content-blog now limits the RSS feed to the last 20 entries by default. For large Docusaurus blogs, this is a more sensible default value to avoid an increasingly large RSS file. :::info How to upgrade In case you don't like this new default behavior, you can revert to the former \"unlimited feed\" behavior with the new limit: false feed option: `js title=\"docusaurus.config.js\" const blogOptions = { feedOptions: { // highlight-next-line limit: false, }, }; ` ::: Docs Theme Refactoring For users that swizzled docs-related theme components (like @theme/DocPage), these components have been significantly refactor to make it easier to customize. Technically, this is not a breaking change because these components are flagged as unsafe to swizzle, however many Docusaurus sites ejected docs-related components, and will be interested to know their customizations might break Docusaurus. :::info How to upgrade Delete all your swizzled components, re-swizzle them, and re-apply your customizations on top of the newly updated components. Alternatively, you can look at the pull-request notes to understand the new theme component tree structure, and eventually try to patch your swizzled components manually. ::: Optional Changes Some changes are not mandatory, but remain useful to be aware of to plainly leverage Docusaurus v3. Automatic JSX runtime Docusaurus v3 now uses the React 18 \"automatic\" JSX runtime. It is not needed anymore to import React in JSX files that do not use any React API. `diff title=\"src/components/MyComponent.js\" import React from 'react'; export default function MyComponent() { return <div>Hello</div>; } ` ESM and TypeScript Configs Docusaurus v3 supports ESM and TypeScript config files, and it might be a good idea to adopt those new options. `js title=\"docusaurus.config.js\" export default { title: 'Docusaurus', url: 'https://docusaurus.io', // your site config ... }; ` `ts title=\"docusaurus.config.ts\" import type {Config} from '@docusaurus/types'; import type * as Preset from '@docusaurus/preset-classic'; const config: Config = { title: 'My Site', favicon: 'img/favicon.ico', presets: [ [ 'classic', { / Your preset config here / } satisfies Preset.Options, ], ], themeConfig: { / Your theme config here / } satisfies Preset.ThemeConfig, }; export default config; ` Using the .mdx extension We recommend using the .mdx extension whenever you use JSX, import, or export (i.e. MDX features) inside a Markdown file. It is semantically more correct and improves compatibility with external tools (IDEs, formatters, linters, etc.). In future versions of Docusaurus, .md files will be parsed as standard CommonMark, which does not support these features. In Docusaurus v3, .md files keep being compiled as MDX files, but it will be possible to opt-in for CommonMark. Upgrading math packages If you use Docusaurus to render Math Equations, you should upgrade the MDX plugins. Make sure to use remark-math 6 and rehype-katex 7 for Docusaurus v3 (using MDX v3). We can't guarantee other versions will work. `diff package.json { \"remark-math\": \"^3.0.0\", \"remark-math\": \"^6.0.0\", \"rehype-katex\": \"^5.0.0\" \"rehype-katex\": \"^7.0.0\" } ` hast-util-is-element is now unnecessary in Docusaurus v3. If you have installed it and don't use it somewhere else, you can just remove it by running npm uninstall hast-util-is-element. Turn off MDX v1 compat Docusaurus v3 comes with MDX v1 compatibility options, that are turned on by default. `js title=\"docusaurus.config.js\" export default { markdown: { mdx1Compat: { comments: true, admonitions: true, headingIds: true, }, }, }; ` comments option This option allows the usage of HTML comments inside MDX, while HTML comments are officially not supported anymore. For MDX files, we recommend to progressively use MDX {/ comments /} instead of HTML <!-- comments -->, and then turn this compatibility option off. :::info Blog truncate marker The default blog truncate marker now supports both <!-- truncate --> and {/ truncate /}. ::: admonitions option This option allows the usage of the Docusaurus v2 admonition title syntax: `md :::note Your Title content ::: ` Docusaurus now implements admonitions with Markdown Directives (implemented with remark-directive), and the syntax to provide a directive label requires square brackets: `md :::note[Your Title] content ::: ` We recommend to progressively use the new Markdown directive label syntax, and then turn this compatibility option off. headingIds option This option allows the usage of the Docusaurus v2 explicit heading id syntax: `mdx-code-block <Code language=\"md\">{'Hello World \\u007B#my-explicit-id}\\n'}</Code> ` This syntax is now invalid MDX, and would require to escape the { character: \\{#my-explicit-id}. We recommend to keep this compatibility option on for now, until we provide a new syntax compatible with newer versions of MDX. Troubleshooting In case of any upgrade problem, the first things to try are: make sure all your docs compile in the MDX playground, or using npx docusaurus-mdx-checker delete node_modules and package-lock.json, and then run npm install again run docusaurus clear to clear the caches remove third-party plugins that might not support Docusaurus v3 delete all your swizzled components Once you have tried that, you can ask for support through the following support channels: Docusaurus v3 - Upgrade Support Docusaurus v3 - Discord channel #migration-v2-to-v3 MDX v3 - Upgrade Support MDX v3 - Remark/Rehype Plugins Support MDX v3 - Discord channel #migration-mdx-v3 Please consider our time is precious. To ensure that your support request is not ignored, we kindly ask you to: provide a minimal reproduction that we can easily run, ideally created with docusaurus.new provide a live deployment url showing the problem in action (if your site can build) explain clearly the problem, much more than an ambiguous \"it doesn't work\" include as much relevant material as possible: code snippets, repo url, git branch urls, full stack traces, screenshots and videos present your request clearly, concisely, showing us that you have made an effort to help us help you Alternatively, you can look for a paid Docusaurus Service Provider to execute this upgrade for you. If your site is open source, you can also ask our community for free, benevolent help.",
    "keywords": [
      "upgrading",
      "to",
      "docusaurus",
      "v3",
      "migration",
      "mdx",
      "name",
      "core",
      "preset-classic",
      "react",
      "module-type-aliases",
      "types",
      "tsconfig",
      "summary",
      "details",
      "localhost",
      "h1",
      "theme",
      "MDXComponents",
      "div",
      "strong",
      "img",
      "myImage",
      "figcaption",
      "figure",
      "SomeComponent",
      "themes",
      "github",
      "dracula",
      "theme-live-codeblock",
      "theme-mermaid",
      "version-v1",
      "docs",
      "introduction",
      "prerequisites",
      "plugin-content-blog",
      "DocPage",
      "components",
      "MyComponent",
      "favicon",
      "Code",
      "Rehype",
      "Upgrading",
      "Docusaurus",
      "This",
      "documentation",
      "will",
      "help",
      "you",
      "upgrade",
      "your",
      "site",
      "from",
      "new",
      "major",
      "version",
      "including",
      "breaking",
      "changes",
      "requiring",
      "adjust",
      "accordingly",
      "guide",
      "during",
      "this",
      "process",
      "and",
      "also",
      "mention",
      "few",
      "optional",
      "recommendations",
      "not",
      "full",
      "rewrite",
      "the",
      "are",
      "relatively",
      "easy",
      "handle",
      "The",
      "simplest",
      "sites",
      "eventually",
      "simply",
      "updating",
      "their",
      "npm",
      "dependencies",
      "main",
      "change",
      "MDX",
      "Read",
      "release",
      "notes",
      "for",
      "now",
      "compile",
      "Markdown",
      "content",
      "more",
      "strictly",
      "with",
      "subtle",
      "differences",
      "tip",
      "Before",
      "recommend",
      "preparing",
      "There",
      "that",
      "can",
      "already",
      "incrementally",
      "under",
      "Doing",
      "reduce",
      "work",
      "needed",
      "finally",
      "For",
      "complex",
      "set",
      "visual",
      "regression",
      "tests",
      "good",
      "way",
      "ensure",
      "stays",
      "visually",
      "identical",
      "mainly",
      "upgrades",
      "expected",
      "produce",
      "any",
      "note",
      "Check",
      "browse",
      "pull",
      "requests",
      "additional",
      "useful",
      "information",
      "motivation",
      "behind",
      "each",
      "mentioned",
      "here",
      "Dependencies",
      "requires",
      "but",
      "other",
      "related",
      "packages",
      "uses",
      "following",
      "Node",
      "v18",
      "React",
      "TypeScript",
      "prism",
      "renderer",
      "live",
      "remark",
      "emoji",
      "mermaid",
      "v10",
      "warning",
      "community",
      "plugins",
      "third",
      "party",
      "might",
      "need",
      "them",
      "Make",
      "sure",
      "those",
      "compatible",
      "before",
      "attempting",
      "typical",
      "package",
      "json",
      "dependency",
      "example",
      "diff",
      "title",
      "preset",
      "classic",
      "dom",
      "devDependencies",
      "dev",
      "module",
      "type",
      "aliases",
      "engines",
      "require",
      "node",
      "users",
      "swap",
      "external",
      "config",
      "official",
      "one",
      "typescript",
      "responsible",
      "compiling",
      "files",
      "transition",
      "challenge",
      "adoption",
      "Most",
      "come",
      "small",
      "Some",
      "documents",
      "compiled",
      "successfully",
      "fail",
      "Find",
      "problematic",
      "ahead",
      "time",
      "Run",
      "npx",
      "checker",
      "get",
      "list",
      "command",
      "estimate",
      "amount",
      "done",
      "make",
      "Remember",
      "most",
      "executed",
      "Other",
      "render",
      "differently",
      "Use",
      "large",
      "where",
      "manual",
      "review",
      "all",
      "pages",
      "complicated",
      "setup",
      "comes",
      "documented",
      "blog",
      "posts",
      "has",
      "section",
      "how",
      "update",
      "particularly",
      "relevant",
      "Also",
      "read",
      "Troubleshooting",
      "page",
      "interpret",
      "common",
      "error",
      "messages",
      "our",
      "updated",
      "Using",
      "playground",
      "best",
      "friend",
      "permits",
      "understand",
      "troubleshoot",
      "compilation",
      "rendering",
      "issues",
      "isolation",
      "current",
      "Configuring",
      "options",
      "obtain",
      "behavior",
      "similar",
      "what",
      "please",
      "turn",
      "these",
      "gfm",
      "directive",
      "Screenshot",
      "panel",
      "only",
      "checked",
      "two",
      "playgrounds",
      "side",
      "soon",
      "notice",
      "some",
      "fails",
      "Making",
      "future",
      "proof",
      "goal",
      "refactor",
      "works",
      "fine",
      "both",
      "versions",
      "when",
      "out",
      "box",
      "CLI",
      "provide",
      "easily",
      "spot",
      "bash",
      "issue",
      "log",
      "file",
      "path",
      "line",
      "number",
      "look",
      "terminal",
      "showing",
      "output",
      "much",
      "required",
      "effort",
      "report",
      "errors",
      "affect",
      "displayed",
      "catch",
      "problems",
      "using",
      "Common",
      "cannot",
      "document",
      "exhaustively",
      "coming",
      "That",
      "responsibility",
      "guides",
      "However",
      "noticed",
      "down",
      "cases",
      "have",
      "Bad",
      "usage",
      "character",
      "used",
      "opening",
      "JavaScript",
      "expressions",
      "put",
      "inside",
      "expression",
      "valid",
      "object",
      "shape",
      "looks",
      "like",
      "username",
      "string",
      "age",
      "danger",
      "Error",
      "message",
      "Could",
      "parse",
      "acorn",
      "Unexpected",
      "after",
      "How",
      "Available",
      "fix",
      "inline",
      "code",
      "HTML",
      "Escape",
      "JSX",
      "tags",
      "thinks",
      "invalid",
      "Android",
      "You",
      "use",
      "generic",
      "Array",
      "Follow",
      "template",
      "Road",
      "YOUR_MINOR_VERSION",
      "start",
      "such",
      "letter",
      "Expected",
      "closing",
      "tag",
      "end",
      "paragraph",
      "mismatch",
      "mdast",
      "util",
      "jsx",
      "GFM",
      "Autolink",
      "supports",
      "GitHub",
      "Flavored",
      "autolink",
      "link",
      "syntax",
      "supported",
      "anymore",
      "sebastien",
      "thisweekinreact",
      "com",
      "http",
      "letters",
      "digits",
      "whitespace",
      "attributes",
      "create",
      "text",
      "local",
      "regular",
      "links",
      "remove",
      "able",
      "literals",
      "prettier",
      "ignore",
      "Lower",
      "case",
      "MDXComponent",
      "mapping",
      "providing",
      "custom",
      "MDXComponentmapping",
      "sandboxed",
      "gets",
      "lower",
      "cased",
      "element",
      "substituted",
      "its",
      "respective",
      "component",
      "difference",
      "Your",
      "applied",
      "longer",
      "native",
      "elements",
      "keep",
      "upper",
      "names",
      "src",
      "import",
      "original",
      "export",
      "default",
      "props",
      "className",
      "myElement",
      "class",
      "MyElement",
      "Unintended",
      "extra",
      "paragraphs",
      "possible",
      "interleave",
      "without",
      "breaks",
      "Writing",
      "multiple",
      "lines",
      "See",
      "rendered",
      "html",
      "don",
      "want",
      "basis",
      "single",
      "png",
      "alt",
      "image",
      "caption",
      "wrap",
      "avoid",
      "intend",
      "there",
      "yet",
      "directives",
      "Directives",
      "implemented",
      "support",
      "admonitions",
      "upcoming",
      "features",
      "textDirective",
      "leafDirective",
      "containerDirective",
      "Container",
      "Visual",
      "parsed",
      "purpose",
      "being",
      "handled",
      "Remark",
      "Unhandled",
      "ignored",
      "won",
      "back",
      "form",
      "AWS",
      "Invent",
      "conf",
      "great",
      "Due",
      "Add",
      "space",
      "makes",
      "sense",
      "Unsupported",
      "indented",
      "blocks",
      "does",
      "transform",
      "console",
      "hello",
      "generally",
      "lead",
      "unexpected",
      "because",
      "isn",
      "block",
      "instead",
      "indentation",
      "incompatibilities",
      "Emphasis",
      "starting",
      "ending",
      "punctuation",
      "New",
      "parser",
      "complies",
      "CommonMark",
      "spec",
      "introduced",
      "rules",
      "emphasis",
      "around",
      "spaces",
      "which",
      "incompatible",
      "especially",
      "languages",
      "split",
      "words",
      "since",
      "Japanese",
      "Chinese",
      "affected",
      "Thai",
      "Khmer",
      "try",
      "emphasize",
      "Languages",
      "less",
      "than",
      "were",
      "intended",
      "translators",
      "translate",
      "into",
      "range",
      "detailed",
      "conditions",
      "matches",
      "either",
      "beginning",
      "mark",
      "next",
      "word",
      "previous",
      "contrary",
      "includes",
      "non",
      "ASCII",
      "ones",
      "brackets",
      "quotation",
      "marks",
      "symbols",
      "More",
      "speaking",
      "whose",
      "Unicode",
      "category",
      "starts",
      "treated",
      "offending",
      "move",
      "english",
      "surrounded",
      "modifying",
      "Convert",
      "vanilla",
      "replace",
      "raw",
      "japanese",
      "While",
      "ideal",
      "solution",
      "converting",
      "Move",
      "outside",
      "Put",
      "just",
      "force",
      "convert",
      "unofficial",
      "plugin",
      "cjk",
      "friendly",
      "source",
      "written",
      "Korean",
      "above",
      "All",
      "Unified",
      "ecosystem",
      "Modules",
      "CommonJS",
      "practice",
      "means",
      "configuration",
      "migrate",
      "enables",
      "remarkPlugin",
      "modules",
      "dynamic",
      "imports",
      "workaround",
      "Fortunately",
      "async",
      "function",
      "let",
      "exports",
      "const",
      "myPlugin",
      "await",
      "return",
      "info",
      "authors",
      "created",
      "may",
      "completely",
      "due",
      "AST",
      "structured",
      "dedicated",
      "discussion",
      "Formatters",
      "Prettier",
      "formatter",
      "legacy",
      "add",
      "parts",
      "long",
      "tired",
      "too",
      "many",
      "insertions",
      "consider",
      "disabling",
      "formatting",
      "adding",
      "prettierignore",
      "until",
      "supporting",
      "txt",
      "Breaking",
      "Changes",
      "Apart",
      "exhaustive",
      "reached",
      "End",
      "Life",
      "Install",
      "computer",
      "Eventually",
      "configure",
      "continuous",
      "integration",
      "CDN",
      "host",
      "prevent",
      "older",
      "unsupported",
      "Upgrade",
      "own",
      "should",
      "depending",
      "Automatic",
      "batching",
      "stateful",
      "hydration",
      "reported",
      "Experimental",
      "Suspense",
      "lazy",
      "startTransition",
      "Their",
      "considered",
      "experimental",
      "leading",
      "different",
      "runtime",
      "Prism",
      "Renderer",
      "library",
      "highlighting",
      "containing",
      "guarantee",
      "strict",
      "retro",
      "compatibility",
      "super",
      "aware",
      "upgraded",
      "API",
      "been",
      "lightTheme",
      "darkTheme",
      "Previously",
      "included",
      "From",
      "siteConfig",
      "themeConfig",
      "highlight",
      "additionalLanguages",
      "Live",
      "codeblock",
      "theory",
      "nothing",
      "existing",
      "interactive",
      "working",
      "changelogs",
      "shortcuts",
      "Users",
      "shortcodes",
      "changelog",
      "double",
      "check",
      "emojis",
      "Change",
      "Update",
      "introduces",
      "removes",
      "old",
      "short",
      "codes",
      "Mermaid",
      "diagrams",
      "problem",
      "base",
      "internalized",
      "monorepo",
      "versioned",
      "alongside",
      "Swap",
      "extends",
      "compilerOptions",
      "baseUrl",
      "Config",
      "Loader",
      "internal",
      "loading",
      "fresh",
      "jiti",
      "sidebars",
      "could",
      "occur",
      "Admonition",
      "Warning",
      "historical",
      "reasons",
      "undocumented",
      "admonition",
      "renders",
      "red",
      "color",
      "icon",
      "always",
      "wrong",
      "officially",
      "previously",
      "verify",
      "yellow",
      "appropriate",
      "deprecated",
      "caution",
      "Please",
      "Versioned",
      "Sidebars",
      "early",
      "adopters",
      "who",
      "beta",
      "December",
      "When",
      "creating",
      "sidebar",
      "contained",
      "prefix",
      "versioned_sidebars",
      "Remove",
      "useless",
      "Blog",
      "Feed",
      "Limit",
      "limits",
      "RSS",
      "feed",
      "last",
      "entries",
      "blogs",
      "sensible",
      "value",
      "increasingly",
      "revert",
      "former",
      "unlimited",
      "limit",
      "false",
      "option",
      "blogOptions",
      "feedOptions",
      "Docs",
      "Theme",
      "Refactoring",
      "swizzled",
      "significantly",
      "easier",
      "customize",
      "Technically",
      "flagged",
      "unsafe",
      "swizzle",
      "however",
      "ejected",
      "interested",
      "know",
      "customizations",
      "break",
      "Delete",
      "apply",
      "top",
      "newly",
      "Alternatively",
      "request",
      "tree",
      "structure",
      "patch",
      "manually",
      "Optional",
      "mandatory",
      "remain",
      "plainly",
      "leverage",
      "automatic",
      "Hello",
      "ESM",
      "Configs",
      "idea",
      "adopt",
      "url",
      "https",
      "Preset",
      "Site",
      "ico",
      "presets",
      "satisfies",
      "Options",
      "ThemeConfig",
      "extension",
      "whenever",
      "semantically",
      "correct",
      "improves",
      "tools",
      "IDEs",
      "formatters",
      "linters",
      "etc",
      "standard",
      "opt",
      "math",
      "Math",
      "Equations",
      "rehype",
      "katex",
      "hast",
      "unnecessary",
      "installed",
      "somewhere",
      "else",
      "running",
      "uninstall",
      "Turn",
      "off",
      "compat",
      "turned",
      "markdown",
      "mdx1Compat",
      "comments",
      "true",
      "headingIds",
      "allows",
      "while",
      "progressively",
      "then",
      "truncate",
      "marker",
      "Title",
      "implements",
      "label",
      "square",
      "explicit",
      "heading",
      "language",
      "World",
      "u007B",
      "would",
      "escape",
      "newer",
      "first",
      "things",
      "delete",
      "node_modules",
      "lock",
      "run",
      "install",
      "again",
      "clear",
      "caches",
      "Once",
      "tried",
      "ask",
      "through",
      "channels",
      "Support",
      "Discord",
      "channel",
      "Plugins",
      "precious",
      "kindly",
      "minimal",
      "reproduction",
      "ideally",
      "deployment",
      "action",
      "build",
      "explain",
      "clearly",
      "ambiguous",
      "doesn",
      "include",
      "material",
      "snippets",
      "repo",
      "git",
      "branch",
      "urls",
      "stack",
      "traces",
      "screenshots",
      "videos",
      "present",
      "concisely",
      "made",
      "paid",
      "Service",
      "Provider",
      "execute",
      "open",
      "free",
      "benevolent"
    ],
    "url": "/docs/migration/v3",
    "path": "migration/v3.mdx",
    "type": "general",
    "category": "migration"
  },
  {
    "id": "playground",
    "title": "Playground",
    "description": "",
    "content": "Playground Playgrounds allow you to run Docusaurus in your browser, without installing anything! They are mostly useful for: Testing Docusaurus Reporting bugs Use docusaurus.new as an easy-to-remember shortcut. Choose one of the available options below. `mdx-code-block import {PlaygroundCardsRow} from '@site/src/components/Playground'; <PlaygroundCardsRow /> ` :::tip For convenience, we'll remember your choice next time you visit docusaurus.new. :::",
    "keywords": [
      "playground",
      "mdx",
      "src",
      "components",
      "Playground",
      "Playgrounds",
      "allow",
      "you",
      "run",
      "Docusaurus",
      "your",
      "browser",
      "without",
      "installing",
      "anything",
      "They",
      "are",
      "mostly",
      "useful",
      "for",
      "Testing",
      "Reporting",
      "bugs",
      "Use",
      "docusaurus",
      "new",
      "easy",
      "remember",
      "shortcut",
      "Choose",
      "one",
      "the",
      "available",
      "options",
      "below",
      "code",
      "block",
      "import",
      "PlaygroundCardsRow",
      "from",
      "site",
      "tip",
      "For",
      "convenience",
      "choice",
      "next",
      "time",
      "visit"
    ],
    "url": "/docs/playground",
    "path": "playground.mdx",
    "type": "general",
    "category": "root"
  },
  {
    "id": "search",
    "title": "Search",
    "description": "",
    "content": "Search There are a few options you can use to add search to your website: 🥇 Algolia DocSearch (official) 👥 Typesense DocSearch 👥 Local Search 👥 Your own SearchBar component :::info 🥇 Docusaurus provides first-class support for Algolia DocSearch. 👥 Other options are maintained by the community: please report bugs to their respective repositories. ::: 🥇 Using Algolia DocSearch {#using-algolia-docsearch} Docusaurus has official support for Algolia DocSearch. The service is free for any developer documentation or technical blog: just make sure to read the checklist and apply to the DocSearch program. DocSearch crawls your website once a week (the schedule is configurable from the web interface) and aggregates all the content in an Algolia index. This content is then queried directly from your front-end using the Algolia API. If your website is not eligible for the free, hosted version of DocSearch, or if your website sits behind a firewall and is not public, then you can run your own DocSearch crawler. :::note By default, the Docusaurus preset generates a sitemap.xml that the Algolia crawler can use. ::: :::info From the old docsearch? You can read more about migration from the legacy DocSearch infra in our blog post or the DocSearch migration docs. ::: Index Configuration {#algolia-index-configuration} After your application has been approved and deployed, you will receive an email with all the details for you to add DocSearch to your project. Editing and managing your crawls can be done via the web interface. Indices are readily available after deployment, so manual configuration usually isn't necessary. :::danger Use the recommended crawler config It is highly recommended to use our official Docusaurus v3 crawler configuration. We cannot support you if you choose a different crawler configuration. ::: :::warning When updating your crawler config The crawler configuration contains a initialIndexSettings, which will only be used to initialize your Algolia index if it does not exist yet. If you update your initialIndexSettings crawler setting, it is possible to update the index manually through the interface, but the Algolia team recommends to delete your index and then restart a crawl to fully reinitialize it with the new settings. ::: Connecting Algolia {#connecting-algolia} Docusaurus' own @docusaurus/preset-classic supports Algolia DocSearch integration. If you use the classic preset, no additional installation is needed. <details> <summary>Installation steps when not using <code>@docusaurus/preset-classic</code></summary> Install the package: `bash npm2yarn npm install --save @docusaurus/theme-search-algolia ` Register the theme in docusaurus.config.js: `js title=\"docusaurus.config.js\" export default { title: 'My site', // ... themes: ['@docusaurus/theme-search-algolia'], themeConfig: { // ... }, }; ` </details> Then, add an algolia field in your themeConfig. Apply for DocSearch to get your Algolia index and API key. `js title=\"docusaurus.config.js\" export default { // ... themeConfig: { // ... // highlight-start algolia: { // The application ID provided by Algolia appId: 'YOUR_APP_ID', // Public API key: it is safe to commit it apiKey: 'YOUR_SEARCH_API_KEY', indexName: 'YOUR_INDEX_NAME', // Optional: see doc section below contextualSearch: true, // Optional: Specify domains where the navigation should occur through window.location instead on history.push. Useful when our Algolia config crawls multiple documentation sites and we want to navigate with window.location.href to them. externalUrlRegex: 'external\\\\.com|domain\\\\.com', // Optional: Replace parts of the item URLs from Algolia. Useful when using the same search index for multiple deployments using a different baseUrl. You can use regexp or string in the from param. For example: localhost:3000 vs myCompany.com/docs replaceSearchResultPathname: { from: '/docs/', // or as RegExp: /\\/docs\\// to: '/', }, // Optional: Algolia search parameters searchParameters: {}, // Optional: path for search page that enabled by default (false to disable it) searchPagePath: 'search', // Optional: whether the insights feature is enabled or not on Docsearch (false by default) insights: false, //... other Algolia params }, // highlight-end }, }; ` :::info The searchParameters option used to be named algoliaOptions in Docusaurus v1. Refer to its official DocSearch documentation for possible values. ::: :::warning The search feature will not work reliably until Algolia crawls your site. If search doesn't work after any significant change, please use the Algolia dashboard to trigger a new crawl. ::: Contextual search {#contextual-search} Contextual search is enabled by default. It ensures that search results are relevant to the current language and version. `js title=\"docusaurus.config.js\" export default { // ... themeConfig: { // ... // highlight-start algolia: { contextualSearch: true, }, // highlight-end }, }; ` Let's consider you have 2 docs versions (v1 and v2) and 2 languages (en and fr). When browsing v2 docs, it would be odd to return search results for the v1 documentation. Sometimes v1 and v2 docs are quite similar, and you would end up with duplicate search results for the same query (one result per version). Similarly, when browsing the French site, it would be odd to return search results for the English docs. To solve this problem, the contextual search feature understands that you are browsing a specific docs version and language, and will create the search query filters dynamically. on /en/docs/v1/myDoc, search results will only include English results for the v1 docs (+ other unversioned pages) on /fr/docs/v2/myDoc, search results will only include French results for the v2 docs (+ other unversioned pages) :::info When using contextualSearch: true (default), the contextual facet filters will be merged with the ones provided with algolia.searchParameters.facetFilters . For specific needs, you can disable contextualSearch and define your own facetFilters: `js title=\"docusaurus.config.js\" export default { // ... themeConfig: { // ... // highlight-start algolia: { contextualSearch: false, searchParameters: { facetFilters: ['language:en', ['filter1', 'filter2'], 'filter3'], }, }, // highlight-end }, }; ` Refer to the relevant Algolia faceting documentation. ::: :::warning Contextual search doesn't work? If you only get search results when Contextual Search is disabled, this is very likely because of an index configuration issue. ::: Styling your Algolia search {#styling-your-algolia-search} By default, DocSearch comes with a fine-tuned theme that was designed for accessibility, making sure that colors and contrasts respect standards. Still, you can reuse the Infima CSS variables from Docusaurus to style DocSearch by editing the /src/css/custom.css file. `css title=\"/src/css/custom.css\" [data-theme='light'] .DocSearch { / --docsearch-primary-color: var(--ifm-color-primary); / / --docsearch-text-color: var(--ifm-font-color-base); / --docsearch-muted-color: var(--ifm-color-secondary-darkest); --docsearch-container-background: rgba(94, 100, 112, 0.7); / Modal / --docsearch-modal-background: var(--ifm-color-secondary-lighter); / Search box / --docsearch-searchbox-background: var(--ifm-color-secondary); --docsearch-searchbox-focus-background: var(--ifm-color-white); / Hit / --docsearch-hit-color: var(--ifm-font-color-base); --docsearch-hit-active-color: var(--ifm-color-white); --docsearch-hit-background: var(--ifm-color-white); / Footer / --docsearch-footer-background: var(--ifm-color-white); } [data-theme='dark'] .DocSearch { --docsearch-text-color: var(--ifm-font-color-base); --docsearch-muted-color: var(--ifm-color-secondary-darkest); --docsearch-container-background: rgba(47, 55, 69, 0.7); / Modal / --docsearch-modal-background: var(--ifm-background-color); / Search box / --docsearch-searchbox-background: var(--ifm-background-color); --docsearch-searchbox-focus-background: var(--ifm-color-black); / Hit / --docsearch-hit-color: var(--ifm-font-color-base); --docsearch-hit-active-color: var(--ifm-color-white); --docsearch-hit-background: var(--ifm-color-emphasis-100); / Footer / --docsearch-footer-background: var(--ifm-background-surface-color); --docsearch-key-gradient: linear-gradient( -26.5deg, var(--ifm-color-emphasis-200) 0%, var(--ifm-color-emphasis-100) 100% ); } ` Customizing the Algolia search behavior {#customizing-the-algolia-search-behavior} Algolia DocSearch supports a list of options that you can pass to the algolia field in the docusaurus.config.js file. `js title=\"docusaurus.config.js\" export default { themeConfig: { // ... algolia: { apiKey: 'YOUR_API_KEY', indexName: 'YOUR_INDEX_NAME', // Options... }, }, }; ` Editing the Algolia search component {#editing-the-algolia-search-component} If you prefer to edit the Algolia search React component, swizzle the SearchBar component in @docusaurus/theme-search-algolia: `bash npm2yarn npm run swizzle @docusaurus/theme-search-algolia SearchBar ` Troubleshooting {#algolia-troubleshooting} Here are the most common issues Docusaurus users face when using Algolia DocSearch. No Search Results {#algolia-no-search-results} Seeing no search results is usually related to an index configuration problem. <details> <summary>How to check if I have a config problem?</summary> Docusaurus uses Algolia faceting for its Contextual Search feature, to create dynamic queries such as: `json [ \"language:en\", [ \"docusaurus_tag:default\", \"docusaurus_tag:docs-default-3.2.1\", \"docusaurus_tag:docs-community-current\", \"docusaurus_tag:docs-docs-tests-current\" ] ] ` On the Algolia UI, your index should allow to create facet queries on fields docusaurus_tag, language, lang, version, type, as shown in the screenshot below: !Algolia index showing appropriate faceting fields Alternatively, if you disable Contextual Search with {contextualSearch: false} (which we don't particularly recommend), Docusaurus will not use facet queries, and you should start seeing results. </details> :::danger Use the recommended configuration We recommend a specific crawler configuration for a good reason. We cannot support you if you choose to use a different configuration. ::: You can fix index configuration problems by following those steps: Use the recommend crawler configuration Delete your index through the UI Trigger a new crawl through the UI Check your index is recreated with the appropriate faceting fields: docusaurus_tag, language, lang, version, type See that you now get search results, even with Contextual Search enabled Support {#algolia-support} The Algolia DocSearch team can help you figure out search problems on your site. You can reach out to Algolia via their support page or on Discord. Docusaurus also has an #algolia channel on Discord. 👥 Using Typesense DocSearch {#using-typesense-docsearch} Typesense DocSearch works similar to Algolia DocSearch, except that your website is indexed into a Typesense search cluster. Typesense is an open source instant-search engine that you can either: Self-Host on your own servers or Use the Managed Typesense Cloud service. Similar to Algolia DocSearch, there are two components: typesense-docsearch-scraper - which scrapes your website and indexes the data in your Typesense cluster. docusaurus-theme-search-typesense - a search bar UI component to add to your website. Read a step-by-step walk-through of how to run typesense-docsearch-scraper here and how to install the Search Bar in your Docusaurus Site here. 👥 Using Local Search {#using-local-search} You can use a local search plugin for websites where the search index is small and can be downloaded to your users' browsers when they visit your website. You'll find a list of community-supported local search plugins listed here. 👥 Using your own search {#using-your-own-search} To use your own search, swizzle the SearchBar component in @docusaurus/theme-classic `bash npm2yarn npm run swizzle @docusaurus/theme-classic SearchBar ` This will create an src/theme/SearchBar file in your project folder. Restart your dev server and edit the component, you will see that Docusaurus uses your own SearchBar component now. Notes: You can alternatively swizzle from Algolia SearchBar and create your own search component from there.",
    "keywords": [
      "search",
      "mdx",
      "preset-classic",
      "code",
      "summary",
      "theme-search-algolia",
      "details",
      "docs",
      "en",
      "v1",
      "myDoc",
      "fr",
      "v2",
      "src",
      "css",
      "custom",
      "theme-classic",
      "theme",
      "SearchBar",
      "Search",
      "There",
      "are",
      "few",
      "options",
      "you",
      "can",
      "use",
      "add",
      "your",
      "website",
      "Algolia",
      "DocSearch",
      "official",
      "Typesense",
      "Local",
      "Your",
      "own",
      "component",
      "info",
      "Docusaurus",
      "provides",
      "first",
      "class",
      "support",
      "for",
      "Other",
      "maintained",
      "the",
      "community",
      "please",
      "report",
      "bugs",
      "their",
      "respective",
      "repositories",
      "Using",
      "using",
      "algolia",
      "docsearch",
      "has",
      "The",
      "service",
      "free",
      "any",
      "developer",
      "documentation",
      "technical",
      "blog",
      "just",
      "make",
      "sure",
      "read",
      "checklist",
      "and",
      "apply",
      "program",
      "crawls",
      "once",
      "week",
      "schedule",
      "configurable",
      "from",
      "web",
      "interface",
      "aggregates",
      "all",
      "content",
      "index",
      "This",
      "then",
      "queried",
      "directly",
      "front",
      "end",
      "API",
      "not",
      "eligible",
      "hosted",
      "version",
      "sits",
      "behind",
      "firewall",
      "public",
      "run",
      "crawler",
      "note",
      "default",
      "preset",
      "generates",
      "sitemap",
      "xml",
      "that",
      "From",
      "old",
      "You",
      "more",
      "about",
      "migration",
      "legacy",
      "infra",
      "our",
      "post",
      "Index",
      "Configuration",
      "configuration",
      "After",
      "application",
      "been",
      "approved",
      "deployed",
      "will",
      "receive",
      "email",
      "with",
      "project",
      "Editing",
      "managing",
      "done",
      "via",
      "Indices",
      "readily",
      "available",
      "after",
      "deployment",
      "manual",
      "usually",
      "isn",
      "necessary",
      "danger",
      "Use",
      "recommended",
      "config",
      "highly",
      "cannot",
      "choose",
      "different",
      "warning",
      "When",
      "updating",
      "contains",
      "initialIndexSettings",
      "which",
      "only",
      "used",
      "initialize",
      "does",
      "exist",
      "yet",
      "update",
      "setting",
      "possible",
      "manually",
      "through",
      "but",
      "team",
      "recommends",
      "delete",
      "restart",
      "crawl",
      "fully",
      "reinitialize",
      "new",
      "settings",
      "Connecting",
      "connecting",
      "docusaurus",
      "classic",
      "supports",
      "integration",
      "additional",
      "installation",
      "needed",
      "Installation",
      "steps",
      "when",
      "Install",
      "package",
      "bash",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "Register",
      "title",
      "export",
      "site",
      "themes",
      "themeConfig",
      "Then",
      "field",
      "Apply",
      "get",
      "key",
      "highlight",
      "start",
      "provided",
      "appId",
      "YOUR_APP_ID",
      "Public",
      "safe",
      "commit",
      "apiKey",
      "YOUR_SEARCH_API_KEY",
      "indexName",
      "YOUR_INDEX_NAME",
      "Optional",
      "see",
      "doc",
      "section",
      "below",
      "contextualSearch",
      "true",
      "Specify",
      "domains",
      "where",
      "navigation",
      "should",
      "occur",
      "window",
      "location",
      "instead",
      "history",
      "push",
      "Useful",
      "multiple",
      "sites",
      "want",
      "navigate",
      "href",
      "them",
      "externalUrlRegex",
      "external",
      "com",
      "domain",
      "Replace",
      "parts",
      "item",
      "URLs",
      "same",
      "deployments",
      "baseUrl",
      "regexp",
      "string",
      "param",
      "For",
      "example",
      "localhost",
      "myCompany",
      "RegExp",
      "parameters",
      "searchParameters",
      "path",
      "page",
      "enabled",
      "false",
      "disable",
      "searchPagePath",
      "whether",
      "insights",
      "feature",
      "Docsearch",
      "other",
      "params",
      "option",
      "named",
      "algoliaOptions",
      "Refer",
      "its",
      "values",
      "work",
      "reliably",
      "until",
      "doesn",
      "significant",
      "change",
      "dashboard",
      "trigger",
      "Contextual",
      "contextual",
      "ensures",
      "results",
      "relevant",
      "current",
      "language",
      "Let",
      "consider",
      "have",
      "versions",
      "languages",
      "browsing",
      "would",
      "odd",
      "return",
      "Sometimes",
      "quite",
      "similar",
      "duplicate",
      "query",
      "one",
      "result",
      "per",
      "Similarly",
      "French",
      "English",
      "solve",
      "this",
      "problem",
      "understands",
      "specific",
      "create",
      "filters",
      "dynamically",
      "include",
      "unversioned",
      "pages",
      "facet",
      "merged",
      "ones",
      "facetFilters",
      "needs",
      "define",
      "filter1",
      "filter2",
      "filter3",
      "faceting",
      "disabled",
      "very",
      "likely",
      "because",
      "issue",
      "Styling",
      "styling",
      "comes",
      "fine",
      "tuned",
      "was",
      "designed",
      "accessibility",
      "making",
      "colors",
      "contrasts",
      "respect",
      "standards",
      "Still",
      "reuse",
      "Infima",
      "CSS",
      "variables",
      "style",
      "editing",
      "file",
      "data",
      "light",
      "primary",
      "color",
      "var",
      "ifm",
      "text",
      "font",
      "base",
      "muted",
      "secondary",
      "darkest",
      "container",
      "background",
      "rgba",
      "Modal",
      "modal",
      "lighter",
      "box",
      "searchbox",
      "focus",
      "white",
      "Hit",
      "hit",
      "active",
      "Footer",
      "footer",
      "dark",
      "black",
      "emphasis",
      "surface",
      "gradient",
      "linear",
      "Customizing",
      "behavior",
      "customizing",
      "list",
      "pass",
      "YOUR_API_KEY",
      "Options",
      "prefer",
      "edit",
      "React",
      "swizzle",
      "Troubleshooting",
      "troubleshooting",
      "Here",
      "most",
      "common",
      "issues",
      "users",
      "face",
      "Results",
      "Seeing",
      "related",
      "How",
      "check",
      "uses",
      "dynamic",
      "queries",
      "such",
      "json",
      "docusaurus_tag",
      "tests",
      "allow",
      "fields",
      "lang",
      "type",
      "shown",
      "screenshot",
      "showing",
      "appropriate",
      "Alternatively",
      "don",
      "particularly",
      "recommend",
      "seeing",
      "good",
      "reason",
      "fix",
      "problems",
      "following",
      "those",
      "Delete",
      "Trigger",
      "Check",
      "recreated",
      "See",
      "now",
      "even",
      "Support",
      "help",
      "figure",
      "out",
      "reach",
      "Discord",
      "also",
      "channel",
      "typesense",
      "works",
      "except",
      "indexed",
      "into",
      "cluster",
      "open",
      "source",
      "instant",
      "engine",
      "either",
      "Self",
      "Host",
      "servers",
      "Managed",
      "Cloud",
      "Similar",
      "there",
      "two",
      "components",
      "scraper",
      "scrapes",
      "indexes",
      "bar",
      "Read",
      "step",
      "walk",
      "how",
      "here",
      "Bar",
      "Site",
      "local",
      "plugin",
      "websites",
      "small",
      "downloaded",
      "browsers",
      "they",
      "visit",
      "find",
      "supported",
      "plugins",
      "listed",
      "folder",
      "Restart",
      "dev",
      "server",
      "Notes",
      "alternatively"
    ],
    "url": "/docs/search",
    "path": "search.mdx",
    "type": "general",
    "category": "root"
  },
  {
    "id": "seo",
    "title": "Search engine optimization (SEO)",
    "description": "How to make your Docusaurus site maximally search-engine-friendly.",
    "content": "Search engine optimization (SEO) import BrowserWindow from '@site/src/components/BrowserWindow'; Docusaurus supports search engine optimization in a variety of ways. Global metadata {#global-metadata} Provide global meta attributes for the entire site through the site configuration. The metadata will all be rendered in the HTML <head> using the key-value pairs as the prop name and value. The metadata attribute is a convenient shortcut to declare <meta> tags, but it is also possible to inject arbitrary tags in <head> with the headTags attribute. `js title=\"docusaurus.config.js\" export default { themeConfig: { // Declare some <meta> tags metadata: [ {name: 'keywords', content: 'cooking, blog'}, {name: 'twitter:card', content: 'summary_large_image'}, ], }, headTags: [ // Declare a <link> preconnect tag { tagName: 'link', attributes: { rel: 'preconnect', href: 'https://example.com', }, }, // Declare some json-ld structured data { tagName: 'script', attributes: { type: 'application/ld+json', }, innerHTML: JSON.stringify({ '@context': 'https://schema.org/', '@type': 'Organization', name: 'Meta Open Source', url: 'https://opensource.fb.com/', logo: 'https://opensource.fb.com/img/logos/Meta-Open-Source.svg', }), }, ], }; ` Docusaurus adds some metadata out-of-the-box. For example, if you have configured i18n, you will get a hreflang alternate link. To read more about types of meta tags, visit the MDN docs. Single page metadata {#single-page-metadata} Similar to global metadata, Docusaurus also allows for the addition of meta-information to individual pages. Follow this guide for configuring the <head> tag. In short: `md title=\"my-markdown-page.mdx\" A cooking guide <head> <meta name=\"keywords\" content=\"cooking, blog\" /> <meta name=\"twitter:card\" content=\"summary_large_image\" /> <link rel=\"preconnect\" href=\"https://example.com\" /> <script type=\"application/ld+json\"> {JSON.stringify({ '@context': 'https://schema.org/', '@type': 'Organization', name: 'Meta Open Source', url: 'https://opensource.fb.com/', logo: 'https://opensource.fb.com/img/logos/Meta-Open-Source.svg', })} </script> </head> Some content... ` Docusaurus automatically adds description, title, canonical URL links, and other useful metadata to each Markdown page. They are configurable through front matter: `md --- title: Title for search engines; can be different from the actual heading description: A short description of this page image: a thumbnail image to be shown in social media cards keywords: [keywords, describing, the main topics] --- ` When creating your React page, adding these fields in Layout would also improve SEO. :::tip Prefer to use front matter for fields like description and keywords: Docusaurus will automatically apply this to both description and og:description, while you would have to manually declare two metadata tags when using the <head> tag. ::: :::info The official plugins all support the following front matter: title, description, keywords and image. Refer to their respective API documentation for additional front matter support: Docs front matter Blog front matter Pages front matter ::: For JSX pages, you can use the Docusaurus <Head> component. `jsx title=\"my-react-page.jsx\" import React from 'react'; import Layout from '@theme/Layout'; import Head from '@docusaurus/Head'; export default function page() { return ( <Layout title=\"Page\" description=\"A React page demo\"> <Head> <meta property=\"og:image\" content=\"image.png\" /> <meta name=\"twitter:card\" content=\"summary_large_image\" /> <link rel=\"preconnect\" href=\"https://example.com\" /> <script type=\"application/ld+json\"> {JSON.stringify({ '@context': 'https://schema.org/', '@type': 'Organization', name: 'Meta Open Source', url: 'https://opensource.fb.com/', logo: 'https://opensource.fb.com/img/logos/Meta-Open-Source.svg', })} </script> </Head> {/ ... /} </Layout> ); } ` :::tip For convenience, the default theme <Layout> component accept title and description as props. ::: Static HTML generation {#static-html-generation} Docusaurus is a static site generator—HTML files are statically generated for every URL route, which helps search engines discover your content more easily. Image meta description {#image-meta-description} The alt tag for an image tells the search engine what the image is about, and is used when the image can't be visually seen, e.g. when using a screen reader, or when the image is broken. Alt tags are commonly supported in Markdown. You may also add a title for your image—this doesn't impact SEO much but is displayed as a tooltip when hovering above the image, usually used to provide hints. `md !Docusaurus banner ` <BrowserWindow> !Docusaurus banner </BrowserWindow> Rich search information {#rich-search-information} Docusaurus blogs support rich search results out-of-the-box to get maximum search engine experience. The information is created depending on your meta information in blog/global configuration. In order to get the benefits of the rich search information, fill in the information about the post's publish date, authors, and image, etc. Read more about the meta-information here. Robots file {#robots-file} A robots.txt file regulates search engines' behavior about which should be displayed and which shouldn't. You can provide it as static asset. The following would allow access to all sub-pages from all requests: `text title=\"static/robots.txt\" User-agent: * Disallow: ` Read more about the robots file in the Google documentation. :::warning Important: the robots.txt file does not prevent HTML pages from being indexed. To prevent your whole Docusaurus site from being indexed, use the noIndex site config. Some hosting providers may also let you configure a X-Robots-Tag: noindex HTTP header (GitHub Pages does not support this). To prevent a single page from being indexed, use <meta name=\"robots\" content=\"noindex\"> as page metadata. Read more about the robots meta tag. ::: Sitemap file {#sitemap-file} Docusaurus provides the @docusaurus/plugin-sitemap plugin, which is shipped with preset-classic by default. It autogenerates a sitemap.xml file which will be available at https://example.com/[baseUrl]/sitemap.xml after the production build. This sitemap metadata helps search engine crawlers crawl your site more accurately. :::tip The sitemap plugin automatically filters pages containing a noindex robots meta directive. For example, /examples/noIndex is not included in the Docusaurus sitemap.xml file because it contains the following page metadata: `html <head> <meta name=\"robots\" content=\"noindex, nofollow\" /> </head> ` ::: Human readable links {#human-readable-links} Docusaurus uses your file names as links, but you can always change that using slugs, see this tutorial for more details. Structured content {#structured-content} Search engines rely on the HTML markup such as <h2>, <table>, etc., to understand the structure of your webpage. When Docusaurus renders your pages, semantic markup, e.g. <aside>, <nav>, <main>, are used to divide the different sections of the page, helping the search engine to locate parts like sidebar, navbar, and the main page content. Most CommonMark syntaxes have their corresponding HTML tags. By using Markdown consistently in your project, you will make it easier for search engines to understand your page content.",
    "keywords": [
      "search",
      "engine",
      "optimization",
      "(seo)",
      "how",
      "to",
      "make",
      "your",
      "docusaurus",
      "site",
      "maximally",
      "search-engine-friendly.",
      "seo",
      "mdx",
      "src",
      "components",
      "BrowserWindow",
      "example",
      "ld",
      "schema",
      "opensource",
      "img",
      "logos",
      "Meta-Open-Source",
      "script",
      "head",
      "Layout",
      "Head",
      "global",
      "robots",
      "plugin-sitemap",
      "sitemap",
      "examples",
      "noIndex",
      "Search",
      "SEO",
      "import",
      "from",
      "Docusaurus",
      "supports",
      "variety",
      "ways",
      "Global",
      "metadata",
      "Provide",
      "meta",
      "attributes",
      "for",
      "the",
      "entire",
      "through",
      "configuration",
      "The",
      "will",
      "all",
      "rendered",
      "HTML",
      "using",
      "key",
      "value",
      "pairs",
      "prop",
      "name",
      "and",
      "attribute",
      "convenient",
      "shortcut",
      "declare",
      "tags",
      "but",
      "also",
      "possible",
      "inject",
      "arbitrary",
      "with",
      "headTags",
      "title",
      "config",
      "export",
      "default",
      "themeConfig",
      "Declare",
      "some",
      "keywords",
      "content",
      "cooking",
      "blog",
      "twitter",
      "card",
      "summary_large_image",
      "link",
      "preconnect",
      "tag",
      "tagName",
      "rel",
      "href",
      "https",
      "com",
      "json",
      "structured",
      "data",
      "type",
      "application",
      "innerHTML",
      "JSON",
      "stringify",
      "context",
      "org",
      "Organization",
      "Meta",
      "Open",
      "Source",
      "url",
      "logo",
      "svg",
      "adds",
      "out",
      "box",
      "For",
      "you",
      "have",
      "configured",
      "i18n",
      "get",
      "hreflang",
      "alternate",
      "read",
      "more",
      "about",
      "types",
      "visit",
      "MDN",
      "docs",
      "Single",
      "page",
      "single",
      "Similar",
      "allows",
      "addition",
      "information",
      "individual",
      "pages",
      "Follow",
      "this",
      "guide",
      "configuring",
      "short",
      "markdown",
      "Some",
      "automatically",
      "description",
      "canonical",
      "URL",
      "links",
      "other",
      "useful",
      "each",
      "Markdown",
      "They",
      "are",
      "configurable",
      "front",
      "matter",
      "Title",
      "engines",
      "can",
      "different",
      "actual",
      "heading",
      "image",
      "thumbnail",
      "shown",
      "social",
      "media",
      "cards",
      "describing",
      "main",
      "topics",
      "When",
      "creating",
      "React",
      "adding",
      "these",
      "fields",
      "would",
      "improve",
      "tip",
      "Prefer",
      "use",
      "like",
      "apply",
      "both",
      "while",
      "manually",
      "two",
      "when",
      "info",
      "official",
      "plugins",
      "support",
      "following",
      "Refer",
      "their",
      "respective",
      "API",
      "documentation",
      "additional",
      "Docs",
      "Blog",
      "Pages",
      "JSX",
      "component",
      "jsx",
      "react",
      "theme",
      "function",
      "return",
      "Page",
      "demo",
      "property",
      "png",
      "convenience",
      "accept",
      "props",
      "Static",
      "generation",
      "static",
      "html",
      "generator",
      "files",
      "statically",
      "generated",
      "every",
      "route",
      "which",
      "helps",
      "discover",
      "easily",
      "Image",
      "alt",
      "tells",
      "what",
      "used",
      "visually",
      "seen",
      "screen",
      "reader",
      "broken",
      "Alt",
      "commonly",
      "supported",
      "You",
      "may",
      "add",
      "doesn",
      "impact",
      "much",
      "displayed",
      "tooltip",
      "hovering",
      "above",
      "usually",
      "provide",
      "hints",
      "banner",
      "Rich",
      "rich",
      "blogs",
      "results",
      "maximum",
      "experience",
      "created",
      "depending",
      "order",
      "benefits",
      "fill",
      "post",
      "publish",
      "date",
      "authors",
      "etc",
      "Read",
      "here",
      "Robots",
      "file",
      "txt",
      "regulates",
      "behavior",
      "should",
      "shouldn",
      "asset",
      "allow",
      "access",
      "sub",
      "requests",
      "text",
      "User",
      "agent",
      "Disallow",
      "Google",
      "warning",
      "Important",
      "does",
      "not",
      "prevent",
      "being",
      "indexed",
      "whole",
      "hosting",
      "providers",
      "let",
      "configure",
      "Tag",
      "noindex",
      "HTTP",
      "header",
      "GitHub",
      "Sitemap",
      "provides",
      "plugin",
      "shipped",
      "preset",
      "classic",
      "autogenerates",
      "xml",
      "available",
      "baseUrl",
      "after",
      "production",
      "build",
      "This",
      "crawlers",
      "crawl",
      "accurately",
      "filters",
      "containing",
      "directive",
      "included",
      "because",
      "contains",
      "nofollow",
      "Human",
      "readable",
      "human",
      "uses",
      "names",
      "always",
      "change",
      "that",
      "slugs",
      "see",
      "tutorial",
      "details",
      "Structured",
      "rely",
      "markup",
      "such",
      "table",
      "understand",
      "structure",
      "webpage",
      "renders",
      "semantic",
      "aside",
      "nav",
      "divide",
      "sections",
      "helping",
      "locate",
      "parts",
      "sidebar",
      "navbar",
      "Most",
      "CommonMark",
      "syntaxes",
      "corresponding",
      "consistently",
      "project",
      "easier"
    ],
    "url": "/docs/seo",
    "path": "seo.mdx",
    "type": "general",
    "category": "root"
  },
  {
    "id": "index",
    "title": "现货交易 API",
    "description": "XT 现货交易 API 文档",
    "content": "现货交易 API 欢迎使用 XT 现货交易 API！本 API 提供了完整的现货交易功能，包括市场数据查询、下单交易、账户管理等。 主要功能 市场数据: 实时价格、深度、K 线等数据 交易操作: 买入、卖出、撤单等交易功能 账户管理: 余额查询、资金划转等 订单管理: 订单查询、历史记录等 快速开始 安装和配置 API 认证 基础交易操作 高级功能 API 特点 高性能: 毫秒级响应，支持高频交易 稳定性: 99.9% 可用性保证 安全性: 多重加密，安全可靠 易用性: 简洁的 REST API 设计 支持的市场 主流币种交易对 创新币种交易对 稳定币交易对 法币交易对 交易类型 限价单 市价单 止损单 止盈单 冰山单 相关链接 合约交易 API 保证金现货 API 跟单交易 API 合约跟单 API",
    "keywords": [
      "现货交易",
      "api",
      "xt",
      "文档",
      "spot",
      "index",
      "mdx",
      "API",
      "REST"
    ],
    "url": "/docs/spot/index",
    "path": "spot/index.mdx",
    "type": "spot",
    "category": "spot"
  },
  {
    "id": "installation",
    "title": "安装和配置",
    "description": "现货交易 API 的安装和配置指南",
    "content": "安装和配置 环境要求 Node.js 16.0 或更高版本 npm 8.0 或 yarn 1.22 或更高版本 支持 ES6+ 的现代浏览器 稳定的网络连接 安装步骤 安装 SDK `bash npm install @xt/spot-api ` 或者使用 yarn： `bash yarn add @xt/spot-api ` 导入模块 `javascript import {SpotAPI} from '@xt/spot-api'; ` 初始化配置 `javascript const spotAPI = new SpotAPI({ apiKey: 'your-api-key', secretKey: 'your-secret-key', passphrase: 'your-passphrase', sandbox: false, baseURL: 'https://api.xt.com', }); ` 配置参数 | 参数 | 类型 | 必填 | 说明 | | ---------- | ------- | ---- | -------------------- | | apiKey | string | 是 | API 访问密钥 | | secretKey | string | 是 | API 签名密钥 | | passphrase | string | 是 | API 密码短语 | | sandbox | boolean | 否 | 是否使用沙盒环境 | | baseURL | string | 否 | API 基础地址 | | timeout | number | 否 | 请求超时时间（毫秒） | 环境配置 开发环境 `javascript const config = { apiKey: process.env.XT_API_KEY, secretKey: process.env.XT_SECRET_KEY, passphrase: process.env.XT_PASSPHRASE, sandbox: true, baseURL: 'https://sandbox-api.xt.com', }; ` 生产环境 `javascript const config = { apiKey: process.env.XT_API_KEY, secretKey: process.env.XT_SECRET_KEY, passphrase: process.env.XT_PASSPHRASE, sandbox: false, baseURL: 'https://api.xt.com', }; ` 基础使用 获取市场数据 `javascript try { const ticker = await spotAPI.getTicker('BTC/USDT'); console.log('BTC/USDT 价格:', ticker); } catch (error) { console.error('获取失败:', error.message); } ` 查询账户余额 `javascript try { const balance = await spotAPI.getBalance(); console.log('账户余额:', balance); } catch (error) { console.error('查询失败:', error.message); } ` 错误处理 `javascript try { const result = await spotAPI.placeOrder({ symbol: 'BTC/USDT', side: 'buy', type: 'limit', amount: 0.001, price: 50000, }); console.log('下单成功:', result); } catch (error) { if (error.code === 'AUTH_ERROR') { console.error('认证失败，请检查 API 密钥'); } else if (error.code === 'INSUFFICIENT_BALANCE') { console.error('余额不足，请充值'); } else if (error.code === 'RATE_LIMIT') { console.error('请求频率超限，请稍后重试'); } else { console.error('请求失败:', error.message); } } ` 下一步 配置完成后，你可以： 查看市场数据 进行交易操作 管理订单 查询账户信息",
    "keywords": [
      "安装和配置",
      "现货交易",
      "api",
      "的安装和配置指南",
      "spot",
      "installation",
      "mdx",
      "spot-api",
      "sandbox-api",
      "USDT",
      "Node",
      "npm",
      "yarn",
      "ES6",
      "SDK",
      "bash",
      "install",
      "add",
      "javascript",
      "import",
      "SpotAPI",
      "from",
      "const",
      "spotAPI",
      "new",
      "apiKey",
      "your",
      "key",
      "secretKey",
      "secret",
      "passphrase",
      "sandbox",
      "false",
      "baseURL",
      "https",
      "com",
      "string",
      "API",
      "boolean",
      "timeout",
      "number",
      "config",
      "process",
      "env",
      "XT_API_KEY",
      "XT_SECRET_KEY",
      "XT_PASSPHRASE",
      "true",
      "try",
      "ticker",
      "await",
      "getTicker",
      "BTC",
      "console",
      "log",
      "catch",
      "error",
      "message",
      "balance",
      "getBalance",
      "result",
      "placeOrder",
      "symbol",
      "side",
      "buy",
      "type",
      "limit",
      "amount",
      "price",
      "code",
      "AUTH_ERROR",
      "else",
      "INSUFFICIENT_BALANCE",
      "RATE_LIMIT"
    ],
    "url": "/docs/spot/installation",
    "path": "spot/installation.mdx",
    "type": "spot",
    "category": "spot"
  },
  {
    "id": "static-assets",
    "title": "Static Assets",
    "description": "Static assets are the non-code files that are directly copied to the build output. Learn about how they are handled and what the best practices of using static assets are.",
    "content": "Static Assets Static assets are the non-code files that are directly copied to the build output. They include images, stylesheets, favicons, fonts, etc. By default, you are suggested to put these assets in the static folder. Every file you put into that directory will be copied into the root of the generated build folder with the directory hierarchy preserved. E.g. if you add a file named sun.jpg to the static folder, it will be copied to build/sun.jpg. This means that: for site baseUrl: '/', the image /static/img/docusaurus.png will be served at /img/docusaurus.png. for site baseUrl: '/subpath/', the image /static/img/docusaurus.png will be served at /subpath/img/docusaurus.png. You can customize the static directory sources in docusaurus.config.js. For example, we can add public as another possible path: `js title=\"docusaurus.config.js\" export default { title: 'My site', staticDirectories: ['public', 'static'], // ... }; ` Now, all files in public as well as static will be copied to the build output. Referencing your static asset {#referencing-your-static-asset} In JSX {#in-jsx} In JSX, you can reference assets from the static folder in your code using absolute URLs, but this is not ideal because changing the site baseUrl will break those links. For the image <img src=\"/img/docusaurus.png\" /> served at https://example.com/test, the browser will try to resolve it from the URL root, i.e. as https://example.com/img/docusaurus.png, which will fail because it's actually served at https://example.com/test/img/docusaurus.png. You can import() or require() the static asset (recommended), or use the useBaseUrl utility function: both prepend the baseUrl to paths for you. Examples: `jsx title=\"MyComponent.js\" import DocusaurusImageUrl from '@site/static/img/docusaurus.png'; <img src={DocusaurusImageUrl} />; ` `jsx title=\"MyComponent.js\" <img src={require('@site/static/img/docusaurus.png').default} /> ` `jsx title=\"MyComponent.js\" import useBaseUrl from '@docusaurus/useBaseUrl'; <img src={useBaseUrl('/img/docusaurus.png')} />; ` You can also import SVG files: they will be transformed into React components. `jsx title=\"MyComponent.js\" import DocusaurusLogoWithKeytar from '@site/static/img/docusaurus_keytar.svg'; <DocusaurusLogoWithKeytar title=\"Docusaurus Logo\" className=\"logo\" />; ` In Markdown {#in-markdown} In Markdown, you can stick to using absolute paths when writing links or images in Markdown syntax because Docusaurus handles them as require calls instead of URLs when parsing the Markdown. See Markdown static assets. `md You write a link like this: Download this document Docusaurus changes that to: <a href={require('static/files/note.docx')}>Download this document</a> ` :::warning use Markdown syntax Docusaurus will only parse links that are in Markdown syntax. If your asset references are using the JSX tag <a> / <img>, nothing will be done. ::: In CSS {#in-css} In CSS, the url() function is commonly used to reference assets like fonts and images. To reference a static asset, use absolute paths: `css @font-face { font-family: 'Caroline'; src: url('/font/Caroline.otf'); } ` The static/font/Caroline.otf asset will be loaded by the bundler. :::warning important takeaway One important takeaway: never hardcode your base URL! The base URL is considered an implementation detail and should be easily changeable. All paths, even when they look like URL slugs, are actually file paths. If you find the URL slug mental model more understandable, here's a rule of thumb: Pretend you have a base URL like /test/ when writing JSX so you don't use an absolute URL path like src=\"/img/thumbnail.png\" but instead require the asset. Pretend it's / when writing Markdown or CSS so you always use absolute paths without the base URL. ::: Caveats {#caveats} Keep in mind that: By default, none of the files in the static folder will be post-processed, hashed, or minified. However, as we've demonstrated above, we are usually able to convert them to require calls for you so they do get processed. This is good for aggressive caching and better user experience. Missing files referenced via hard-coded absolute paths will not be detected at compilation time and will result in a 404 error. By default, GitHub Pages runs published files through Jekyll. Since Jekyll will discard any files that begin with _, it is recommended that you disable Jekyll by adding an empty file named .nojekyll file to your static directory if you are using GitHub pages for hosting.",
    "keywords": [
      "static",
      "assets",
      "are",
      "the",
      "non-code",
      "files",
      "that",
      "directly",
      "copied",
      "to",
      "build",
      "output.",
      "learn",
      "about",
      "how",
      "they",
      "handled",
      "and",
      "what",
      "best",
      "practices",
      "of",
      "using",
      "are.",
      "mdx",
      "sun",
      "img",
      "docusaurus",
      "subpath",
      "example",
      "test",
      "useBaseUrl",
      "docusaurus_keytar",
      "note",
      "font",
      "Caroline",
      "thumbnail",
      "Static",
      "Assets",
      "non",
      "code",
      "output",
      "They",
      "include",
      "images",
      "stylesheets",
      "favicons",
      "fonts",
      "etc",
      "default",
      "you",
      "suggested",
      "put",
      "these",
      "folder",
      "Every",
      "file",
      "into",
      "directory",
      "will",
      "root",
      "generated",
      "with",
      "hierarchy",
      "preserved",
      "add",
      "named",
      "jpg",
      "This",
      "means",
      "for",
      "site",
      "baseUrl",
      "image",
      "png",
      "served",
      "You",
      "can",
      "customize",
      "sources",
      "config",
      "For",
      "public",
      "another",
      "possible",
      "path",
      "title",
      "export",
      "staticDirectories",
      "Now",
      "all",
      "well",
      "Referencing",
      "your",
      "asset",
      "referencing",
      "JSX",
      "jsx",
      "reference",
      "from",
      "absolute",
      "URLs",
      "but",
      "this",
      "not",
      "ideal",
      "because",
      "changing",
      "break",
      "those",
      "links",
      "src",
      "https",
      "com",
      "browser",
      "try",
      "resolve",
      "URL",
      "which",
      "fail",
      "actually",
      "import",
      "require",
      "recommended",
      "use",
      "utility",
      "function",
      "both",
      "prepend",
      "paths",
      "Examples",
      "MyComponent",
      "DocusaurusImageUrl",
      "also",
      "SVG",
      "transformed",
      "React",
      "components",
      "svg",
      "Docusaurus",
      "Logo",
      "className",
      "logo",
      "Markdown",
      "markdown",
      "stick",
      "when",
      "writing",
      "syntax",
      "handles",
      "them",
      "calls",
      "instead",
      "parsing",
      "See",
      "write",
      "link",
      "like",
      "Download",
      "document",
      "changes",
      "href",
      "docx",
      "warning",
      "only",
      "parse",
      "references",
      "tag",
      "nothing",
      "done",
      "CSS",
      "css",
      "url",
      "commonly",
      "used",
      "face",
      "family",
      "otf",
      "The",
      "loaded",
      "bundler",
      "important",
      "takeaway",
      "One",
      "never",
      "hardcode",
      "base",
      "considered",
      "implementation",
      "detail",
      "should",
      "easily",
      "changeable",
      "All",
      "even",
      "look",
      "slugs",
      "find",
      "slug",
      "mental",
      "model",
      "more",
      "understandable",
      "here",
      "rule",
      "thumb",
      "Pretend",
      "have",
      "don",
      "always",
      "without",
      "Caveats",
      "caveats",
      "Keep",
      "mind",
      "none",
      "post",
      "processed",
      "hashed",
      "minified",
      "However",
      "demonstrated",
      "above",
      "usually",
      "able",
      "convert",
      "get",
      "good",
      "aggressive",
      "caching",
      "better",
      "user",
      "experience",
      "Missing",
      "referenced",
      "via",
      "hard",
      "coded",
      "detected",
      "compilation",
      "time",
      "result",
      "error",
      "GitHub",
      "Pages",
      "runs",
      "published",
      "through",
      "Jekyll",
      "Since",
      "discard",
      "any",
      "begin",
      "disable",
      "adding",
      "empty",
      "nojekyll",
      "pages",
      "hosting"
    ],
    "url": "/docs/static-assets",
    "path": "static-assets.mdx",
    "type": "general",
    "category": "root"
  },
  {
    "id": "styling-layout",
    "title": "Styling and Layout",
    "description": "A Docusaurus site is a pre-rendered single-page React application. You can style it the way you style React apps.",
    "content": "import ColorGenerator from '@site/src/components/ColorGenerator'; import IframeWindow from '@site/src/components/BrowserWindow/IframeWindow'; Styling and Layout :::tip This section is focused on styling through stylesheets. For more advanced customizations (DOM structure, React code...), refer to the swizzling guide. ::: A Docusaurus site is a single-page React application. You can style it the way you style React apps. There are a few approaches/frameworks which will work, depending on your preferences and the type of website you are trying to build. Websites that are highly interactive and behave more like web apps will benefit from more modern styling approaches that co-locate styles with the components. Component styling can also be particularly useful when you wish to customize or swizzle a component. Global styles {#global-styles} This is the most traditional way of styling that most developers (including non-front-end developers) would be familiar with. It works fine for small websites that do not have much customization. If you're using @docusaurus/preset-classic, you can create your own CSS files (e.g. /src/css/custom.css) and import them globally by passing them as an option of the classic theme. `js title=\"docusaurus.config.js\" export default { // ... presets: [ [ '@docusaurus/preset-classic', { // highlight-start theme: { customCss: ['./src/css/custom.css'], }, // highlight-end }, ], ], }; ` Any CSS you write within that file will be available globally and can be referenced directly using string literals. `css title=\"/src/css/custom.css\" .purple-text { color: rebeccapurple; } ` `jsx function MyComponent() { return ( <main> <h1 className=\"purple-text\">Purple Heading!</h1> </main> ); } ` If you want to add CSS to any element, you can open the DevTools in your browser to inspect its class names. Class names come in several kinds: Theme class names. These class names are listed exhaustively in the next subsection. They don't have any default properties. You should always prioritize targeting those stable class names in your custom CSS. Infima class names. These class names are found in the classic theme and usually follow the BEM convention of block__element--modifier. They are usually stable but are still considered implementation details, so you should generally avoid targeting them. However, you can modify Infima CSS variables. CSS module class names. These class names end with a hash which may change over time (codeBlockContainer_RIuc). They are considered implementation details and you should almost always avoid targeting them in your custom CSS. If you must, you can use an attribute selector ([class*='codeBlockContainer']) that ignores the hash. Theme Class Names {#theme-class-names} We provide some stable CSS class names for robust and maintainable global layout styling. These names are theme-agnostic and meant to be targeted by custom CSS. :::tip If you can't find a way to create a robust CSS selector, please report your customization use-case and we will consider adding new class names. ::: <details> <summary>Exhaustive list of stable class names</summary> `mdx-code-block import ThemeClassNamesCode from '!!raw-loader!@site/../packages/docusaurus-theme-common/src/utils/ThemeClassNames.ts'; import CodeBlock from '@theme/CodeBlock'; <CodeBlock className=\"language-ts\"> {ThemeClassNamesCode // remove source comments .replace(/\\/\\[\\s\\S]?\\\\/|\\/\\/./g,'') .replace(/^ *\\n/gm,'') .trim()} </CodeBlock> ` </details> Styling your site with Infima {#styling-your-site-with-infima} @docusaurus/preset-classic uses Infima as the underlying styling framework. Infima provides a flexible layout and common UI components styling suitable for content-centric websites (blogs, documentation, landing pages). For more details, check out the Infima website. When you scaffold your Docusaurus project with create-docusaurus, the website will be generated with basic Infima stylesheets and default styling. You can override Infima CSS variables globally. `css title=\"/src/css/custom.css\" :root { --ifm-color-primary: #25c2a0; --ifm-code-font-size: 95%; } ` Infima uses 7 shades of each color. We recommend using ColorBox to find the different shades of colors for your chosen primary color. Alternatively, use the following tool to generate the different shades for your website and copy the variables into /src/css/custom.css. <ColorGenerator /> Dark Mode {#dark-mode} In light mode, the <html> element has a data-theme=\"light\" attribute; in dark mode, it's data-theme=\"dark\". Therefore, you can scope your CSS to dark-mode-only by targeting html with a specific attribute. `css / Overriding root Infima variables / [data-theme='dark'] { --ifm-color-primary: #4e89e8; } / Styling one class specially in dark mode / [data-theme='dark'] .purple-text { color: plum; } ` :::tip It is possible to initialize the Docusaurus theme directly from a docusaurus-theme query string parameter. Examples: <IframeWindow url=\"/docs/?docusaurus-theme=dark\" /> <IframeWindow url=\"/docs/configuration?docusaurus-theme=light\" /> ::: Data Attributes {#data-attributes} It is possible to inject <html> data attributes with query string parameters following the docusaurus-data-<key> pattern. This gives you the flexibility to style a page differently based on the query string. For example, let's render one of our pages with a red border and no navbar: `css title=\"/src/css/custom.css\" html[data-navbar='false'] .navbar { display: none; } html[data-red-border] div#__docusaurus { border: red solid thick; } ` <IframeWindow url=\"/docs/?docusaurus-data-navbar=false&docusaurus-data-red-border\" /> :::tip Iframe Mode If you plan to embed some Docusaurus pages on another site though an iframe, it can be useful to create an alternative display mode and use iframe urls such as https://mysite.com/docs/myDoc?docusaurus-data-mode=iframe. It is your responsibility to provide the additional styles and decide which UI elements you want to keep or hide. ::: Mobile View {#mobile-view} Docusaurus uses 996px as the cutoff between mobile screen width and desktop. If you want your layout to be different in the mobile view, you can use media queries. `css .banner { padding: 4rem; } / In mobile view, reduce the padding */ @media screen and (max-width: 996px) { .heroBanner { padding: 2rem; } } ` :::tip Customizing the breakpoint Some React components, such as the header and the sidebar, implement different JavaScript logic when in mobile view. If you change the breakpoint value in your custom CSS, you probably also want to update the invocations of the useWindowSize hook by swizzling the components it's used in and passing an explicit option argument. ::: CSS modules {#css-modules} To style your components using CSS Modules, name your stylesheet files with the .module.css suffix (e.g. welcome.module.css). Webpack will load such CSS files as CSS modules and you have to reference the class names as properties of the imported CSS module (as opposed to using plain strings). This is similar to the convention used in Create React App. `css title=\"styles.module.css\" .main { padding: 12px; } .heading { font-weight: bold; } .contents { color: #ccc; } ` `jsx import styles from './styles.module.css'; function MyComponent() { return ( <main className={styles.main}> <h1 className={styles.heading}>Hello!</h1> <article className={styles.contents}>Lorem Ipsum</article> </main> ); } ` The class names will be processed by webpack into a globally unique class name during build. CSS-in-JS {#css-in-js} :::warning CSS-in-JS support is a work in progress, so libs like MUI may have display quirks. Welcoming PRs. ::: Sass/SCSS {#sassscss} To use Sass/SCSS as your CSS preprocessor, install the unofficial Docusaurus plugin docusaurus-plugin-sass. This plugin works for both global styles and the CSS modules approach: Install docusaurus-plugin-sass: `bash npm2yarn npm install --save docusaurus-plugin-sass sass ` Include the plugin in your docusaurus.config.js file: `js title=\"docusaurus.config.js\" export default { // ... // highlight-next-line plugins: ['docusaurus-plugin-sass'], // ... }; ` Write and import your stylesheets in Sass/SCSS as normal. Global styles using Sass/SCSS {#global-styles-using-sassscss} You can now set the customCss property of @docusaurus/preset-classic to point to your Sass/SCSS file: `js title=\"docusaurus.config.js\" export default { presets: [ [ '@docusaurus/preset-classic', { // ... theme: { // highlight-next-line customCss: ['./src/css/custom.scss'], }, // ... }, ], ], }; ` Modules using Sass/SCSS {#modules-using-sassscss} Name your stylesheet files with the .module.scss suffix (e.g. welcome.module.scss) instead of .css. Webpack will use sass-loader to preprocess your stylesheets and load them as CSS modules. `scss title=\"styles.module.scss\" .main { padding: 12px; article { color: #ccc; } } ` `jsx import styles from './styles.module.scss'; function MyComponent() { return ( <main className={styles.main}> <article>Lorem Ipsum</article> </main> ); } ` TypeScript support To enable TypeScript support for Sass/SCSS modules, the TypeScript configuration should be updated to add the docusaurus-plugin-sass type definitions. This can be done in the tsconfig.json file: `diff { \"extends\": \"@docusaurus/tsconfig\", \"compilerOptions\": { ... \"types\": [\"docusaurus-plugin-sass\"] } } `",
    "keywords": [
      "styling",
      "and",
      "layout",
      "docusaurus",
      "site",
      "is",
      "pre-rendered",
      "single-page",
      "react",
      "application.",
      "you",
      "can",
      "style",
      "it",
      "the",
      "way",
      "apps.",
      "mdx",
      "src",
      "components",
      "ColorGenerator",
      "BrowserWindow",
      "IframeWindow",
      "frameworks",
      "preset-classic",
      "css",
      "custom",
      "h1",
      "main",
      "summary",
      "packages",
      "docusaurus-theme-common",
      "utils",
      "ThemeClassNames",
      "CodeBlock",
      "gm",
      "details",
      "docs",
      "configuration",
      "mysite",
      "myDoc",
      "styles",
      "article",
      "SCSS",
      "tsconfig",
      "import",
      "from",
      "Styling",
      "Layout",
      "tip",
      "This",
      "section",
      "focused",
      "through",
      "stylesheets",
      "For",
      "more",
      "advanced",
      "customizations",
      "DOM",
      "structure",
      "React",
      "code",
      "refer",
      "swizzling",
      "guide",
      "Docusaurus",
      "single",
      "page",
      "application",
      "You",
      "apps",
      "There",
      "are",
      "few",
      "approaches",
      "which",
      "will",
      "work",
      "depending",
      "your",
      "preferences",
      "type",
      "website",
      "trying",
      "build",
      "Websites",
      "that",
      "highly",
      "interactive",
      "behave",
      "like",
      "web",
      "benefit",
      "modern",
      "locate",
      "with",
      "Component",
      "also",
      "particularly",
      "useful",
      "when",
      "wish",
      "customize",
      "swizzle",
      "component",
      "Global",
      "global",
      "most",
      "traditional",
      "developers",
      "including",
      "non",
      "front",
      "end",
      "would",
      "familiar",
      "works",
      "fine",
      "for",
      "small",
      "websites",
      "not",
      "have",
      "much",
      "customization",
      "using",
      "preset",
      "classic",
      "create",
      "own",
      "CSS",
      "files",
      "them",
      "globally",
      "passing",
      "option",
      "theme",
      "title",
      "config",
      "export",
      "default",
      "presets",
      "highlight",
      "start",
      "customCss",
      "Any",
      "write",
      "within",
      "file",
      "available",
      "referenced",
      "directly",
      "string",
      "literals",
      "purple",
      "text",
      "color",
      "rebeccapurple",
      "jsx",
      "function",
      "MyComponent",
      "return",
      "className",
      "Purple",
      "Heading",
      "want",
      "add",
      "any",
      "element",
      "open",
      "DevTools",
      "browser",
      "inspect",
      "its",
      "class",
      "names",
      "Class",
      "come",
      "several",
      "kinds",
      "Theme",
      "These",
      "listed",
      "exhaustively",
      "next",
      "subsection",
      "They",
      "don",
      "properties",
      "should",
      "always",
      "prioritize",
      "targeting",
      "those",
      "stable",
      "Infima",
      "found",
      "usually",
      "follow",
      "BEM",
      "convention",
      "block__element",
      "modifier",
      "but",
      "still",
      "considered",
      "implementation",
      "generally",
      "avoid",
      "However",
      "modify",
      "variables",
      "module",
      "hash",
      "may",
      "change",
      "over",
      "time",
      "almost",
      "must",
      "use",
      "attribute",
      "selector",
      "codeBlockContainer",
      "ignores",
      "Names",
      "provide",
      "some",
      "robust",
      "maintainable",
      "agnostic",
      "meant",
      "targeted",
      "find",
      "please",
      "report",
      "case",
      "consider",
      "adding",
      "new",
      "Exhaustive",
      "list",
      "block",
      "ThemeClassNamesCode",
      "raw",
      "loader",
      "common",
      "language",
      "remove",
      "source",
      "comments",
      "replace",
      "trim",
      "infima",
      "uses",
      "underlying",
      "framework",
      "provides",
      "flexible",
      "suitable",
      "content",
      "centric",
      "blogs",
      "documentation",
      "landing",
      "pages",
      "check",
      "out",
      "When",
      "scaffold",
      "project",
      "generated",
      "basic",
      "override",
      "root",
      "ifm",
      "primary",
      "font",
      "size",
      "shades",
      "each",
      "recommend",
      "ColorBox",
      "different",
      "colors",
      "chosen",
      "Alternatively",
      "following",
      "tool",
      "generate",
      "copy",
      "into",
      "Dark",
      "Mode",
      "dark",
      "mode",
      "light",
      "html",
      "has",
      "data",
      "Therefore",
      "scope",
      "only",
      "specific",
      "Overriding",
      "one",
      "specially",
      "plum",
      "possible",
      "initialize",
      "query",
      "parameter",
      "Examples",
      "url",
      "Data",
      "Attributes",
      "attributes",
      "inject",
      "parameters",
      "key",
      "pattern",
      "gives",
      "flexibility",
      "differently",
      "based",
      "example",
      "let",
      "render",
      "our",
      "red",
      "border",
      "navbar",
      "false",
      "display",
      "none",
      "div",
      "__docusaurus",
      "solid",
      "thick",
      "Iframe",
      "plan",
      "embed",
      "another",
      "though",
      "iframe",
      "alternative",
      "urls",
      "such",
      "https",
      "com",
      "responsibility",
      "additional",
      "decide",
      "elements",
      "keep",
      "hide",
      "Mobile",
      "View",
      "mobile",
      "view",
      "cutoff",
      "between",
      "screen",
      "width",
      "desktop",
      "media",
      "queries",
      "banner",
      "padding",
      "reduce",
      "max",
      "heroBanner",
      "Customizing",
      "breakpoint",
      "Some",
      "header",
      "sidebar",
      "implement",
      "JavaScript",
      "logic",
      "value",
      "probably",
      "update",
      "invocations",
      "useWindowSize",
      "hook",
      "used",
      "explicit",
      "argument",
      "modules",
      "Modules",
      "name",
      "stylesheet",
      "suffix",
      "welcome",
      "Webpack",
      "load",
      "reference",
      "imported",
      "opposed",
      "plain",
      "strings",
      "similar",
      "Create",
      "App",
      "heading",
      "weight",
      "bold",
      "contents",
      "ccc",
      "Hello",
      "Lorem",
      "Ipsum",
      "The",
      "processed",
      "webpack",
      "unique",
      "during",
      "warning",
      "support",
      "progress",
      "libs",
      "MUI",
      "quirks",
      "Welcoming",
      "PRs",
      "Sass",
      "sassscss",
      "preprocessor",
      "install",
      "unofficial",
      "plugin",
      "sass",
      "both",
      "approach",
      "Install",
      "bash",
      "npm2yarn",
      "npm",
      "save",
      "Include",
      "line",
      "plugins",
      "Write",
      "normal",
      "now",
      "set",
      "property",
      "point",
      "scss",
      "Name",
      "instead",
      "preprocess",
      "TypeScript",
      "enable",
      "updated",
      "definitions",
      "done",
      "json",
      "diff",
      "extends",
      "compilerOptions",
      "types"
    ],
    "url": "/docs/styling-layout",
    "path": "styling-layout.mdx",
    "type": "general",
    "category": "root"
  },
  {
    "id": "swizzling",
    "title": "Swizzling",
    "description": "Customize your site's appearance through creating your own theme components",
    "content": "Swizzling In this section, we will introduce how customization of layout is done in Docusaurus. > Déjà vu...? This section is similar to Styling and Layout, but this time, we will customize React components themselves, rather than what they look like. We will talk about a central concept in Docusaurus: swizzling, which allows deeper site customizations. In practice, swizzling permits to swap a theme component with your own implementation, and it comes in 2 patterns: Ejecting: creates a copy of the original theme component, which you can fully customize Wrapping: creates a wrapper around the original theme component, which you can enhance <details> <summary>Why is it called swizzling?</summary> The name comes from Objective-C and Swift-UI: method swizzling is the process of changing the implementation of an existing selector (method). For Docusaurus, component swizzling means providing an alternative component that takes precedence over the component provided by the theme. You can think of it as Monkey Patching for React components, enabling you to override the default implementation. Gatsby has a similar concept called theme shadowing. To gain a deeper understanding of this, you have to understand how theme components are resolved. </details> Swizzling Process Overview Docusaurus provides a convenient interactive CLI to swizzle components. You generally only need to remember the following command: `bash npm2yarn npm run swizzle ` It will generate a new component in your src/theme directory, which should look like this example: `mdx-code-block <Tabs> <TabItem value=\"Ejecting\"> ` `jsx title=\"src/theme/SomeComponent.js\" import React from 'react'; export default function SomeComponent(props) { // You can fully customize this implementation // including changing the JSX, CSS and React hooks return ( <div className=\"some-class\"> <h1>Some Component</h1> <p>Some component implementation details</p> </div> ); } ` `mdx-code-block </TabItem> <TabItem value=\"Wrapping\"> ` `jsx title=\"src/theme/SomeComponent.js\" import React from 'react'; import SomeComponent from '@theme-original/SomeComponent'; export default function SomeComponentWrapper(props) { // You can enhance the original component, // including adding extra props or JSX elements around it return ( <> <SomeComponent {...props} /> </> ); } ` `mdx-code-block </TabItem> </Tabs> ` To get an overview of all the themes and components available to swizzle, run: `bash npm2yarn npm run swizzle -- --list ` Use --help to see all available CLI options, or refer to the reference swizzle CLI documentation. :::tip Removing Unneeded Swizzled Components If you decide that a previously swizzled component is no longer necessary, you can simply remove its file(s) from the src/theme directory. After removing the component, make sure to restart your development server to ensure the changes are properly reflected. ::: :::note After swizzling a component, restart your dev server in order for Docusaurus to know about the new component. ::: :::warning Prefer staying on the safe side Be sure to understand which components are safe to swizzle. Some components are internal implementation details of a theme. ::: :::info docusaurus swizzle is only an automated way to help you swizzle the component. You can also create the src/theme/SomeComponent.js file manually, and Docusaurus will resolve it. There's no internal magic behind this command! ::: Ejecting {#ejecting} Ejecting a theme component is the process of creating a copy of the original theme component, which you can fully customize and override. To eject a theme component, use the swizzle CLI interactively, or with the --eject option: `bash npm2yarn npm run swizzle [theme name] [component name] -- --eject ` An example: `bash npm2yarn npm run swizzle @docusaurus/theme-classic Footer -- --eject ` This will copy the current <Footer /> component's implementation to your site's src/theme directory. Docusaurus will now use this <Footer> component copy instead of the original one. You are now free to completely re-implement the <Footer> component. `jsx title=\"src/theme/Footer/index.js\" import React from 'react'; export default function Footer(props) { return ( <footer> <h1>This is my custom site footer</h1> <p>And it is very different from the original</p> </footer> ); } ` :::warning Ejecting an unsafe component can sometimes lead to copying a large amount of internal code, which you now have to maintain yourself. It can make Docusaurus upgrades more difficult, as you will need to migrate your customizations if the props received or internal theme APIs used have changed. Prefer wrapping whenever possible: the amount of code to maintain is smaller. ::: :::tip Re-swizzling To keep ejected components up-to-date after a Docusaurus upgrade, re-run the eject command and compare the changes with git diff. You are also recommended to write a brief comment at the top of the file explaining what changes you have made, so that you could more easily re-apply your changes after re-ejection. ::: Wrapping {#wrapping} Wrapping a theme component is the process of creating a wrapper around the original theme component, which you can enhance. To wrap a theme component, use the swizzle CLI interactively, or with the --wrap option: `bash npm2yarn npm run swizzle [theme name] [component name] -- --wrap ` An example: `bash npm2yarn npm run swizzle @docusaurus/theme-classic Footer -- --wrap ` This will create a wrapper in your site's src/theme directory. Docusaurus will now use the <FooterWrapper> component instead of the original one. You can now add customizations around the original component. `jsx title=\"src/theme/Footer/index.js\" import React from 'react'; import Footer from '@theme-original/Footer'; export default function FooterWrapper(props) { return ( <> <section> <h2>Extra section</h2> <p>This is an extra section that appears above the original footer</p> </section> <Footer {...props} /> </> ); } ` <details> <summary>What is this <code>@theme-original</code> thing?</summary> Docusaurus uses theme aliases to resolve the theme components to use. The newly created wrapper takes the @theme/SomeComponent alias. @theme-original/SomeComponent permits to import original component that the wrapper shadows without creating an infinite import loop where the wrapper imports itself. </details> :::tip Wrapping a theme is a great way to add extra components around existing one without ejecting it. For example, you can easily add a custom comment system under each blog post: `jsx title=\"src/theme/BlogPostItem.js\" import React from 'react'; import BlogPostItem from '@theme-original/BlogPostItem'; import MyCustomCommentSystem from '@site/src/MyCustomCommentSystem'; export default function BlogPostItemWrapper(props) { return ( <> <BlogPostItem {...props} /> <MyCustomCommentSystem /> </> ); } ` ::: What is safe to swizzle? {#what-is-safe-to-swizzle} > With great power comes great responsibility Some theme components are internal implementation details of a theme. Docusaurus allows you to swizzle them, but it might be risky. <details> <summary>Why is it risky?</summary> Theme authors (including us) might have to update their theme over time: changing the component props, name, file system location, types... For example, consider a component that receives two props name and age, but after a refactor, it now receives a person prop with the above two properties. Your component, which still expects these two props, will render undefined instead. Moreover, internal components may simply disappear. If a component is called Sidebar and it's later renamed to DocSidebar, your swizzled component will be completely ignored. Theme components marked as unsafe may change in a backward-incompatible way between theme minor versions. When upgrading a theme (or Docusaurus), your customizations might behave unexpectedly, and can even break your site. </details> For each theme component, the swizzle CLI will indicate 3 different levels of safety declared by theme authors: Safe: this component is safe to be swizzled, its public API is considered stable, and no breaking changes should happen within a theme major version Unsafe: this component is a theme implementation detail, not safe to be swizzled, and breaking changes might happen within a theme minor version Forbidden: the swizzle CLI will prevent you from swizzling this component, because it is not designed to be swizzled at all :::note Some components might be safe to wrap, but not safe to eject. ::: :::info Don't be too afraid to swizzle unsafe components: just keep in mind that breaking changes might happen, and you might need to upgrade your customizations manually on minor version upgrades. ::: :::note Report your use-case If you have a strong use-case for swizzling an unsafe component, please report it here and we will work together to find a solution to make it safe. ::: Which component should I swizzle? {#which-component-should-i-swizzle} It is not always clear which component you should swizzle exactly to achieve the desired result. @docusaurus/theme-classic, which provides most of the theme components, has about 100 components! :::tip To print an overview of all the @docusaurus/theme-classic components: `bash npm2yarn npm run swizzle @docusaurus/theme-classic -- --list ` ::: You can follow these steps to locate the appropriate component to swizzle: Component description. Some components provide a short description, which is a good way to find the right one. Component name. Official theme components are semantically named, so you should be able to infer its function from the name. The swizzle CLI allows you to enter part of a component name to narrow down the available choices. For example, if you run yarn swizzle @docusaurus/theme-classic, and enter Doc, only the docs-related components will be listed. Start with a higher-level component. Components form a tree with some components importing others. Every route will be associated with one top-level component that the route will render (most of them listed in Routing in content plugins). For example, all blog post pages have @theme/BlogPostPage as the topmost component. You can start with swizzling this component, and then go down the component tree to locate the component that renders just what you are targeting. Don't forget to unswizzle the rest by deleting the files after you've found the correct one, so you don't maintain too many components. Read the theme source code and use search wisely. :::tip Just ask! If you still have no idea which component to swizzle to achieve the desired effect, you can reach out for help in one of our support channels. We also want to understand better your fanciest customization use-cases, so please report them. ::: Do I need to swizzle? {#do-i-need-to-swizzle} Swizzling ultimately means you have to maintain some additional React code that interact with Docusaurus internal APIs. If you can, think about the following alternatives when customizing your site: Use CSS. CSS rules and selectors can often help you achieve a decent degree of customization. Refer to styling and layout for more details. Use translations. It may sound surprising, but translations are ultimately just a way to customize the text labels. For example, if your site's default language is en, you can still run yarn write-translations -l en and edit the code.json emitted. Refer to the i18n tutorial for more details. :::tip The smaller, the better. If swizzling is inevitable, prefer to swizzle only the relevant part and maintain as little code on your own as possible. Swizzling a small component often means less risk of breaking changes during upgrade. Wrapping is also a far safer alternative to ejecting. ::: Wrapping your site with <Root> {#wrapper-your-site-with-root} The <Root> component is rendered at the very top of the React tree, above the theme <Layout>, and never unmounts. It is the perfect place to add stateful logic that should not be re-initialized across navigations (user authentication status, shopping cart state...). Swizzle it manually by creating a file at src/theme/Root.js: `js title=\"src/theme/Root.js\" import React from 'react'; // Default implementation, that you can customize export default function Root({children}) { return <>{children}</>; } ` :::tip Use this component to render React Context providers. :::",
    "keywords": [
      "swizzling",
      "customize",
      "your",
      "site's",
      "appearance",
      "through",
      "creating",
      "own",
      "theme",
      "components",
      "mdx",
      "summary",
      "details",
      "SomeComponent",
      "h1",
      "div",
      "TabItem",
      "Tabs",
      "theme-classic",
      "Footer",
      "index",
      "footer",
      "h2",
      "section",
      "code",
      "BlogPostItem",
      "src",
      "MyCustomCommentSystem",
      "BlogPostPage",
      "Root",
      "Swizzling",
      "this",
      "will",
      "introduce",
      "how",
      "customization",
      "layout",
      "done",
      "Docusaurus",
      "This",
      "similar",
      "Styling",
      "and",
      "Layout",
      "but",
      "time",
      "React",
      "themselves",
      "rather",
      "than",
      "what",
      "they",
      "look",
      "like",
      "talk",
      "about",
      "central",
      "concept",
      "which",
      "allows",
      "deeper",
      "site",
      "customizations",
      "practice",
      "permits",
      "swap",
      "component",
      "with",
      "implementation",
      "comes",
      "patterns",
      "Ejecting",
      "creates",
      "copy",
      "the",
      "original",
      "you",
      "can",
      "fully",
      "Wrapping",
      "wrapper",
      "around",
      "enhance",
      "Why",
      "called",
      "The",
      "name",
      "from",
      "Objective",
      "Swift",
      "method",
      "process",
      "changing",
      "existing",
      "selector",
      "For",
      "means",
      "providing",
      "alternative",
      "that",
      "takes",
      "precedence",
      "over",
      "provided",
      "You",
      "think",
      "Monkey",
      "Patching",
      "for",
      "enabling",
      "override",
      "default",
      "Gatsby",
      "has",
      "shadowing",
      "gain",
      "understanding",
      "have",
      "understand",
      "are",
      "resolved",
      "Process",
      "Overview",
      "provides",
      "convenient",
      "interactive",
      "CLI",
      "swizzle",
      "generally",
      "only",
      "need",
      "remember",
      "following",
      "command",
      "bash",
      "npm2yarn",
      "npm",
      "run",
      "generate",
      "new",
      "directory",
      "should",
      "example",
      "block",
      "value",
      "jsx",
      "title",
      "import",
      "react",
      "export",
      "function",
      "props",
      "including",
      "JSX",
      "CSS",
      "hooks",
      "return",
      "className",
      "some",
      "class",
      "Some",
      "Component",
      "SomeComponentWrapper",
      "adding",
      "extra",
      "elements",
      "get",
      "overview",
      "all",
      "themes",
      "available",
      "list",
      "Use",
      "help",
      "see",
      "options",
      "refer",
      "reference",
      "documentation",
      "tip",
      "Removing",
      "Unneeded",
      "Swizzled",
      "Components",
      "decide",
      "previously",
      "swizzled",
      "longer",
      "necessary",
      "simply",
      "remove",
      "its",
      "file",
      "After",
      "removing",
      "make",
      "sure",
      "restart",
      "development",
      "server",
      "ensure",
      "changes",
      "properly",
      "reflected",
      "note",
      "dev",
      "order",
      "know",
      "warning",
      "Prefer",
      "staying",
      "safe",
      "side",
      "internal",
      "info",
      "docusaurus",
      "automated",
      "way",
      "also",
      "create",
      "manually",
      "resolve",
      "There",
      "magic",
      "behind",
      "ejecting",
      "eject",
      "use",
      "interactively",
      "option",
      "classic",
      "current",
      "now",
      "instead",
      "one",
      "free",
      "completely",
      "implement",
      "custom",
      "And",
      "very",
      "different",
      "unsafe",
      "sometimes",
      "lead",
      "copying",
      "large",
      "amount",
      "maintain",
      "yourself",
      "upgrades",
      "more",
      "difficult",
      "migrate",
      "received",
      "APIs",
      "used",
      "changed",
      "wrapping",
      "whenever",
      "possible",
      "smaller",
      "keep",
      "ejected",
      "date",
      "after",
      "upgrade",
      "compare",
      "git",
      "diff",
      "recommended",
      "write",
      "brief",
      "comment",
      "top",
      "explaining",
      "made",
      "could",
      "easily",
      "apply",
      "ejection",
      "wrap",
      "FooterWrapper",
      "add",
      "Extra",
      "appears",
      "above",
      "What",
      "thing",
      "uses",
      "aliases",
      "newly",
      "created",
      "alias",
      "shadows",
      "without",
      "infinite",
      "loop",
      "where",
      "imports",
      "itself",
      "great",
      "system",
      "under",
      "each",
      "blog",
      "post",
      "BlogPostItemWrapper",
      "With",
      "power",
      "responsibility",
      "them",
      "might",
      "risky",
      "Theme",
      "authors",
      "update",
      "their",
      "location",
      "types",
      "consider",
      "receives",
      "two",
      "age",
      "refactor",
      "person",
      "prop",
      "properties",
      "Your",
      "still",
      "expects",
      "these",
      "render",
      "undefined",
      "Moreover",
      "may",
      "disappear",
      "Sidebar",
      "later",
      "renamed",
      "DocSidebar",
      "ignored",
      "marked",
      "change",
      "backward",
      "incompatible",
      "between",
      "minor",
      "versions",
      "When",
      "upgrading",
      "behave",
      "unexpectedly",
      "even",
      "break",
      "indicate",
      "levels",
      "safety",
      "declared",
      "Safe",
      "public",
      "API",
      "considered",
      "stable",
      "breaking",
      "happen",
      "within",
      "major",
      "version",
      "Unsafe",
      "detail",
      "not",
      "Forbidden",
      "prevent",
      "because",
      "designed",
      "Don",
      "too",
      "afraid",
      "just",
      "mind",
      "Report",
      "case",
      "strong",
      "please",
      "report",
      "here",
      "work",
      "together",
      "find",
      "solution",
      "Which",
      "always",
      "clear",
      "exactly",
      "achieve",
      "desired",
      "result",
      "most",
      "print",
      "follow",
      "steps",
      "locate",
      "appropriate",
      "description",
      "provide",
      "short",
      "good",
      "right",
      "Official",
      "semantically",
      "named",
      "able",
      "infer",
      "enter",
      "part",
      "narrow",
      "down",
      "choices",
      "yarn",
      "Doc",
      "docs",
      "related",
      "listed",
      "Start",
      "higher",
      "level",
      "form",
      "tree",
      "importing",
      "others",
      "Every",
      "route",
      "associated",
      "Routing",
      "content",
      "plugins",
      "pages",
      "topmost",
      "start",
      "then",
      "renders",
      "targeting",
      "forget",
      "unswizzle",
      "rest",
      "deleting",
      "files",
      "found",
      "correct",
      "don",
      "many",
      "Read",
      "source",
      "search",
      "wisely",
      "Just",
      "ask",
      "idea",
      "effect",
      "reach",
      "out",
      "our",
      "support",
      "channels",
      "want",
      "better",
      "fanciest",
      "cases",
      "ultimately",
      "additional",
      "interact",
      "alternatives",
      "when",
      "customizing",
      "rules",
      "selectors",
      "often",
      "decent",
      "degree",
      "Refer",
      "styling",
      "translations",
      "sound",
      "surprising",
      "text",
      "labels",
      "language",
      "edit",
      "json",
      "emitted",
      "i18n",
      "tutorial",
      "inevitable",
      "prefer",
      "relevant",
      "little",
      "small",
      "less",
      "risk",
      "during",
      "far",
      "safer",
      "root",
      "rendered",
      "never",
      "unmounts",
      "perfect",
      "place",
      "stateful",
      "logic",
      "initialized",
      "across",
      "navigations",
      "user",
      "authentication",
      "status",
      "shopping",
      "cart",
      "state",
      "Swizzle",
      "Default",
      "children",
      "Context",
      "providers"
    ],
    "url": "/docs/swizzling",
    "path": "swizzling.mdx",
    "type": "general",
    "category": "root"
  },
  {
    "id": "RestAPI",
    "title": "REST API",
    "description": "",
    "content": "Official: https://oapi.xt.com 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | | 响应示例",
    "keywords": [
      "rest",
      "api",
      "trading",
      "third",
      "party",
      "accessdescription",
      "restapi",
      "mdx",
      "oapi",
      "Official",
      "https",
      "com",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/trading-third-party/Access Description/BasicInformationOfTheInterface",
    "path": "trading-third-party/Access Description/BasicInformationOfTheInterface.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Basic_Information_of_the_Interface",
    "title": "Basic Information of the Interface",
    "description": "",
    "content": "Due to the reasons of high latency and poor stability, it is not recommend to access the XT API through a proxy. GET request parameters are put in query Params, POST request parameters are put in request body. The request header information is set to: Content-Type=application/x-www-form-urlencoded In addition to the parameters required by the interface itself, signature, which is the signature parameter, needs to be passed in the query Params or request body. The interface that does not need to pass the signature parameter will be additionally explained. 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | | 响应示例",
    "keywords": [
      "basic",
      "information",
      "of",
      "the",
      "interface",
      "trading",
      "third",
      "party",
      "accessdescription",
      "apibasicinfo",
      "mdx",
      "x-www-form-urlencoded",
      "get",
      "post",
      "Due",
      "reasons",
      "high",
      "latency",
      "and",
      "poor",
      "stability",
      "not",
      "recommend",
      "access",
      "API",
      "through",
      "proxy",
      "GET",
      "request",
      "parameters",
      "are",
      "put",
      "query",
      "Params",
      "POST",
      "body",
      "The",
      "header",
      "set",
      "Content",
      "Type",
      "application",
      "www",
      "form",
      "urlencoded",
      "addition",
      "required",
      "itself",
      "signature",
      "which",
      "parameter",
      "needs",
      "passed",
      "that",
      "does",
      "need",
      "pass",
      "will",
      "additionally",
      "explained",
      "Name",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/trading-third-party/Access Description/apiBasicInfo",
    "path": "trading-third-party/Access Description/apiBasicInfo.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "API_Library",
    "title": "API Library",
    "description": "",
    "content": "Java connector A lightweight Java codebase that provides methods that allow users to directly call the API。 Sdks for each language: java : https://github.com/xt-com/xt4-java-demo golang : https://github.com/xt-com/xt4-go-demo c: https://github.com/xt-com/xt4-c--demo 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | | 响应示例",
    "keywords": [
      "api",
      "library",
      "trading",
      "third",
      "party",
      "accessdescription",
      "apidemo",
      "mdx",
      "github",
      "xt-com",
      "xt4-java-demo",
      "xt4-go-demo",
      "xt4-c--demo",
      "Java",
      "connector",
      "lightweight",
      "codebase",
      "that",
      "provides",
      "methods",
      "allow",
      "users",
      "directly",
      "call",
      "the",
      "API",
      "Sdks",
      "for",
      "each",
      "language",
      "java",
      "https",
      "com",
      "xt4",
      "demo",
      "golang",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/trading-third-party/Access Description/BasicInformationOfTheInterface",
    "path": "trading-third-party/Access Description/BasicInformationOfTheInterface.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Apply_for_API_Key",
    "title": "How to Apply for API Key",
    "description": "",
    "content": "The interface may require the user's API Key,How to create API-KEY please contact the operator. 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | | 响应示例",
    "keywords": [
      "how",
      "to",
      "apply",
      "for",
      "api",
      "key",
      "trading",
      "third",
      "party",
      "accessdescription",
      "applyapi",
      "mdx",
      "The",
      "interface",
      "may",
      "require",
      "the",
      "user",
      "API",
      "Key",
      "How",
      "create",
      "KEY",
      "please",
      "contact",
      "operator",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/trading-third-party/Access Description/applyApi",
    "path": "trading-third-party/Access Description/applyApi.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Token_Instructions",
    "title": "Token Instructions",
    "description": "",
    "content": "If the third-party platform is accessible to the user-authorized interface, you need to add an additional access-token field to the interface Header, how to get access-token please refer to here 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | |",
    "keywords": [
      "token",
      "instructions",
      "trading",
      "third",
      "party",
      "accessdescription",
      "authstatement",
      "mdx",
      "the",
      "platform",
      "accessible",
      "user",
      "authorized",
      "interface",
      "you",
      "need",
      "add",
      "additional",
      "access",
      "field",
      "Header",
      "how",
      "get",
      "please",
      "refer",
      "here",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/trading-third-party/Access Description/authStatement",
    "path": "trading-third-party/Access Description/authStatement.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Error_Code",
    "title": "Error Code",
    "description": "",
    "content": "| httpStatus | description | | --- | --- | | 200 | The request is successful, please check the rc and mc sections further | | 404 | interface does not exist | | 429 | The request is too frequent, please control the request rate according to the speed limit requirement | | 500 | Service exception | | 502 | Gateway exception | | 503 | Service unavailable, please try again later | | rc | return Code | | --- | ---------------- | | 0 | business success | | 1 | business failure | | mc | message code | | -------- | ------------------------------------------ | | SUCCESS | success | | FAILURE | fail | | AUTH_001 | missing request header validate-appkey | | AUTH_002 | missing request header validate-timestamp | | AUTH_003 | missing request header validate-recvwindow | | AUTH_004 | bad request header validate-recvwindow | | AUTH_005 | missing request header validate-algorithms | | AUTH_006 | bad request header validate-algorithms | | AUTH_007 | missing request header validate-signature | | AUTH_101 | ApiKey does not exist | | AUTH_102 | ApiKey is not activated | | AUTH_103 | Signature error | | AUTH_104 | Unbound IP request | | AUTH_105 | outdated message | | AUTH_106 | Exceeded apikey permission | 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | |",
    "keywords": [
      "error",
      "code",
      "trading",
      "third",
      "party",
      "accessdescription",
      "errorcode",
      "mdx",
      "httpStatus",
      "description",
      "The",
      "request",
      "successful",
      "please",
      "check",
      "the",
      "and",
      "sections",
      "further",
      "interface",
      "does",
      "not",
      "exist",
      "too",
      "frequent",
      "control",
      "rate",
      "according",
      "speed",
      "limit",
      "requirement",
      "Service",
      "exception",
      "Gateway",
      "unavailable",
      "try",
      "again",
      "later",
      "return",
      "Code",
      "business",
      "success",
      "failure",
      "message",
      "SUCCESS",
      "FAILURE",
      "fail",
      "AUTH_001",
      "missing",
      "header",
      "validate",
      "appkey",
      "AUTH_002",
      "timestamp",
      "AUTH_003",
      "recvwindow",
      "AUTH_004",
      "bad",
      "AUTH_005",
      "algorithms",
      "AUTH_006",
      "AUTH_007",
      "signature",
      "AUTH_101",
      "ApiKey",
      "AUTH_102",
      "activated",
      "AUTH_103",
      "Signature",
      "AUTH_104",
      "Unbound",
      "AUTH_105",
      "outdated",
      "AUTH_106",
      "Exceeded",
      "apikey",
      "permission",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/trading-third-party/Access Description/errorCode",
    "path": "trading-third-party/Access Description/errorCode.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Frequency_Limiting_Rules",
    "title": "Frequency Limiting Rules",
    "description": "",
    "content": "Get assets 3 times per second, other methods 10 times per second for each single user, 1000 times per minute for each single IP, exceeding the requested times, account will be locked for 10 minutes. 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | |",
    "keywords": [
      "frequency",
      "limiting",
      "rules",
      "trading",
      "third",
      "party",
      "accessdescription",
      "limitrules",
      "mdx",
      "Get",
      "assets",
      "times",
      "per",
      "second",
      "other",
      "methods",
      "for",
      "each",
      "single",
      "user",
      "minute",
      "exceeding",
      "the",
      "requested",
      "account",
      "will",
      "locked",
      "minutes",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/trading-third-party/Access Description/limitRules",
    "path": "trading-third-party/Access Description/limitRules.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Return_Format",
    "title": "Return Format",
    "description": "",
    "content": "All interfaces’ returns are in JSON format. 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | | 响应示例 `json { \"returnCode\": 200, \"result\": { \"serverTime\": 1636612706739 }, \"msgInfo\": \"Success.\" \"error\": null, } `",
    "keywords": [
      "return",
      "format",
      "trading",
      "third",
      "party",
      "accessdescription",
      "returnformat",
      "mdx",
      "All",
      "interfaces",
      "returns",
      "are",
      "JSON",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None",
      "json",
      "returnCode",
      "result",
      "serverTime",
      "msgInfo",
      "Success",
      "error",
      "null"
    ],
    "url": "/docs/trading-third-party/Access Description/returnFormat",
    "path": "trading-third-party/Access Description/returnFormat.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Signature_Statement",
    "title": "Signature Statement",
    "description": "",
    "content": "Since XT needs to provide some open interfaces for third-party platforms, it requires data security issues of the interface, such as whether the data has been tampered with, whether the data is outdated, whether the data can be submitted repeatedly, and the frequency of access to the interface within a certain period of time. Among them, whether the data has been tampered with is most important. Offline distribution of appkey and secretkey, for different calls, provide different appkey and secretkey. Add timestamp, the value of which should be the unix timestamp (milliseconds) of the time when the request is sent, and the valid time of the data is calculated according to this value. Add signature information for all data. Add recvwindow, the valid time is relatively simple and fixed to a certain value. For example, the data is valid within 10 minutes under the same api and appid. Here, it can be further optimized to the valid time of a single api is different. The server determines the timestamp when it receives a request. Up to 60 seconds, and the default is 5 seconds. If it was sent 5000 milliseconds ago, the request will be considered invalid. This time window value can be customized by sending the optional parameter recvWindow. In addition, the server will also reject the request if it calculates that the client timestamp is more than one second 'in the future' of server time. Regarding the transaction timeliness, the Internet is not 100% reliable and cannot be completely relied upon, so your application's local time delay to the XT server may be jitter.This is the purpose of setting recvWindow. If you are engaged in high-frequency trading and have high requirements for trading timeliness, you can flexibly set recvWindow to meet your requirements. RecvWindow for more than 5 seconds is not recommended. 5、5. Add algorithms (signature method/algorithm). User's signature calculation is a HSC-based protocol, where HmacSHA256 is used by default. See the specific supported protocols listed in the table below. 请求参数 | Name | Type | Mandatory | Default | Description | | ------ | ---- | --------- | ------- | ----------- | | None | | No | | |",
    "keywords": [
      "signature",
      "statement",
      "trading",
      "third",
      "party",
      "accessdescription",
      "signstatement",
      "mdx",
      "algorithm",
      "Since",
      "needs",
      "provide",
      "some",
      "open",
      "interfaces",
      "for",
      "platforms",
      "requires",
      "data",
      "security",
      "issues",
      "the",
      "interface",
      "such",
      "whether",
      "has",
      "been",
      "tampered",
      "with",
      "outdated",
      "can",
      "submitted",
      "repeatedly",
      "and",
      "frequency",
      "access",
      "within",
      "certain",
      "period",
      "time",
      "Among",
      "them",
      "most",
      "important",
      "Offline",
      "distribution",
      "appkey",
      "secretkey",
      "different",
      "calls",
      "Add",
      "timestamp",
      "value",
      "which",
      "should",
      "unix",
      "milliseconds",
      "when",
      "request",
      "sent",
      "valid",
      "calculated",
      "according",
      "this",
      "information",
      "all",
      "recvwindow",
      "relatively",
      "simple",
      "fixed",
      "For",
      "example",
      "minutes",
      "under",
      "same",
      "api",
      "appid",
      "Here",
      "further",
      "optimized",
      "single",
      "The",
      "server",
      "determines",
      "receives",
      "seconds",
      "default",
      "was",
      "ago",
      "will",
      "considered",
      "invalid",
      "This",
      "window",
      "customized",
      "sending",
      "optional",
      "parameter",
      "recvWindow",
      "addition",
      "also",
      "reject",
      "calculates",
      "that",
      "client",
      "more",
      "than",
      "one",
      "second",
      "future",
      "Regarding",
      "transaction",
      "timeliness",
      "Internet",
      "not",
      "reliable",
      "cannot",
      "completely",
      "relied",
      "upon",
      "your",
      "application",
      "local",
      "delay",
      "may",
      "jitter",
      "purpose",
      "setting",
      "you",
      "are",
      "engaged",
      "high",
      "have",
      "requirements",
      "flexibly",
      "set",
      "meet",
      "RecvWindow",
      "recommended",
      "algorithms",
      "method",
      "User",
      "calculation",
      "HSC",
      "based",
      "protocol",
      "where",
      "HmacSHA256",
      "used",
      "See",
      "specific",
      "supported",
      "protocols",
      "listed",
      "table",
      "below",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "None"
    ],
    "url": "/docs/trading-third-party/Access Description/signStatement",
    "path": "trading-third-party/Access Description/signStatement.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Obtain_Signature",
    "title": "Obtain Signature",
    "description": "",
    "content": "Example for http://oapi.xt.com/api/v1/public/symbol/detail?symbol=btc_usdt The following is an example of an order placed in a call interface using echo openssl and curl tools in a Linux bash environment. Appkey, secret for demonstration purposes only: appKey: 3976eb88-76d0-4f6e-a6b2-a57980770085 secretKey: bc6630d0231fda5cd98794f52c4998659beda290 Partial data of Header validate-appkey: 3976eb88-76d0-4f6e-a6b2-a57980770085 validate-timestamp: 1641446237201 validate-algorithms: HmacSHA256",
    "keywords": [
      "obtain",
      "signature",
      "trading",
      "third",
      "party",
      "accessdescription",
      "signsteps",
      "mdx",
      "oapi",
      "api",
      "v1",
      "public",
      "symbol",
      "detail",
      "Example",
      "for",
      "http",
      "com",
      "btc_usdt",
      "The",
      "following",
      "example",
      "order",
      "placed",
      "call",
      "interface",
      "using",
      "echo",
      "openssl",
      "and",
      "curl",
      "tools",
      "Linux",
      "bash",
      "environment",
      "Appkey",
      "secret",
      "demonstration",
      "purposes",
      "only",
      "appKey",
      "a6b2",
      "a57980770085",
      "secretKey",
      "Partial",
      "data",
      "Header",
      "validate",
      "appkey",
      "timestamp",
      "algorithms",
      "HmacSHA256"
    ],
    "url": "/docs/trading-third-party/Access Description/signSteps",
    "path": "trading-third-party/Access Description/signSteps.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Get_a_single_currency_asset",
    "title": "Get a single currency asset",
    "description": "/spot/v4/balance",
    "content": "接口 GET /spot/v4/balance 请求参数 | Name | Type | Mandatory | Default | Description | | ---------- | ------ | --------- | ------- | ----------- | | currency | string | Yes | | eg:usdt | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": { \"currency\": \"usdt\", \"currencyId\": 0, \"frozenAmount\": 0, \"availableAmount\": 0, \"totalAmount\": 0, \"convertBtcAmount\": 0 //Converted BTC amount } } `",
    "keywords": [
      "get",
      "single",
      "currency",
      "asset",
      "/spot/v4/balance",
      "trading",
      "third",
      "party",
      "balance",
      "balanceget",
      "mdx",
      "spot",
      "v4",
      "Converted",
      "GET",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "string",
      "Yes",
      "usdt",
      "json",
      "result",
      "currencyId",
      "frozenAmount",
      "availableAmount",
      "totalAmount",
      "convertBtcAmount",
      "BTC",
      "amount"
    ],
    "url": "/docs/trading-third-party/Balance/balanceGet",
    "path": "trading-third-party/Balance/balanceGet.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "bGet_a_list_of_currency_assets",
    "title": "Get a list of currency assets",
    "description": "/spot/v4/balances",
    "content": "接口 GET /spot/v4/balances Limit Flow Rules 10/s/apikey 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | currencies | string | No | | List of currencies, comma separated,eg: usdt,btc | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": { \"totalBtcAmount\": 0, \"assets\": [ { \"currency\": \"string\", \"currencyId\": 0, \"frozenAmount\": 0, \"availableAmount\": 0, \"totalAmount\": 0, \"convertBtcAmount\": 0 } ] } } `",
    "keywords": [
      "get",
      "list",
      "of",
      "currency",
      "assets",
      "/spot/v4/balances",
      "trading",
      "third",
      "party",
      "balance",
      "balancesget",
      "mdx",
      "spot",
      "v4",
      "balances",
      "apikey",
      "GET",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "currencies",
      "string",
      "List",
      "comma",
      "separated",
      "usdt",
      "btc",
      "json",
      "result",
      "totalBtcAmount",
      "currencyId",
      "frozenAmount",
      "availableAmount",
      "totalAmount",
      "convertBtcAmount"
    ],
    "url": "/docs/trading-third-party/Balance/balancesGet",
    "path": "trading-third-party/Balance/balancesGet.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Create_apiKey",
    "title": "Create apiKey",
    "description": "/user/account/api-key",
    "content": "接口 POST /user/account/api-key 响应示例 `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [{}], \"result\": { \"userId\": 12345678, //user id \"accessKey\": \"99258227-f053-46a2-9b10-66c155eb705c\", //encryption key \"secretKey\": \"4b1839e11bf7a1c6de5f078bd9f4b6e0850da3cf\" //encryption string } } `",
    "keywords": [
      "create",
      "apikey",
      "/user/account/api-key",
      "trading",
      "third",
      "party",
      "oauth interface",
      "createapikey",
      "mdx",
      "user",
      "account",
      "api-key",
      "encryption",
      "post",
      "POST",
      "api",
      "key",
      "json",
      "SUCCESS",
      "result",
      "userId",
      "accessKey",
      "f053",
      "secretKey",
      "string"
    ],
    "url": "/docs/trading-third-party/OAuth Interface/createApiKey",
    "path": "trading-third-party/OAuth Interface/createApiKey.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Cancell_batch_order",
    "title": "Cancell batch order",
    "description": "/spot/v4/batch-order",
    "content": "接口 DELETE /spot/v4/batch-order Note: The parameters should be placed in the request body in the form of json 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | clientBatchId | string | No | | client batch id | | orderIds | array | Yes | | 6216559590087220004, 6216559590087220005 | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": {} } `",
    "keywords": [
      "cancell",
      "batch",
      "order",
      "/spot/v4/batch-order",
      "trading",
      "third",
      "party",
      "batchorderdel",
      "mdx",
      "spot",
      "v4",
      "batch-order",
      "delete",
      "DELETE",
      "Note",
      "The",
      "parameters",
      "should",
      "placed",
      "the",
      "request",
      "body",
      "form",
      "json",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "clientBatchId",
      "string",
      "client",
      "orderIds",
      "array",
      "Yes",
      "result"
    ],
    "url": "/docs/trading-third-party/Order/batchOrderDel",
    "path": "trading-third-party/Order/batchOrderDel.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Get_batch",
    "title": "Get batch",
    "description": "/spot/v4/batch-order",
    "content": "接口 GET /spot/v4/batch-order reponse field information, refer to the Get single interface 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | orderIds | string | Yes | | order Ids eg: 6216559590087220004, 6216559590087220004 | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": [ { \"symbol\": \"BTC_USDT\", \"orderId\": \"6216559590087220004\", \"clientOrderId\": \"16559590087220001\", \"baseCurrency\": \"string\", \"quoteCurrency\": \"string\", \"side\": \"BUY\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"price\": \"40000\", \"origQty\": \"2\", \"origQuoteQty\": \"48000\", \"executedQty\": \"1.2\", \"leavingQty\": \"string\", \"tradeBase\": \"2\", \"tradeQuote\": \"48000\", \"avgPrice\": \"42350\", \"fee\": \"string\", \"feeCurrency\": \"string\", \"state\": \"NEW\", \"time\": 1655958915583, \"updatedTime\": 1655958915583 } ] } `",
    "keywords": [
      "get",
      "batch",
      "/spot/v4/batch-order",
      "trading",
      "third",
      "party",
      "order",
      "batchorderget",
      "mdx",
      "spot",
      "v4",
      "batch-order",
      "GET",
      "reponse",
      "field",
      "information",
      "refer",
      "the",
      "Get",
      "single",
      "interface",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "orderIds",
      "string",
      "Yes",
      "Ids",
      "json",
      "result",
      "symbol",
      "BTC_USDT",
      "orderId",
      "clientOrderId",
      "baseCurrency",
      "quoteCurrency",
      "side",
      "BUY",
      "type",
      "LIMIT",
      "timeInForce",
      "GTC",
      "price",
      "origQty",
      "origQuoteQty",
      "executedQty",
      "leavingQty",
      "tradeBase",
      "tradeQuote",
      "avgPrice",
      "fee",
      "feeCurrency",
      "state",
      "NEW",
      "time",
      "updatedTime"
    ],
    "url": "/docs/trading-third-party/Order/batchOrderGet",
    "path": "trading-third-party/Order/batchOrderGet.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Query_historical_orders",
    "title": "Query historical orders",
    "description": "/spot/v4/history-order",
    "content": "接口 GET /spot/v4/history-order Limit Flow Rules 10/s/apikey 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | symbol | string | No | | Trading pair, if not filled in, represents all | | bizType | string | No | | SPOT, LEVER | | side | string | No | | BUY,SELL | | type | string | No | | LIMIT, MARKET | | direction | string | No | | query direction:PREV, NEXT | | limit | number | No | 20 | Limit number, max 100 | | startTime | number | No | | eg:1657682804112 | | endTime | number | No | | | | hiddenCanceled | bool | No | | | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": { \"hasPrev\": true, \"hasNext\": true, \"items\": [ //For field information, refer to the Get single interface { \"symbol\": \"BTC_USDT\", \"orderId\": \"6216559590087220004\", \"clientOrderId\": \"16559590087220001\", \"baseCurrency\": \"string\", \"quoteCurrency\": \"string\", \"side\": \"BUY\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"price\": \"40000\", \"origQty\": \"2\", \"origQuoteQty\": \"48000\", \"executedQty\": \"1.2\", \"leavingQty\": \"string\", \"tradeBase\": \"2\", \"tradeQuote\": \"48000\", \"avgPrice\": \"42350\", \"fee\": \"string\", \"feeCurrency\": \"string\", \"state\": \"NEW\", \"time\": 1655958915583, \"updatedTime\": 1655958915583 } ] } } `",
    "keywords": [
      "query",
      "historical",
      "orders",
      "/spot/v4/history-order",
      "trading",
      "third",
      "party",
      "order",
      "historyorderget",
      "mdx",
      "spot",
      "v4",
      "history-order",
      "apikey",
      "For",
      "get",
      "GET",
      "history",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "symbol",
      "string",
      "Trading",
      "pair",
      "not",
      "filled",
      "represents",
      "all",
      "bizType",
      "SPOT",
      "LEVER",
      "side",
      "BUY",
      "SELL",
      "type",
      "LIMIT",
      "MARKET",
      "direction",
      "PREV",
      "NEXT",
      "limit",
      "number",
      "max",
      "startTime",
      "endTime",
      "hiddenCanceled",
      "bool",
      "json",
      "result",
      "hasPrev",
      "true",
      "hasNext",
      "items",
      "field",
      "information",
      "refer",
      "the",
      "Get",
      "single",
      "interface",
      "BTC_USDT",
      "orderId",
      "clientOrderId",
      "baseCurrency",
      "quoteCurrency",
      "timeInForce",
      "GTC",
      "price",
      "origQty",
      "origQuoteQty",
      "executedQty",
      "leavingQty",
      "tradeBase",
      "tradeQuote",
      "avgPrice",
      "fee",
      "feeCurrency",
      "state",
      "NEW",
      "time",
      "updatedTime"
    ],
    "url": "/docs/trading-third-party/Order/historyOrderGet",
    "path": "trading-third-party/Order/historyOrderGet.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Cancel_the_current_pending_order",
    "title": "Cancel the current pending order",
    "description": "/spot/v4/open-order",
    "content": "接口 DELETE /spot/v4/open-order Limit Flow Rules 10/s/apikey Note: The parameters should be placed in the request body in the form of json 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | symbol | string | Yes | | Trading pair, if not filled in, represents all | | bizType | string | Yes | | SPOT, LEVER | | side | string | Yes | | BUY,SELL | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": {} } `",
    "keywords": [
      "cancel",
      "the",
      "current",
      "pending",
      "order",
      "/spot/v4/open-order",
      "trading",
      "third",
      "party",
      "openorderdel",
      "mdx",
      "spot",
      "v4",
      "open-order",
      "apikey",
      "delete",
      "DELETE",
      "open",
      "Limit",
      "Flow",
      "Rules",
      "Note",
      "The",
      "parameters",
      "should",
      "placed",
      "request",
      "body",
      "form",
      "json",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "symbol",
      "string",
      "Yes",
      "Trading",
      "pair",
      "not",
      "filled",
      "represents",
      "all",
      "bizType",
      "SPOT",
      "LEVER",
      "side",
      "BUY",
      "SELL",
      "result"
    ],
    "url": "/docs/trading-third-party/Order/openOrderDel",
    "path": "trading-third-party/Order/openOrderDel.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Query_the_current_pending_order",
    "title": "Query the current pending order",
    "description": "/spot/v4/open-order",
    "content": "接口 GET /spot/v4/open-order Limit Flow Rules 10/s/apikey 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | symbol | string | No | | Trading pair, if not filled in, represents all | | bizType | string | No | | SPOT, LEVER | | side | string | No | | BUY,SELL | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": [ //For field information, refer to the Get single interface { \"symbol\": \"BTC_USDT\", \"orderId\": \"6216559590087220004\", \"clientOrderId\": \"16559590087220001\", \"baseCurrency\": \"string\", \"quoteCurrency\": \"string\", \"side\": \"BUY\", \"type\": \"LIMIT\", \"timeInForce\": \"GTC\", \"price\": \"40000\", \"origQty\": \"2\", \"origQuoteQty\": \"48000\", \"executedQty\": \"1.2\", \"leavingQty\": \"string\", \"tradeBase\": \"2\", \"tradeQuote\": \"48000\", \"avgPrice\": \"42350\", \"fee\": \"string\", \"feeCurrency\": \"string\", \"state\": \"NEW\", \"time\": 1655958915583, \"updatedTime\": 1655958915583 } ] } `",
    "keywords": [
      "query",
      "the",
      "current",
      "pending",
      "order",
      "/spot/v4/open-order",
      "trading",
      "third",
      "party",
      "openorderget",
      "mdx",
      "spot",
      "v4",
      "open-order",
      "apikey",
      "For",
      "get",
      "GET",
      "open",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "symbol",
      "string",
      "Trading",
      "pair",
      "not",
      "filled",
      "represents",
      "all",
      "bizType",
      "SPOT",
      "LEVER",
      "side",
      "BUY",
      "SELL",
      "json",
      "result",
      "field",
      "information",
      "refer",
      "Get",
      "single",
      "interface",
      "BTC_USDT",
      "orderId",
      "clientOrderId",
      "baseCurrency",
      "quoteCurrency",
      "type",
      "LIMIT",
      "timeInForce",
      "GTC",
      "price",
      "origQty",
      "origQuoteQty",
      "executedQty",
      "leavingQty",
      "tradeBase",
      "tradeQuote",
      "avgPrice",
      "fee",
      "feeCurrency",
      "state",
      "NEW",
      "time",
      "updatedTime"
    ],
    "url": "/docs/trading-third-party/Order/openOrderGet",
    "path": "trading-third-party/Order/openOrderGet.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Cancell_order",
    "title": "Cancell order",
    "description": "/spot/v4/order/{orderId}",
    "content": "接口 DELETE /spot/v4/order/{orderId} 请求参数 | Name | Type | Mandatory | Default | Description | | --------- | ------ | --------- | ------- | ----------- | | orderId | number | Yes | | | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": { \"cancelId\": \"6216559590087220004\" } } `",
    "keywords": [
      "cancell",
      "order",
      "/spot/v4/order/{orderid}",
      "trading",
      "third",
      "party",
      "orderdel",
      "mdx",
      "spot",
      "v4",
      "delete",
      "DELETE",
      "orderId",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "number",
      "Yes",
      "json",
      "string",
      "result",
      "cancelId"
    ],
    "url": "/docs/trading-third-party/Order/orderDel",
    "path": "trading-third-party/Order/orderDel.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Get_single",
    "title": "Get single",
    "description": "/spot/v4/order/{orderId}",
    "content": "接口 GET /spot/v4/order/{orderId} 请求参数 | Name | Type | Mandatory | Default | Description | | --------- | ------ | --------- | ------- | ----------- | | orderId | number | Yes | | | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": { \"symbol\": \"BTC_USDT\", \"orderId\": \"6216559590087220004\", \"clientOrderId\": \"16559590087220001\", \"baseCurrency\": \"string\", \"quoteCurrency\": \"string\", \"side\": \"BUY\", //order side:BUY,SELL \"type\": \"LIMIT\", //order type LIMIT,MARKET \"timeInForce\": \"GTC\", //effective way:GTC,IOC,FOK,GTX \"price\": \"40000\", \"origQty\": \"2\", //original quantity \"origQuoteQty\": \"48000\", //original amount \"executedQty\": \"1.2\", //executed quantity \"leavingQty\": \"string\", //The quantity to be executed (if the order is cancelled or the order is rejected, the value is 0) \"tradeBase\": \"2\", //transaction quantity \"tradeQuote\": \"48000\", //transaction amount \"avgPrice\": \"42350\", //average transaction price \"fee\": \"string\", //handling fee \"feeCurrency\": \"string\", \"state\": \"NEW\", //order stat NEW,PARTIALLY_FILLED,FILLED,CANCELED,REJECTED,EXPIRED \"time\": 1655958915583, //order time \"updatedTime\": 1655958915583 } } `",
    "keywords": [
      "get",
      "single",
      "/spot/v4/order/{orderid}",
      "trading",
      "third",
      "party",
      "order",
      "orderget",
      "mdx",
      "spot",
      "v4",
      "effective",
      "original",
      "executed",
      "The",
      "transaction",
      "average",
      "handling",
      "GET",
      "orderId",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "number",
      "Yes",
      "json",
      "string",
      "result",
      "symbol",
      "BTC_USDT",
      "clientOrderId",
      "baseCurrency",
      "quoteCurrency",
      "side",
      "BUY",
      "SELL",
      "type",
      "LIMIT",
      "MARKET",
      "timeInForce",
      "GTC",
      "way",
      "IOC",
      "FOK",
      "GTX",
      "price",
      "origQty",
      "quantity",
      "origQuoteQty",
      "amount",
      "executedQty",
      "leavingQty",
      "the",
      "cancelled",
      "rejected",
      "value",
      "tradeBase",
      "tradeQuote",
      "avgPrice",
      "fee",
      "feeCurrency",
      "state",
      "NEW",
      "stat",
      "PARTIALLY_FILLED",
      "FILLED",
      "CANCELED",
      "REJECTED",
      "EXPIRED",
      "time",
      "updatedTime"
    ],
    "url": "/docs/trading-third-party/Order/orderGet",
    "path": "trading-third-party/Order/orderGet.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Query_single",
    "title": "Query single",
    "description": "/spot/v4/order",
    "content": "接口 GET /spot/v4/order 请求参数 | Name | Type | Mandatory | Default | Description | | --------------- | ------ | --------- | ------- | ----------- | | orderId | number | No | | | | clientOrderId | string | No | | | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": { \"symbol\": \"BTC_USDT\", \"orderId\": \"6216559590087220004\", \"clientOrderId\": \"16559590087220001\", \"baseCurrency\": \"string\", \"quoteCurrency\": \"string\", \"side\": \"BUY\", //order side:BUY,SELL \"type\": \"LIMIT\", //order type LIMIT,MARKET \"timeInForce\": \"GTC\", //effective way:GTC,IOC,FOK,GTX \"price\": \"40000\", \"origQty\": \"2\", //original quantity \"origQuoteQty\": \"48000\", //original amount \"executedQty\": \"1.2\", //executed quantity \"leavingQty\": \"string\", //The quantity to be executed (if the order is cancelled or the order is rejected, the value is 0) \"tradeBase\": \"2\", //transaction quantity \"tradeQuote\": \"48000\", //transaction amount \"avgPrice\": \"42350\", //average transaction price \"fee\": \"string\", //handling fee \"feeCurrency\": \"string\", \"state\": \"NEW\", //order stat NEW,PARTIALLY_FILLED,FILLED,CANCELED,REJECTED,EXPIRED \"time\": 1655958915583, //order time \"updatedTime\": 1655958915583 } } `",
    "keywords": [
      "query",
      "single",
      "/spot/v4/order",
      "trading",
      "third",
      "party",
      "order",
      "ordergetqueryparam",
      "mdx",
      "spot",
      "v4",
      "effective",
      "original",
      "executed",
      "The",
      "transaction",
      "average",
      "handling",
      "get",
      "GET",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "orderId",
      "number",
      "clientOrderId",
      "string",
      "json",
      "result",
      "symbol",
      "BTC_USDT",
      "baseCurrency",
      "quoteCurrency",
      "side",
      "BUY",
      "SELL",
      "type",
      "LIMIT",
      "MARKET",
      "timeInForce",
      "GTC",
      "way",
      "IOC",
      "FOK",
      "GTX",
      "price",
      "origQty",
      "quantity",
      "origQuoteQty",
      "amount",
      "executedQty",
      "leavingQty",
      "the",
      "cancelled",
      "rejected",
      "value",
      "tradeBase",
      "tradeQuote",
      "avgPrice",
      "fee",
      "feeCurrency",
      "state",
      "NEW",
      "stat",
      "PARTIALLY_FILLED",
      "FILLED",
      "CANCELED",
      "REJECTED",
      "EXPIRED",
      "time",
      "updatedTime"
    ],
    "url": "/docs/trading-third-party/Order/orderGetQueryParam",
    "path": "trading-third-party/Order/orderGetQueryParam.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Submit_order",
    "title": "Submit order",
    "description": "/spot/v4/order",
    "content": "接口 POST /spot/v4/order Remark Create a BUY order based on market price, quantity must be null, quoteQty required; Create a SELL order based on market price, quoteQty must be null, quantity required. Limit Flow Rules 20/s/apikey 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | symbol | string | Yes | | | | clientOrderId | string | No | | Pattern: ^[a-zA-Z0-9_] | | side | string | Yes | | BUY,SELL | | type | string | Yes | | order type:LIMIT,MARKET | | timeInForce | string | Yes | | effective way:GTC, FOK, IOC, GTX | | bizType | string | Yes | | SPOT, LEVER | | price | number | No | | price. Required if it is the LIMIT price; blank if it is the MARKET price | | quantity | number | No | | quantity. Required if it is the LIMIT price or the order is placed at the market price by quantity | | quoteQty | number | No | | amount. Required if it is the LIMIT price or the order is the market price when placing an order by amount | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": { \"orderId\": \"6216559590087220004\" } } `",
    "keywords": [
      "submit",
      "order",
      "/spot/v4/order",
      "trading",
      "third",
      "party",
      "orderpost",
      "mdx",
      "spot",
      "v4",
      "apikey",
      "post",
      "POST",
      "Remark",
      "Create",
      "BUY",
      "based",
      "market",
      "price",
      "quantity",
      "must",
      "null",
      "quoteQty",
      "required",
      "SELL",
      "Limit",
      "Flow",
      "Rules",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "symbol",
      "string",
      "Yes",
      "clientOrderId",
      "Pattern",
      "side",
      "type",
      "LIMIT",
      "MARKET",
      "timeInForce",
      "effective",
      "way",
      "GTC",
      "FOK",
      "IOC",
      "GTX",
      "bizType",
      "SPOT",
      "LEVER",
      "number",
      "Required",
      "the",
      "blank",
      "placed",
      "amount",
      "when",
      "placing",
      "json",
      "result",
      "orderId"
    ],
    "url": "/docs/trading-third-party/Order/orderPost",
    "path": "trading-third-party/Order/orderPost.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "Query_trade",
    "title": "Query trade",
    "description": "/spot/v4/trade",
    "content": "接口 GET /spot/v4/trade 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | symbol | string | No | | Trading pair, if not filled in, represents all | | bizType | string | No | | SPOT, LEVER | | orderSide | string | No | | BUY,SELL | | orderType | string | No | | LIMIT, MARKET | | orderId | number | No | | | | fromId | number | No | | start id | | direction | string | No | | query direction:PREV, NEXT | | limit | number | No | 20 | Limit number, max 100 | | startTime | number | No | | start time eg:1657682804112 | | endTime | number | No | | | 响应示例 `json { \"rc\": 0, \"mc\": \"string\", \"ma\": [{}], \"result\": { \"hasPrev\": true, \"hasNext\": true, \"items\": [ { \"symbol\": \"BTC_USDT\", \"tradeId\": \"6316559590087222001\", \"orderId\": \"6216559590087220004\", \"orderSide\": \"BUY\", \"orderType\": \"LIMIT\", \"bizType\": \"SPOT\", \"time\": 1655958915583, \"price\": \"40000\", \"quantity\": \"1.2\", \"quoteQty\": \"48000\", //amount \"baseCurrency\": \"BTC\", \"quoteCurrency\": \"USDT\", \"fee\": \"0.5\", \"feeCurrency\": \"USDT\", \"takerMaker\": \"taker\" //takerMaker } ] } } `",
    "keywords": [
      "query",
      "trade",
      "/spot/v4/trade",
      "trading",
      "third",
      "party",
      "tradeget",
      "mdx",
      "spot",
      "v4",
      "amount",
      "takerMaker",
      "get",
      "GET",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "symbol",
      "string",
      "Trading",
      "pair",
      "not",
      "filled",
      "represents",
      "all",
      "bizType",
      "SPOT",
      "LEVER",
      "orderSide",
      "BUY",
      "SELL",
      "orderType",
      "LIMIT",
      "MARKET",
      "orderId",
      "number",
      "fromId",
      "start",
      "direction",
      "PREV",
      "NEXT",
      "limit",
      "Limit",
      "max",
      "startTime",
      "time",
      "endTime",
      "json",
      "result",
      "hasPrev",
      "true",
      "hasNext",
      "items",
      "BTC_USDT",
      "tradeId",
      "price",
      "quantity",
      "quoteQty",
      "baseCurrency",
      "BTC",
      "quoteCurrency",
      "USDT",
      "fee",
      "feeCurrency",
      "taker"
    ],
    "url": "/docs/trading-third-party/Trade/tradeGet",
    "path": "trading-third-party/Trade/tradeGet.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "User_Registration",
    "title": "User Registration",
    "description": "",
    "content": "User Registration If you do not have an XT account, please register in advance at the following address: Register://{URL}/{language}/accounts/register?client_id={clientId}>) Parameters: URL The domain name of the XT authorization page. The official environment is: www.xt.com language The language for the authorization page. The currently supported languages are as follows: en: English ja: Japanese hi: Hindi id: Indonesian ru: Russian es: Spanish tr: Turkish zh-HK: Traditional Chinese zh-CN: Simplified Chinese vi: Vietnamese th: Thai clientId The unique identification of the organization. Please apply to XT.COM in advance. For Example: http://www.xt.com/en/accounts/register?client_id=DDJ7BLK49YUCL97S Users registered through this URL will belong to the institution: DDJ7BLK49YUCL97S",
    "keywords": [
      "user",
      "registration",
      "trading",
      "third",
      "party",
      "user registration",
      "userreg",
      "mdx",
      "accounts",
      "register",
      "www",
      "en",
      "User",
      "Registration",
      "you",
      "not",
      "have",
      "account",
      "please",
      "advance",
      "the",
      "following",
      "address",
      "Register",
      "URL",
      "language",
      "client_id",
      "clientId",
      "Parameters",
      "The",
      "domain",
      "name",
      "authorization",
      "page",
      "official",
      "environment",
      "com",
      "for",
      "currently",
      "supported",
      "languages",
      "are",
      "follows",
      "English",
      "Japanese",
      "Hindi",
      "Indonesian",
      "Russian",
      "Spanish",
      "Turkish",
      "Traditional",
      "Chinese",
      "Simplified",
      "Vietnamese",
      "Thai",
      "unique",
      "identification",
      "organization",
      "Please",
      "apply",
      "COM",
      "For",
      "Example",
      "http",
      "DDJ7BLK49YUCL97S",
      "Users",
      "registered",
      "through",
      "this",
      "will",
      "belong",
      "institution"
    ],
    "url": "/docs/trading-third-party/User Registration/userReg",
    "path": "trading-third-party/User Registration/userReg.mdx",
    "type": "trading-third-party",
    "category": "trading-third-party"
  },
  {
    "id": "trading-third-party",
    "title": "Untitled",
    "description": "",
    "content": "",
    "keywords": ["untitled", "trading", "third", "party", "mdx"],
    "url": "/docs/trading-third-party",
    "path": "trading-third-party.mdx",
    "type": "trading-third-party",
    "category": "root"
  },
  {
    "id": "typescript-support",
    "title": "TypeScript Support",
    "description": "Docusaurus is written in TypeScript and provides first-class TypeScript support.",
    "content": "TypeScript Support Docusaurus is written in TypeScript and provides first-class TypeScript support. The minimum required version is TypeScript 5.1. Initialization {#initialization} Docusaurus supports writing and using TypeScript theme components. If the init template provides a TypeScript variant, you can directly initialize a site with full TypeScript support by using the --typescript flag. `bash npx create-docusaurus@latest my-website classic --typescript ` Below are some guides on how to migrate an existing project to TypeScript. Setup {#setup} Add the following packages to your project: `bash npm2yarn npm install --save-dev typescript @docusaurus/module-type-aliases @docusaurus/tsconfig @docusaurus/types ` Then add tsconfig.json to your project root with the following content: `json title=\"tsconfig.json\" { \"extends\": \"@docusaurus/tsconfig\", \"compilerOptions\": { \"baseUrl\": \".\" } } ` Docusaurus doesn't use this tsconfig.json to compile your project. It is added just for a nicer Editor experience, although you can choose to run tsc to type check your code for yourself or on CI. Now you can start writing TypeScript theme components. Typing the config file {#typing-config} It is possible to use a TypeScript config file in Docusaurus. `ts title=\"docusaurus.config.ts\" import type {Config} from '@docusaurus/types'; import type * as Preset from '@docusaurus/preset-classic'; // highlight-next-line const config: Config = { title: 'My Site', favicon: 'img/favicon.ico', / Your site config here / presets: [ [ 'classic', { / Your preset config here / // highlight-next-line } satisfies Preset.Options, ], ], themeConfig: { / Your theme config here / // highlight-next-line } satisfies Preset.ThemeConfig, }; export default config; ` <details> <summary>It is also possible to use JSDoc type annotations within a .js file:</summary> By default, the Docusaurus TypeScript config does not type-check JavaScript files. The // @ts-check comment ensures the config file is properly type-checked when running npx tsc. `js title=\"docusaurus.config.js\" // highlight-next-line // @ts-check // highlight-next-line / @type {import('@docusaurus/types').Config} */ const config = { tagline: 'Dinosaurs are cool', favicon: 'img/favicon.ico', / Your site config here / presets: [ [ '@docusaurus/preset-classic', // highlight-next-line / @type {import('@docusaurus/preset-classic').Options} */ ( { / Your preset config here / } ), ], ], themeConfig: // highlight-next-line / @type {import('@docusaurus/preset-classic').ThemeConfig} */ ( { / Your theme config here / } ), }; export default config; ` </details> :::tip Type annotations are very useful and help your IDE understand the type of config objects! The best IDEs (VS Code, WebStorm, IntelliJ...) will provide a nice auto-completion experience. ::: Swizzling TypeScript theme components {#swizzling-typescript-theme-components} For themes that support TypeScript theme components, you can add the --typescript flag to the end of the swizzle command to get TypeScript source code. For example, the following command will generate index.tsx and styles.module.css into src/theme/Footer. `bash npm2yarn npm run swizzle @docusaurus/theme-classic Footer -- --typescript ` All official Docusaurus themes support TypeScript theme components, including theme-classic, theme-live-codeblock, and theme-search-algolia. If you are a Docusaurus theme package author who wants to add TypeScript support, see the Lifecycle APIs docs.",
    "keywords": [
      "typescript",
      "support",
      "docusaurus",
      "is",
      "written",
      "in",
      "and",
      "provides",
      "first-class",
      "support.",
      "mdx",
      "module-type-aliases",
      "tsconfig",
      "types",
      "preset-classic",
      "favicon",
      "summary",
      "details",
      "theme",
      "Footer",
      "theme-classic",
      "TypeScript",
      "Support",
      "Docusaurus",
      "first",
      "class",
      "The",
      "minimum",
      "required",
      "version",
      "Initialization",
      "initialization",
      "supports",
      "writing",
      "using",
      "components",
      "the",
      "init",
      "template",
      "variant",
      "you",
      "can",
      "directly",
      "initialize",
      "site",
      "with",
      "full",
      "flag",
      "bash",
      "npx",
      "create",
      "latest",
      "website",
      "classic",
      "Below",
      "are",
      "some",
      "guides",
      "how",
      "migrate",
      "existing",
      "project",
      "Setup",
      "setup",
      "Add",
      "following",
      "packages",
      "your",
      "npm2yarn",
      "npm",
      "install",
      "save",
      "dev",
      "module",
      "type",
      "aliases",
      "Then",
      "add",
      "json",
      "root",
      "content",
      "title",
      "extends",
      "compilerOptions",
      "baseUrl",
      "doesn",
      "use",
      "this",
      "compile",
      "added",
      "just",
      "for",
      "nicer",
      "Editor",
      "experience",
      "although",
      "choose",
      "run",
      "tsc",
      "check",
      "code",
      "yourself",
      "Now",
      "start",
      "Typing",
      "config",
      "file",
      "typing",
      "possible",
      "import",
      "Config",
      "from",
      "Preset",
      "preset",
      "highlight",
      "next",
      "line",
      "const",
      "Site",
      "img",
      "ico",
      "Your",
      "here",
      "presets",
      "satisfies",
      "Options",
      "themeConfig",
      "ThemeConfig",
      "export",
      "default",
      "also",
      "JSDoc",
      "annotations",
      "within",
      "does",
      "not",
      "JavaScript",
      "files",
      "comment",
      "ensures",
      "properly",
      "checked",
      "when",
      "running",
      "tagline",
      "Dinosaurs",
      "cool",
      "tip",
      "Type",
      "very",
      "useful",
      "help",
      "IDE",
      "understand",
      "objects",
      "best",
      "IDEs",
      "Code",
      "WebStorm",
      "IntelliJ",
      "will",
      "provide",
      "nice",
      "auto",
      "completion",
      "Swizzling",
      "swizzling",
      "For",
      "themes",
      "that",
      "end",
      "swizzle",
      "command",
      "get",
      "source",
      "example",
      "generate",
      "index",
      "tsx",
      "styles",
      "css",
      "into",
      "src",
      "All",
      "official",
      "including",
      "live",
      "codeblock",
      "search",
      "algolia",
      "package",
      "author",
      "who",
      "wants",
      "see",
      "Lifecycle",
      "APIs",
      "docs"
    ],
    "url": "/docs/typescript-support",
    "path": "typescript-support.mdx",
    "type": "general",
    "category": "root"
  },
  {
    "id": "RestAPI",
    "title": "REST API",
    "description": "",
    "content": "production environment: https://api.xt.com",
    "keywords": [
      "rest",
      "api",
      "user",
      "center",
      "accessdescription",
      "restapi",
      "mdx",
      "production",
      "environment",
      "https",
      "com"
    ],
    "url": "/docs/user-center/Access Description/BasicInformationOfTheInterface",
    "path": "user-center/Access Description/BasicInformationOfTheInterface.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "createsubaccount",
    "title": "create a sub-account",
    "description": "/v4/user/account",
    "content": "接口 POST /v4/user/account 请求参数 | Name | Type | Mandatory | Default | Description | | ------------- | ------ | --------- | ------- | ---------------- | | accountName | string | Yes | | sub-account name | 响应示例 `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [{}], \"result\": true //true: success; false/null: unsuccess } `",
    "keywords": [
      "create",
      "sub-account",
      "/v4/user/account",
      "user",
      "center",
      "account",
      "createsubaccount",
      "mdx",
      "v4",
      "true",
      "null",
      "post",
      "POST",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "accountName",
      "string",
      "Yes",
      "sub",
      "name",
      "json",
      "SUCCESS",
      "result",
      "success",
      "false",
      "unsuccess"
    ],
    "url": "/docs/user-center/Account/createSubAccount",
    "path": "user-center/Account/createSubAccount.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "queryaccountlist",
    "title": "Query account list（applicable to  master and sub account）",
    "description": "/v4/user/account",
    "content": "接口 GET /v4/user/account 请求参数 | Name | Type | Mandatory | Default | Description | | ------------- | ------- | --------- | ------- | ------------- | | accountId | string | No | | account id | | accountName | string | No | | account name | | level | integer | No | | account level | 响应示例 `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [{}], \"result\": [ { \"id\": \"1352123154436\", //account id \"accountName\": \"master1\", //account name \"userId\": 1352123154435, //user id \"level\": 1, //account level: 1-master account; 2-sub account \"createTime\": \"2022-04-19 02:02:42\", //account creation time \"updateTime\": \"2022-04-19 02:02:42\" //account update time }, { \"id\": \"1626456841938669570\", //account id \"accountName\": \"first1\", //account name \"userId\": 1352123154436, //user id \"level\": 2, //account level: 1-master account; 2-sub account \"createTime\": \"2023-02-17 05:41:43\", //account creation time \"updateTime\": \"2023-02-17 05:41:43\" //account update time } ] } `",
    "keywords": [
      "query",
      "account",
      "list（applicable",
      "to",
      "master",
      "and",
      "sub",
      "account）",
      "/v4/user/account",
      "user",
      "center",
      "queryaccountlist",
      "mdx",
      "v4",
      "get",
      "GET",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "accountId",
      "string",
      "accountName",
      "name",
      "level",
      "integer",
      "json",
      "SUCCESS",
      "result",
      "master1",
      "userId",
      "createTime",
      "creation",
      "time",
      "updateTime",
      "update",
      "first1"
    ],
    "url": "/docs/user-center/Account/queryAccountList",
    "path": "user-center/Account/queryAccountList.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "useryaccountvipinfo",
    "title": "query account vip fee info",
    "description": "/v4/user/account/vip-info",
    "content": "接口 GET /v4/user/account/vip-info",
    "keywords": [
      "query",
      "account",
      "vip",
      "fee",
      "info",
      "/v4/user/account/vip-info",
      "user",
      "center",
      "queryaccountvipinfo",
      "mdx",
      "v4",
      "vip-info",
      "get",
      "GET"
    ],
    "url": "/docs/user-center/Account/queryAccountVipInfo",
    "path": "user-center/Account/queryAccountVipInfo.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "Create_user_account_apiKey",
    "title": "Create user account apiKey",
    "description": "/v4/user/account/api-key",
    "content": "接口 POST /v4/user/account/api-key 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | userAccountId | string | Yes | | account id | | keyName | string | Yes | | apiKey name | | bindIps | string | No | | bind ip list, multiple can be separated by commas | | roleScopes | string | Yes | | permissions code | | tags | string | No | | tags | 响应示例 `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [{}], \"result\": { \"id\": 4564, //apiKey id \"userAccountId\": \"1626456841938669570\", //account id \"userAccountLevel\": 2, //account level: 1-master account; 2-sub account \"userId\": 1352123154435, //user id \"keyName\": \"123aaa\", //apiKey name \"bindIps\": null, //bind ip list \"accessKey\": \"99258227-f053-46a2-9b10-66c155eb705c\", //encryption key \"secretKey\": \"4b1839e11bf7a1c6de5f078bd9f4b6e0850da3cf\", //encryption string \"isLock\": 0, //isLock: 0-apiKey is not locked；1-apiKey is locked \"roleScopes\": \"QUERY_TRADE\", //permissions code: QUERY_TRADE: trade is enabled; QUERY_NO_TRADE: trade is not enabled \"tags\": null, //tags \"createTime\": \"2023-02-20 07:39:56.768\", //apiKey create time \"updateTime\": \"2023-02-20 07:39:56.768\" //apiKey update time } } `",
    "keywords": [
      "create",
      "user",
      "account",
      "apikey",
      "/v4/user/account/api-key",
      "center",
      "createaccountapikey",
      "mdx",
      "v4",
      "api-key",
      "apiKey",
      "bind",
      "encryption",
      "isLock",
      "permissions",
      "tags",
      "post",
      "POST",
      "api",
      "key",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "userAccountId",
      "string",
      "Yes",
      "keyName",
      "name",
      "bindIps",
      "list",
      "multiple",
      "can",
      "separated",
      "commas",
      "roleScopes",
      "code",
      "json",
      "SUCCESS",
      "result",
      "userAccountLevel",
      "level",
      "master",
      "sub",
      "userId",
      "null",
      "accessKey",
      "f053",
      "secretKey",
      "not",
      "locked",
      "QUERY_TRADE",
      "trade",
      "enabled",
      "QUERY_NO_TRADE",
      "createTime",
      "time",
      "updateTime",
      "update"
    ],
    "url": "/docs/user-center/ApiKey/createAccountApiKey",
    "path": "user-center/ApiKey/createAccountApiKey.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "Delete_user_account_apiKey",
    "title": "Delete user account apiKey",
    "description": "/v4/user/account/api-key/{apikeyId}",
    "content": "接口 DELETE /v4/user/account/api-key/{apikeyId} 请求参数 | Name | Type | Mandatory | Default | Description | | ---------- | ------ | --------- | ------- | ----------- | | apikeyId | string | Yes | | apiKey id | 响应示例 `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [{}], \"result\": true //true: success; false/null: unsuccess } `",
    "keywords": [
      "delete",
      "user",
      "account",
      "apikey",
      "/v4/user/account/api-key/{apikeyid}",
      "center",
      "deleteaccountapikey",
      "mdx",
      "v4",
      "api-key",
      "true",
      "null",
      "DELETE",
      "api",
      "key",
      "apikeyId",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "string",
      "Yes",
      "apiKey",
      "json",
      "SUCCESS",
      "result",
      "success",
      "false",
      "unsuccess"
    ],
    "url": "/docs/user-center/ApiKey/deleteAccountApiKey",
    "path": "user-center/ApiKey/deleteAccountApiKey.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "Modify_user_account_apiKey",
    "title": "Modify user account apiKey",
    "description": "/v4/user/account/api-key",
    "content": "接口 PUT /v4/user/account/api-key 请求参数 | Name | Type | Mandatory | Default | Description | | --- | --- | --- | --- | --- | | id | string | Yes | | apiKey id | | accessKey | string | Yes | | access key | | keyName | string | No | | apiKey name | | bindIps | string | No | | bind ip list, multiple can be separated by commas | | roleScopes | string | Yes | | permissions code | | tags | string | No | | tags | 响应示例 `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [{}], \"result\": { \"id\": 4564, //apiKey id \"userAccountId\": \"1626456841938669570\", //account id \"userAccountLevel\": 2, //account level: 1-master account; 2-sub account \"userId\": 1352123154435, //user id \"keyName\": \"123aaa\", //apiKey name \"bindIps\": null, //bind ip list \"accessKey\": \"99258227-f053-46a2-9b10-66c155eb705c\", //encryption key \"secretKey\": \"4b1839e11bf7a1c6de5f078bd9f4b6e0850da3cf\", //encryption string \"isLock\": 0, //isLock: 0-apiKey is not locked；1-apiKey is locked \"roleScopes\": \"QUERY_TRADE\", //permissions code: QUERY_TRADE: trade is enabled; QUERY_NO_TRADE: trade is not enabled \"tags\": null, //tags \"createTime\": \"2023-02-20 07:39:56.768\", //apiKey create time \"updateTime\": \"2023-02-20 07:39:56.768\" //apiKey update time } } `",
    "keywords": [
      "modify",
      "user",
      "account",
      "apikey",
      "/v4/user/account/api-key",
      "center",
      "modifyaccountapikey",
      "mdx",
      "v4",
      "api-key",
      "apiKey",
      "bind",
      "encryption",
      "isLock",
      "permissions",
      "tags",
      "put",
      "PUT",
      "api",
      "key",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "string",
      "Yes",
      "accessKey",
      "access",
      "keyName",
      "name",
      "bindIps",
      "list",
      "multiple",
      "can",
      "separated",
      "commas",
      "roleScopes",
      "code",
      "json",
      "SUCCESS",
      "result",
      "userAccountId",
      "userAccountLevel",
      "level",
      "master",
      "sub",
      "userId",
      "null",
      "f053",
      "secretKey",
      "not",
      "locked",
      "QUERY_TRADE",
      "trade",
      "enabled",
      "QUERY_NO_TRADE",
      "createTime",
      "create",
      "time",
      "updateTime",
      "update"
    ],
    "url": "/docs/user-center/ApiKey/modifyAccountApiKey",
    "path": "user-center/ApiKey/modifyAccountApiKey.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "Query_user's_apiKey",
    "title": "Query user's apiKey (applicable to  master and sub account)",
    "description": "",
    "content": "接口 GET /v4/user/account/api-key 请求参数 | Name | Type | Mandatory | Default | Description | | --------------- | ------- | --------- | ------- | ----------------------- | | userAccountId | string | No | | account id | | keyName | string | No | | apiKey name | | isLock | integer | No | | apiKey is locked or not | 响应示例 `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [{}], \"result\": [ { \"id\": 1, \"userAccountId\": \"1352123154435\", //account id \"userAccountLevel\": 1, //account level: 1-master account; 2-sub account \"userId\": 1352123154435, //user id \"keyName\": \"abc\", //apiKey name \"bindIps\": \"\", //bind ip list \"accessKey\": \"b5e58714-2382-4e2f-8762-81b5ec9d363a\", //encryption key \"secretKey\": \"17aef63c0cba308089fae03e2b13a4794bd2d411\", //encryption string \"isLock\": 0, //isLock: 0-apiKey is not locked；1-apiKey is locked \"roleScopes\": \"QUERY_TRADE\", //permissions code: QUERY_TRADE: trade is enabled; QUERY_NO_TRADE: trade is not enabled \"tags\": null, //tags \"createTime\": \"2023-02-17 05:41:43\", //apiKey create time \"updateTime\": \"2023-02-17 05:41:43\" //apiKey update time }, { \"id\": 2, \"userAccountId\": \"13523123154435\", //account id \"userAccountLevel\": 1, //account level: 1-master account; 2-sub account \"userId\": 1352123154435, //user id \"keyName\": \"bcd\", //apiKey name \"bindIps\": \"\", //bind ip list \"accessKey\": \"b5e58714-2382-4e2f-8762-81b5ec9d363a\", //encryption key \"secretKey\": \"17aef63c0cba308089fae03e2b13a4794bd2d411\", //encryption string \"isLock\": 0, //isLock: 0-apiKey is not locked；1-apiKey is locked \"roleScopes\": \"QUERY_TRADE\", //permissions code: QUERY_TRADE: trade is enabled; QUERY_NO_TRADE: trade is not enabled \"tags\": null, //tags \"createTime\": \"2023-02-17 05:41:43\", //apiKey create time \"updateTime\": \"2023-02-17 05:41:43\" //apiKey update time } ] } `",
    "keywords": [
      "query",
      "user's",
      "apikey",
      "(applicable",
      "to",
      "master",
      "and",
      "sub",
      "account)",
      "user",
      "center",
      "queryuserapikey",
      "mdx",
      "v4",
      "account",
      "api-key",
      "apiKey",
      "bind",
      "encryption",
      "isLock",
      "permissions",
      "tags",
      "get",
      "GET",
      "api",
      "key",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "userAccountId",
      "string",
      "keyName",
      "name",
      "integer",
      "locked",
      "not",
      "json",
      "SUCCESS",
      "result",
      "userAccountLevel",
      "level",
      "userId",
      "abc",
      "bindIps",
      "list",
      "accessKey",
      "b5e58714",
      "secretKey",
      "roleScopes",
      "QUERY_TRADE",
      "code",
      "trade",
      "enabled",
      "QUERY_NO_TRADE",
      "null",
      "createTime",
      "create",
      "time",
      "updateTime",
      "update",
      "bcd"
    ],
    "url": "/docs/user-center/ApiKey/queryUserApiKey",
    "path": "user-center/ApiKey/queryUserApiKey.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "Get_All_Users_of_Affiliate",
    "title": "Get All Users of Affiliate",
    "description": "/v4/referal/invite/users",
    "content": "接口 GET /v4/referal/invite/users 请求参数 | Name | Type | Mandatory | Default | Description | | ----------- | ------ | --------- | ------- | --------------------- | | startTime | number | No | | start time | | endTime | number | No | | end time | | fromId | number | No | | Starting ID | | direction | string | No | NEXT | query direction | | limit | int | No | 10 | Limit number, max 100 | 响应示例 `json { \"ma\": [], \"mc\": \"SUCCESS\", \"rc\": 0, \"result\": { \"hasNext\": true, \"hasPrev\": true, \"items\": [ { \"id\": 123, \"regTime\": 1721962593000, //Registration time \"role\": \"PARTNER\", //User roles: CHANNEL/PARTNER/DIRECTOR \"userId\": 123456789 //User ID } ] } } `",
    "keywords": [
      "get",
      "all",
      "users",
      "of",
      "affiliate",
      "/v4/referal/invite/users",
      "user",
      "center",
      "referral commission",
      "getallusersofaffiliate",
      "mdx",
      "v4",
      "referal",
      "invite",
      "Registration",
      "User",
      "PARTNER",
      "DIRECTOR",
      "GET",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "startTime",
      "number",
      "start",
      "time",
      "endTime",
      "end",
      "fromId",
      "Starting",
      "direction",
      "string",
      "NEXT",
      "query",
      "limit",
      "int",
      "Limit",
      "max",
      "json",
      "SUCCESS",
      "result",
      "hasNext",
      "true",
      "hasPrev",
      "items",
      "regTime",
      "role",
      "roles",
      "CHANNEL",
      "userId"
    ],
    "url": "/docs/user-center/Referral Commission/getAllUsersOfAffiliate",
    "path": "user-center/Referral Commission/getAllUsersOfAffiliate.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "Batch_query_user_information",
    "title": "Batch query user information",
    "description": "/v4/referal/invite/multi/user/info",
    "content": "接口 GET /v4/referal/invite/multi/user/info 请求参数 | Name | Type | Mandatory | Default | Description | | ----------- | ------ | --------- | ------- | --------------------- | | uidList | array | Yes | | User ID list | | fromId | number | No | | Starting ID | | direction | string | No | NEXT | query direction | | limit | int | No | 10 | Limit number, max 100 | 响应示例 `json { \"ma\": [], \"mc\": \"SUCCESS\", \"rc\": 0, \"result\": { \"totalCount\": 1, \"pageCount\": 20, \"items\": [ { \"uid\": 123456789, //User ID \"registerTime\": 1737095389000, //Registration Time \"countryCode\": \"86\", //Country code \"mobile\": \"1234567\", //Phone number, desensitization \"email\": \"639*3@gmail.com\", //Email address, desensitization \"riskControlStatus\": 0, //Risk Control Status (0 - No Risk Control, 1 - Risk Controlled) \"kycStatus\": 2, //KYC Status (0 - Not Verified, 1 - Basic Verification, 2 - Advanced Verification, 3 - Corporate Verification) \"registerInviteCode\": 23456 //Registration Invitation Code } ] } } `",
    "keywords": [
      "batch",
      "query",
      "user",
      "information",
      "/v4/referal/invite/multi/user/info",
      "center",
      "referral commission",
      "getbatchuserinfo",
      "mdx",
      "v4",
      "referal",
      "invite",
      "multi",
      "info",
      "User",
      "Registration",
      "Country",
      "Phone",
      "Email",
      "Risk",
      "KYC",
      "get",
      "GET",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "uidList",
      "array",
      "Yes",
      "list",
      "fromId",
      "number",
      "Starting",
      "direction",
      "string",
      "NEXT",
      "limit",
      "int",
      "Limit",
      "max",
      "json",
      "SUCCESS",
      "result",
      "totalCount",
      "pageCount",
      "items",
      "uid",
      "registerTime",
      "Time",
      "countryCode",
      "code",
      "mobile",
      "desensitization",
      "email",
      "gmail",
      "com",
      "address",
      "riskControlStatus",
      "Control",
      "Status",
      "Controlled",
      "kycStatus",
      "Not",
      "Verified",
      "Basic",
      "Verification",
      "Advanced",
      "Corporate",
      "registerInviteCode",
      "Invitation",
      "Code"
    ],
    "url": "/docs/user-center/Referral Commission/getBatchUserInfo",
    "path": "user-center/Referral Commission/getBatchUserInfo.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "Query_agent_commission_data",
    "title": "Query agent commission data",
    "description": "/v4/referal/invite/agent/rebate/data",
    "content": "接口 GET /v4/referal/invite/agent/rebate/data Remark Only supports querying data for the past three months 请求参数 | Name | Type | Mandatory | Default | Description | | ------------ | ------ | --------- | ------- | ----------------------------- | | startTime | number | No | | Commission deposit start time | | endTime | number | No | | Commission deposit end time | | inviteCode | string | No | | Registration invitation code | | type | number | Yes | | Commission type | | fromId | number | No | | Starting ID | | direction | string | No | NEXT | query direction | | limit | int | No | 10 | Limit number, max 100 | 响应示例 `json { \"ma\": [], \"mc\": \"SUCCESS\", \"rc\": 0, \"result\": { \"totalCount\": 1, \"pageCount\": 20, \"items\": [ { \"id\": 1, //ID \"uid\": 123, //User ID \"spotRebateRate\": 0.1, //Spot commission ratio \"futuresRebateRate\": 0.2, //Future commission ratio \"amountCurrency\": 666, //Currency amount \"commission\": 23, //Commission amount \"currency\": \"usdt\" //Commission currency \"date\": \"2025-01-22T09:57:01.601Z\", //Transaction date \"makerAmount\": 32, //Maker amount \"rate\": 2, //Commission rate \"sourceType\": 1, //Commission source type. 1 - Direct customer, 2 - Sub-agent \"state\": 1, //Commission state 0 - Normal, 1 - Abnormal \"symbol\": \"btc_usdt\", //Symbol \"takerAmount\": 23, //Taker amount \"totalCommissionUsdtAmount\": 123, //Total commission \"totalTradeUsdtAmount\": 2222, //Total trading volume \"type\": 1, //Commission type. 1-spot 2-future \"usdtAmount\": 243253 //USDT amount } ] } } `",
    "keywords": [
      "query",
      "agent",
      "commission",
      "data",
      "/v4/referal/invite/agent/rebate/data",
      "user",
      "center",
      "referral commission",
      "getcommissioninfo",
      "mdx",
      "v4",
      "referal",
      "invite",
      "rebate",
      "ID",
      "User",
      "Spot",
      "Future",
      "Currency",
      "Commission",
      "Transaction",
      "Maker",
      "Symbol",
      "Taker",
      "Total",
      "USDT",
      "get",
      "GET",
      "Remark",
      "Only",
      "supports",
      "querying",
      "for",
      "the",
      "past",
      "three",
      "months",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "startTime",
      "number",
      "deposit",
      "start",
      "time",
      "endTime",
      "end",
      "inviteCode",
      "string",
      "Registration",
      "invitation",
      "code",
      "type",
      "Yes",
      "fromId",
      "Starting",
      "direction",
      "NEXT",
      "limit",
      "int",
      "Limit",
      "max",
      "json",
      "SUCCESS",
      "result",
      "totalCount",
      "pageCount",
      "items",
      "uid",
      "spotRebateRate",
      "ratio",
      "futuresRebateRate",
      "amountCurrency",
      "amount",
      "currency",
      "usdt",
      "date",
      "makerAmount",
      "rate",
      "sourceType",
      "source",
      "Direct",
      "customer",
      "Sub",
      "state",
      "Normal",
      "Abnormal",
      "symbol",
      "btc_usdt",
      "takerAmount",
      "totalTradeUsdtAmount",
      "trading",
      "volume",
      "spot",
      "future",
      "usdtAmount"
    ],
    "url": "/docs/user-center/Referral Commission/getCommissionInfo",
    "path": "user-center/Referral Commission/getCommissionInfo.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "Get_Deposit_and_Trading_Data_of_Users",
    "title": "Get Deposit & Trading Data of Users",
    "description": "/v4/referal/invite/user/data",
    "content": "接口 GET /v4/referal/invite/user/data 请求参数 | Name | Type | Mandatory | Default | Description | | ----------- | ------ | --------- | ------- | --------------- | | startTime | number | No | | start time | | endTime | number | No | | end time | | uid | number | Yes | | Queried user ID | 响应示例 `json { \"ma\": [], \"mc\": \"SUCCESS\", \"rc\": 0, \"result\": { \"userId\": 123456789, //User ID \"role\": \"PARTNER\", //User role \"deposit\": true, //Deposit status \"depositDetails\": [ { \"amount\": 100, //Deposit amount \"amountU\": 100, //Deposit amount (converted to USDT) \"currency\": \"USDT\", //Deposit currency \"timestamp\": 1721962593000 //Deposit time } ], \"trade\": true, //Trade status \"tradeAmount\": 1000.1234 //Trading volume (converted to USDT) } } `",
    "keywords": [
      "get",
      "deposit",
      "trading",
      "data",
      "of",
      "users",
      "/v4/referal/invite/user/data",
      "user",
      "center",
      "referral commission",
      "getdeposittradingdataofusers",
      "mdx",
      "v4",
      "referal",
      "invite",
      "User",
      "Deposit",
      "Trade",
      "Trading",
      "GET",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "startTime",
      "number",
      "start",
      "time",
      "endTime",
      "end",
      "uid",
      "Yes",
      "Queried",
      "json",
      "SUCCESS",
      "result",
      "userId",
      "role",
      "PARTNER",
      "true",
      "status",
      "depositDetails",
      "amount",
      "amountU",
      "converted",
      "USDT",
      "currency",
      "timestamp",
      "trade",
      "tradeAmount",
      "volume"
    ],
    "url": "/docs/user-center/Referral Commission/getDepositTradingDataOfUsers",
    "path": "user-center/Referral Commission/getDepositTradingDataOfUsers.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "Check_If_The_User_Is_Invited",
    "title": "Check If The User Is Invited",
    "description": "/v4/referal/invite/check",
    "content": "接口 GET /v4/referal/invite/check 请求参数 | Name | Type | Mandatory | Default | Description | | ----- | ------ | --------- | ------- | ----------- | | uid | number | Yes | | user ID | 响应示例 `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [], \"result\": false //is invited } `",
    "keywords": [
      "check",
      "if",
      "the",
      "user",
      "is",
      "invited",
      "/v4/referal/invite/check",
      "center",
      "referral commission",
      "getinvitecheck",
      "mdx",
      "v4",
      "referal",
      "invite",
      "get",
      "GET",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "uid",
      "number",
      "Yes",
      "json",
      "SUCCESS",
      "result",
      "false"
    ],
    "url": "/docs/user-center/Referral Commission/getInviteCheck",
    "path": "user-center/Referral Commission/getInviteCheck.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "Query_User_Commissions",
    "title": "Query User Commissions",
    "description": "/v4/referal/invite/commissions",
    "content": "接口 GET /v4/referal/invite/commissions 请求参数 | Name | Type | Mandatory | Default | Description | | ----- | ------ | --------- | ------- | ----------- | | uid | number | Yes | | user ID | 响应示例 `json { \"rc\": 0, \"mc\": \"SUCCESS\", \"ma\": [], \"result\": [ { \"exchangeUid\": 6224154788385, // User's exchange UID \"commissionDate\": \"2025-04-18\", // Commission date \"commission\": 0.318247047, // Commission amount \"commissionCurrency\": \"USDT\", // Commission currency, default is USDT \"commissionType\": \"trade\", // Commission type \"commissionRate\": 0.9, // Commission rate \"tradingPair\": \"ETH_USDT\", // Trading pair \"tradeType\": \"futures\", // Trade type \"tradeVolume\": 982.2441, // Trade volume \"fee\": 0.35360783, // Fee \"createdAt\": \"2025-04-18 00:00:00\", // creation time \"commissionTimestamp\": 1744934400000 // Commission timestamp } ] } `",
    "keywords": [
      "query",
      "user",
      "commissions",
      "/v4/referal/invite/commissions",
      "center",
      "referral commission",
      "getinvitecommissions",
      "mdx",
      "v4",
      "referal",
      "invite",
      "get",
      "GET",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "uid",
      "number",
      "Yes",
      "json",
      "SUCCESS",
      "result",
      "exchangeUid",
      "User",
      "exchange",
      "UID",
      "commissionDate",
      "Commission",
      "date",
      "commission",
      "amount",
      "commissionCurrency",
      "USDT",
      "currency",
      "default",
      "commissionType",
      "trade",
      "type",
      "commissionRate",
      "rate",
      "tradingPair",
      "ETH_USDT",
      "Trading",
      "pair",
      "tradeType",
      "futures",
      "Trade",
      "tradeVolume",
      "volume",
      "fee",
      "Fee",
      "createdAt",
      "creation",
      "time",
      "commissionTimestamp",
      "timestamp"
    ],
    "url": "/docs/user-center/Referral Commission/getInviteCommissions",
    "path": "user-center/Referral Commission/getInviteCommissions.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "Query_user_balance",
    "title": "Query user balance",
    "description": "/v4/referal/invite/user/balance",
    "content": "接口 GET /v4/referal/invite/user/balance 请求参数 | Name | Type | Mandatory | Default | Description | | ----- | ------ | --------- | ------- | ----------- | | uid | number | Yes | | User ID | 响应示例 `json { \"ma\": [], \"mc\": \"SUCCESS\", \"rc\": 0, \"result\": { \"userId\": 123456789, //User ID \"role\": \"PARTNER\", //User role \"balance\": 123456 //balance amount } } `",
    "keywords": [
      "query",
      "user",
      "balance",
      "/v4/referal/invite/user/balance",
      "center",
      "referral commission",
      "getuserbalance",
      "mdx",
      "v4",
      "referal",
      "invite",
      "User",
      "get",
      "GET",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "uid",
      "number",
      "Yes",
      "json",
      "SUCCESS",
      "result",
      "userId",
      "role",
      "PARTNER",
      "amount"
    ],
    "url": "/docs/user-center/Referral Commission/getUserBalance",
    "path": "user-center/Referral Commission/getUserBalance.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "Query_user_information",
    "title": "Query user information",
    "description": "/v4/referal/invite/single/user/info",
    "content": "接口 GET /v4/referal/invite/single/user/info 请求参数 | Name | Type | Mandatory | Default | Description | | ----- | ------ | --------- | ------- | ----------- | | uid | number | Yes | | User ID | 响应示例 `json { \"ma\": [], \"mc\": \"SUCCESS\", \"rc\": 0, \"result\": { \"uid\": 123456789, //User ID \"registerTime\": 1737095389000, //Registration Time \"countryCode\": \"86\", //Country code \"mobile\": \"1234567\", //Phone number, desensitization \"email\": \"639*3@gmail.com\", //Email address, desensitization \"riskControlStatus\": 0, //Risk Control Status (0 - No Risk Control, 1 - Risk Controlled) \"kycStatus\": 2, //KYC Status (0 - Not Verified, 1 - Basic Verification, 2 - Advanced Verification, 3 - Corporate Verification) \"registerInviteCode\": 23456 //Registration Invitation Code } } `",
    "keywords": [
      "query",
      "user",
      "information",
      "/v4/referal/invite/single/user/info",
      "center",
      "referral commission",
      "getuserinfo",
      "mdx",
      "v4",
      "referal",
      "invite",
      "single",
      "info",
      "User",
      "Registration",
      "Country",
      "Phone",
      "Email",
      "Risk",
      "KYC",
      "get",
      "GET",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "uid",
      "number",
      "Yes",
      "json",
      "SUCCESS",
      "result",
      "registerTime",
      "Time",
      "countryCode",
      "code",
      "mobile",
      "desensitization",
      "email",
      "gmail",
      "com",
      "address",
      "riskControlStatus",
      "Control",
      "Status",
      "Controlled",
      "kycStatus",
      "Not",
      "Verified",
      "Basic",
      "Verification",
      "Advanced",
      "Corporate",
      "registerInviteCode",
      "Invitation",
      "Code"
    ],
    "url": "/docs/user-center/Referral Commission/getUserInfo",
    "path": "user-center/Referral Commission/getUserInfo.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "Query_user_KYC_status",
    "title": "Query user KYC status",
    "description": "/v4/referal/invite/kyc/status",
    "content": "接口 GET /v4/referal/invite/kyc/status 请求参数 | Name | Type | Mandatory | Default | Description | | ----- | ------ | --------- | ------- | ----------- | | uid | number | Yes | | User ID | 响应示例 `json { \"ma\": [], \"mc\": \"SUCCESS\", \"rc\": 0, \"result\": { \"userid\": 123456789, //User ID \"status\": 2 //KYC Status (0 - Not Verified, 1 - Basic Verification, 2 - Advanced Verification, 3 - Corporate Verification) } } `",
    "keywords": [
      "query",
      "user",
      "kyc",
      "status",
      "/v4/referal/invite/kyc/status",
      "center",
      "referral commission",
      "getuserkycstate",
      "mdx",
      "v4",
      "referal",
      "invite",
      "User",
      "KYC",
      "get",
      "GET",
      "Name",
      "Type",
      "Mandatory",
      "Default",
      "Description",
      "uid",
      "number",
      "Yes",
      "json",
      "SUCCESS",
      "result",
      "userid",
      "Status",
      "Not",
      "Verified",
      "Basic",
      "Verification",
      "Advanced",
      "Corporate"
    ],
    "url": "/docs/user-center/Referral Commission/getUserKycState",
    "path": "user-center/Referral Commission/getUserKycState.mdx",
    "type": "user-center",
    "category": "user-center"
  },
  {
    "id": "user-center",
    "title": "用户中心 API",
    "description": "XT 用户中心 API 文档",
    "content": "用户中心 API 欢迎使用 XT 用户中心 API！本 API 提供了完整的用户账户管理功能，包括用户信息、安全设置、通知管理等。 主要功能 账户管理: 用户信息查询和修改 安全设置: 密码、2FA、API 密钥管理 通知管理: 邮件、短信、推送通知 权限控制: 细粒度的权限管理系统 快速开始 安装和配置 用户认证 账户管理 安全设置 相关链接 现货交易 API 合约交易 API 保证金现货 API 跟单交易 API",
    "keywords": [
      "用户中心",
      "api",
      "xt",
      "文档",
      "user",
      "center",
      "mdx",
      "API"
    ],
    "url": "/docs/user-center",
    "path": "user-center.mdx",
    "type": "user-center",
    "category": "root"
  },
  {
    "id": "using-plugins",
    "title": "Using Plugins",
    "description": "",
    "content": "Using Plugins The Docusaurus core doesn't provide any feature of its own. All features are delegated to individual plugins: the docs feature provided by the docs plugin; the blog feature provided by the blog plugin; or individual pages provided by the pages plugin. If there are no plugins installed, the site won't contain any routes. You may not need to install common plugins one-by-one though: they can be distributed as a bundle in a preset. For most users, plugins are configured through the preset configuration. We maintain a list of official plugins, but the community has also created some unofficial plugins. If you want to add any feature: autogenerating doc pages, executing custom scripts, integrating other services... be sure to check out the list: someone may have implemented it for you! If you are feeling energetic, you can also read the plugin guide or plugin method references for how to make a plugin yourself. Installing a plugin {#installing-a-plugin} A plugin is usually an npm package, so you install them like other npm packages using npm. `bash npm2yarn npm install --save docusaurus-plugin-name ` Then you add it in your site's docusaurus.config.js's plugins option: `js title=\"docusaurus.config.js\" export default { // ... // highlight-next-line plugins: ['@docusaurus/plugin-content-pages'], }; ` Docusaurus can also load plugins from your local directory, with something like the following: `js title=\"docusaurus.config.js\" export default { // ... // highlight-next-line plugins: ['./src/plugins/docusaurus-local-plugin'], }; ` Paths should be absolute or relative to the config file. Configuring plugins {#configuring-plugins} For the most basic usage of plugins, you can provide just the plugin name or the path to the plugin. However, plugins can have options specified by wrapping the name and an options object in a two-member tuple inside your config. This style is usually called \"Babel Style\". `js title=\"docusaurus.config.js\" export default { // ... plugins: [ // highlight-start [ '@docusaurus/plugin-xxx', { / options / }, ], // highlight-end ], }; ` Example: `js title=\"docusaurus.config.js\" export default { plugins: [ // Basic usage. '@docusaurus/plugin-debug', // With options object (babel style) [ '@docusaurus/plugin-sitemap', { changefreq: 'weekly', }, ], ], }; ` Multi-instance plugins and plugin IDs {#multi-instance-plugins-and-plugin-ids} All Docusaurus content plugins can support multiple plugin instances. For example, it may be useful to have multiple docs plugin instances or multiple blogs. It is required to assign a unique ID to each plugin instance, and by default, the plugin ID is default. `js title=\"docusaurus.config.js\" export default { plugins: [ [ '@docusaurus/plugin-content-docs', { // highlight-next-line id: 'docs-1', // other options }, ], [ '@docusaurus/plugin-content-docs', { // highlight-next-line id: 'docs-2', // other options }, ], ], }; ` :::note At most one plugin instance can be the \"default plugin instance\", by omitting the id attribute, or using id: 'default'. ::: Using themes {#using-themes} Themes are loaded in the exact same way as plugins. From the consumer perspective, the themes and plugins entries are interchangeable when installing and configuring a plugin. The only nuance is that themes are loaded after plugins, and it's possible for a theme to override a plugin's default theme components. :::tip The themes and plugins options lead to different shorthand resolutions, so if you want to take advantage of shorthands, be sure to use the right entry! ::: `js title=\"docusaurus.config.js\" export default { // ... // highlight-next-line themes: ['@docusaurus/theme-classic', '@docusaurus/theme-live-codeblock'], }; ` Using presets {#using-presets} Presets are bundles of plugins and themes. For example, instead of letting you register and configure @docusaurus/plugin-content-docs, @docusaurus/plugin-content-blog, etc. one after the other in the config file, we have @docusaurus/preset-classic preset allows you to configure them in one centralized place. @docusaurus/preset-classic {#docusauruspreset-classic} The classic preset is shipped by default to new Docusaurus websites created with create-docusaurus. It contains the following themes and plugins: @docusaurus/theme-classic @docusaurus/theme-search-algolia @docusaurus/plugin-content-docs @docusaurus/plugin-content-blog @docusaurus/plugin-content-pages @docusaurus/plugin-debug @docusaurus/plugin-google-gtag @docusaurus/plugin-google-tag-manager @docusaurus/plugin-google-analytics (deprecated) @docusaurus/plugin-sitemap @docusaurus/plugin-svgr The classic preset will relay each option entry to the respective plugin/theme. `js title=\"docusaurus.config.js\" export default { presets: [ [ '@docusaurus/preset-classic', { // Debug defaults to true in dev, false in prod debug: undefined, // Will be passed to @docusaurus/theme-classic. theme: { customCss: ['./src/css/custom.css'], }, // Will be passed to @docusaurus/plugin-content-docs (false to disable) docs: {}, // Will be passed to @docusaurus/plugin-content-blog (false to disable) blog: {}, // Will be passed to @docusaurus/plugin-content-pages (false to disable) pages: {}, // Will be passed to @docusaurus/plugin-sitemap (false to disable) sitemap: {}, // Will be passed to @docusaurus/plugin-svgr (false to disable) svgr: {}, // Will be passed to @docusaurus/plugin-google-gtag (only enabled when explicitly specified) gtag: {}, // Will be passed to @docusaurus/plugin-google-tag-manager (only enabled when explicitly specified) googleTagManager: {}, // DEPRECATED: Will be passed to @docusaurus/plugin-google-analytics (only enabled when explicitly specified) googleAnalytics: {}, }, ], ], }; ` Installing presets {#installing-presets} A preset is usually an npm package, so you install them like other npm packages using npm. `bash npm2yarn npm install --save @docusaurus/preset-classic ` Then, add it in your site's docusaurus.config.js's presets option: `js title=\"docusaurus.config.js\" export default { // ... // highlight-next-line presets: ['@docusaurus/preset-classic'], }; ` Preset paths can be relative to the config file: `js title=\"docusaurus.config.js\" export default { // ... // highlight-next-line presets: ['./src/presets/docusaurus-local-preset'], }; ` Creating presets {#creating-presets} A preset is a function with the same shape as the plugin constructor. It should return an object of { plugins: PluginConfig[], themes: PluginConfig[] }, in the same as how they are accepted in the site config. For example, you can specify a preset that includes the following themes and plugins: `js title=\"src/presets/docusaurus-preset-multi-docs.js\" export default function preset(context, opts = {}) { return { themes: [['docusaurus-theme-awesome', opts.theme]], plugins: [ // Using three docs plugins at the same time! // Assigning a unique ID for each without asking the user to do it ['@docusaurus/plugin-content-docs', {...opts.docs1, id: 'docs1'}], ['@docusaurus/plugin-content-docs', {...opts.docs2, id: 'docs2'}], ['@docusaurus/plugin-content-docs', {...opts.docs3, id: 'docs3'}], ], }; } ` Then in your Docusaurus config, you may configure the preset: `js title=\"docusaurus.config.js\" export default { presets: [ // highlight-start [ './src/presets/docusaurus-preset-multi-docs.js', { theme: {hello: 'world'}, docs1: {path: '/docs'}, docs2: {path: '/community'}, docs3: {path: '/api'}, }, ], // highlight-end ], }; ` This is equivalent of doing: `js title=\"docusaurus.config.js\" export default { themes: [['docusaurus-theme-awesome', {hello: 'world'}]], plugins: [ ['@docusaurus/plugin-content-docs', {id: 'docs1', path: '/docs'}], ['@docusaurus/plugin-content-docs', {id: 'docs2', path: '/community'}], ['@docusaurus/plugin-content-docs', {id: 'docs3', path: '/api'}], ], }; ` This is especially useful when some plugins and themes are intended to be used together. You can even link their options together, e.g. pass one option to multiple plugins. Module shorthands {#module-shorthands} Docusaurus supports shorthands for plugins, themes, and presets. When it sees a plugin/theme/preset name, it tries to load one of the following, in that order: [name] (like content-docs) @docusaurus/[moduleType]-[name] (like @docusaurus/plugin-content-docs) docusaurus-[moduleType]-[name] (like docusaurus-plugin-content-docs) where moduleType is one of 'preset', 'theme', 'plugin', depending on which field the module name is declared in. The first module name that's successfully found is loaded. If the name is scoped (beginning with @), the name is first split into scope and package name by the first slash: ` @scope ^----^ scope (no name!) @scope/awesome ^----^ ^-----^ scope name @scope/awesome/main ^----^ ^----------^ scope name ` If there is no name (like @jquery), [scope]/docusaurus-[moduleType] (i.e. @jquery/docusaurus-plugin) is loaded. Otherwise, the following are attempted: [scope]/[name] (like @jquery/content-docs) [scope]/docusaurus-[moduleType]-[name] (like @jquery/docusaurus-plugin-content-docs) Below are some examples, for a plugin registered in the plugins field. Note that unlike ESLint or Babel where a consistent naming convention for plugins is mandated, Docusaurus permits greater naming freedom, so the resolutions are not certain, but follows the priority defined above. | Declaration | May be resolved as | | --- | --- | | awesome | docusaurus-plugin-awesome | | sitemap | @docusaurus/plugin-sitemap | | @my-company | @my-company/docusaurus-plugin (the only possible resolution!) | | @my-company/awesome | @my-company/docusaurus-plugin-awesome | | @my-company/awesome/web | @my-company/docusaurus-plugin-awesome/web |",
    "keywords": [
      "using",
      "plugins",
      "mdx",
      "plugin-content-pages",
      "src",
      "docusaurus-local-plugin",
      "plugin-xxx",
      "plugin-debug",
      "plugin-sitemap",
      "plugin-content-docs",
      "theme-classic",
      "theme-live-codeblock",
      "plugin-content-blog",
      "preset-classic",
      "theme-search-algolia",
      "plugin-google-gtag",
      "plugin-google-tag-manager",
      "plugin-google-analytics",
      "plugin-svgr",
      "theme",
      "css",
      "custom",
      "presets",
      "docusaurus-local-preset",
      "docusaurus-preset-multi-docs",
      "docs",
      "community",
      "api",
      "preset",
      "awesome",
      "main",
      "docusaurus-",
      "docusaurus-plugin",
      "content-docs",
      "docusaurus-plugin-content-docs",
      "docusaurus-plugin-awesome",
      "web",
      "Using",
      "Plugins",
      "The",
      "Docusaurus",
      "core",
      "doesn",
      "provide",
      "any",
      "feature",
      "its",
      "own",
      "All",
      "features",
      "are",
      "delegated",
      "individual",
      "the",
      "provided",
      "plugin",
      "blog",
      "pages",
      "there",
      "installed",
      "site",
      "won",
      "contain",
      "routes",
      "You",
      "may",
      "not",
      "need",
      "install",
      "common",
      "one",
      "though",
      "they",
      "can",
      "distributed",
      "bundle",
      "For",
      "most",
      "users",
      "configured",
      "through",
      "configuration",
      "maintain",
      "list",
      "official",
      "but",
      "has",
      "also",
      "created",
      "some",
      "unofficial",
      "you",
      "want",
      "add",
      "autogenerating",
      "doc",
      "executing",
      "scripts",
      "integrating",
      "other",
      "services",
      "sure",
      "check",
      "out",
      "someone",
      "have",
      "implemented",
      "for",
      "feeling",
      "energetic",
      "read",
      "guide",
      "method",
      "references",
      "how",
      "make",
      "yourself",
      "Installing",
      "installing",
      "usually",
      "npm",
      "package",
      "them",
      "like",
      "packages",
      "bash",
      "npm2yarn",
      "save",
      "docusaurus",
      "name",
      "Then",
      "your",
      "config",
      "option",
      "title",
      "export",
      "default",
      "highlight",
      "next",
      "line",
      "content",
      "load",
      "from",
      "local",
      "directory",
      "with",
      "something",
      "following",
      "Paths",
      "should",
      "absolute",
      "relative",
      "file",
      "Configuring",
      "configuring",
      "basic",
      "usage",
      "just",
      "path",
      "However",
      "options",
      "specified",
      "wrapping",
      "and",
      "object",
      "two",
      "member",
      "tuple",
      "inside",
      "This",
      "style",
      "called",
      "Babel",
      "Style",
      "start",
      "xxx",
      "end",
      "Example",
      "Basic",
      "debug",
      "With",
      "babel",
      "sitemap",
      "changefreq",
      "weekly",
      "Multi",
      "instance",
      "IDs",
      "multi",
      "ids",
      "support",
      "multiple",
      "instances",
      "example",
      "useful",
      "blogs",
      "required",
      "assign",
      "unique",
      "each",
      "note",
      "omitting",
      "attribute",
      "themes",
      "Themes",
      "loaded",
      "exact",
      "same",
      "way",
      "From",
      "consumer",
      "perspective",
      "entries",
      "interchangeable",
      "when",
      "only",
      "nuance",
      "that",
      "after",
      "possible",
      "override",
      "components",
      "tip",
      "lead",
      "different",
      "shorthand",
      "resolutions",
      "take",
      "advantage",
      "shorthands",
      "use",
      "right",
      "entry",
      "classic",
      "live",
      "codeblock",
      "Presets",
      "bundles",
      "instead",
      "letting",
      "register",
      "configure",
      "etc",
      "allows",
      "centralized",
      "place",
      "docusauruspreset",
      "shipped",
      "new",
      "websites",
      "create",
      "contains",
      "search",
      "algolia",
      "google",
      "gtag",
      "tag",
      "manager",
      "analytics",
      "deprecated",
      "svgr",
      "will",
      "relay",
      "respective",
      "Debug",
      "defaults",
      "true",
      "dev",
      "false",
      "prod",
      "undefined",
      "Will",
      "passed",
      "customCss",
      "disable",
      "enabled",
      "explicitly",
      "googleTagManager",
      "DEPRECATED",
      "googleAnalytics",
      "Preset",
      "paths",
      "Creating",
      "creating",
      "function",
      "shape",
      "constructor",
      "return",
      "PluginConfig",
      "accepted",
      "specify",
      "includes",
      "context",
      "opts",
      "three",
      "time",
      "Assigning",
      "without",
      "asking",
      "user",
      "docs1",
      "docs2",
      "docs3",
      "hello",
      "world",
      "equivalent",
      "doing",
      "especially",
      "intended",
      "used",
      "together",
      "even",
      "link",
      "their",
      "pass",
      "Module",
      "module",
      "supports",
      "When",
      "sees",
      "tries",
      "order",
      "moduleType",
      "where",
      "depending",
      "which",
      "field",
      "declared",
      "first",
      "successfully",
      "found",
      "scoped",
      "beginning",
      "split",
      "into",
      "scope",
      "slash",
      "jquery",
      "Otherwise",
      "attempted",
      "Below",
      "examples",
      "registered",
      "Note",
      "unlike",
      "ESLint",
      "consistent",
      "naming",
      "convention",
      "mandated",
      "permits",
      "greater",
      "freedom",
      "certain",
      "follows",
      "priority",
      "defined",
      "above",
      "Declaration",
      "May",
      "resolved",
      "company",
      "resolution"
    ],
    "url": "/docs/using-plugins",
    "path": "using-plugins.mdx",
    "type": "general",
    "category": "root"
  }
]
